(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{370:function(t,e,i){"use strict";i.r(e);var s=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"module-container"},[i("module-nav",{attrs:{topRoute:t.topRoute,pos:t.pos}}),t._v(" "),i("div",{staticClass:"module-content"},[i("div",{staticClass:"in"},[i("form",{on:{submit:function(e){return e.preventDefault(),t.submit(e)}}},[i("table",{staticClass:"input-tb"},[i("tbody",[i("tr",{class:t.getClass(t.error.name),attrs:{id:"name"}},[i("td",[t._v("名称")]),t._v(" "),i("td",[i("input",{directives:[{name:"model",rawName:"v-model",value:t.form.name,expression:"form.name"}],staticClass:"form-text",attrs:{type:"text"},domProps:{value:t.form.name},on:{input:function(e){e.target.composing||t.$set(t.form,"name",e.target.value)}}}),t._v(" "),i("span",{staticClass:"necessary"},[t._v("*")]),t._v(" "),i("span",{staticClass:"tip"}),t._v(" "),i("span",{staticClass:"msg"},[t._v(t._s(t.error.name))])])]),t._v(" "),i("tr",{class:t.getClass(t.error.detection_module_id),attrs:{id:"detection_module_id"}},[i("td",[t._v("检测模块")]),t._v(" "),i("td",[i("i-select",{staticStyle:{width:"300px"},on:{"on-change":t.setPreview},model:{value:t.form.detection_module_id,callback:function(e){t.$set(t.form,"detection_module_id",e)},expression:"form.detection_module_id"}},t._l(t.module,function(e){return i("i-option",{key:e.id,attrs:{value:e.id}},[t._v(t._s(e.name))])}),1),t._v(" "),i("span",{staticClass:"necessary"},[t._v("*")]),t._v(" "),i("span",{staticClass:"tip"}),t._v(" "),i("span",{staticClass:"msg"},[t._v(t._s(t.error.detection_module_id))])],1)]),t._v(" "),i("tr",{class:t.getClass(t.error.detection_group_id),attrs:{id:"detection_group_id"}},[i("td",[t._v("位置分组")]),t._v(" "),i("td",[i("i-select",{staticStyle:{width:"300px"},model:{value:t.form.detection_group_id,callback:function(e){t.$set(t.form,"detection_group_id",e)},expression:"form.detection_group_id"}},t._l(t.group,function(e){return i("i-option",{key:e.id,attrs:{value:e.id}},[t._v(t._s(e.name))])}),1),t._v(" "),i("span",{staticClass:"necessary"},[t._v("*")]),t._v(" "),i("span",{staticClass:"tip"}),t._v(" "),i("span",{staticClass:"msg"},[t._v(t._s(t.error.detection_group_id))])],1)]),t._v(" "),i("tr",{class:t.getClass(t.error.map_value),attrs:{id:"map_value"}},[i("td",[t._v("映射值")]),t._v(" "),i("td",[i("input",{directives:[{name:"model",rawName:"v-model",value:t.form.map_value,expression:"form.map_value"}],staticClass:"form-text",attrs:{type:"text"},domProps:{value:t.form.map_value},on:{input:function(e){e.target.composing||t.$set(t.form,"map_value",e.target.value)}}}),t._v(" "),i("span",{staticClass:"necessary"}),t._v(" "),i("span",{staticClass:"tip"},[t._v("如果有映射图，则该选项能很好的做映射")]),t._v(" "),i("span",{staticClass:"msg"},[t._v(t._s(t.error.map_value))])])]),t._v(" "),i("tr",{class:t.getClass(t.error.weight),attrs:{id:"weight"}},[i("td",[t._v("权重")]),t._v(" "),i("td",[i("input",{directives:[{name:"model",rawName:"v-model",value:t.form.weight,expression:"form.weight"}],staticClass:"form-text",attrs:{type:"number",step:"0"},domProps:{value:t.form.weight},on:{input:function(e){e.target.composing||t.$set(t.form,"weight",e.target.value)}}}),t._v(" "),i("span",{staticClass:"necessary"}),t._v(" "),i("span",{staticClass:"tip"},[t._v("默认：0，仅允许输入整数")]),t._v(" "),i("span",{staticClass:"msg"},[t._v(t._s(t.error.weight))])])]),t._v(" "),t._m(0)])]),t._v(" "),i("div",{staticClass:"preview"},[i("div",{staticClass:"in"},[t.preview?i("img",{staticClass:"image",attrs:{src:t.preview}}):i("div",{staticClass:"empty"},[t._v("暂无模块映射图，请前往检测模块处添加（可选）")])])])])])]),t._v(" "),i("v-loading",{ref:"loading"})],1)};s._withStripped=!0;var n={name:"v-brand",data:function(){return{form:{name:"",detection_module_id:"",detection_group_id:0,weight:0},error:{},ajax:{get:null,submit:null},dom:{},ins:{loading:null},pending:{submit:null},data:{},callback:{},api:detectionPosApi,group:[],module:[],preview:""}},created:function(){},mounted:function(){this.initDom(),this.initInstance(),this.initialize()},mixins:[mixins.state,mixins.loading,mixins.form.get,mixins.form.confirm],methods:{initDom:function(){},initInstance:function(){},initialize:function(){var t=this;new Promise(function(e){var i=0;detectionModuleApi.all(function(s,n){if(200!=n)return t.eNotice(s),void e(!1);t.module=s,t.determine(++i,2,e.bind(null,!0))}),detectionGroupApi.all(function(s,n){if(200!=n)return t.eNotice(s),void e(!1);t.group=s,t.determine(++i,2,e.bind(null,!0))})}).then(function(e){e&&t.getData(function(){t.setPreview(t.form.detection_module_id)})})},setPreview:function(t){for(var e=0,i=null;e<this.module.length;++e)if((i=this.module[e]).id==t)return void(this.preview=i.image_explain);this.preview=""},check:function(t){return{status:!0,field:"",msg:""}},submit:function(){var t=this;new Promise(function(e){if(t.pending.submit)t.$info("请求中...请耐心等待");else{var i=t.check();if(!i.status)return t.error[i.field]=i.msg,void vScroll(i.field);t.pending.submit=!0,t.ins.loading.show(),t.ajax.submit=t.api[t.param.mode](t.form,function(i,s){if(t.error={},200!=s)return t.initialState("loading","submit","submit"),400==s?(t.error=i,void vScroll(G.firstKey(i))):void t.$error(i);t.form.id=i,e()}),t.ins.loading.setArgs(t.ajax.submit,"submit")}}).then(function(){t.confirm("检测位置","/detectionPos/list")}).finally(function(){t.initialState("loading","submit","submit")})}}},a=(i(393),i(612),i(613),i(14)),o=Object(a.a)(n,s,[function(){var t=this.$createElement,e=this._self._c||t;return e("tr",[e("td",{attrs:{colspan:"2"}},[e("button",{staticClass:"run-button run-button-submit",attrs:{type:"submit"}},[this._v("提交")])])])}],!1,null,"4ff2d16e",null);o.options.__file="source/vue/view/DetectionPos/thing.vue";e.default=o.exports},392:function(t,e,i){},393:function(t,e,i){"use strict";var s=i(392);i.n(s).a},472:function(t,e,i){},473:function(t,e,i){},612:function(t,e,i){"use strict";var s=i(472);i.n(s).a},613:function(t,e,i){"use strict";var s=i(473);i.n(s).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,