!function(t){function n(n){for(var e,r,i=n[0],a=n[1],u=0,c=[];u<i.length;u++)r=i[u],o[r]&&c.push(o[r][0]),o[r]=0;for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e]);for(s&&s(n);c.length;)c.shift()()}var e={},r={0:0},o={0:0};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(t){var n=[];r[t]?n.push(r[t]):0!==r[t]&&{1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1,44:1,45:1,46:1,47:1,48:1,49:1,50:1}[t]&&n.push(r[t]=new Promise(function(n,e){for(var o=t+".css?version=1.0.1",a=i.p+o,u=document.getElementsByTagName("link"),c=0;c<u.length;c++){var s=(l=u[c]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(s===o||s===a))return n()}var f=document.getElementsByTagName("style");for(c=0;c<f.length;c++){var l;if((s=(l=f[c]).getAttribute("data-href"))===o||s===a)return n()}var h=document.createElement("link");h.rel="stylesheet",h.type="text/css",h.onload=n,h.onerror=function(n){var o=n&&n.target&&n.target.src||a,i=new Error("Loading CSS chunk "+t+" failed.\n("+o+")");i.request=o,delete r[t],h.parentNode.removeChild(h),e(i)},h.href=a,document.getElementsByTagName("head")[0].appendChild(h)}).then(function(){r[t]=0}));var e=o[t];if(0!==e)if(e)n.push(e[2]);else{var a=new Promise(function(n,r){e=o[t]=[n,r]});n.push(e[2]=a);var u,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=function(t){return i.p+"js/"+({}[t]||t)+".js?version=1.0.1"}(t),u=function(n){c.onerror=c.onload=null,clearTimeout(s);var e=o[t];if(0!==e){if(e){var r=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src,a=new Error("Loading chunk "+t+" failed.\n("+r+": "+i+")");a.type=r,a.request=i,e[1](a)}o[t]=void 0}};var s=setTimeout(function(){u({type:"timeout",target:c})},12e4);c.onerror=c.onload=u,document.head.appendChild(c)}return Promise.all(n)},i.m=t,i.c=e,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i.oe=function(t){throw console.error(t),t};var a=window.webpackJsonp=window.webpackJsonp||[],u=a.push.bind(a);a.push=n,a=a.slice();for(var c=0;c<a.length;c++)n(a[c]);var s=u;i(i.s=132)}([function(t,n,e){var r=e(2),o=e(19),i=e(11),a=e(12),u=e(20),c=function(t,n,e){var s,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,m=t&c.B,y=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,x=d?o:o[n]||(o[n]={}),b=x.prototype||(x.prototype={});for(s in d&&(e=n),e)l=((f=!p&&y&&void 0!==y[s])?y:e)[s],h=m&&f?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,y&&a(y,s,l,t&c.U),x[s]!=l&&i(x,s,h),g&&b[s]!=l&&(b[s]=l)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(48)("wks"),o=e(34),i=e(2).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),o=e(95),i=e(24),a=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(25);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(8),o=e(33);t.exports=e(7)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),o=e(11),i=e(15),a=e(34)("src"),u=e(136),c=(""+u).split("toString");e(19).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var s="function"==typeof e;s&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(s&&(i(e,a)||o(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(0),o=e(3),i=e(25),a=/"/g,u=function(t,n,e,r){var o=String(i(t)),u="<"+n;return""!==e&&(u+=" "+e+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(u),r(r.P+r.F*o(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n,e){"use strict";function r(t,n,e,r,o,i,a,u){var c,s="function"==typeof t?t.options:t;if(n&&(s.render=n,s.staticRenderFns=e,s._compiled=!0),r&&(s.functional=!0),i&&(s._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},s._ssrRegister=c):o&&(c=u?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(s.functional){s._injectStyles=c;var f=s.render;s.render=function(t,n){return c.call(n),f(t,n)}}else{var l=s.beforeCreate;s.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:s}}e.d(n,"a",function(){return r})},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(49),o=e(25);t.exports=function(t){return r(o(t))}},function(t,n,e){var r=e(50),o=e(33),i=e(16),a=e(24),u=e(15),c=e(95),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=i(t),n=a(n,!0),c)try{return s(t,n)}catch(t){}if(u(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(15),o=e(9),i=e(69)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(10);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(0),o=e(19),i=e(3);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",a)}},function(t,n,e){var r=e(20),o=e(49),i=e(9),a=e(6),u=e(85);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||u;return function(n,u,d){for(var v,g,m=i(n),y=o(m),x=r(u,d,3),b=a(y.length),_=0,w=e?p(n,b):c?p(n,0):void 0;b>_;_++)if((h||_ in y)&&(g=x(v=y[_],_,m),t))if(e)w[_]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return _;case 2:w.push(v)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n,e){"use strict";if(e(7)){var r=e(30),o=e(2),i=e(3),a=e(0),u=e(63),c=e(93),s=e(20),f=e(40),l=e(33),h=e(11),p=e(42),d=e(22),v=e(6),g=e(123),m=e(36),y=e(24),x=e(15),b=e(45),_=e(4),w=e(9),S=e(82),j=e(37),G=e(18),E=e(38).f,C=e(84),A=e(34),O=e(5),M=e(27),P=e(53),F=e(52),I=e(87),k=e(47),T=e(58),N=e(39),L=e(86),R=e(112),$=e(8),D=e(17),V=$.f,W=D.f,B=o.RangeError,U=o.TypeError,z=o.Uint8Array,q=Array.prototype,Y=c.ArrayBuffer,J=c.DataView,K=M(0),H=M(2),X=M(3),Z=M(4),Q=M(5),tt=M(6),nt=P(!0),et=P(!1),rt=I.values,ot=I.keys,it=I.entries,at=q.lastIndexOf,ut=q.reduce,ct=q.reduceRight,st=q.join,ft=q.sort,lt=q.slice,ht=q.toString,pt=q.toLocaleString,dt=O("iterator"),vt=O("toStringTag"),gt=A("typed_constructor"),mt=A("def_constructor"),yt=u.CONSTR,xt=u.TYPED,bt=u.VIEW,_t=M(1,function(t,n){return Et(F(t,t[mt]),n)}),wt=i(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),St=!!z&&!!z.prototype.set&&i(function(){new z(1).set({})}),jt=function(t,n){var e=d(t);if(e<0||e%n)throw B("Wrong offset!");return e},Gt=function(t){if(_(t)&&xt in t)return t;throw U(t+" is not a typed array!")},Et=function(t,n){if(!(_(t)&&gt in t))throw U("It is not a typed array constructor!");return new t(n)},Ct=function(t,n){return At(F(t,t[mt]),n)},At=function(t,n){for(var e=0,r=n.length,o=Et(t,r);r>e;)o[e]=n[e++];return o},Ot=function(t,n,e){V(t,n,{get:function(){return this._d[e]}})},Mt=function(t){var n,e,r,o,i,a,u=w(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=C(u);if(null!=h&&!S(h)){for(a=h.call(u),r=[],n=0;!(i=a.next()).done;n++)r.push(i.value);u=r}for(l&&c>2&&(f=s(f,arguments[2],2)),n=0,e=v(u.length),o=Et(this,e);e>n;n++)o[n]=l?f(u[n],n):u[n];return o},Pt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Ft=!!z&&i(function(){pt.call(new z(1))}),It=function(){return pt.apply(Ft?lt.call(Gt(this)):Gt(this),arguments)},kt={copyWithin:function(t,n){return R.call(Gt(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Gt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Gt(this),arguments)},filter:function(t){return Ct(this,H(Gt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Gt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Gt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Gt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Gt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Gt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Gt(this),arguments)},lastIndexOf:function(t){return at.apply(Gt(this),arguments)},map:function(t){return _t(Gt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Gt(this),arguments)},reduceRight:function(t){return ct.apply(Gt(this),arguments)},reverse:function(){for(var t,n=Gt(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return X(Gt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Gt(this),t)},subarray:function(t,n){var e=Gt(this),r=e.length,o=m(t,r);return new(F(e,e[mt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,v((void 0===n?r:m(n,r))-o))}},Tt=function(t,n){return Ct(this,lt.call(Gt(this),t,n))},Nt=function(t){Gt(this);var n=jt(arguments[1],1),e=this.length,r=w(t),o=v(r.length),i=0;if(o+n>e)throw B("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Lt={entries:function(){return it.call(Gt(this))},keys:function(){return ot.call(Gt(this))},values:function(){return rt.call(Gt(this))}},Rt=function(t,n){return _(t)&&t[xt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},$t=function(t,n){return Rt(t,n=y(n,!0))?l(2,t[n]):W(t,n)},Dt=function(t,n,e){return!(Rt(t,n=y(n,!0))&&_(e)&&x(e,"value"))||x(e,"get")||x(e,"set")||e.configurable||x(e,"writable")&&!e.writable||x(e,"enumerable")&&!e.enumerable?V(t,n,e):(t[n]=e.value,t)};yt||(D.f=$t,$.f=Dt),a(a.S+a.F*!yt,"Object",{getOwnPropertyDescriptor:$t,defineProperty:Dt}),i(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Vt=p({},kt);p(Vt,Lt),h(Vt,dt,Lt.values),p(Vt,{slice:Tt,set:Nt,constructor:function(){},toString:ht,toLocaleString:It}),Ot(Vt,"buffer","b"),Ot(Vt,"byteOffset","o"),Ot(Vt,"byteLength","l"),Ot(Vt,"length","e"),V(Vt,vt,{get:function(){return this[xt]}}),t.exports=function(t,n,e,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=o[s],m=d||{},y=d&&G(d),x=!d||!u.ABV,w={},S=d&&d.prototype,C=function(t,e){V(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](e*n+o.o,r,wt)}(this,e,t)},enumerable:!0})};x?(d=e(function(t,e,r,o){f(t,d,s,"_d");var i,a,u,c,l=0,p=0;if(_(e)){if(!(e instanceof Y||"ArrayBuffer"==(c=b(e))||"SharedArrayBuffer"==c))return xt in e?At(d,e):Mt.call(d,e);i=e,p=jt(r,n);var m=e.byteLength;if(void 0===o){if(m%n)throw B("Wrong length!");if((a=m-p)<0)throw B("Wrong length!")}else if((a=v(o)*n)+p>m)throw B("Wrong length!");u=a/n}else u=g(e),i=new Y(a=u*n);for(h(t,"_d",{b:i,o:p,l:a,e:u,v:new J(i)});l<u;)C(t,l++)}),S=d.prototype=j(Vt),h(S,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&T(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,o){var i;return f(t,d,s),_(e)?e instanceof Y||"ArrayBuffer"==(i=b(e))||"SharedArrayBuffer"==i?void 0!==o?new m(e,jt(r,n),o):void 0!==r?new m(e,jt(r,n)):new m(e):xt in e?At(d,e):Mt.call(d,e):new m(g(e))}),K(y!==Function.prototype?E(m).concat(E(y)):E(m),function(t){t in d||h(d,t,m[t])}),d.prototype=S,r||(S.constructor=d));var A=S[dt],O=!!A&&("values"==A.name||null==A.name),M=Lt.values;h(d,gt,!0),h(S,xt,s),h(S,bt,!0),h(S,mt,d),(c?new d(1)[vt]==s:vt in S)||V(S,vt,{get:function(){return s}}),w[s]=d,a(a.G+a.W+a.F*(d!=m),w),a(a.S,s,{BYTES_PER_ELEMENT:n}),a(a.S+a.F*i(function(){m.of.call(d,1)}),s,{from:Mt,of:Pt}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",n),a(a.P,s,kt),N(s),a(a.P+a.F*St,s,{set:Nt}),a(a.P+a.F*!O,s,Lt),r||S.toString==ht||(S.toString=ht),a(a.P+a.F*i(function(){new d(1).slice()}),s,{slice:Tt}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){S.toLocaleString.call([1,2])})),s,{toLocaleString:It}),k[s]=O?A:M,r||O||h(S,dt,M)}}else t.exports=function(){}},function(t,n,e){var r=e(118),o=e(0),i=e(48)("metadata"),a=i.store||(i.store=new(e(121))),u=function(t,n,e){var o=a.get(t);if(!o){if(!e)return;a.set(t,o=new r)}var i=o.get(n);if(!i){if(!e)return;o.set(n,i=new r)}return i};t.exports={store:a,map:u,has:function(t,n,e){var r=u(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=u(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){u(e,r,!0).set(t,n)},keys:function(t,n){var e=u(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,n){t.exports=!1},function(t,n,e){var r=e(34)("meta"),o=e(4),i=e(15),a=e(8).f,u=0,c=Object.isExtensible||function(){return!0},s=!e(3)(function(){return c(Object.preventExtensions({}))}),f=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!i(t,r)&&f(t),t}}},function(t,n,e){var r=e(5)("unscopables"),o=Array.prototype;null==o[r]&&e(11)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(97),o=e(70);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(22),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(1),o=e(98),i=e(70),a=e(69)("IE_PROTO"),u=function(){},c=function(){var t,n=e(67)("iframe"),r=i.length;for(n.style.display="none",e(71).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(97),o=e(70).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){"use strict";var r=e(2),o=e(8),i=e(7),a=e(5)("species");t.exports=function(t){var n=r[t];i&&n&&!n[a]&&o.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(20),o=e(110),i=e(82),a=e(1),u=e(6),c=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var p,d,v,g,m=h?function(){return t}:c(t),y=r(e,l,n?2:1),x=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(p=u(t.length);p>x;x++)if((g=n?y(a(d=t[x])[0],d[1]):y(t[x]))===s||g===f)return g}else for(v=m.call(t);!(d=v.next()).done;)if((g=o(v,y,d.value,n))===s||g===f)return g}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(12);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(8).f,o=e(15),i=e(5)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(21),o=e(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){var r=e(0),o=e(25),i=e(3),a=e(73),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,n,e){var o={},u=i(function(){return!!a[t]()||"​"!="​"[t]()}),c=o[t]=u?n(l):a[t];e&&(o[e]=c),r(r.P+r.F*u,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){var r=e(19),o=e(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(30)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(1),o=e(10),i=e(5)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[i])?n:o(e)}},function(t,n,e){var r=e(16),o=e(6),i=e(36);t.exports=function(t){return function(n,e,a){var u,c=r(n),s=o(c.length),f=i(a,s);if(t&&e!=e){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(21);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(22),o=e(25);t.exports=function(t){return function(n,e){var i,a,u=String(o(n)),c=r(e),s=u.length;return c<0||c>=s?t?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):i:t?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,n,e){var r=e(4),o=e(21),i=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:e=!0}},i[r]=function(){return a},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(45),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(114);var r=e(12),o=e(11),i=e(3),a=e(25),u=e(5),c=e(88),s=u("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!i(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=e(a,h,""[t],function(t,n,e,r,o){return n.exec===c?p&&!o?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),o(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(2),o=e(0),i=e(12),a=e(42),u=e(31),c=e(41),s=e(40),f=e(4),l=e(3),h=e(58),p=e(44),d=e(74);t.exports=function(t,n,e,v,g,m){var y=r[t],x=y,b=g?"set":"add",_=x&&x.prototype,w={},S=function(t){var n=_[t];i(_,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof x&&(m||_.forEach&&!l(function(){(new x).entries().next()}))){var j=new x,G=j[b](m?{}:-0,1)!=j,E=l(function(){j.has(1)}),C=h(function(t){new x(t)}),A=!m&&l(function(){for(var t=new x,n=5;n--;)t[b](n,n);return!t.has(-0)});C||((x=n(function(n,e){s(n,x,t);var r=d(new y,n,x);return null!=e&&c(e,g,r[b],r),r})).prototype=_,_.constructor=x),(E||A)&&(S("delete"),S("has"),g&&S("get")),(A||G)&&S(b),m&&_.clear&&delete _.clear}else x=v.getConstructor(n,t,g,b),a(x.prototype,e),u.NEED=!0;return p(x,t),w[t]=x,o(o.G+o.W+o.F*(x!=y),w),m||v.setStrong(x,t,g),x}},function(t,n,e){for(var r,o=e(2),i=e(11),a=e(34),u=a("typed_array"),c=a("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,u,!0),i(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:u,VIEW:c}},function(t,n,e){"use strict";t.exports=e(30)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(20),a=e(41);t.exports=function(t){r(r.S,t,{from:function(t){var n,e,r,u,c=arguments[1];return o(this),(n=void 0!==c)&&o(c),null==t?new this:(e=[],n?(r=0,u=i(c,arguments[2],2),a(t,!1,function(t){e.push(u(t,r++))})):a(t,!1,e.push,e),new this(e))}})}},function(t,n,e){var r=e(4),o=e(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(2),o=e(19),i=e(30),a=e(96),u=e(8).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){var r=e(48)("keys"),o=e(34);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(4),o=e(1),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(17).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(4),o=e(72).set;t.exports=function(t,n,e){var i,a=n.constructor;return a!==e&&"function"==typeof a&&(i=a.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(22),o=e(25);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){"use strict";var r=e(30),o=e(0),i=e(12),a=e(11),u=e(47),c=e(79),s=e(44),f=e(18),l=e(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,g,m){c(e,n,d);var y,x,b,_=function(t){if(!h&&t in G)return G[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",S="values"==v,j=!1,G=t.prototype,E=G[l]||G["@@iterator"]||v&&G[v],C=E||_(v),A=v?S?_("entries"):C:void 0,O="Array"==n&&G.entries||E;if(O&&(b=f(O.call(new t)))!==Object.prototype&&b.next&&(s(b,w,!0),r||"function"==typeof b[l]||a(b,l,p)),S&&E&&"values"!==E.name&&(j=!0,C=function(){return E.call(this)}),r&&!m||!h&&!j&&G[l]||a(G,l,C),u[n]=C,u[w]=p,v)if(y={values:S?C:_("values"),keys:g?C:_("keys"),entries:A},m)for(x in y)x in G||i(G,x,y[x]);else o(o.P+o.F*(h||j),n,y);return y}},function(t,n,e){"use strict";var r=e(37),o=e(33),i=e(44),a={};e(11)(a,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(57),o=e(25);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(47),o=e(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(8),o=e(33);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(45),o=e(5)("iterator"),i=e(47);t.exports=e(19).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){var r=e(225);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(9),o=e(36),i=e(6);t.exports=function(t){for(var n=r(this),e=i(n.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,e),c=a>2?arguments[2]:void 0,s=void 0===c?e:o(c,e);s>u;)n[u++]=t;return n}},function(t,n,e){"use strict";var r=e(32),o=e(113),i=e(47),a=e(16);t.exports=e(78)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(51),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var n,e,r,o,c=this;return f&&(e=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),s&&(n=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),f&&r&&r.length>1&&u.call(r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";var r=e(56)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,a=e(20),u=e(103),c=e(71),s=e(67),f=e(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},x=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(21)(l)?r=function(t){l.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=x,r=a(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",x,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){var r=e(2),o=e(90).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(21)(a);t.exports=function(){var t,n,e,s=function(){var r,o;for(c&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n,e){"use strict";var r=e(10);function o(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){"use strict";var r=e(2),o=e(7),i=e(30),a=e(63),u=e(11),c=e(42),s=e(3),f=e(40),l=e(22),h=e(6),p=e(123),d=e(38).f,v=e(8).f,g=e(86),m=e(44),y="prototype",x="Wrong index!",b=r.ArrayBuffer,_=r.DataView,w=r.Math,S=r.RangeError,j=r.Infinity,G=b,E=w.abs,C=w.pow,A=w.floor,O=w.log,M=w.LN2,P=o?"_b":"buffer",F=o?"_l":"byteLength",I=o?"_o":"byteOffset";function k(t,n,e){var r,o,i,a=new Array(e),u=8*e-n-1,c=(1<<u)-1,s=c>>1,f=23===n?C(2,-24)-C(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===j?(o=t!=t?1:0,r=c):(r=A(O(t)/M),t*(i=C(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*C(2,1-s))*i>=2&&(r++,i/=2),r+s>=c?(o=0,r=c):r+s>=1?(o=(t*i-1)*C(2,n),r+=s):(o=t*C(2,s-1)*C(2,n),r=0));n>=8;a[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,u+=n;u>0;a[l++]=255&r,r/=256,u-=8);return a[--l]|=128*h,a}function T(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,a=i>>1,u=o-7,c=e-1,s=t[c--],f=127&s;for(s>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=n;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-a;else{if(f===i)return r?NaN:s?-j:j;r+=C(2,n),f-=a}return(s?-1:1)*r*C(2,f-n)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function R(t){return[255&t,t>>8&255]}function $(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return k(t,52,8)}function V(t){return k(t,23,4)}function W(t,n,e){v(t[y],n,{get:function(){return this[e]}})}function B(t,n,e,r){var o=p(+e);if(o+n>t[F])throw S(x);var i=t[P]._b,a=o+t[I],u=i.slice(a,a+n);return r?u:u.reverse()}function U(t,n,e,r,o,i){var a=p(+e);if(a+n>t[F])throw S(x);for(var u=t[P]._b,c=a+t[I],s=r(+o),f=0;f<n;f++)u[c+f]=s[i?f:n-f-1]}if(a.ABV){if(!s(function(){b(1)})||!s(function(){new b(-1)})||s(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var z,q=(b=function(t){return f(this,b),new G(p(t))})[y]=G[y],Y=d(G),J=0;Y.length>J;)(z=Y[J++])in b||u(b,z,G[z]);i||(q.constructor=b)}var K=new _(new b(2)),H=_[y].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||c(_[y],{setInt8:function(t,n){H.call(this,t,n<<24>>24)},setUint8:function(t,n){H.call(this,t,n<<24>>24)}},!0)}else b=function(t){f(this,b,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[F]=n},_=function(t,n,e){f(this,_,"DataView"),f(t,b,"DataView");var r=t[F],o=l(n);if(o<0||o>r)throw S("Wrong offset!");if(o+(e=void 0===e?r-o:h(e))>r)throw S("Wrong length!");this[P]=t,this[I]=o,this[F]=e},o&&(W(b,"byteLength","_l"),W(_,"buffer","_b"),W(_,"byteLength","_l"),W(_,"byteOffset","_o")),c(_[y],{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var n=B(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=B(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return N(B(this,4,t,arguments[1]))},getUint32:function(t){return N(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return T(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return T(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){U(this,1,t,L,n)},setUint8:function(t,n){U(this,1,t,L,n)},setInt16:function(t,n){U(this,2,t,R,n,arguments[2])},setUint16:function(t,n){U(this,2,t,R,n,arguments[2])},setInt32:function(t,n){U(this,4,t,$,n,arguments[2])},setUint32:function(t,n){U(this,4,t,$,n,arguments[2])},setFloat32:function(t,n){U(this,4,t,V,n,arguments[2])},setFloat64:function(t,n){U(this,8,t,D,n,arguments[2])}});m(b,"ArrayBuffer"),m(_,"DataView"),u(_[y],a.VIEW,!0),n.ArrayBuffer=b,n.DataView=_},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){t.exports=!e(7)&&!e(3)(function(){return 7!=Object.defineProperty(e(67)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){n.f=e(5)},function(t,n,e){var r=e(15),o=e(16),i=e(53)(!1),a=e(69)("IE_PROTO");t.exports=function(t,n){var e,u=o(t),c=0,s=[];for(e in u)e!=a&&r(u,e)&&s.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(8),o=e(1),i=e(35);t.exports=e(7)?Object.defineProperties:function(t,n){o(t);for(var e,a=i(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(16),o=e(38).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(35),o=e(54),i=e(50),a=e(9),u=e(49),c=Object.assign;t.exports=!c||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=c({},t)[e]||Object.keys(c({},n)).join("")!=r})?function(t,n){for(var e=a(t),c=arguments.length,s=1,f=o.f,l=i.f;c>s;)for(var h,p=u(arguments[s++]),d=f?r(p).concat(f(p)):r(p),v=d.length,g=0;v>g;)l.call(p,h=d[g++])&&(e[h]=p[h]);return e}:c},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(10),o=e(4),i=e(103),a=[].slice,u={};t.exports=Function.bind||function(t){var n=r(this),e=a.call(arguments,1),c=function(){var r=e.concat(a.call(arguments));return this instanceof c?function(t,n,e){if(!(n in u)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";u[n]=Function("F,a","return new F("+r.join(",")+")")}return u[n](t,e)}(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2).parseInt,o=e(46).trim,i=e(73),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(a.test(e)?16:10))}:r},function(t,n,e){var r=e(2).parseFloat,o=e(46).trim;t.exports=1/r(e(73)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(21);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){var r=e(76),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),s=r(t);return o<c?s*(o/c/a+1/i-1/i)*c*a:(e=(n=(1+a/i)*o)-(n-o))>u||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(10),o=e(9),i=e(49),a=e(6);t.exports=function(t,n,e,u,c){r(n);var s=o(t),f=i(s),l=a(s.length),h=c?l-1:0,p=c?-1:1;if(e<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(u=n(u,f[h],h,s));return u}},function(t,n,e){"use strict";var r=e(9),o=e(36),i=e(6);t.exports=[].copyWithin||function(t,n){var e=r(this),a=i(e.length),u=o(t,a),c=o(n,a),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?a:o(s,a))-c,a-u),l=1;for(c<u&&u<c+f&&(l=-1,c+=f-1,u+=f-1);f-- >0;)c in e?e[u]=e[c]:delete e[u],u+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(88);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(8).f(RegExp.prototype,"flags",{configurable:!0,get:e(51)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1),o=e(4),i=e(92);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(119),o=e(43);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(8).f,o=e(37),i=e(42),a=e(20),u=e(40),c=e(41),s=e(78),f=e(113),l=e(39),h=e(7),p=e(31).fastKey,d=e(43),v=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){u(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return i(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=g(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[v]}}),f},def:function(t,n,e){var r,o,i=g(t,n);return i?i.v=e:(t._l=i={i:o=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(119),o=e(43);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(2),i=e(27)(0),a=e(12),u=e(31),c=e(100),s=e(122),f=e(4),l=e(43),h=e(43),p=!o.ActiveXObject&&"ActiveXObject"in o,d=u.getWeak,v=Object.isExtensible,g=s.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=d(t);return!0===n?g(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},x=t.exports=e(62)("WeakMap",m,y,s,!0,!0);h&&p&&(c((r=s.getConstructor(m,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=x.prototype,e=n[t];a(n,t,function(n,o){if(f(n)&&!v(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)})}))},function(t,n,e){"use strict";var r=e(42),o=e(31).getWeak,i=e(1),a=e(4),u=e(40),c=e(41),s=e(27),f=e(15),l=e(43),h=s(5),p=s(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},m=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=m(this,t);if(n)return n[1]},has:function(t){return!!m(this,t)},set:function(t,n){var e=m(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var s=t(function(t,r){u(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&c(r,e,t[i],t)});return r(s.prototype,{delete:function(t){if(!a(t))return!1;var e=o(t);return!0===e?v(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!a(t))return!1;var e=o(t);return!0===e?v(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=o(i(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(22),o=e(6);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),o=e(54),i=e(1),a=e(2).Reflect;t.exports=a&&a.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){"use strict";var r=e(55),o=e(4),i=e(6),a=e(20),u=e(5)("isConcatSpreadable");t.exports=function t(n,e,c,s,f,l,h,p){for(var d,v,g=f,m=0,y=!!h&&a(h,p,3);m<s;){if(m in c){if(d=y?y(c[m],m,e):c[m],v=!1,o(d)&&(v=void 0!==(v=d[u])?!!v:r(d)),v&&l>0)g=t(n,e,d,i(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=d}g++}m++}return g}},function(t,n,e){var r=e(6),o=e(75),i=e(25);t.exports=function(t,n,e,a){var u=String(i(t)),c=u.length,s=void 0===e?" ":String(e),f=r(n);if(f<=c||""==s)return u;var l=f-c,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),a?h+u:u+h}},function(t,n,e){var r=e(35),o=e(16),i=e(50).f;t.exports=function(t){return function(n){for(var e,a=o(n),u=r(a),c=u.length,s=0,f=[];c>s;)i.call(a,e=u[s++])&&f.push(t?[e,a[e]]:a[e]);return f}}},function(t,n,e){var r=e(45),o=e(129);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n){t.exports=Math.scale||function(t,n,e,r,o){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-n)*(o-r)/(e-n)+r}},function(t,n,e){"use strict";var r=function(){return e.e(44).then(e.bind(null,345))},o=function(){return e.e(45).then(e.bind(null,347))},i=function(){return e.e(32).then(e.bind(null,350))},a=function(){return e.e(35).then(e.bind(null,352))},u=function(){return e.e(38).then(e.bind(null,353))},c=function(){return e.e(39).then(e.bind(null,355))},s=function(){return e.e(36).then(e.bind(null,358))},f=function(){return e.e(37).then(e.bind(null,360))},l=function(){return e.e(40).then(e.bind(null,362))},h=function(){return e.e(2).then(e.bind(null,364))},p=function(){return e.e(41).then(e.bind(null,366))},d=function(){return e.e(29).then(e.bind(null,368))},v=function(){return e.e(31).then(e.bind(null,370))},g=function(){return e.e(30).then(e.bind(null,372))},m=function(){return e.e(43).then(e.bind(null,374))},y=function(){return e.e(4).then(e.bind(null,376))},x=function(){return e.e(49).then(e.bind(null,379))},b=function(){return e.e(28).then(e.bind(null,381))},_=function(){return e.e(48).then(e.bind(null,383))},w=function(){return e.e(42).then(e.bind(null,391))};n.a=[{name:"home",path:"/",component:function(){return e.e(5).then(e.bind(null,342))}},{name:"login",path:"/login",component:function(){return e.e(50).then(e.bind(null,343))}},{path:"/pannel",component:function(){return e.e(1).then(e.bind(null,389))}},{path:"/route/list",component:function(){return e.e(25).then(e.bind(null,344))}},{path:"/route/add",component:r},{path:"/route/edit",component:r},{path:"/role/list",component:function(){return e.e(19).then(e.bind(null,346))}},{path:"/role/add",component:o},{path:"/role/edit",component:o},{path:"/role/priv",component:function(){return e.e(47).then(e.bind(null,348))}},{path:"/admin/list",component:function(){return e.e(9).then(e.bind(null,349))}},{path:"/admin/edit",component:i},{path:"/admin/add",component:i},{path:"/user/list",component:function(){return e.e(24).then(e.bind(null,388))}},{path:"/brand/list",component:function(){return e.e(10).then(e.bind(null,351))}},{path:"/brand/edit",component:a},{path:"/brand/add",component:a},{path:"/carSeriesGroup/list",component:function(){return e.e(14).then(e.bind(null,356))}},{path:"/carSeriesGroup/edit",component:c},{path:"/carSeriesGroup/add",component:c},{path:"/carSeries/list",component:function(){return e.e(15).then(e.bind(null,354))}},{path:"/carSeries/edit",component:u},{path:"/carSeries/add",component:u},{path:"/carConfigurationGroup/list",component:function(){return e.e(11).then(e.bind(null,357))}},{path:"/carConfigurationGroup/edit",component:s},{path:"/carConfigurationGroup/add",component:s},{path:"/carConfiguration/list",component:function(){return e.e(12).then(e.bind(null,359))}},{path:"/carConfiguration/edit",component:f},{path:"/carConfiguration/add",component:f},{path:"/carType/list",component:function(){return e.e(16).then(e.bind(null,361))}},{path:"/carType/edit",component:l},{path:"/carType/add",component:l},{path:"/carModel/list",component:function(){return e.e(13).then(e.bind(null,363))}},{path:"/carModel/edit",component:h},{path:"/carModel/add",component:h},{path:"/detectionModule/list",component:function(){return e.e(18).then(e.bind(null,365))}},{path:"/detectionModule/edit",component:p},{path:"/detectionModule/add",component:p},{path:"/detectionGroup/list",component:function(){return e.e(6).then(e.bind(null,367))}},{path:"/detectionGroup/edit",component:d},{path:"/detectionGroup/add",component:d},{path:"/detectionPos/list",component:function(){return e.e(8).then(e.bind(null,369))}},{path:"/detectionPos/edit",component:v},{path:"/detectionPos/add",component:v},{path:"/detectionItem/list",component:function(){return e.e(7).then(e.bind(null,371))}},{path:"/detectionItem/edit",component:g},{path:"/detectionItem/add",component:g},{path:"/service/list",component:function(){return e.e(21).then(e.bind(null,373))}},{path:"/service/edit",component:m},{path:"/service/add",component:m},{path:"/car/list",component:function(){return e.e(17).then(e.bind(null,375))}},{path:"/car/edit",component:y},{path:"/car/add",component:y},{path:"/car/report",component:function(){return e.e(3).then(e.bind(null,377))}},{path:"/articleType/list",component:function(){return e.e(33).then(e.bind(null,378))}},{path:"/articleType/edit",component:x},{path:"/articleType/add",component:x},{path:"/article/list",component:function(){return e.e(34).then(e.bind(null,380))}},{path:"/article/edit",component:b},{path:"/article/add",component:b},{path:"/showImage/list",component:function(){return e.e(46).then(e.bind(null,382))}},{path:"/showImage/edit",component:_},{path:"/showImage/add",component:_},{path:"/saleApplication/list",component:function(){return e.e(20).then(e.bind(null,384))}},{path:"/recommendationApplication/list",component:function(){return e.e(23).then(e.bind(null,385))}},{path:"/stagingBuyApplication/list",component:function(){return e.e(27).then(e.bind(null,386))}},{path:"/reservation/list",component:function(){return e.e(22).then(e.bind(null,387))}},{path:"/story/list",component:function(){return e.e(26).then(e.bind(null,390))}},{path:"/story/edit",component:w},{path:"/story/add",component:w}]},function(t,n,e){e(133),t.exports=e(341)},function(t,n,e){"use strict";(function(t){if(e(134),e(331),e(332),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function r(t,e,r){t[e]||Object[n](t,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,e(94))},function(t,n,e){e(135),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(215),e(216),e(218),e(219),e(220),e(221),e(222),e(223),e(224),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(87),e(239),e(114),e(240),e(115),e(241),e(242),e(243),e(244),e(245),e(118),e(120),e(121),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(283),e(284),e(285),e(286),e(287),e(288),e(289),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),e(329),e(330),t.exports=e(19)},function(t,n,e){"use strict";var r=e(2),o=e(15),i=e(7),a=e(0),u=e(12),c=e(31).KEY,s=e(3),f=e(48),l=e(44),h=e(34),p=e(5),d=e(96),v=e(68),g=e(137),m=e(55),y=e(1),x=e(4),b=e(16),_=e(24),w=e(33),S=e(37),j=e(99),G=e(17),E=e(8),C=e(35),A=G.f,O=E.f,M=j.f,P=r.Symbol,F=r.JSON,I=F&&F.stringify,k=p("_hidden"),T=p("toPrimitive"),N={}.propertyIsEnumerable,L=f("symbol-registry"),R=f("symbols"),$=f("op-symbols"),D=Object.prototype,V="function"==typeof P,W=r.QObject,B=!W||!W.prototype||!W.prototype.findChild,U=i&&s(function(){return 7!=S(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=A(D,n);r&&delete D[n],O(t,n,e),r&&t!==D&&O(D,n,r)}:O,z=function(t){var n=R[t]=S(P.prototype);return n._k=t,n},q=V&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},Y=function(t,n,e){return t===D&&Y($,n,e),y(t),n=_(n,!0),y(e),o(R,n)?(e.enumerable?(o(t,k)&&t[k][n]&&(t[k][n]=!1),e=S(e,{enumerable:w(0,!1)})):(o(t,k)||O(t,k,w(1,{})),t[k][n]=!0),U(t,n,e)):O(t,n,e)},J=function(t,n){y(t);for(var e,r=g(n=b(n)),o=0,i=r.length;i>o;)Y(t,e=r[o++],n[e]);return t},K=function(t){var n=N.call(this,t=_(t,!0));return!(this===D&&o(R,t)&&!o($,t))&&(!(n||!o(this,t)||!o(R,t)||o(this,k)&&this[k][t])||n)},H=function(t,n){if(t=b(t),n=_(n,!0),t!==D||!o(R,n)||o($,n)){var e=A(t,n);return!e||!o(R,n)||o(t,k)&&t[k][n]||(e.enumerable=!0),e}},X=function(t){for(var n,e=M(b(t)),r=[],i=0;e.length>i;)o(R,n=e[i++])||n==k||n==c||r.push(n);return r},Z=function(t){for(var n,e=t===D,r=M(e?$:b(t)),i=[],a=0;r.length>a;)!o(R,n=r[a++])||e&&!o(D,n)||i.push(R[n]);return i};V||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===D&&n.call($,e),o(this,k)&&o(this[k],t)&&(this[k][t]=!1),U(this,t,w(1,e))};return i&&B&&U(D,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",function(){return this._k}),G.f=H,E.f=Y,e(38).f=j.f=X,e(50).f=K,e(54).f=Z,i&&!e(30)&&u(D,"propertyIsEnumerable",K,!0),d.f=function(t){return z(p(t))}),a(a.G+a.W+a.F*!V,{Symbol:P});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=C(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return o(L,t+="")?L[t]:L[t]=P(t)},keyFor:function(t){if(!q(t))throw TypeError(t+" is not a symbol!");for(var n in L)if(L[n]===t)return n},useSetter:function(){B=!0},useSimple:function(){B=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):J(S(t),n)},defineProperty:Y,defineProperties:J,getOwnPropertyDescriptor:H,getOwnPropertyNames:X,getOwnPropertySymbols:Z}),F&&a(a.S+a.F*(!V||s(function(){var t=P();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(x(n)||void 0!==t)&&!q(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!q(n))return n}),r[1]=n,I.apply(F,r)}}),P.prototype[T]||e(11)(P.prototype,T,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(48)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(35),o=e(54),i=e(50);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var a,u=e(t),c=i.f,s=0;u.length>s;)c.call(t,a=u[s++])&&n.push(a);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperty:e(8).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperties:e(98)})},function(t,n,e){var r=e(16),o=e(17).f;e(26)("getOwnPropertyDescriptor",function(){return function(t,n){return o(r(t),n)}})},function(t,n,e){var r=e(9),o=e(18);e(26)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,n,e){var r=e(9),o=e(35);e(26)("keys",function(){return function(t){return o(r(t))}})},function(t,n,e){e(26)("getOwnPropertyNames",function(){return e(99).f})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("freeze",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("seal",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("preventExtensions",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4);e(26)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(72).set})},function(t,n,e){"use strict";var r=e(45),o={};o[e(5)("toStringTag")]="z",o+""!="[object z]"&&e(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(102)})},function(t,n,e){var r=e(8).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(7)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),o=e(18),i=e(5)("hasInstance"),a=Function.prototype;i in a||e(8).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(104);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(105);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(2),o=e(15),i=e(21),a=e(74),u=e(24),c=e(3),s=e(38).f,f=e(17).f,l=e(8).f,h=e(46).trim,p=r.Number,d=p,v=p.prototype,g="Number"==i(e(37)(v)),m="trim"in String.prototype,y=function(t){var n=u(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=m?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var a,c=n.slice(2),s=0,f=c.length;s<f;s++)if((a=c.charCodeAt(s))<48||a>o)return NaN;return parseInt(c,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(g?c(function(){v.valueOf.call(e)}):"Number"!=i(e))?a(new d(y(n)),e,p):y(n)};for(var x,b=e(7)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;b.length>_;_++)o(d,x=b[_])&&!o(p,x)&&l(p,x,f(d,x));p.prototype=v,v.constructor=p,e(12)(r,"Number",p)}},function(t,n,e){"use strict";var r=e(0),o=e(22),i=e(106),a=e(75),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=c(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=c(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+a.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){u.call({})})),"Number",{toFixed:function(t){var n,e,r,u,c=i(this,f),s=o(t),v="",g="0";if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*d(2,69,1))-69)<0?c*d(2,-n,1):c/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,e),l(1<<-n,0),g=p()+a.call("0",s);return g=s>0?v+((u=g.length)<=s?"0."+a.call("0",s-u)+g:g.slice(0,u-s)+"."+g.slice(u-s)):v+g}})},function(t,n,e){"use strict";var r=e(0),o=e(3),i=e(106),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(n):a.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(107),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(105);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(104);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(108),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(76);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(77);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(109)})},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(e=o(arguments[a++]))?(i=i*(r=c/e)*r+1,c=e):i+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(108)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(76)})},function(t,n,e){var r=e(0),o=e(77),i=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(77),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(36),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,a=0;r>a;){if(n=+arguments[a++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(16),i=e(6);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,a=[],u=0;e>u;)a.push(String(n[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,n,e){"use strict";e(46)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(56)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),o=e(56)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(80),a="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),u=void 0===e?r:Math.min(o(e),r),c=String(t);return a?a.call(n,c,u):n.slice(u-c.length,u)===c}})},function(t,n,e){"use strict";var r=e(0),o=e(80);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(75)})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(80),a="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return a?a.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(214);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(12)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,n,e){var r=e(5)("toPrimitive"),o=Date.prototype;r in o||e(11)(o,r,e(217))},function(t,n,e){"use strict";var r=e(1),o=e(24);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(55)})},function(t,n,e){"use strict";var r=e(20),o=e(0),i=e(9),a=e(110),u=e(82),c=e(6),s=e(83),f=e(84);o(o.S+o.F*!e(58)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,h=i(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,m=0,y=f(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(e=new p(n=c(h.length));n>m;m++)s(e,m,g?v(h[m],m):h[m]);else for(l=y.call(h),e=new p;!(o=l.next()).done;m++)s(e,m,g?a(l,v,[o.value,m],!0):o.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(0),o=e(83);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(16),i=[].join;r(r.P+r.F*(e(49)!=Object||!e(23)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(71),i=e(21),a=e(36),u=e(6),c=[].slice;r(r.P+r.F*e(3)(function(){o&&c.call(o)}),"Array",{slice:function(t,n){var e=u(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var o=a(t,e),s=a(n,e),f=u(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(9),a=e(3),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!e(23)(u)),"Array",{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(0),i=e(23)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(4),o=e(55),i=e(5)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(27)(1);r(r.P+r.F*!e(23)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(2);r(r.P+r.F*!e(23)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(3);r(r.P+r.F*!e(23)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(4);r(r.P+r.F*!e(23)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(23)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(23)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(23)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(16),i=e(22),a=e(6),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(23)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var n=o(this),e=a(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(112)}),e(32)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(86)}),e(32)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(27)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("find")},function(t,n,e){"use strict";var r=e(0),o=e(27)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)(i)},function(t,n,e){e(39)("Array")},function(t,n,e){var r=e(2),o=e(74),i=e(8).f,a=e(38).f,u=e(57),c=e(51),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,d=new s(h)!==h;if(e(7)&&(!d||e(3)(function(){return p[e(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=u(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(d?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?c.call(t):n),e?this:l,s)};for(var v=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},g=a(f),m=0;g.length>m;)v(g[m++]);l.constructor=s,s.prototype=l,e(12)(r,"RegExp",s)}e(39)("RegExp")},function(t,n,e){"use strict";e(115);var r=e(1),o=e(51),i=e(7),a=/./.toString,u=function(t){e(12)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){"use strict";var r=e(1),o=e(6),i=e(89),a=e(59);e(60)("match",1,function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),s=String(this);if(!c.global)return a(c,s);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=a(c,s));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=i(s,o(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,n,e){"use strict";var r=e(1),o=e(9),i=e(6),a=e(22),u=e(89),c=e(59),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(60)("replace",2,function(t,n,e,d){return[function(r,o){var i=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=d(e,t,this,n);if(o.done)return o.value;var l=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=l.global;if(g){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var x=c(l,h);if(null===x)break;if(y.push(x),!g)break;""===String(x[0])&&(l.lastIndex=u(h,i(l.lastIndex),m))}for(var b,_="",w=0,S=0;S<y.length;S++){x=y[S];for(var j=String(x[0]),G=s(f(a(x.index),h.length),0),E=[],C=1;C<x.length;C++)E.push(void 0===(b=x[C])?b:String(b));var A=x.groups;if(p){var O=[j].concat(E,G,h);void 0!==A&&O.push(A);var M=String(n.apply(void 0,O))}else M=v(j,h,G,E,A,n);G>=w&&(_+=h.slice(w,G)+M,w=G+j.length)}return _+h.slice(w)}];function v(t,n,r,i,a,u){var c=r+t.length,s=i.length,f=p;return void 0!==a&&(a=o(a),f=h),e.call(u,f,function(e,o){var u;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}u=i[f-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r=e(1),o=e(101),i=e(59);e(60)("search",1,function(t,n,e,a){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var u=r(t),c=String(this),s=u.lastIndex;o(s,0)||(u.lastIndex=0);var f=i(u,c);return o(u.lastIndex,s)||(u.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(57),o=e(1),i=e(52),a=e(89),u=e(6),c=e(59),s=e(88),f=e(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});e(60)("split",2,function(t,n,e,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,a,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(i=s.call(d,o))&&!((a=d.lastIndex)>l&&(c.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(c,i.slice(1)),u=i[0].length,l=a,c.length>=p));)d.lastIndex===i.index&&d.lastIndex++;return l===o.length?!u&&d.test("")||c.push(""):c.push(o.slice(l)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):d.call(String(o),e,r)},function(t,n){var r=f(d,t,this,n,d!==e);if(r.done)return r.value;var s=o(t),h=String(this),v=i(s,RegExp),g=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(p?"y":"g"),y=new v(p?s:"^(?:"+s.source+")",m),x=void 0===n?4294967295:n>>>0;if(0===x)return[];if(0===h.length)return null===c(y,h)?[h]:[];for(var b=0,_=0,w=[];_<h.length;){y.lastIndex=p?_:0;var S,j=c(y,p?h:h.slice(_));if(null===j||(S=l(u(y.lastIndex+(p?0:_)),h.length))===b)_=a(h,_,g);else{if(w.push(h.slice(b,_)),w.length===x)return w;for(var G=1;G<=j.length-1;G++)if(w.push(j[G]),w.length===x)return w;_=b=S}}return w.push(h.slice(b)),w}]})},function(t,n,e){"use strict";var r,o,i,a,u=e(30),c=e(2),s=e(20),f=e(45),l=e(0),h=e(4),p=e(10),d=e(40),v=e(41),g=e(52),m=e(90).set,y=e(91)(),x=e(92),b=e(116),_=e(61),w=e(117),S=c.TypeError,j=c.process,G=j&&j.versions,E=G&&G.v8||"",C=c.Promise,A="process"==f(j),O=function(){},M=o=x.f,P=!!function(){try{var t=C.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(O,O)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof n&&0!==E.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),F=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},I=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,a=function(n){var e,i,a,u=o?n.ok:n.fail,c=n.resolve,s=n.reject,f=n.domain;try{u?(o||(2==t._h&&N(t),t._h=1),!0===u?e=r:(f&&f.enter(),e=u(r),f&&(f.exit(),a=!0)),e===n.promise?s(S("Promise-chain cycle")):(i=F(e))?i.call(e,c,s):c(e)):s(r)}catch(t){f&&!a&&f.exit(),s(t)}};e.length>i;)a(e[i++]);t._c=[],t._n=!1,n&&!t._h&&k(t)})}},k=function(t){m.call(c,function(){var n,e,r,o=t._v,i=T(t);if(i&&(n=b(function(){A?j.emit("unhandledRejection",o,t):(e=c.onunhandledrejection)?e({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=A||T(t)?2:1),t._a=void 0,i&&n.e)throw n.v})},T=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){m.call(c,function(){var n;A?j.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},L=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),I(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=F(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(R,r,1),s(L,r,1))}catch(t){L.call(r,t)}}):(e._v=t,e._s=1,I(e,!1))}catch(t){L.call({_w:e,_d:!1},t)}}};P||(C=function(t){d(this,C,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(42)(C.prototype,{then:function(t,n){var e=M(g(this,C));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=A?j.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&I(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(L,t,1)},x.f=M=function(t){return t===C||t===a?new i(t):o(t)}),l(l.G+l.W+l.F*!P,{Promise:C}),e(44)(C,"Promise"),e(39)("Promise"),a=e(19).Promise,l(l.S+l.F*!P,"Promise",{reject:function(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(u||!P),"Promise",{resolve:function(t){return w(u&&this===a?C:this,t)}}),l(l.S+l.F*!(P&&e(58)(function(t){C.all(t).catch(O)})),"Promise",{all:function(t){var n=this,e=M(n),r=e.resolve,o=e.reject,i=b(function(){var e=[],i=0,a=1;v(t,!1,function(t){var u=i++,c=!1;e.push(void 0),a++,n.resolve(t).then(function(t){c||(c=!0,e[u]=t,--a||r(e))},o)}),--a||r(e)});return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=M(n),r=e.reject,o=b(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(122),o=e(43);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(63),i=e(93),a=e(1),u=e(36),c=e(6),s=e(4),f=e(2).ArrayBuffer,l=e(52),h=i.ArrayBuffer,p=i.DataView,d=o.ABV&&f.isView,v=h.prototype.slice,g=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&g in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(a(this),t);for(var e=a(this).byteLength,r=u(t,e),o=u(void 0===n?e:n,e),i=new(l(this,h))(c(o-r)),s=new p(this),f=new p(i),d=0;r<o;)f.setUint8(d++,s.getUint8(r++));return i}}),e(39)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(93).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),o=e(10),i=e(1),a=(e(2).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!e(3)(function(){a(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),c=i(e);return a?a(r,n,c):u.call(r,n,c)}})},function(t,n,e){var r=e(0),o=e(37),i=e(10),a=e(1),u=e(4),c=e(3),s=e(102),f=(e(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){i(t),a(n);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var c=e.prototype,p=o(u(c)?c:Object.prototype),d=Function.apply.call(t,p,n);return u(d)?d:p}})},function(t,n,e){var r=e(8),o=e(0),i=e(1),a=e(24);o(o.S+o.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){i(t),n=a(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(17).f,i=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(1),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(79)(i,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(17),o=e(18),i=e(15),a=e(0),u=e(4),c=e(1);a(a.S,"Reflect",{get:function t(n,e){var a,s,f=arguments.length<3?n:arguments[2];return c(n)===f?n[e]:(a=r.f(n,e))?i(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:u(s=o(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(17),o=e(0),i=e(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(18),i=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(124)})},function(t,n,e){var r=e(0),o=e(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(8),o=e(17),i=e(18),a=e(15),u=e(0),c=e(33),s=e(1),f=e(4);u(u.S,"Reflect",{set:function t(n,e,u){var l,h,p=arguments.length<4?n:arguments[3],d=o.f(s(n),e);if(!d){if(f(h=i(n)))return t(h,e,u,p);d=c(0)}if(a(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=o.f(p,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,r.f(p,e,l)}else r.f(p,e,c(0,u));return!0}return void 0!==d.set&&(d.set.call(p,u),!0)}})},function(t,n,e){var r=e(0),o=e(72);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("includes")},function(t,n,e){"use strict";var r=e(0),o=e(125),i=e(9),a=e(6),u=e(10),c=e(85);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return u(t),n=a(r.length),e=c(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(32)("flatMap")},function(t,n,e){"use strict";var r=e(0),o=e(125),i=e(9),a=e(6),u=e(22),c=e(85);r(r.P,"Array",{flatten:function(){var t=arguments[0],n=i(this),e=a(n.length),r=c(n,0);return o(r,n,n,e,0,void 0===t?1:u(t)),r}}),e(32)("flatten")},function(t,n,e){"use strict";var r=e(0),o=e(56)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(126),i=e(61),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(126),i=e(61),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";e(46)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(46)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){"use strict";var r=e(0),o=e(25),i=e(6),a=e(57),u=e(51),c=RegExp.prototype,s=function(t,n){this._r=t,this._s=n};e(79)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in c?String(t.flags):u.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=i(t.lastIndex),new s(r,n)}})},function(t,n,e){e(68)("asyncIterator")},function(t,n,e){e(68)("observable")},function(t,n,e){var r=e(0),o=e(124),i=e(16),a=e(17),u=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),c=a.f,s=o(r),f={},l=0;s.length>l;)void 0!==(e=c(r,n=s[l++]))&&u(f,n,e);return f}})},function(t,n,e){var r=e(0),o=e(127)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){var r=e(0),o=e(127)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(10),a=e(8);e(7)&&r(r.P+e(64),"Object",{__defineGetter__:function(t,n){a.f(o(this),t,{get:i(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(10),a=e(8);e(7)&&r(r.P+e(64),"Object",{__defineSetter__:function(t,n){a.f(o(this),t,{set:i(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24),a=e(18),u=e(17).f;e(7)&&r(r.P+e(64),"Object",{__lookupGetter__:function(t){var n,e=o(this),r=i(t,!0);do{if(n=u(e,r))return n.get}while(e=a(e))}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24),a=e(18),u=e(17).f;e(7)&&r(r.P+e(64),"Object",{__lookupSetter__:function(t){var n,e=o(this),r=i(t,!0);do{if(n=u(e,r))return n.set}while(e=a(e))}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(128)("Map")})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(128)("Set")})},function(t,n,e){e(65)("Map")},function(t,n,e){e(65)("Set")},function(t,n,e){e(65)("WeakMap")},function(t,n,e){e(65)("WeakSet")},function(t,n,e){e(66)("Map")},function(t,n,e){e(66)("Set")},function(t,n,e){e(66)("WeakMap")},function(t,n,e){e(66)("WeakSet")},function(t,n,e){var r=e(0);r(r.G,{global:e(2)})},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){var r=e(0),o=e(21);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,e){var r=e(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,n,e){var r=e(0),o=e(130),i=e(109);r(r.S,"Math",{fscale:function(t,n,e,r,a){return i(o(t,n,e,r,a))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var o=t>>>0,i=e>>>0;return(n>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var o=t>>>0,i=e>>>0;return(n>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r,a=e>>16,u=r>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>16)+((o*u>>>0)+(65535&c)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,e){var r=e(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,n,e){var r=e(0);r(r.S,"Math",{scale:e(130)})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r,a=e>>>16,u=r>>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>>16)+((o*u>>>0)+(65535&c)>>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,e){"use strict";var r=e(0),o=e(19),i=e(2),a=e(52),u=e(117);r(r.P+r.R,"Promise",{finally:function(t){var n=a(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return u(n,t()).then(function(){return e})}:t,e?function(e){return u(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){"use strict";var r=e(0),o=e(92),i=e(116);r(r.S,"Promise",{try:function(t){var n=o.f(this),e=i(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){var r=e(29),o=e(1),i=r.key,a=r.set;r.exp({defineMetadata:function(t,n,e,r){a(t,n,o(e),i(r))}})},function(t,n,e){var r=e(29),o=e(1),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:i(arguments[2]),r=a(o(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=u.get(n);return c.delete(e),!!c.size||u.delete(n)}})},function(t,n,e){var r=e(29),o=e(1),i=e(18),a=r.has,u=r.get,c=r.key,s=function(t,n,e){if(a(t,n,e))return u(t,n,e);var r=i(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n){return s(t,o(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(120),o=e(129),i=e(29),a=e(1),u=e(18),c=i.keys,s=i.key,f=function(t,n){var e=c(t,n),i=u(t);if(null===i)return e;var a=f(i,n);return a.length?e.length?o(new r(e.concat(a))):a:e};i.exp({getMetadataKeys:function(t){return f(a(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,n,e){var r=e(29),o=e(1),i=e(18),a=r.has,u=r.key,c=function(t,n,e){if(a(t,n,e))return!0;var r=i(n);return null!==r&&c(t,r,e)};r.exp({hasMetadata:function(t,n){return c(t,o(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=e(10),a=r.key,u=r.set;r.exp({metadata:function(t,n){return function(e,r){u(t,n,(void 0!==r?o:i)(e),a(r))}}})},function(t,n,e){var r=e(0),o=e(91)(),i=e(2).process,a="process"==e(21)(i);r(r.G,{asap:function(t){var n=a&&i.domain;o(n?n.bind(t):t)}})},function(t,n,e){"use strict";var r=e(0),o=e(2),i=e(19),a=e(91)(),u=e(5)("observable"),c=e(10),s=e(1),f=e(40),l=e(42),h=e(11),p=e(41),d=p.RETURN,v=function(t){return null==t?void 0:c(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},m=function(t){return void 0===t._o},y=function(t){m(t)||(t._o=void 0,g(t))},x=function(t,n){s(t),this._c=void 0,this._o=t,t=new b(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:c(e),this._c=e)}catch(n){return void t.error(n)}m(this)&&g(this)};x.prototype=l({},{unsubscribe:function(){y(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var n=this._s;if(!m(n)){var e=n._o;try{var r=v(e.next);if(r)return r.call(e,t)}catch(t){try{y(n)}finally{throw t}}}},error:function(t){var n=this._s;if(m(n))throw t;var e=n._o;n._o=void 0;try{var r=v(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!m(n)){var e=n._o;n._o=void 0;try{var r=v(e.complete);t=r?r.call(e,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var _=function(t){f(this,_,"Observable","_f")._f=c(t)};l(_.prototype,{subscribe:function(t){return new x(t,this._f)},forEach:function(t){var n=this;return new(i.Promise||o.Promise)(function(e,r){c(t);var o=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e})})}}),l(_,{from:function(t){var n="function"==typeof this?this:_,e=v(s(t)[u]);if(e){var r=s(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return a(function(){if(!e){try{if(p(t,!1,function(t){if(n.next(t),e)return d})===d)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=new Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:_)(function(t){var n=!1;return a(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(_.prototype,u,function(){return this}),r(r.G,{Observable:_}),e(39)("Observable")},function(t,n,e){var r=e(2),o=e(0),i=e(61),a=[].slice,u=/MSIE .\./.test(i),c=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),o=e(90);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(87),o=e(35),i=e(12),a=e(2),u=e(11),c=e(47),s=e(5),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(p),v=0;v<d.length;v++){var g,m=d[v],y=p[m],x=a[m],b=x&&x.prototype;if(b&&(b[f]||u(b,f,h),b[l]||u(b,l,m),c[m]=h,y))for(g in r)b[g]||i(b,g,r[g],!0)}},function(t,n,e){(function(n){!function(n){"use strict";var e,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s="object"==typeof t,f=n.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=n.regeneratorRuntime=s?t.exports:{}).wrap=b;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[a]=function(){return this};var m=Object.getPrototypeOf,y=m&&m(m(P([])));y&&y!==r&&o.call(y,a)&&(g=y);var x=j.prototype=w.prototype=Object.create(g);S.prototype=x.constructor=j,j.constructor=S,j[c]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===S||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,j):(t.__proto__=j,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(x),t},f.awrap=function(t){return{__await:t}},G(E.prototype),E.prototype[u]=function(){return this},f.AsyncIterator=E,f.async=function(t,n,e,r){var o=new E(b(t,n,e,r));return f.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},G(x),x[c]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},f.values=P,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return u.type="throw",u.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),O(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;O(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function b(t,n,e,r){var o=n&&n.prototype instanceof w?n:w,i=Object.create(o.prototype),a=new M(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return F()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=C(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var c=_(t,n,e);if("normal"===c.type){if(r=e.done?d:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=d,e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function _(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function w(){}function S(){}function j(){}function G(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function E(t){function e(n,r,i,a){var u=_(t[n],t,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,i,a)},function(t){e("throw",t,i,a)}):Promise.resolve(s).then(function(t){c.value=t,i(c)},a)}a(u.arg)}var r;"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e)),this._invoke=function(t,n){function o(){return new Promise(function(r,o){e(t,n,r,o)})}return r=r?r.then(o,o):o()}}function C(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,C(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=_(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function O(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function P(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(o.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:F}}function F(){return{value:e,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e(94))},function(t,n,e){e(333),t.exports=e(19).RegExp.escape},function(t,n,e){var r=e(0),o=e(334)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){},function(t,n,e){},function(t,n){window.business={bool_int:{0:"否",1:"是"},bool_str:{n:"否",y:"是"},pos:{announcement:{app:"app公告"},image:{home:"首页-轮播图"}},route:{method:["GET","POST","PUT","PATCH","DELETE","NONE"],type:["view","api"]},car:{gearbox:["手动","自动","手自一体","无级变速","双离合","机械自动变速箱","直驱"],salePoint:{affordable:"经济实惠",new:"准新车",luxury:"豪华车",none:"无"}},detection:{normal:"正常",exception:"异常"}}},function(t,n){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=2,layer.alert(t,n)}Object.assign(window,{forceLogout:function(){G.s.del("token"),router.push({name:"login"})},isLogin:function(){return G.s.exists("token")},vScroll:function(t,n){var e=G("#"+t),r=(G(window),e.getDocOffsetVal("top"));r-=145,G.scrollTo(topContext.animateDuration,"y",0,r,n)},getClass:function(t){return t?"error":""},$success:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=1,layer.alert(t,n)},$error:e,$msg:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};layer.msg(t,n)},$info:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=7,layer.alert(t,n)},$tip:function(t,n){return layer.tips(t,n,{tips:[1,"#3595CC"],time:4e3})},$unknow:function(){return e("发生了未知错误")},firstLetter:function(t){var n=pinyinUtil.getFirstLetter(t);return n.length>0?n[0]:""},determine:function(t,n,e){t==n&&e()}})},function(t,n){Vue.config.productionTip=!1,Vue.config.devtools=!0;G.ajax.opened=function(){if(!isLogin())return!0;var t=G.s.json("token");return this.native("setRequestHeader","Authorization",t.token),!0};var e=0;G.ajax.responded=function(t,n){var r=this;return 0==n?(console.log("请求被终止，可能是网络断开导致，也可能是用户手动终止！请稍后再试"),!1):401==n?(new Promise(function(t,n){++e>10?console.log("刷新 token 后，尝试请求用户之前被拦截的请求次数过多！程序问题！请检查"):function(t){if(G.s.exists("token")){var n=G.s.json("token");adminApi.refreshToken({refresh_token:n.refresh_token},function(n,e){200==e?(G.s.json("token",n),t()):$info("登录状态已过期！请点击 <b>确定</b> 按钮退出到登录页面!",{closeBtn:!1,btn:["确定"],btn1:function(t){layer.close(t),forceLogout()}})})}else forceLogout()}(t)}).then(function(){r.restart()}),!1):500!=n||($error("服务器发生内部错误，请稍后再试"),!1)}},function(t,n,e){var r=G.s.get("__version_tip_count__3");G.isNull(r)&&(r=1),r=parseInt(r),isLogin()},function(t,n,e){"use strict";e.r(n);e(335),e(336),e(337);var r={loading:{mounted:function(){var t=this;this.ins.loading=new Loading(this.$refs.loading.$el,{status:"hide",type:"line-scale",close:function(n,e){t.ajax[n]instanceof G.ajax&&t.ajax[n].native("abort"),t.pending[e]=!1}})}},state:{methods:{initialState:function(t,n,e){this.ajax[n]instanceof G.ajax&&this.ajax[n].native("abort"),G.isString(e)&&(this.pending[e]=!1),this.ins[t]instanceof Loading&&this.ins[t].hide()},pendingState:function(t,n){this.ins[t]instanceof Loading&&this.ins[t].show(),G.isString(n)&&(this.pending[n]=!0)}}},list:{data:{page:{total:0,page:0,per_page:0},form:{page:1},api:null,dom:null},page:{methods:{pageEvent:function(t){this.form.page=t,this.getData()}}},filter:{methods:{submit:function(){this.form.page=1,this.getData()},reset:function(){for(var t in this.form){var n=this.form[t];this.form[t]=G.isString(n)?"":G.isNumber(n)?0:G.isArray(n)?[]:G.isObject(n)?{}:null}this.submit()},order:function(t){var n=G(t.currentTarget),e=n.data("order"),r=n.parent().children();n.highlight("focus",r.get()),this.form.order=e,this.submit()}}},get:{floor:{methods:{getData:function(){var t=this;this.ins.loading.show(),this.ajax.list=this.api.list(this.form,function(n,e){t.ins.loading.hide(),200==e?t.data=n:t.$error(n)}),this.ins.loading.setArgs(this.ajax.list)}}},normal:{methods:{getData:function(){var t=this;this.ins.loading.show();var n=this.dataAct?this.dataAct:"list";this.ajax[n]=this.api[n](this.form,function(n,e){t.ins.loading.hide(),200==e?(t.data=n.data,delete n.data,t.page=n):t.$error(n)}),this.ins.loading.setArgs(this.ajax[n])}}}},del:{methods:{del:function(t,n){var e=this;this.pending.del?layer.alert("请求中...请耐心等待"):(this.ins.loading.show(),this.ajax.del=this.api[G.isString(this.delAction)?this.delAction:"del"]({id_list:G.jsonEncode(t)},function(t,r){e.pending.del=!1,e.ins.loading.hide(),200==r?(e.$success("删除成功"),e.getData(),G.isFunction(n)&&n()):e.$error(t)}),this.ins.loading.setArgs(this.ajax.del,"del"))},delTarget:function(t){var n=this;new Promise(function(t,e){n.$info("你确定要删除吗？",{btn:["确定","取消"],btn1:t,btn2:e})}).then(function(e){layer.close(e),n.del([t],function(){n.delId(t)})},function(t){layer.close(t)})},delSelected:function(){var t=this;new Promise(function(n,e){t.idList.length<1?t.$info("请选择要删除的项"):n()}).then(function(){return new Promise(function(n,e){t.$info("你确定要批量删除吗？",{btn:["确定","取消"],btn1:n,btn2:e})})}).then(function(n){layer.close(n),t.del(t.idList,function(){t.idList=[]})},function(t){layer.close(t)})},selectEvent:function(t){var n=G(t.currentTarget),e=n.data("id");n.hasClass("focus")?this.unselectedLine(e):this.selectedLine(e)},selectAllEvent:function(t){var n=this,e=G(t.currentTarget).native("checked");this.dom.tbody.children().each(function(t){var r=(t=G(t)).data("id");e?n.selectedLine(r):n.unselectedLine(r)})},selectedLine:function(t){for(var n=this.dom.tbody.children({tagName:"tr"}),e=0;e<n.length;++e){var r=n.jump(e,!0);if(r.data("id")==t){r.addClass("focus");G(".c-box",r.get(0)).native("checked",!0);this.addId(t)}}},unselectedLine:function(t){for(var n=this.dom.tbody.children({tagName:"tr"}),e=0;e<n.length;++e){var r=n.jump(e,!0);if(r.data("id")==t){r.removeClass("focus");G(".c-box",r.get(0)).native("checked",!1);this.delId(t)}}},addId:function(t){-1==this.idList.indexOf(t)&&this.idList.push(t)},delId:function(t){var n;-1!=(n=this.idList.indexOf(t))&&this.idList.splice(n,1)}}}},form:{get:{methods:{getData:function(t){var n=this;"edit"==this.param.mode?(this.ins.loading.show(),this.ajax.getData=this.api.detail(this.param.id,function(e,r){n.ins.loading.hide(),200==r?(n.form=e,G.isFunction(t)&&t()):n.$error(e)}),this.ins.loading.setArgs(this.ajax.getData)):G.isFunction(t)&&t()}}},image:{mounted:function(){var t=this;this.ins.image=new UploadImage(this.$refs["image-container"],{pluginUrl:topContext.plugin+"UploadImage/",mode:"override",url:topContext.imageApi,field:"image",success:function(n,e){G.isFunction(t.callback.image)&&t.callback.image(n,e)}})}},confirm:{methods:{confirm:function(t,n){var e=this,r="";switch(this.param.mode){case"edit":r="编辑";break;case"add":r="添加";break;case"report":r="编辑";break;default:r="操作"}this.$success("操作成功",{btn:["继续"+r,t],btn1:function(t){layer.close(t),e.param.mode},btn2:function(){e.location(n,null,"_self")}})}}},menuSwitch:{methods:{initMenuSwitch:function(){var t=this;this.ins.menuSwitch=new MenuSwitch(this.$refs["menu-switch"].$el,{id:this.menu,type:this.type,click:function(t){},switch:function(n){t.switchMenu(n)}})},switchMenu:function(t){this.dom.optionSet.each(function(n){(n=G(n)).data("id")==t?n.removeClass("hide"):n.addClass("hide")})}}}}},o="".concat("/","plugin/"),i="".concat("/","api/admin/"),a="".concat(i,"file/imageForWangEditor"),u="".concat(i,"file/image"),c="".concat(i,"file/file");Object.assign(window,{mixins:r,topContext:{host:"/",plugin:o,api:i,ins:{},animateDuration:300,imageApiForwangEditor:a,imageApi:u,fileApi:c,websocket:"ws://47.252.80.36:9300",websocketHost:"http://47.252.80.36:9301",websocketIdentifier:"0hGFPPyf7Bnu3gnF"}});var s=e(131),f=new VueRouter({routes:s.a});f.beforeEach(function(t,n,e){var r=["/login"];if(isLogin()){if(r.includes(t.path))return void e({name:"home"})}else if(!r.includes(t.path))return void e("/login");e()});var l=f,h={topContext:topContext,business:business,priv:[],route:[],menu:[],user:{},os:{developer:{},system:{}}},p=new Vuex.Store({state:h,getters:{},mutations:{priv:function(t,n){t.priv=n},route:function(t,n){t.route=n},menu:function(t,n){t.menu=n},user:function(t,n){t.user=n},os:function(t,n){t.os=n}},actions:{}});Object.assign(window,{router:l,store:p});e(338),e(339);var d="".concat(topContext.api,"admin/logining"),v="".concat(topContext.api,"admin/info"),g="".concat(topContext.api,"oauth/token"),m="".concat(topContext.api,"admin/user"),y="".concat(topContext.api,"admin/user/?"),x="".concat(topContext.api,"admin/image"),b={login:function(t,n,e){return G.ajax({url:d,method:"post",data:t,success:n,error:e})},logout:function(t,n){return G.ajax({url:d,method:"delete",success:t,error:n})},info:function(t,n){return G.ajax({url:v,method:"get",success:t,error:n})},refreshToken:function(t,n,e){return G.ajax({url:g,method:"patch",data:t,success:n,error:e})},list:function(t,n,e){return G.ajax({url:m,method:"get",data:t,success:n,error:e})},edit:function(t,n,e){return G.ajax({url:m,method:"patch",data:t,success:n,error:e})},add:function(t,n,e){return G.ajax({url:m,method:"post",data:t,success:n,error:e})},detail:function(t,n,e){return G.ajax({url:y.replace("?",t),method:"get",success:n,error:e})},image:function(t,n,e){return G.ajax({url:x,method:"put",data:t,success:n,error:e})}},_="".concat(topContext.api,"user/user"),w={list:function(t,n,e){return G.ajax({url:_,method:"get",data:t,success:n,error:e})}},S="".concat(topContext.api,"articleType/articleType"),j="".concat(topContext.api,"articleType/articleType/?"),E={list:function(t,n,e){return G.ajax({url:S,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:j.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:S,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:S,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:S,data:t,method:"delete",success:n,error:e})}},C="".concat(topContext.api,"article/article"),A="".concat(topContext.api,"article/article/?"),O="".concat(topContext.api,"article/image"),M={list:function(t,n,e){return G.ajax({url:C,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:A.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:C,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:C,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:C,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:O,data:t,method:"patch",success:n,error:e})}},P="".concat(topContext.api,"showImage/image"),F="".concat(topContext.api,"showImage/image/?"),I={list:function(t,n,e){return G.ajax({url:P,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:F.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:P,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:P,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:P,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:P,data:t,method:"patch",success:n,error:e})}},k="".concat(topContext.api,"misc/verifyCode"),T="".concat(topContext.api,"translation/translation"),N=null,L={verifyCode:function(t,n){return N instanceof G.ajax&&N.native("abort"),N=G.ajax({url:k,method:"get",success:t,error:n})},translate:function(t,n){return G.ajax({url:T,method:"post",success:t,error:n})}},R="".concat(topContext.api,"route/route"),$="".concat(topContext.api,"route/route/?"),D="".concat(topContext.api,"route/image"),V={list:function(t,n,e){return G.ajax({url:R,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:$.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:R,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:R,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:R,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:D,data:t,method:"put",success:n,error:e})}},W="".concat(topContext.api,"role/role"),B="".concat(topContext.api,"role/info/?"),U="".concat(topContext.api,"role/role/?"),z="".concat(topContext.api,"role/auth"),q="".concat(topContext.api,"role/all"),Y={list:function(t,n,e){return G.ajax({url:W,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:U.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:W,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:W,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:W,data:t,method:"delete",success:n,error:e})},info:function(t,n,e){return G.ajax({url:B.replace("?",t),method:"get",success:n,error:e})},auth:function(t,n,e){return G.ajax({url:z,method:"post",data:t,success:n,error:e})},all:function(t,n){return G.ajax({url:q,method:"get",success:t,error:n})}},J="".concat(topContext.api,"brand/brand"),K="".concat(topContext.api,"brand/brand/?"),H="".concat(topContext.api,"brand/image"),X="".concat(topContext.api,"brand/all"),Z={list:function(t,n,e){return G.ajax({url:J,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:K.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:J,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:J,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:J,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:H,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:X,method:"get",success:t,error:n})}},Q="".concat(topContext.api,"carSeriesGroup/group"),tt="".concat(topContext.api,"carSeriesGroup/group/?"),nt="".concat(topContext.api,"carSeriesGroup/all"),et={list:function(t,n,e){return G.ajax({url:Q,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:tt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Q,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Q,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Q,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:nt,method:"get",success:t,error:n})}},rt="".concat(topContext.api,"carSeries/series"),ot="".concat(topContext.api,"carSeries/series/?"),it="".concat(topContext.api,"carSeries/all"),at={list:function(t,n,e){return G.ajax({url:rt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ot.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:rt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:rt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:rt,data:t,method:"delete",success:n,error:e})},all:function(t,n,e){return G.ajax({url:it,data:t,method:"get",success:n,error:e})}},ut="".concat(topContext.api,"carConfigurationGroup/group"),ct="".concat(topContext.api,"carConfigurationGroup/group/?"),st="".concat(topContext.api,"carConfigurationGroup/all"),ft={list:function(t,n,e){return G.ajax({url:ut,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ct.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:ut,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:ut,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:ut,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:st,method:"get",success:t,error:n})}},lt="".concat(topContext.api,"carConfiguration/carConfiguration"),ht="".concat(topContext.api,"carConfiguration/carConfiguration/?"),pt="".concat(topContext.api,"carConfiguration/image"),dt="".concat(topContext.api,"carConfiguration/all"),vt="".concat(topContext.api,"carConfiguration/group"),gt={list:function(t,n,e){return G.ajax({url:lt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ht.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:lt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:lt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:lt,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:pt,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:dt,method:"get",success:t,error:n})},group:function(t,n){return G.ajax({url:vt,method:"get",success:t,error:n})}},mt="".concat(topContext.api,"carType/carType"),yt="".concat(topContext.api,"carType/carType/?"),xt="".concat(topContext.api,"carType/all"),bt={list:function(t,n,e){return G.ajax({url:mt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:yt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:mt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:mt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:mt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:xt,method:"get",success:t,error:n})}},_t="".concat(topContext.api,"carModel/carModel"),wt="".concat(topContext.api,"carModel/carModel/?"),St="".concat(topContext.api,"carModel/all"),jt={list:function(t,n,e){return G.ajax({url:_t,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:wt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:_t,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:_t,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:_t,data:t,method:"delete",success:n,error:e})},all:function(t,n,e){return G.ajax({url:St,method:"get",data:t,success:n,error:e})}},Gt="".concat(topContext.api,"detectionModule/module"),Et="".concat(topContext.api,"detectionModule/module/?"),Ct="".concat(topContext.api,"detectionModule/all"),At="".concat(topContext.api,"detectionModule/image"),Ot={list:function(t,n,e){return G.ajax({url:Gt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Et.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Gt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Gt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Gt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Ct,method:"get",success:t,error:n})},image:function(t,n,e){return G.ajax({url:At,method:"patch",data:t,success:n,error:e})}},Mt="".concat(topContext.api,"detectionGroup/group"),Pt="".concat(topContext.api,"detectionGroup/group/?"),Ft="".concat(topContext.api,"detectionGroup/all"),It={list:function(t,n,e){return G.ajax({url:Mt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Pt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Mt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Mt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Mt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Ft,method:"get",success:t,error:n})}},kt="".concat(topContext.api,"detectionPos/pos"),Tt="".concat(topContext.api,"detectionPos/pos/?"),Nt="".concat(topContext.api,"detectionPos/all"),Lt={list:function(t,n,e){return G.ajax({url:kt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Tt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:kt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:kt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:kt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Nt,method:"get",success:t,error:n})}},Rt="".concat(topContext.api,"detectionItem/item"),$t="".concat(topContext.api,"detectionItem/item/?"),Dt="".concat(topContext.api,"detectionItem/all"),Vt={list:function(t,n,e){return G.ajax({url:Rt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:$t.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Rt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Rt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Rt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Dt,method:"get",success:t,error:n})}},Wt="".concat(topContext.api,"service/service"),Bt="".concat(topContext.api,"service/service/?"),Ut="".concat(topContext.api,"service/image"),zt="".concat(topContext.api,"service/all"),qt={list:function(t,n,e){return G.ajax({url:Wt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Bt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Wt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Wt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Wt,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:Ut,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:zt,method:"get",success:t,error:n})}},Yt="".concat(topContext.api,"car/car"),Jt="".concat(topContext.api,"car/car/?"),Kt="".concat(topContext.api,"car/all"),Ht="".concat(topContext.api,"car/image"),Xt="".concat(topContext.api,"car/thumb"),Zt="".concat(topContext.api,"car/rule"),Qt="".concat(topContext.api,"car/report"),tn={list:function(t,n,e){return G.ajax({url:Yt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Jt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Yt,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Yt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Yt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Kt,method:"get",success:t,error:n})},thumb:function(t,n,e){return G.ajax({url:Xt,method:"patch",data:t,success:n,error:e})},image:function(t,n,e){return G.ajax({url:Ht,method:"patch",data:t,success:n,error:e})},delImage:function(t,n,e){return G.ajax({url:Ht,method:"delete",data:t,success:n,error:e})},rule:function(t,n){return G.ajax({url:Zt,method:"get",success:t,error:n})},getReport:function(t,n,e){return G.ajax({url:Qt,method:"get",data:t,success:n,error:e})},report:function(t,n,e){return G.ajax({url:Qt,method:"post",data:t,success:n,error:e})}},nn="".concat(topContext.api,"platform/all"),en={all:function(t,n){return G.ajax({url:nn,method:"get",success:t,error:n})}},rn="".concat(topContext.api,"saleApplication/saleApplication"),on={list:function(t,n,e){return G.ajax({url:rn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:rn,data:t,method:"patch",success:n,error:e})}},an="".concat(topContext.api,"recommendationApplication/recommendationApplication"),un={list:function(t,n,e){return G.ajax({url:an,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:an,data:t,method:"patch",success:n,error:e})}},cn="".concat(topContext.api,"stagingBuyApplication/stagingBuyApplication"),sn={list:function(t,n,e){return G.ajax({url:cn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:cn,data:t,method:"patch",success:n,error:e})}},fn="".concat(topContext.api,"reservation/reservation"),ln={list:function(t,n,e){return G.ajax({url:fn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:fn,data:t,method:"patch",success:n,error:e})}},hn="".concat(topContext.api,"pannel/info"),pn="".concat(topContext.api,"pannel/month"),dn="".concat(topContext.api,"pannel/quarter"),vn="".concat(topContext.api,"pannel/year"),gn={info:function(t,n){return G.ajax({url:hn,method:"get",success:t,error:n})},month:function(t,n,e){return G.ajax({url:pn,method:"get",data:t,success:n,error:e})},quarter:function(t,n,e){return G.ajax({url:dn,method:"get",data:t,success:n,error:e})},year:function(t,n,e){return G.ajax({url:vn,method:"get",data:t,success:n,error:e})}},mn="".concat(topContext.api,"story/story"),yn="".concat(topContext.api,"story/story/?"),xn="".concat(topContext.api,"story/image"),bn={list:function(t,n,e){return G.ajax({url:mn,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:yn.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:mn,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:mn,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:mn,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:xn,data:t,method:"patch",success:n,error:e})},all:function(t){function n(n,e){return t.apply(this,arguments)}return n.toString=function(){return t.toString()},n}(function(t,n){return G.ajax({url:all,method:"get",success:t,error:n})})},_n="".concat(topContext.api,"adminPush/push"),wn={list:function(t,n,e){return G.ajax({url:_n,method:"get",data:t,success:n,error:e})},add:function(t,n,e){return G.ajax({url:_n,method:"post",data:t,success:n,error:e})}};Object.assign(window,{adminApi:b,articleTypeApi:E,articleApi:M,showImageApi:I,miscApi:L,routeApi:V,roleApi:Y,brandApi:Z,carSeriesGroupApi:et,carSeriesApi:at,carConfigurationGroupApi:ft,carConfigurationApi:gt,carTypeApi:bt,carModelApi:jt,detectionModuleApi:Ot,detectionGroupApi:It,detectionPosApi:Lt,detectionItemApi:Vt,serviceApi:qt,carApi:tn,platformApi:en,saleApplicationApi:on,recommendationApplicationApi:un,stagingBuyApplicationApi:sn,reservationApi:ln,userApi:w,pannelApi:gn,storyApi:bn,pushApi:wn});var Sn={store:store,router:router,methods:{forceLogout:forceLogout,isLogin:isLogin,vScroll:vScroll,getClass:getClass,$success:$success,$error:$error,$msg:$msg,$info:$info,$tip:$tip,$unknow:$unknow,firstLetter:firstLetter,determine:determine,notice:function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",r=arguments.length>3?arguments[3]:void 0,o=arguments.length>4?arguments[4]:void 0;this.$Notice[t]({title:n,desc:e,duration:r,onClose:o})},sNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;this.notice("success",t,n,e,r)},wNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;this.notice("warning",t,n,e,r)},iNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;this.notice("info",t,n,e,r)},eNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",e=arguments.length>2?arguments[2]:void 0,r=arguments.length>3?arguments[3]:void 0;this.notice("error",t,n,e,r)},toLink:function(t){window.open(t,"_blank")}},components:{}};Vue.mixin(Sn);var jn=function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"app"},[n("router-view"),this._v(" "),n("v-loading",{ref:"loading"})],1)};jn._withStripped=!0;var Gn={name:"v-app",data:function(){return{ins:{loading:null},dom:{},ajax:{},pending:{},value:{}}},mixins:[mixins.loading],mounted:function(){}},En=e(14),Cn=Object(En.a)(Gn,jn,[],!1,null,"2342f356",null);Cn.options.__file="source/vue/view/App.vue";var An=Cn.exports,On=function(){var t=this.$createElement;this._self._c;return this._m(0)};On._withStripped=!0;var Mn={name:"v-loading"},Pn=Object(En.a)(Mn,On,[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"Loading"},[e("div",{staticClass:"bg"}),t._v(" "),e("div",{staticClass:"cons"},[e("div",{staticClass:"text"},[e("span",{staticClass:"line"},[t._v("上传基本信息开始")])]),t._v(" "),e("div",{staticClass:"animate"},[e("div",{staticClass:"item center line-scale hide"},[e("div"),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("div")]),t._v(" "),e("div",{staticClass:"item center ball-pulse hide"},[e("div"),t._v(" "),e("div"),t._v(" "),e("div")]),t._v(" "),e("div",{staticClass:"item roll-loader hide"},[e("div",{staticClass:"loader"},[e("div",{staticClass:"loader-outter"}),t._v(" "),e("div",{staticClass:"loader-inner"})])])])]),t._v(" "),e("div",{staticClass:"btns"},[e("div",{staticClass:"btn close"},[e("div",{staticClass:"positive"}),t._v(" "),e("div",{staticClass:"negative"})])])])])}],!1,null,"01922fd1",null);Pn.options.__file="source/vue/view/public/loading.vue";var Fn=Pn.exports,In=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("i-select",{style:"width:"+t.width+"px",model:{value:t.cValue,callback:function(n){t.cValue=n},expression:"cValue"}},[t.has?e("i-option",{attrs:{value:t.top.key}},[t._v(t._s(t.top.value))]):t._e(),t._v(" "),t._l(t.data,function(n){return e("i-option",{key:n[t.attr.id],attrs:{value:n[t.attr.id]}},[t._v(t._s(n[t.attr.floor]>1?"|"+"_".repeat(4*(n[t.attr.floor]-1)):"")+t._s(n[t.attr.name]))])})],2)};In._withStripped=!0;var kn={name:"v-select",data:function(){return{cValue:0}},props:{value:{type:[String,Number],required:!0},data:{type:Array,required:!0},width:{type:Number,default:200},has:{type:Boolean,default:!0},top:{type:Object,default:function(){return{key:0,value:"顶级分类"}}},attr:{type:Object,default:function(){return{id:"id",floor:"floor",name:"name"}}}},watch:{cValue:function(t){this.$emit("input",t)},value:{immediate:!0,handler:function(t){this.cValue=t}}}},Tn=Object(En.a)(kn,In,[],!1,null,"21dbbbf7",null);Tn.options.__file="source/vue/view/public/select.vue";var Nn=Tn.exports,Ln=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"brand-container"},[e("div",{staticClass:"left"},[e("div",{staticClass:"letter"},[e("span",{staticClass:"cur",attrs:{"data-type":"all"}},[t._v("所有品牌")]),t._v(" "),e("span",{attrs:{"data-type":"hot"}},[t._v("热门品牌")]),t._v(" "),t._l(t.letter,function(n){return e("span",{key:n,attrs:{"data-letter":n}},[t._v(t._s(n))])})],2),t._v(" "),e("div",{staticClass:"brand"},t._l(t.brand,function(n){return e("div",{staticClass:"item",attrs:{"data-id":n.id,"data-hot":n.hot,"data-letter":n.letter,"data-name":n.name}},[e("div",{staticClass:"logo full"},[e("img",{staticClass:"image",attrs:{src:n.logo_explain}})]),t._v(" "),e("div",{staticClass:"name full"},[t._v(t._s(n.name))]),t._v(" "),t._m(0,!0)])}),0),t._v(" "),t._m(1),t._v(" "),t._m(2)]),t._v(" "),t._m(3)])])};Ln._withStripped=!0;var Rn={name:"v-brand",props:{brand:{default:function(){return[{id:1,hot:"y",letter:"A",name:"奥迪",logo:""}]}}},data:function(){return{letter:[]}},watch:{brand:{immediate:!0,handler:function(t){var n=[];t.forEach(function(t){-1==n.indexOf(t.letter)&&n.push(t.letter)}),n.sort(function(t,n){return t>n?1:-1}),this.letter=n}}}},$n=Object(En.a)(Rn,Ln,[function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"status hide"},[n("img",{staticClass:"image",attrs:{src:"/plugin/Brand/image/selected.png"}})])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"selected"},[n("h4",{staticClass:"header weight"},[this._v("已选择的品牌：")]),this._v(" "),n("p",{staticClass:"brand"})])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"function hide"},[n("button",{staticClass:"run-button run-button-blue confirm",attrs:{type:"button"}},[this._v("确定")]),this._v(" "),n("button",{staticClass:"run-button run-button-orange cancel",attrs:{type:"button"}},[this._v("取消")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"right"},[n("button",{staticClass:"run-button run-button-blue ctrl",attrs:{type:"button"}},[this._v("+展开")]),this._v(" "),n("button",{staticClass:"run-button run-button-blue mode",attrs:{type:"button"}},[this._v("多选")])])}],!1,null,"301fd7dc",null);$n.options.__file="source/vue/view/public/brand.vue";var Dn=$n.exports,Vn=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"menu-switch"},t._l(t.data,function(n){return e("div",{staticClass:"item cur",attrs:{"data-id":n.id}},[t._v(t._s(n.name))])}),0)])};Vn._withStripped=!0;var Wn={name:"v-menu-switch",data:function(){return{ins:{}}},props:{data:{type:Array,default:function(){return[{id:"one",name:"选项1"},{id:"two",name:"选项2"}]}}}},Bn=Object(En.a)(Wn,Vn,[],!1,null,"668b68e4",null);Bn.options.__file="source/vue/view/public/MenuSwitch.vue";var Un=Bn.exports,zn=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("button",{staticClass:"run-button",class:"run-button-"+t.color,attrs:{type:t.type},on:{click:function(n){return n.stopPropagation(),t.$emit("click")}}},[t.has?e("i",{staticClass:"run-iconfont",class:"run-"+t.ico}):t._e(),t._t("default")],2)};zn._withStripped=!0;var qn={name:"v-button",props:{color:{type:String,default:"blue"},has:{type:Boolean,default:!1},ico:{type:String,default:"edit"},type:{type:String,default:"button"}}},Yn=Object(En.a)(qn,zn,[],!1,null,"cc22b9a6",null);Yn.options.__file="source/vue/view/public/button.vue";var Jn=Yn.exports;Vue.component("v-app",An),Vue.component("v-loading",Fn),Vue.component("v-select",Nn),Vue.component("v-brand",Dn),Vue.component("v-menu-switch",Un),Vue.component("v-button",Jn);e(340);new Vue({el:"#app",template:"<v-app></v-app>"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3JvdXRlci9yb3V0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvYnVzaW5lc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2Fzc2V0L2pzL2N1cnJlbmN5LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9pbml0aWFsaXplLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9taXhpbk9wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvc3RvcmUvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS9zdG9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3N0b3JlL2dldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3N0b3JlL211dGF0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvc3RvcmUvYWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9zdWJHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9hZG1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL3VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9hcnRpY2xlVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2FydGljbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zaG93SW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9taXNjLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9yb2xlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvQnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9jYXJTZXJpZXNHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhclNlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhckNvbmZpZ3VyYXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhckNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9jYXJUeXBlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvY2FyTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9kZXRlY3Rpb25Nb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9kZXRlY3Rpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2RldGVjdGlvblBvcy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2RldGVjdGlvbkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvY2FyLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcGxhdGZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zYWxlQXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9yZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvc3RhZ2luZ0J1eUFwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcmVzZXJ2YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9wYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL3B1c2guanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2Fzc2V0L2pzL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL21peGluL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9taXhpbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvQXBwLnZ1ZT8xOWY4Iiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvQXBwLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvQXBwLnZ1ZT80OTRiIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9BcHAudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvbG9hZGluZy52dWU/MTg4MyIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9sb2FkaW5nLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2xvYWRpbmcudnVlP2U2MTYiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9sb2FkaW5nLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL3NlbGVjdC52dWU/MjM3OSIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9zZWxlY3QudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvc2VsZWN0LnZ1ZT8xY2ZiIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvc2VsZWN0LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2JyYW5kLnZ1ZT84YzI0Iiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2JyYW5kLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2JyYW5kLnZ1ZT82Y2E3Iiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvTWVudVN3aXRjaC52dWU/YzY5ZSIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9NZW51U3dpdGNoLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL01lbnVTd2l0Y2gudnVlP2EwZjAiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9NZW51U3dpdGNoLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2J1dHRvbi52dWU/MWFiYiIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9idXR0b24udnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnV0dG9uLnZ1ZT8zMWI3Iiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnV0dG9uLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcHAuanMiXSwibmFtZXMiOlsid2VicGFja0pzb25wQ2FsbGJhY2siLCJkYXRhIiwibW9kdWxlSWQiLCJjaHVua0lkIiwiY2h1bmtJZHMiLCJtb3JlTW9kdWxlcyIsImkiLCJyZXNvbHZlcyIsImxlbmd0aCIsImluc3RhbGxlZENodW5rcyIsInB1c2giLCJPYmplY3QiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJtb2R1bGVzIiwicGFyZW50SnNvbnBGdW5jdGlvbiIsInNoaWZ0IiwiaW5zdGFsbGVkTW9kdWxlcyIsImluc3RhbGxlZENzc0NodW5rcyIsIjAiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZXhwb3J0cyIsIm1vZHVsZSIsImwiLCJlIiwicHJvbWlzZXMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsIjIzIiwiMjQiLCIyNSIsIjI2IiwiMjciLCIyOCIsIjI5IiwiMzAiLCIzMSIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQxIiwiNDIiLCI0MyIsIjQ0IiwiNDUiLCI0NiIsIjQ3IiwiNDgiLCI0OSIsIjUwIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJocmVmIiwiZnVsbGhyZWYiLCJwIiwiZXhpc3RpbmdMaW5rVGFncyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJkYXRhSHJlZiIsInRhZyIsImdldEF0dHJpYnV0ZSIsInJlbCIsImV4aXN0aW5nU3R5bGVUYWdzIiwibGlua1RhZyIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwib25sb2FkIiwib25lcnJvciIsImV2ZW50IiwicmVxdWVzdCIsInRhcmdldCIsInNyYyIsImVyciIsIkVycm9yIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJ0aGVuIiwiaW5zdGFsbGVkQ2h1bmtEYXRhIiwicHJvbWlzZSIsIm9uU2NyaXB0Q29tcGxldGUiLCJzY3JpcHQiLCJjaGFyc2V0IiwidGltZW91dCIsIm5jIiwic2V0QXR0cmlidXRlIiwianNvbnBTY3JpcHRTcmMiLCJjbGVhclRpbWVvdXQiLCJjaHVuayIsImVycm9yVHlwZSIsInJlYWxTcmMiLCJlcnJvciIsInVuZGVmaW5lZCIsInNldFRpbWVvdXQiLCJoZWFkIiwiYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsIm9lIiwiY29uc29sZSIsImpzb25wQXJyYXkiLCJ3aW5kb3ciLCJvbGRKc29ucEZ1bmN0aW9uIiwic2xpY2UiLCJzIiwiZ2xvYmFsIiwiY29yZSIsImhpZGUiLCJyZWRlZmluZSIsImN0eCIsIiRleHBvcnQiLCJzb3VyY2UiLCJvd24iLCJvdXQiLCJleHAiLCJJU19GT1JDRUQiLCJGIiwiSVNfR0xPQkFMIiwiRyIsIklTX1NUQVRJQyIsIlMiLCJJU19QUk9UTyIsIlAiLCJJU19CSU5EIiwiQiIsImV4cFByb3RvIiwiRnVuY3Rpb24iLCJVIiwiVyIsIlIiLCJpc09iamVjdCIsIml0IiwiVHlwZUVycm9yIiwiTWF0aCIsInNlbGYiLCJfX2ciLCJleGVjIiwic3RvcmUiLCJ1aWQiLCJVU0VfU1lNQk9MIiwidG9JbnRlZ2VyIiwibWluIiwiYSIsImFuT2JqZWN0IiwiSUU4X0RPTV9ERUZJTkUiLCJ0b1ByaW1pdGl2ZSIsImRQIiwiZiIsIk8iLCJBdHRyaWJ1dGVzIiwiZGVmaW5lZCIsImNyZWF0ZURlc2MiLCJoYXMiLCJTUkMiLCIkdG9TdHJpbmciLCJUUEwiLCJzcGxpdCIsImluc3BlY3RTb3VyY2UiLCJ2YWwiLCJzYWZlIiwiaXNGdW5jdGlvbiIsImpvaW4iLCJTdHJpbmciLCJ0aGlzIiwiZmFpbHMiLCJxdW90IiwiY3JlYXRlSFRNTCIsInN0cmluZyIsImF0dHJpYnV0ZSIsInAxIiwicmVwbGFjZSIsIk5BTUUiLCJ0ZXN0IiwidG9Mb3dlckNhc2UiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHRFeHBvcnRzIiwicmVuZGVyIiwic3RhdGljUmVuZGVyRm5zIiwiZnVuY3Rpb25hbFRlbXBsYXRlIiwiaW5qZWN0U3R5bGVzIiwic2NvcGVJZCIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiaG9vayIsIm9wdGlvbnMiLCJfY29tcGlsZWQiLCJmdW5jdGlvbmFsIiwiX3Njb3BlSWQiLCJjb250ZXh0IiwiJHZub2RlIiwic3NyQ29udGV4dCIsInBhcmVudCIsIl9fVlVFX1NTUl9DT05URVhUX18iLCJfcmVnaXN0ZXJlZENvbXBvbmVudHMiLCJhZGQiLCJfc3NyUmVnaXN0ZXIiLCIkcm9vdCIsIiRvcHRpb25zIiwic2hhZG93Um9vdCIsIl9pbmplY3RTdHlsZXMiLCJvcmlnaW5hbFJlbmRlciIsImgiLCJleGlzdGluZyIsImJlZm9yZUNyZWF0ZSIsImNvbmNhdCIsIl9fd2VicGFja19leHBvcnRzX18iLCJJT2JqZWN0IiwicElFIiwidG9JT2JqZWN0IiwiZ09QRCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRvT2JqZWN0IiwiSUVfUFJPVE8iLCJPYmplY3RQcm90byIsImdldFByb3RvdHlwZU9mIiwiY29uc3RydWN0b3IiLCJ2ZXJzaW9uIiwiX19lIiwiYUZ1bmN0aW9uIiwiZm4iLCJ0aGF0IiwiYiIsImFwcGx5IiwiYXJndW1lbnRzIiwidG9TdHJpbmciLCJjZWlsIiwiZmxvb3IiLCJpc05hTiIsIm1ldGhvZCIsImFyZyIsInZhbHVlT2YiLCJLRVkiLCJ0b0xlbmd0aCIsImFzYyIsIlRZUEUiLCIkY3JlYXRlIiwiSVNfTUFQIiwiSVNfRklMVEVSIiwiSVNfU09NRSIsIklTX0VWRVJZIiwiSVNfRklORF9JTkRFWCIsIk5PX0hPTEVTIiwiJHRoaXMiLCJjYWxsYmFja2ZuIiwicmVzIiwiaW5kZXgiLCJyZXN1bHQiLCJMSUJSQVJZIiwiJHR5cGVkIiwiJGJ1ZmZlciIsImFuSW5zdGFuY2UiLCJwcm9wZXJ0eURlc2MiLCJyZWRlZmluZUFsbCIsInRvSW5kZXgiLCJ0b0Fic29sdXRlSW5kZXgiLCJjbGFzc29mIiwiaXNBcnJheUl0ZXIiLCJnT1BOIiwiZ2V0SXRlckZuIiwid2tzIiwiY3JlYXRlQXJyYXlNZXRob2QiLCJjcmVhdGVBcnJheUluY2x1ZGVzIiwic3BlY2llc0NvbnN0cnVjdG9yIiwiQXJyYXlJdGVyYXRvcnMiLCJJdGVyYXRvcnMiLCIkaXRlckRldGVjdCIsInNldFNwZWNpZXMiLCJhcnJheUZpbGwiLCJhcnJheUNvcHlXaXRoaW4iLCIkRFAiLCIkR09QRCIsIlJhbmdlRXJyb3IiLCJVaW50OEFycmF5IiwiQXJyYXlQcm90byIsIkFycmF5IiwiJEFycmF5QnVmZmVyIiwiQXJyYXlCdWZmZXIiLCIkRGF0YVZpZXciLCJEYXRhVmlldyIsImFycmF5Rm9yRWFjaCIsImFycmF5RmlsdGVyIiwiYXJyYXlTb21lIiwiYXJyYXlFdmVyeSIsImFycmF5RmluZCIsImFycmF5RmluZEluZGV4IiwiYXJyYXlJbmNsdWRlcyIsImFycmF5SW5kZXhPZiIsImFycmF5VmFsdWVzIiwidmFsdWVzIiwiYXJyYXlLZXlzIiwia2V5cyIsImFycmF5RW50cmllcyIsImVudHJpZXMiLCJhcnJheUxhc3RJbmRleE9mIiwibGFzdEluZGV4T2YiLCJhcnJheVJlZHVjZSIsInJlZHVjZSIsImFycmF5UmVkdWNlUmlnaHQiLCJyZWR1Y2VSaWdodCIsImFycmF5Sm9pbiIsImFycmF5U29ydCIsInNvcnQiLCJhcnJheVNsaWNlIiwiYXJyYXlUb1N0cmluZyIsImFycmF5VG9Mb2NhbGVTdHJpbmciLCJ0b0xvY2FsZVN0cmluZyIsIklURVJBVE9SIiwiVEFHIiwiVFlQRURfQ09OU1RSVUNUT1IiLCJERUZfQ09OU1RSVUNUT1IiLCJBTExfQ09OU1RSVUNUT1JTIiwiQ09OU1RSIiwiVFlQRURfQVJSQVkiLCJUWVBFRCIsIlZJRVciLCIkbWFwIiwiYWxsb2NhdGUiLCJMSVRUTEVfRU5ESUFOIiwiVWludDE2QXJyYXkiLCJidWZmZXIiLCJGT1JDRURfU0VUIiwic2V0IiwidG9PZmZzZXQiLCJCWVRFUyIsIm9mZnNldCIsInZhbGlkYXRlIiwiQyIsInNwZWNpZXNGcm9tTGlzdCIsImxpc3QiLCJmcm9tTGlzdCIsImFkZEdldHRlciIsImludGVybmFsIiwiX2QiLCIkZnJvbSIsInN0ZXAiLCJpdGVyYXRvciIsImFMZW4iLCJtYXBmbiIsIm1hcHBpbmciLCJpdGVyRm4iLCJuZXh0IiwiZG9uZSIsIiRvZiIsIlRPX0xPQ0FMRV9CVUciLCIkdG9Mb2NhbGVTdHJpbmciLCJwcm90byIsImNvcHlXaXRoaW4iLCJzdGFydCIsImV2ZXJ5IiwiZmlsbCIsImZpbHRlciIsImZpbmQiLCJwcmVkaWNhdGUiLCJmaW5kSW5kZXgiLCJmb3JFYWNoIiwiaW5kZXhPZiIsInNlYXJjaEVsZW1lbnQiLCJpbmNsdWRlcyIsInNlcGFyYXRvciIsIm1hcCIsInJldmVyc2UiLCJtaWRkbGUiLCJzb21lIiwiY29tcGFyZWZuIiwic3ViYXJyYXkiLCJiZWdpbiIsImVuZCIsIiRiZWdpbiIsImJ5dGVPZmZzZXQiLCJCWVRFU19QRVJfRUxFTUVOVCIsIiRzbGljZSIsIiRzZXQiLCJhcnJheUxpa2UiLCJsZW4iLCIkaXRlcmF0b3JzIiwiaXNUQUluZGV4IiwiJGdldERlc2MiLCIkc2V0RGVzYyIsImRlc2MiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIiRUeXBlZEFycmF5UHJvdG90eXBlJCIsIndyYXBwZXIiLCJDTEFNUEVEIiwiR0VUVEVSIiwiU0VUVEVSIiwiVHlwZWRBcnJheSIsIkJhc2UiLCJUQUMiLCJGT1JDRUQiLCJBQlYiLCJUeXBlZEFycmF5UHJvdG90eXBlIiwiYWRkRWxlbWVudCIsInYiLCJyb3VuZCIsInNldHRlciIsIiRvZmZzZXQiLCIkbGVuZ3RoIiwiYnl0ZUxlbmd0aCIsImtsYXNzIiwiJGxlbiIsIml0ZXIiLCIkbmF0aXZlSXRlcmF0b3IiLCJDT1JSRUNUX0lURVJfTkFNRSIsIiRpdGVyYXRvciIsIm9mIiwiZnJvbSIsIk1hcCIsInNoYXJlZCIsImdldE9yQ3JlYXRlTWV0YWRhdGFNYXAiLCJ0YXJnZXRLZXkiLCJ0YXJnZXRNZXRhZGF0YSIsImtleU1ldGFkYXRhIiwiTWV0YWRhdGFLZXkiLCJtZXRhZGF0YU1hcCIsIk1ldGFkYXRhVmFsdWUiLCJfIiwiTUVUQSIsInNldERlc2MiLCJpZCIsImlzRXh0ZW5zaWJsZSIsIkZSRUVaRSIsInByZXZlbnRFeHRlbnNpb25zIiwic2V0TWV0YSIsInciLCJtZXRhIiwiTkVFRCIsImZhc3RLZXkiLCJnZXRXZWFrIiwib25GcmVlemUiLCJVTlNDT1BBQkxFUyIsImJpdG1hcCIsInB4IiwicmFuZG9tIiwiJGtleXMiLCJlbnVtQnVnS2V5cyIsIm1heCIsImRQcyIsIkVtcHR5IiwiY3JlYXRlRGljdCIsImlmcmFtZURvY3VtZW50IiwiaWZyYW1lIiwic3R5bGUiLCJkaXNwbGF5IiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJ3cml0ZSIsImx0IiwiY2xvc2UiLCJQcm9wZXJ0aWVzIiwiaGlkZGVuS2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJERVNDUklQVE9SUyIsIlNQRUNJRVMiLCJDb25zdHJ1Y3RvciIsImZvcmJpZGRlbkZpZWxkIiwiQlJFQUsiLCJSRVRVUk4iLCJpdGVyYWJsZSIsIl90IiwiZGVmIiwic3RhdCIsImNvZiIsIkFSRyIsIlQiLCJ0cnlHZXQiLCJjYWxsZWUiLCJzcGFjZXMiLCJzcGFjZSIsImx0cmltIiwiUmVnRXhwIiwicnRyaW0iLCJleHBvcnRlciIsIkFMSUFTIiwiRk9SQ0UiLCJ0cmltIiwiY29weXJpZ2h0IiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJpZ25vcmVDYXNlIiwibXVsdGlsaW5lIiwidW5pY29kZSIsInN0aWNreSIsIkQiLCJJU19JTkNMVURFUyIsImVsIiwiZnJvbUluZGV4IiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiaXNBcnJheSIsIlRPX1NUUklORyIsInBvcyIsImNoYXJDb2RlQXQiLCJjaGFyQXQiLCJNQVRDSCIsImlzUmVnRXhwIiwiU0FGRV9DTE9TSU5HIiwicml0ZXIiLCJza2lwQ2xvc2luZyIsImFyciIsImJ1aWx0aW5FeGVjIiwicmVnZXhwRXhlYyIsIlJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTIiwicmUiLCJncm91cHMiLCJTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMiLCJvcmlnaW5hbEV4ZWMiLCJTWU1CT0wiLCJERUxFR0FURVNfVE9fU1lNQk9MIiwiREVMRUdBVEVTX1RPX0VYRUMiLCJleGVjQ2FsbGVkIiwibmF0aXZlUmVnRXhwTWV0aG9kIiwiZm5zIiwibmF0aXZlTWV0aG9kIiwicmVnZXhwIiwic3RyIiwiYXJnMiIsImZvcmNlU3RyaW5nTWV0aG9kIiwic3RyZm4iLCJyeGZuIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZm9yT2YiLCJzZXRUb1N0cmluZ1RhZyIsImluaGVyaXRJZlJlcXVpcmVkIiwibWV0aG9kcyIsImNvbW1vbiIsIklTX1dFQUsiLCJBRERFUiIsImZpeE1ldGhvZCIsImluc3RhbmNlIiwiSEFTTlRfQ0hBSU5JTkciLCJUSFJPV1NfT05fUFJJTUlUSVZFUyIsIkFDQ0VQVF9JVEVSQUJMRVMiLCJCVUdHWV9aRVJPIiwiJGluc3RhbmNlIiwiY2xlYXIiLCJnZXRDb25zdHJ1Y3RvciIsInNldFN0cm9uZyIsIlR5cGVkIiwiVHlwZWRBcnJheUNvbnN0cnVjdG9ycyIsIksiLCJfX2RlZmluZVNldHRlcl9fIiwiQ09MTEVDVElPTiIsIkEiLCJjYiIsIm1hcEZuIiwibmV4dEl0ZW0iLCJpcyIsIndrc0V4dCIsIiRTeW1ib2wiLCJkb2N1bWVudEVsZW1lbnQiLCJjaGVjayIsInNldFByb3RvdHlwZU9mIiwiYnVnZ3kiLCJfX3Byb3RvX18iLCJjb3VudCIsIkluZmluaXR5Iiwic2lnbiIsIngiLCIkZXhwbTEiLCJleHBtMSIsIiRpdGVyQ3JlYXRlIiwiQlVHR1kiLCJyZXR1cm5UaGlzIiwiREVGQVVMVCIsIklTX1NFVCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiZ2V0TWV0aG9kIiwia2luZCIsIkRFRl9WQUxVRVMiLCJWQUxVRVNfQlVHIiwiJG5hdGl2ZSIsIiRkZWZhdWx0IiwiJGVudHJpZXMiLCIkYW55TmF0aXZlIiwiZGVzY3JpcHRvciIsInNlYXJjaFN0cmluZyIsIiRkZWZpbmVQcm9wZXJ0eSIsImdldEl0ZXJhdG9yTWV0aG9kIiwib3JpZ2luYWwiLCJlbmRQb3MiLCJhZGRUb1Vuc2NvcGFibGVzIiwiaXRlcmF0ZWQiLCJfaSIsIl9rIiwiQXJndW1lbnRzIiwicmUxIiwicmUyIiwicmVnZXhwRmxhZ3MiLCJuYXRpdmVFeGVjIiwibmF0aXZlUmVwbGFjZSIsInBhdGNoZWRFeGVjIiwiVVBEQVRFU19MQVNUX0lOREVYX1dST05HIiwiTlBDR19JTkNMVURFRCIsImxhc3RJbmRleCIsInJlQ29weSIsIm1hdGNoIiwiYXQiLCJkZWZlciIsImNoYW5uZWwiLCJwb3J0IiwiaW52b2tlIiwiaHRtbCIsImNlbCIsInByb2Nlc3MiLCJzZXRUYXNrIiwic2V0SW1tZWRpYXRlIiwiY2xlYXJUYXNrIiwiY2xlYXJJbW1lZGlhdGUiLCJNZXNzYWdlQ2hhbm5lbCIsIkRpc3BhdGNoIiwiY291bnRlciIsInF1ZXVlIiwicnVuIiwibGlzdGVuZXIiLCJhcmdzIiwibmV4dFRpY2siLCJub3ciLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJhZGRFdmVudExpc3RlbmVyIiwiaW1wb3J0U2NyaXB0cyIsIm1hY3JvdGFzayIsIk9ic2VydmVyIiwiTXV0YXRpb25PYnNlcnZlciIsIldlYktpdE11dGF0aW9uT2JzZXJ2ZXIiLCJpc05vZGUiLCJsYXN0Iiwibm90aWZ5IiwiZmx1c2giLCJkb21haW4iLCJleGl0IiwiZW50ZXIiLCJzdGFuZGFsb25lIiwidG9nZ2xlIiwibm9kZSIsImNyZWF0ZVRleHROb2RlIiwib2JzZXJ2ZSIsImNoYXJhY3RlckRhdGEiLCJ0YXNrIiwiUHJvbWlzZUNhcGFiaWxpdHkiLCIkJHJlc29sdmUiLCIkJHJlamVjdCIsIlBST1RPVFlQRSIsIldST05HX0lOREVYIiwiQmFzZUJ1ZmZlciIsImFicyIsInBvdyIsImxvZyIsIkxOMiIsIiRCVUZGRVIiLCIkTEVOR1RIIiwiJE9GRlNFVCIsInBhY2tJRUVFNzU0IiwibUxlbiIsIm5CeXRlcyIsImVMZW4iLCJlTWF4IiwiZUJpYXMiLCJydCIsInVucGFja0lFRUU3NTQiLCJuQml0cyIsIk5hTiIsInVucGFja0kzMiIsImJ5dGVzIiwicGFja0k4IiwicGFja0kxNiIsInBhY2tJMzIiLCJwYWNrRjY0IiwicGFja0YzMiIsInZpZXciLCJpc0xpdHRsZUVuZGlhbiIsImludEluZGV4IiwiX2IiLCJwYWNrIiwiY29udmVyc2lvbiIsIkFycmF5QnVmZmVyUHJvdG8iLCJqIiwiJHNldEludDgiLCJzZXRJbnQ4IiwiZ2V0SW50OCIsInNldFVpbnQ4IiwiYnVmZmVyTGVuZ3RoIiwiZ2V0VWludDgiLCJnZXRJbnQxNiIsImdldFVpbnQxNiIsImdldEludDMyIiwiZ2V0VWludDMyIiwiZ2V0RmxvYXQzMiIsImdldEZsb2F0NjQiLCJzZXRJbnQxNiIsInNldFVpbnQxNiIsInNldEludDMyIiwic2V0VWludDMyIiwic2V0RmxvYXQzMiIsInNldEZsb2F0NjQiLCJnIiwibmFtZXMiLCJnZXRLZXlzIiwiZGVmaW5lUHJvcGVydGllcyIsIndpbmRvd05hbWVzIiwiZ2V0V2luZG93TmFtZXMiLCJnT1BTIiwiJGFzc2lnbiIsImFzc2lnbiIsImsiLCJnZXRTeW1ib2xzIiwiaXNFbnVtIiwieSIsImZhY3RvcmllcyIsInBhcnRBcmdzIiwiYm91bmQiLCJjb25zdHJ1Y3QiLCJ1biIsIiRwYXJzZUludCIsInBhcnNlSW50IiwiJHRyaW0iLCJ3cyIsImhleCIsInJhZGl4IiwiJHBhcnNlRmxvYXQiLCJwYXJzZUZsb2F0IiwibXNnIiwiaXNGaW5pdGUiLCJsb2cxcCIsIkVQU0lMT04iLCJFUFNJTE9OMzIiLCJNQVgzMiIsIk1JTjMyIiwiZnJvdW5kIiwiJGFicyIsIiRzaWduIiwicmV0IiwibWVtbyIsImlzUmlnaHQiLCJ0byIsImluYyIsImZvcmNlZCIsImZsYWdzIiwibmV3UHJvbWlzZUNhcGFiaWxpdHkiLCJwcm9taXNlQ2FwYWJpbGl0eSIsInN0cm9uZyIsImVudHJ5IiwiZ2V0RW50cnkiLCIkaXRlckRlZmluZSIsIlNJWkUiLCJfZiIsIl9sIiwiZGVsZXRlIiwicHJldiIsIkludGVybmFsTWFwIiwiZWFjaCIsIndlYWsiLCJOQVRJVkVfV0VBS19NQVAiLCJJU19JRTExIiwiQWN0aXZlWE9iamVjdCIsInVuY2F1Z2h0RnJvemVuU3RvcmUiLCJ1ZnN0b3JlIiwiJFdlYWtNYXAiLCIkaGFzIiwiVW5jYXVnaHRGcm96ZW5TdG9yZSIsImZpbmRVbmNhdWdodEZyb3plbiIsInNwbGljZSIsIm51bWJlciIsIlJlZmxlY3QiLCJvd25LZXlzIiwiSVNfQ09OQ0FUX1NQUkVBREFCTEUiLCJmbGF0dGVuSW50b0FycmF5Iiwic291cmNlTGVuIiwiZGVwdGgiLCJtYXBwZXIiLCJ0aGlzQXJnIiwiZWxlbWVudCIsInNwcmVhZGFibGUiLCJ0YXJnZXRJbmRleCIsInNvdXJjZUluZGV4IiwicmVwZWF0IiwibWF4TGVuZ3RoIiwiZmlsbFN0cmluZyIsImxlZnQiLCJzdHJpbmdMZW5ndGgiLCJmaWxsU3RyIiwiaW50TWF4TGVuZ3RoIiwiZmlsbExlbiIsInN0cmluZ0ZpbGxlciIsImlzRW50cmllcyIsInNjYWxlIiwiaW5Mb3ciLCJpbkhpZ2giLCJvdXRMb3ciLCJvdXRIaWdoIiwicm91dGUiLCJyb2xlIiwiYWRtaW4iLCJicmFuZCIsImNhclNlcmllcyIsImNhclNlcmllc0dyb3VwIiwidGhpbmdGb3JDYXJDb25maWd1cmF0aW9uR3JvdXAiLCJ0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb24iLCJ0aGluZ0ZvckNhclR5cGUiLCJ0aGluZ0ZvckNhck1vZGVsIiwidGhpbmdGb3JEZWN0aW9uTW9kdWxlIiwidGhpbmdGb3JEZWN0aW9uR3JvdXAiLCJ0aGluZ0ZvckRlY3Rpb25Qb3MiLCJ0aGluZ0ZvckRlY3Rpb25JdGVtIiwidGhpbmdGb3JTZXJ2aWNlIiwidGhpbmdGb3JDYXIiLCJ0aGluZ0ZvckFydGljbGVUeXBlIiwidGhpbmdGb3JBcnRpY2xlIiwidGhpbmdGb3JTaG93SW1hZ2UiLCJ0aGluZ0ZvclN0b3J5IiwicGF0aCIsImNvbXBvbmVudCIsIl9iYWJlbFBvbHlmaWxsIiwiREVGSU5FX1BST1BFUlRZIiwiZGVmaW5lIiwicGFkU3RhcnQiLCJwYWRFbmQiLCIkZmFpbHMiLCJ3a3NEZWZpbmUiLCJlbnVtS2V5cyIsIl9jcmVhdGUiLCJnT1BORXh0IiwiJEpTT04iLCJKU09OIiwiX3N0cmluZ2lmeSIsInN0cmluZ2lmeSIsIkhJRERFTiIsIlRPX1BSSU1JVElWRSIsIlN5bWJvbFJlZ2lzdHJ5IiwiQWxsU3ltYm9scyIsIk9QU3ltYm9scyIsIlVTRV9OQVRJVkUiLCJRT2JqZWN0IiwiZmluZENoaWxkIiwic2V0U3ltYm9sRGVzYyIsInByb3RvRGVzYyIsIndyYXAiLCJzeW0iLCJpc1N5bWJvbCIsIiRkZWZpbmVQcm9wZXJ0aWVzIiwiJHByb3BlcnR5SXNFbnVtZXJhYmxlIiwiRSIsIiRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCIkZ2V0T3duUHJvcGVydHlOYW1lcyIsIiRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJJU19PUCIsImVzNlN5bWJvbHMiLCJ3ZWxsS25vd25TeW1ib2xzIiwiZm9yIiwia2V5Rm9yIiwidXNlU2V0dGVyIiwidXNlU2ltcGxlIiwicmVwbGFjZXIiLCIkcmVwbGFjZXIiLCJzeW1ib2xzIiwiJGdldFByb3RvdHlwZU9mIiwiJGZyZWV6ZSIsIiRzZWFsIiwiJHByZXZlbnRFeHRlbnNpb25zIiwiJGlzRnJvemVuIiwiJGlzU2VhbGVkIiwiJGlzRXh0ZW5zaWJsZSIsIkZQcm90byIsIm5hbWVSRSIsIkhBU19JTlNUQU5DRSIsIkZ1bmN0aW9uUHJvdG8iLCIkTnVtYmVyIiwiQlJPS0VOX0NPRiIsIlRSSU0iLCJ0b051bWJlciIsImFyZ3VtZW50IiwidGhpcmQiLCJtYXhDb2RlIiwiZmlyc3QiLCJjb2RlIiwiZGlnaXRzIiwiYU51bWJlclZhbHVlIiwiJHRvRml4ZWQiLCJ0b0ZpeGVkIiwiRVJST1IiLCJtdWx0aXBseSIsImMyIiwiZGl2aWRlIiwibnVtVG9TdHJpbmciLCJhY2MiLCJmcmFjdGlvbkRpZ2l0cyIsInoiLCJ4MiIsIiR0b1ByZWNpc2lvbiIsInRvUHJlY2lzaW9uIiwicHJlY2lzaW9uIiwiX2lzRmluaXRlIiwiaXNJbnRlZ2VyIiwiaXNTYWZlSW50ZWdlciIsIk1BWF9TQUZFX0lOVEVHRVIiLCJNSU5fU0FGRV9JTlRFR0VSIiwiTnVtYmVyIiwic3FydCIsIiRhY29zaCIsImFjb3NoIiwiTUFYX1ZBTFVFIiwiJGFzaW5oIiwiYXNpbmgiLCIkYXRhbmgiLCJhdGFuaCIsImNicnQiLCJjbHozMiIsIkxPRzJFIiwiY29zaCIsImh5cG90IiwidmFsdWUxIiwidmFsdWUyIiwiZGl2Iiwic3VtIiwibGFyZyIsIiRpbXVsIiwiaW11bCIsInhuIiwieW4iLCJ4bCIsInlsIiwibG9nMTAiLCJMT0cxMEUiLCJsb2cyIiwic2luaCIsInRhbmgiLCJ0cnVuYyIsImZyb21DaGFyQ29kZSIsIiRmcm9tQ29kZVBvaW50IiwiZnJvbUNvZGVQb2ludCIsInJhdyIsImNhbGxTaXRlIiwidHBsIiwiJGF0IiwicG9pbnQiLCJjb2RlUG9pbnRBdCIsIiRlbmRzV2l0aCIsImVuZHNXaXRoIiwiZW5kUG9zaXRpb24iLCJzZWFyY2giLCIkc3RhcnRzV2l0aCIsInN0YXJ0c1dpdGgiLCJjb2xvciIsInNpemUiLCJ1cmwiLCJEYXRlIiwiZ2V0VGltZSIsInRvSlNPTiIsInRvSVNPU3RyaW5nIiwicHYiLCIkdG9JU09TdHJpbmciLCJseiIsIm51bSIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIkRhdGVQcm90byIsImhpbnQiLCJjcmVhdGVQcm9wZXJ0eSIsInVwVG8iLCJjbG9uZWQiLCIkc29ydCIsIiRmb3JFYWNoIiwiU1RSSUNUIiwiJGZpbHRlciIsIiRzb21lIiwiJGV2ZXJ5IiwiJHJlZHVjZSIsIiRpbmRleE9mIiwiTkVHQVRJVkVfWkVSTyIsIiRmaW5kIiwiJGZsYWdzIiwiJFJlZ0V4cCIsIkNPUlJFQ1RfTkVXIiwidGlSRSIsInBpUkUiLCJmaVUiLCJwcm94eSIsImFkdmFuY2VTdHJpbmdJbmRleCIsInJlZ0V4cEV4ZWMiLCIkbWF0Y2giLCJtYXliZUNhbGxOYXRpdmUiLCJyeCIsImZ1bGxVbmljb2RlIiwibWF0Y2hTdHIiLCJTVUJTVElUVVRJT05fU1lNQk9MUyIsIlNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEIiwiUkVQTEFDRSIsIiRyZXBsYWNlIiwic2VhcmNoVmFsdWUiLCJyZXBsYWNlVmFsdWUiLCJmdW5jdGlvbmFsUmVwbGFjZSIsInJlc3VsdHMiLCJhY2N1bXVsYXRlZFJlc3VsdCIsIm5leHRTb3VyY2VQb3NpdGlvbiIsIm1hdGNoZWQiLCJwb3NpdGlvbiIsImNhcHR1cmVzIiwibmFtZWRDYXB0dXJlcyIsInJlcGxhY2VyQXJncyIsInJlcGxhY2VtZW50IiwiZ2V0U3Vic3RpdHV0aW9uIiwidGFpbFBvcyIsImNoIiwiY2FwdHVyZSIsInNhbWVWYWx1ZSIsIlNFQVJDSCIsIiRzZWFyY2giLCJwcmV2aW91c0xhc3RJbmRleCIsImNhbGxSZWdFeHBFeGVjIiwiJG1pbiIsIiRwdXNoIiwiU1VQUE9SVFNfWSIsIlNQTElUIiwiJHNwbGl0IiwiaW50ZXJuYWxTcGxpdCIsImxpbWl0IiwibGFzdExlbmd0aCIsIm91dHB1dCIsImxhc3RMYXN0SW5kZXgiLCJzcGxpdExpbWl0Iiwic2VwYXJhdG9yQ29weSIsInNwbGl0dGVyIiwidW5pY29kZU1hdGNoaW5nIiwibGltIiwicSIsIkludGVybmFsIiwibmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5IiwiT3duUHJvbWlzZUNhcGFiaWxpdHkiLCJXcmFwcGVyIiwibWljcm90YXNrIiwibmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUiLCJwZXJmb3JtIiwicHJvbWlzZVJlc29sdmUiLCJ2ZXJzaW9ucyIsInY4IiwiJFByb21pc2UiLCJlbXB0eSIsIkZha2VQcm9taXNlIiwiUHJvbWlzZVJlamVjdGlvbkV2ZW50IiwiaXNUaGVuYWJsZSIsImlzUmVqZWN0IiwiX24iLCJjaGFpbiIsIl9jIiwiX3YiLCJvayIsIl9zIiwicmVhY3Rpb24iLCJleGl0ZWQiLCJoYW5kbGVyIiwiZmFpbCIsIl9oIiwib25IYW5kbGVVbmhhbmRsZWQiLCJvblVuaGFuZGxlZCIsInVuaGFuZGxlZCIsImlzVW5oYW5kbGVkIiwiZW1pdCIsIm9udW5oYW5kbGVkcmVqZWN0aW9uIiwicmVhc29uIiwiX2EiLCJvbnJlamVjdGlvbmhhbmRsZWQiLCIkcmVqZWN0IiwiX3ciLCIkcmVzb2x2ZSIsImV4ZWN1dG9yIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwiY2F0Y2giLCJjYXBhYmlsaXR5IiwicmVtYWluaW5nIiwiJGluZGV4IiwiYWxyZWFkeUNhbGxlZCIsInJhY2UiLCIkaXNWaWV3IiwiaXNWaWV3IiwiZmluIiwidmlld1MiLCJ2aWV3VCIsImluaXQiLCJyQXBwbHkiLCJmQXBwbHkiLCJ0aGlzQXJndW1lbnQiLCJhcmd1bWVudHNMaXN0IiwiTCIsInJDb25zdHJ1Y3QiLCJORVdfVEFSR0VUX0JVRyIsIkFSR1NfQlVHIiwiVGFyZ2V0IiwibmV3VGFyZ2V0IiwiJGFyZ3MiLCJwcm9wZXJ0eUtleSIsImF0dHJpYnV0ZXMiLCJkZWxldGVQcm9wZXJ0eSIsIkVudW1lcmF0ZSIsImVudW1lcmF0ZSIsInJlY2VpdmVyIiwiZ2V0UHJvdG8iLCJWIiwiZXhpc3RpbmdEZXNjcmlwdG9yIiwib3duRGVzYyIsInNldFByb3RvIiwiJGluY2x1ZGVzIiwiYXJyYXlTcGVjaWVzQ3JlYXRlIiwiZmxhdE1hcCIsImZsYXR0ZW4iLCJkZXB0aEFyZyIsIiRwYWQiLCJXRUJLSVRfQlVHIiwiZ2V0RmxhZ3MiLCJSZWdFeHBQcm90byIsIiRSZWdFeHBTdHJpbmdJdGVyYXRvciIsIl9yIiwibWF0Y2hBbGwiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZ2V0RGVzYyIsIiR2YWx1ZXMiLCJfX2RlZmluZUdldHRlcl9fIiwiX19sb29rdXBHZXR0ZXJfXyIsIl9fbG9va3VwU2V0dGVyX18iLCJpc0Vycm9yIiwiY2xhbXAiLCJsb3dlciIsInVwcGVyIiwiREVHX1BFUl9SQUQiLCJQSSIsIlJBRF9QRVJfREVHIiwiZGVncmVlcyIsInJhZGlhbnMiLCJmc2NhbGUiLCJpYWRkaCIsIngwIiwieDEiLCJ5MCIsInkxIiwiJHgwIiwiJHkwIiwiaXN1YmgiLCJpbXVsaCIsInUiLCIkdSIsIiR2IiwidTAiLCJ2MCIsInUxIiwidjEiLCJ1bXVsaCIsInNpZ25iaXQiLCJmaW5hbGx5Iiwib25GaW5hbGx5IiwidHJ5IiwibWV0YWRhdGEiLCJ0b01ldGFLZXkiLCJvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhIiwiZGVmaW5lTWV0YWRhdGEiLCJtZXRhZGF0YUtleSIsIm1ldGFkYXRhVmFsdWUiLCJkZWxldGVNZXRhZGF0YSIsIm9yZGluYXJ5SGFzT3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE93bk1ldGFkYXRhIiwib3JkaW5hcnlHZXRNZXRhZGF0YSIsImdldE1ldGFkYXRhIiwiU2V0Iiwib3JkaW5hcnlPd25NZXRhZGF0YUtleXMiLCJvcmRpbmFyeU1ldGFkYXRhS2V5cyIsIm9LZXlzIiwicEtleXMiLCJnZXRNZXRhZGF0YUtleXMiLCJnZXRPd25NZXRhZGF0YSIsImdldE93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5SGFzTWV0YWRhdGEiLCJoYXNNZXRhZGF0YSIsImhhc093bk1ldGFkYXRhIiwiJG1ldGFkYXRhIiwiYXNhcCIsIk9CU0VSVkFCTEUiLCJjbGVhbnVwU3Vic2NyaXB0aW9uIiwic3Vic2NyaXB0aW9uIiwiY2xlYW51cCIsInN1YnNjcmlwdGlvbkNsb3NlZCIsIl9vIiwiY2xvc2VTdWJzY3JpcHRpb24iLCJTdWJzY3JpcHRpb24iLCJvYnNlcnZlciIsInN1YnNjcmliZXIiLCJTdWJzY3JpcHRpb25PYnNlcnZlciIsInVuc3Vic2NyaWJlIiwiY29tcGxldGUiLCIkT2JzZXJ2YWJsZSIsInN1YnNjcmliZSIsIm9ic2VydmFibGUiLCJpdGVtcyIsIk9ic2VydmFibGUiLCJNU0lFIiwidGltZSIsImJvdW5kQXJncyIsInNldEludGVydmFsIiwiJHRhc2siLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJET01JdGVyYWJsZXMiLCJDU1NSdWxlTGlzdCIsIkNTU1N0eWxlRGVjbGFyYXRpb24iLCJDU1NWYWx1ZUxpc3QiLCJDbGllbnRSZWN0TGlzdCIsIkRPTVJlY3RMaXN0IiwiRE9NU3RyaW5nTGlzdCIsIkRPTVRva2VuTGlzdCIsIkRhdGFUcmFuc2Zlckl0ZW1MaXN0IiwiRmlsZUxpc3QiLCJIVE1MQWxsQ29sbGVjdGlvbiIsIkhUTUxDb2xsZWN0aW9uIiwiSFRNTEZvcm1FbGVtZW50IiwiSFRNTFNlbGVjdEVsZW1lbnQiLCJNZWRpYUxpc3QiLCJNaW1lVHlwZUFycmF5IiwiTmFtZWROb2RlTWFwIiwiTm9kZUxpc3QiLCJQYWludFJlcXVlc3RMaXN0IiwiUGx1Z2luIiwiUGx1Z2luQXJyYXkiLCJTVkdMZW5ndGhMaXN0IiwiU1ZHTnVtYmVyTGlzdCIsIlNWR1BhdGhTZWdMaXN0IiwiU1ZHUG9pbnRMaXN0IiwiU1ZHU3RyaW5nTGlzdCIsIlNWR1RyYW5zZm9ybUxpc3QiLCJTb3VyY2VCdWZmZXJMaXN0IiwiU3R5bGVTaGVldExpc3QiLCJUZXh0VHJhY2tDdWVMaXN0IiwiVGV4dFRyYWNrTGlzdCIsIlRvdWNoTGlzdCIsImNvbGxlY3Rpb25zIiwiZXhwbGljaXQiLCJDb2xsZWN0aW9uIiwiT3AiLCJoYXNPd24iLCJpdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3JTeW1ib2wiLCJhc3luY0l0ZXJhdG9yIiwidG9TdHJpbmdUYWdTeW1ib2wiLCJpbk1vZHVsZSIsInJ1bnRpbWUiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0IiwiR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCIsIkdlblN0YXRlRXhlY3V0aW5nIiwiR2VuU3RhdGVDb21wbGV0ZWQiLCJDb250aW51ZVNlbnRpbmVsIiwiTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUiLCJHcCIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwiR2VuZXJhdG9yIiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJkaXNwbGF5TmFtZSIsImlzR2VuZXJhdG9yRnVuY3Rpb24iLCJnZW5GdW4iLCJjdG9yIiwibWFyayIsImF3cmFwIiwiX19hd2FpdCIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsIkFzeW5jSXRlcmF0b3IiLCJhc3luYyIsImlubmVyRm4iLCJvdXRlckZuIiwidHJ5TG9jc0xpc3QiLCJwb3AiLCJDb250ZXh0IiwicmVzZXQiLCJza2lwVGVtcFJlc2V0Iiwic2VudCIsIl9zZW50IiwiZGVsZWdhdGUiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsInN0b3AiLCJyb290UmVjb3JkIiwiY29tcGxldGlvbiIsInJ2YWwiLCJkaXNwYXRjaEV4Y2VwdGlvbiIsImV4Y2VwdGlvbiIsImhhbmRsZSIsImxvYyIsImNhdWdodCIsInJlY29yZCIsInRyeUxvYyIsImhhc0NhdGNoIiwiaGFzRmluYWxseSIsImNhdGNoTG9jIiwiZmluYWxseUxvYyIsImFicnVwdCIsImZpbmFsbHlFbnRyeSIsImFmdGVyTG9jIiwiZmluaXNoIiwidGhyb3duIiwiZGVsZWdhdGVZaWVsZCIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHJvdG9HZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJfaW52b2tlIiwic3RhdGUiLCJkb25lUmVzdWx0IiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwidHJ5Q2F0Y2giLCJtYWtlSW52b2tlTWV0aG9kIiwib2JqIiwidW53cmFwcGVkIiwicHJldmlvdXNQcm9taXNlIiwiY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmciLCJyZXR1cm4iLCJpbmZvIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsIml0ZXJhdG9yTWV0aG9kIiwiZXNjYXBlIiwiJHJlIiwicmVnRXhwIiwicGFydCIsImJ1c2luZXNzIiwiYm9vbF9pbnQiLCJib29sX3N0ciIsImFubm91bmNlbWVudCIsImFwcCIsImltYWdlIiwiaG9tZSIsImNhciIsImdlYXJib3giLCJzYWxlUG9pbnQiLCJhZmZvcmRhYmxlIiwibmV3IiwibHV4dXJ5Iiwibm9uZSIsImRldGVjdGlvbiIsIm5vcm1hbCIsIiRlcnJvciIsIm9wdGlvbiIsImljb24iLCJsYXllciIsImFsZXJ0IiwiZm9yY2VMb2dvdXQiLCJkZWwiLCJyb3V0ZXIiLCJpc0xvZ2luIiwiZXhpc3RzIiwidlNjcm9sbCIsImRvbSIsImdldERvY09mZnNldFZhbCIsInNjcm9sbFRvIiwidG9wQ29udGV4dCIsImFuaW1hdGVEdXJhdGlvbiIsImdldENsYXNzIiwiJHN1Y2Nlc3MiLCIkbXNnIiwiJGluZm8iLCIkdGlwIiwidGlwcyIsIiR1bmtub3ciLCJmaXJzdExldHRlciIsInBpbnlpblV0aWwiLCJnZXRGaXJzdExldHRlciIsImRldGVybWluZSIsInRvdGFsIiwiY2FsbGJhY2siLCJWdWUiLCJjb25maWciLCJwcm9kdWN0aW9uVGlwIiwiZGV2dG9vbHMiLCJhamF4Iiwib3BlbmVkIiwidG9rZW4iLCJqc29uIiwibmF0aXZlIiwicmVzcG9uZGVkIiwiX3RoaXMiLCJhZG1pbkFwaSIsInJlZnJlc2hUb2tlbiIsInJlZnJlc2hfdG9rZW4iLCJjbG9zZUJ0biIsImJ0biIsImJ0bjEiLCJyZXN0YXJ0IiwiaXNOdWxsIiwibWl4aW5PcHRpb24iLCJsb2FkaW5nIiwibW91bnRlZCIsImlucyIsIkxvYWRpbmciLCIkcmVmcyIsIiRlbCIsInN0YXR1cyIsInBlbmRpbmciLCJpbml0aWFsU3RhdGUiLCJpc1N0cmluZyIsInBlbmRpbmdTdGF0ZSIsInNob3ciLCJwYWdlIiwicGVyX3BhZ2UiLCJmb3JtIiwiYXBpIiwicGFnZUV2ZW50IiwiZ2V0RGF0YSIsInN1Ym1pdCIsImlzTnVtYmVyIiwib3JkZXIiLCJ0YXIiLCJjdXJyZW50VGFyZ2V0IiwiY2hpbGRyZW4iLCJoaWdobGlnaHQiLCJzZXRBcmdzIiwiX3RoaXMyIiwiZGF0YUFjdCIsImlkTGlzdCIsIl90aGlzMyIsImRlbEFjdGlvbiIsImlkX2xpc3QiLCJqc29uRW5jb2RlIiwiZGVsVGFyZ2V0IiwiX3RoaXM0IiwiYnRuMiIsImRlbElkIiwiZGVsU2VsZWN0ZWQiLCJfdGhpczUiLCJzZWxlY3RFdmVudCIsImhhc0NsYXNzIiwidW5zZWxlY3RlZExpbmUiLCJzZWxlY3RlZExpbmUiLCJzZWxlY3RBbGxFdmVudCIsIl90aGlzNiIsImNoZWNrZWQiLCJ0Ym9keSIsInRycyIsInRhZ05hbWUiLCJjdXIiLCJqdW1wIiwiYWRkQ2xhc3MiLCJhZGRJZCIsInJlbW92ZUNsYXNzIiwiX3RoaXM3IiwicGFyYW0iLCJkZXRhaWwiLCJVcGxvYWRJbWFnZSIsInBsdWdpblVybCIsInBsdWdpbiIsImltYWdlQXBpIiwiZmllbGQiLCJzdWNjZXNzIiwiY29uZmlybSIsImFjdGlvbiIsImxvY2F0aW9uIiwibWVudVN3aXRjaCIsImluaXRNZW51U3dpdGNoIiwiTWVudVN3aXRjaCIsIm1lbnUiLCJjbGljayIsInN3aXRjaCIsInN3aXRjaE1lbnUiLCJvcHRpb25TZXQiLCJpbWFnZUFwaUZvcndhbmdFZGl0b3IiLCJmaWxlQXBpIiwibWl4aW5zIiwiaG9zdCIsIndlYnNvY2tldCIsIndlYnNvY2tldEhvc3QiLCJ3ZWJzb2NrZXRJZGVudGlmaWVyIiwiVnVlUm91dGVyIiwicm91dGVzIiwiYmVmb3JlRWFjaCIsInByaXYiLCJ1c2VyIiwib3MiLCJkZXZlbG9wZXIiLCJzeXN0ZW0iLCJWdWV4IiwiU3RvcmUiLCJnZXR0ZXJzIiwibXV0YXRpb25zIiwiYWN0aW9ucyIsImxvZ2luaW5nIiwiYXBpX2FkbWluIiwibG9naW4iLCJsb2dvdXQiLCJlZGl0IiwiYXBpX3VzZXIiLCJtYWluIiwiYXJ0aWNsZVR5cGUiLCJhcnRpY2xlIiwic2hvd0ltYWdlIiwidmVyaWZ5Q29kZSIsInRyYW5zbGF0aW9uIiwieGhyRm9yQ29kZSIsIm1pc2MiLCJ0cmFuc2xhdGUiLCJhcGlfcm91dGUiLCJhdXRoIiwiYXBpX3JvbGUiLCJCcmFuZCIsImFwaV9jYXJTZXJpZXNHcm91cCIsImFwaV9jYXJTZXJpZXMiLCJjYXJDb25maWd1cmF0aW9uR3JvdXAiLCJncm91cCIsImNhckNvbmZpZ3VyYXRpb24iLCJjYXJUeXBlIiwiY2FyTW9kZWwiLCJkZXRlY3Rpb25Nb2R1bGUiLCJkZXRlY3Rpb25Hcm91cCIsImRldGVjdGlvblBvcyIsImRldGVjdGlvbkl0ZW0iLCJzZXJ2aWNlIiwidGh1bWIiLCJydWxlIiwicmVwb3J0IiwiZGVsSW1hZ2UiLCJnZXRSZXBvcnQiLCJwbGF0Zm9ybSIsInNhbGVBcHBsaWNhdGlvbiIsInVwZGF0ZVN0YXR1cyIsInJlY29tbWVuZGF0aW9uQXBwbGljYXRpb24iLCJzdGFnaW5nQnV5QXBwbGljYXRpb24iLCJyZXNlcnZhdGlvbiIsIm1vbnRoIiwicXVhcnRlciIsInllYXIiLCJwYW5uZWwiLCJzdG9yeSIsIl9hbGwiLCJfeCIsIl94MiIsImFwaV9wdXNoIiwiYXJ0aWNsZVR5cGVBcGkiLCJhcnRpY2xlQXBpIiwic2hvd0ltYWdlQXBpIiwibWlzY0FwaSIsInJvdXRlQXBpIiwicm9sZUFwaSIsImJyYW5kQXBpIiwiY2FyU2VyaWVzR3JvdXBBcGkiLCJjYXJTZXJpZXNBcGkiLCJjYXJDb25maWd1cmF0aW9uR3JvdXBBcGkiLCJjYXJDb25maWd1cmF0aW9uQXBpIiwiY2FyVHlwZUFwaSIsImNhck1vZGVsQXBpIiwiZGV0ZWN0aW9uTW9kdWxlQXBpIiwiZGV0ZWN0aW9uR3JvdXBBcGkiLCJkZXRlY3Rpb25Qb3NBcGkiLCJkZXRlY3Rpb25JdGVtQXBpIiwic2VydmljZUFwaSIsImNhckFwaSIsInBsYXRmb3JtQXBpIiwic2FsZUFwcGxpY2F0aW9uQXBpIiwicmVjb21tZW5kYXRpb25BcHBsaWNhdGlvbkFwaSIsInN0YWdpbmdCdXlBcHBsaWNhdGlvbkFwaSIsInJlc2VydmF0aW9uQXBpIiwidXNlckFwaSIsInBhbm5lbEFwaSIsInN0b3J5QXBpIiwicHVzaEFwaSIsIm1peGluIiwibm90aWNlIiwidGl0bGUiLCJkdXJhdGlvbiIsIm9uQ2xvc2UiLCIkTm90aWNlIiwic05vdGljZSIsIndOb3RpY2UiLCJpTm90aWNlIiwiZU5vdGljZSIsInRvTGluayIsImNvbXBvbmVudHMiLCIkY3JlYXRlRWxlbWVudCIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJyZWYiLCJfd2l0aFN0cmlwcGVkIiwidmlld19BcHB2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJjb21wb25lbnROb3JtYWxpemVyIiwiX19maWxlIiwiQXBwIiwibG9hZGluZ3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzAxOTIyZmQxX3Njb3BlZF90cnVlX3JlbmRlciIsIl9tIiwicHVibGljX2xvYWRpbmd2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJsb2FkaW5nX2NvbXBvbmVudCIsIl92bSIsInNlbGVjdHZ1ZV90eXBlX3RlbXBsYXRlX2lkXzIxZGJiYmY3X3Njb3BlZF90cnVlX3JlbmRlciIsIndpZHRoIiwibW9kZWwiLCJjVmFsdWUiLCIkJHYiLCJleHByZXNzaW9uIiwiYXR0cnMiLCJ0b3AiLCJfZSIsImF0dHIiLCJwdWJsaWNfc2VsZWN0dnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwicHJvcHMiLCJyZXF1aXJlZCIsImRlZmF1bHQiLCJCb29sZWFuIiwid2F0Y2giLCJudiIsIiRlbWl0IiwiaW1tZWRpYXRlIiwic2VsZWN0X2NvbXBvbmVudCIsInB1YmxpY19zZWxlY3QiLCJicmFuZHZ1ZV90eXBlX3RlbXBsYXRlX2lkXzMwMWZkN2RjX3Njb3BlZF90cnVlX3JlbmRlciIsImRhdGEtdHlwZSIsImxldHRlciIsImRhdGEtbGV0dGVyIiwiZGF0YS1pZCIsImRhdGEtaG90IiwiaG90IiwiZGF0YS1uYW1lIiwibG9nb19leHBsYWluIiwicHVibGljX2JyYW5kdnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwibG9nbyIsImJyYW5kX2NvbXBvbmVudCIsInB1YmxpY19icmFuZCIsIk1lbnVTd2l0Y2h2dWVfdHlwZV90ZW1wbGF0ZV9pZF82NjhiNjhlNF9zY29wZWRfdHJ1ZV9yZW5kZXIiLCJwdWJsaWNfTWVudVN3aXRjaHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsIk1lbnVTd2l0Y2hfY29tcG9uZW50IiwicHVibGljX01lbnVTd2l0Y2giLCJidXR0b252dWVfdHlwZV90ZW1wbGF0ZV9pZF9jYzIyYjlhNl9zY29wZWRfdHJ1ZV9yZW5kZXIiLCJjbGFzcyIsIm9uIiwiJGV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiaWNvIiwicHVibGljX2J1dHRvbnZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImJ1dHRvbl9jb21wb25lbnQiLCJwdWJsaWNfYnV0dG9uIiwic2VsZWN0IiwiYnV0dG9uIiwidGVtcGxhdGUiXSwibWFwcGluZ3MiOiJhQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FLQUssRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFGLEVBQUFJLE9BQW9CRixJQUM1QkgsRUFBQUMsRUFBQUUsR0FDQUcsRUFBQU4sSUFDQUksRUFBQUcsS0FBQUQsRUFBQU4sR0FBQSxJQUVBTSxFQUFBTixHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU0sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVQsRUFB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QUFyTCxFQUFBaUMsU0FBQWpLLEtBQUFpSSxLQUFBLEdBQUFELDJDQzFCQXpILEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsSUFDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEs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QUFVc2dCLElBQ3hCeUMsSUFBSS9pQixVQUFVLFlBQWNta0IsSUFDNUJwQixJQUFJL2lCLFVBQVUsV0FBYXl6QixJQUMzQjFRLElBQUkvaUIsVUFBVSxVQUFZbEIsSUFDMUJpa0IsSUFBSS9pQixVQUFVLGdCQUFrQnFvQixJQUNoQ3RGLElBQUkvaUIsVUFBVSxXQUFhMHpCLFdDMkMzQixJQUFJM1EsSUFBSSxDQUNKeDNCLEdBQUksT0FDSm9vQyxTQUFVIiwiZmlsZSI6ImpzL2FwcC5qcz92ZXJzaW9uPTEuMC4xIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbiBcdHZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH1cblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJqcy9cIiArICh7fVtjaHVua0lkXXx8Y2h1bmtJZCkgKyBcIi5qcz92ZXJzaW9uPTEuMC4xXCJcbiBcdH1cblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG4gXHQvLyBUaGlzIGZpbGUgY29udGFpbnMgb25seSB0aGUgZW50cnkgY2h1bmsuXG4gXHQvLyBUaGUgY2h1bmsgbG9hZGluZyBmdW5jdGlvbiBmb3IgYWRkaXRpb25hbCBjaHVua3NcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZSA9IGZ1bmN0aW9uIHJlcXVpcmVFbnN1cmUoY2h1bmtJZCkge1xuIFx0XHR2YXIgcHJvbWlzZXMgPSBbXTtcblxuXG4gXHRcdC8vIG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luIENTUyBsb2FkaW5nXG4gXHRcdHZhciBjc3NDaHVua3MgPSB7XCIxXCI6MSxcIjJcIjoxLFwiM1wiOjEsXCI0XCI6MSxcIjVcIjoxLFwiNlwiOjEsXCI3XCI6MSxcIjhcIjoxLFwiOVwiOjEsXCIxMFwiOjEsXCIxMVwiOjEsXCIxMlwiOjEsXCIxM1wiOjEsXCIxNFwiOjEsXCIxNVwiOjEsXCIxNlwiOjEsXCIxN1wiOjEsXCIxOFwiOjEsXCIxOVwiOjEsXCIyMFwiOjEsXCIyMVwiOjEsXCIyMlwiOjEsXCIyM1wiOjEsXCIyNFwiOjEsXCIyNVwiOjEsXCIyNlwiOjEsXCIyN1wiOjEsXCIyOFwiOjEsXCIyOVwiOjEsXCIzMFwiOjEsXCIzMVwiOjEsXCIzMlwiOjEsXCIzM1wiOjEsXCIzNFwiOjEsXCIzNVwiOjEsXCIzNlwiOjEsXCIzN1wiOjEsXCIzOFwiOjEsXCIzOVwiOjEsXCI0MFwiOjEsXCI0MVwiOjEsXCI0MlwiOjEsXCI0M1wiOjEsXCI0NFwiOjEsXCI0NVwiOjEsXCI0NlwiOjEsXCI0N1wiOjEsXCI0OFwiOjEsXCI0OVwiOjEsXCI1MFwiOjF9O1xuIFx0XHRpZihpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0pIHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKTtcbiBcdFx0ZWxzZSBpZihpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gIT09IDAgJiYgY3NzQ2h1bmtzW2NodW5rSWRdKSB7XG4gXHRcdFx0cHJvbWlzZXMucHVzaChpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF0gPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdHZhciBocmVmID0gXCJcIiArIGNodW5rSWQgKyBcIi5jc3M/dmVyc2lvbj0xLjAuMVwiO1xuIFx0XHRcdFx0dmFyIGZ1bGxocmVmID0gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgaHJlZjtcbiBcdFx0XHRcdHZhciBleGlzdGluZ0xpbmtUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJsaW5rXCIpO1xuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nTGlua1RhZ3MubGVuZ3RoOyBpKyspIHtcbiBcdFx0XHRcdFx0dmFyIHRhZyA9IGV4aXN0aW5nTGlua1RhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIikgfHwgdGFnLmdldEF0dHJpYnV0ZShcImhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKHRhZy5yZWwgPT09IFwic3R5bGVzaGVldFwiICYmIChkYXRhSHJlZiA9PT0gaHJlZiB8fCBkYXRhSHJlZiA9PT0gZnVsbGhyZWYpKSByZXR1cm4gcmVzb2x2ZSgpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGV4aXN0aW5nU3R5bGVUYWdzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzdHlsZVwiKTtcbiBcdFx0XHRcdGZvcih2YXIgaSA9IDA7IGkgPCBleGlzdGluZ1N0eWxlVGFncy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgdGFnID0gZXhpc3RpbmdTdHlsZVRhZ3NbaV07XG4gXHRcdFx0XHRcdHZhciBkYXRhSHJlZiA9IHRhZy5nZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIik7XG4gXHRcdFx0XHRcdGlmKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikgcmV0dXJuIHJlc29sdmUoKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHZhciBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gXHRcdFx0XHRsaW5rVGFnLnJlbCA9IFwic3R5bGVzaGVldFwiO1xuIFx0XHRcdFx0bGlua1RhZy50eXBlID0gXCJ0ZXh0L2Nzc1wiO1xuIFx0XHRcdFx0bGlua1RhZy5vbmxvYWQgPSByZXNvbHZlO1xuIFx0XHRcdFx0bGlua1RhZy5vbmVycm9yID0gZnVuY3Rpb24oZXZlbnQpIHtcbiBcdFx0XHRcdFx0dmFyIHJlcXVlc3QgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYyB8fCBmdWxsaHJlZjtcbiBcdFx0XHRcdFx0dmFyIGVyciA9IG5ldyBFcnJvcihcIkxvYWRpbmcgQ1NTIGNodW5rIFwiICsgY2h1bmtJZCArIFwiIGZhaWxlZC5cXG4oXCIgKyByZXF1ZXN0ICsgXCIpXCIpO1xuIFx0XHRcdFx0XHRlcnIucmVxdWVzdCA9IHJlcXVlc3Q7XG4gXHRcdFx0XHRcdGRlbGV0ZSBpbnN0YWxsZWRDc3NDaHVua3NbY2h1bmtJZF1cbiBcdFx0XHRcdFx0bGlua1RhZy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGxpbmtUYWcpXG4gXHRcdFx0XHRcdHJlamVjdChlcnIpO1xuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdGxpbmtUYWcuaHJlZiA9IGZ1bGxocmVmO1xuXG4gXHRcdFx0XHR2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiaGVhZFwiKVswXTtcbiBcdFx0XHRcdGhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7XG4gXHRcdFx0fSkudGhlbihmdW5jdGlvbigpIHtcbiBcdFx0XHRcdGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSA9IDA7XG4gXHRcdFx0fSkpO1xuIFx0XHR9XG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0XHR2YXIgb25TY3JpcHRDb21wbGV0ZTtcblxuIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG5cbiBcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiBcdFx0XHRcdFx0Ly8gYXZvaWQgbWVtIGxlYWtzIGluIElFLlxuIFx0XHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBudWxsO1xuIFx0XHRcdFx0XHRjbGVhclRpbWVvdXQodGltZW91dCk7XG4gXHRcdFx0XHRcdHZhciBjaHVuayA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0XHRcdFx0aWYoY2h1bmsgIT09IDApIHtcbiBcdFx0XHRcdFx0XHRpZihjaHVuaykge1xuIFx0XHRcdFx0XHRcdFx0dmFyIGVycm9yVHlwZSA9IGV2ZW50ICYmIChldmVudC50eXBlID09PSAnbG9hZCcgPyAnbWlzc2luZycgOiBldmVudC50eXBlKTtcbiBcdFx0XHRcdFx0XHRcdHZhciByZWFsU3JjID0gZXZlbnQgJiYgZXZlbnQudGFyZ2V0ICYmIGV2ZW50LnRhcmdldC5zcmM7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3IgPSBuZXcgRXJyb3IoJ0xvYWRpbmcgY2h1bmsgJyArIGNodW5rSWQgKyAnIGZhaWxlZC5cXG4oJyArIGVycm9yVHlwZSArICc6ICcgKyByZWFsU3JjICsgJyknKTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnR5cGUgPSBlcnJvclR5cGU7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci5yZXF1ZXN0ID0gcmVhbFNyYztcbiBcdFx0XHRcdFx0XHRcdGNodW5rWzFdKGVycm9yKTtcbiBcdFx0XHRcdFx0XHR9XG4gXHRcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gdW5kZWZpbmVkO1xuIFx0XHRcdFx0XHR9XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0dmFyIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7XG4gXHRcdFx0XHRcdG9uU2NyaXB0Q29tcGxldGUoeyB0eXBlOiAndGltZW91dCcsIHRhcmdldDogc2NyaXB0IH0pO1xuIFx0XHRcdFx0fSwgMTIwMDAwKTtcbiBcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG9uU2NyaXB0Q29tcGxldGU7XG4gXHRcdFx0XHRkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gXHR9O1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIG9uIGVycm9yIGZ1bmN0aW9uIGZvciBhc3luYyBsb2FkaW5nXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm9lID0gZnVuY3Rpb24oZXJyKSB7IGNvbnNvbGUuZXJyb3IoZXJyKTsgdGhyb3cgZXJyOyB9O1xuXG4gXHR2YXIganNvbnBBcnJheSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSA9IHdpbmRvd1tcIndlYnBhY2tKc29ucFwiXSB8fCBbXTtcbiBcdHZhciBvbGRKc29ucEZ1bmN0aW9uID0ganNvbnBBcnJheS5wdXNoLmJpbmQoanNvbnBBcnJheSk7XG4gXHRqc29ucEFycmF5LnB1c2ggPSB3ZWJwYWNrSnNvbnBDYWxsYmFjaztcbiBcdGpzb25wQXJyYXkgPSBqc29ucEFycmF5LnNsaWNlKCk7XG4gXHRmb3IodmFyIGkgPSAwOyBpIDwganNvbnBBcnJheS5sZW5ndGg7IGkrKykgd2VicGFja0pzb25wQ2FsbGJhY2soanNvbnBBcnJheVtpXSk7XG4gXHR2YXIgcGFyZW50SnNvbnBGdW5jdGlvbiA9IG9sZEpzb25wRnVuY3Rpb247XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMzIpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcclxudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xyXG5cclxudmFyICRleHBvcnQgPSBmdW5jdGlvbiAodHlwZSwgbmFtZSwgc291cmNlKSB7XHJcbiAgdmFyIElTX0ZPUkNFRCA9IHR5cGUgJiAkZXhwb3J0LkY7XHJcbiAgdmFyIElTX0dMT0JBTCA9IHR5cGUgJiAkZXhwb3J0Lkc7XHJcbiAgdmFyIElTX1NUQVRJQyA9IHR5cGUgJiAkZXhwb3J0LlM7XHJcbiAgdmFyIElTX1BST1RPID0gdHlwZSAmICRleHBvcnQuUDtcclxuICB2YXIgSVNfQklORCA9IHR5cGUgJiAkZXhwb3J0LkI7XHJcbiAgdmFyIHRhcmdldCA9IElTX0dMT0JBTCA/IGdsb2JhbCA6IElTX1NUQVRJQyA/IGdsb2JhbFtuYW1lXSB8fCAoZ2xvYmFsW25hbWVdID0ge30pIDogKGdsb2JhbFtuYW1lXSB8fCB7fSlbUFJPVE9UWVBFXTtcclxuICB2YXIgZXhwb3J0cyA9IElTX0dMT0JBTCA/IGNvcmUgOiBjb3JlW25hbWVdIHx8IChjb3JlW25hbWVdID0ge30pO1xyXG4gIHZhciBleHBQcm90byA9IGV4cG9ydHNbUFJPVE9UWVBFXSB8fCAoZXhwb3J0c1tQUk9UT1RZUEVdID0ge30pO1xyXG4gIHZhciBrZXksIG93biwgb3V0LCBleHA7XHJcbiAgaWYgKElTX0dMT0JBTCkgc291cmNlID0gbmFtZTtcclxuICBmb3IgKGtleSBpbiBzb3VyY2UpIHtcclxuICAgIC8vIGNvbnRhaW5zIGluIG5hdGl2ZVxyXG4gICAgb3duID0gIUlTX0ZPUkNFRCAmJiB0YXJnZXQgJiYgdGFyZ2V0W2tleV0gIT09IHVuZGVmaW5lZDtcclxuICAgIC8vIGV4cG9ydCBuYXRpdmUgb3IgcGFzc2VkXHJcbiAgICBvdXQgPSAob3duID8gdGFyZ2V0IDogc291cmNlKVtrZXldO1xyXG4gICAgLy8gYmluZCB0aW1lcnMgdG8gZ2xvYmFsIGZvciBjYWxsIGZyb20gZXhwb3J0IGNvbnRleHRcclxuICAgIGV4cCA9IElTX0JJTkQgJiYgb3duID8gY3R4KG91dCwgZ2xvYmFsKSA6IElTX1BST1RPICYmIHR5cGVvZiBvdXQgPT0gJ2Z1bmN0aW9uJyA/IGN0eChGdW5jdGlvbi5jYWxsLCBvdXQpIDogb3V0O1xyXG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxyXG4gICAgaWYgKHRhcmdldCkgcmVkZWZpbmUodGFyZ2V0LCBrZXksIG91dCwgdHlwZSAmICRleHBvcnQuVSk7XHJcbiAgICAvLyBleHBvcnRcclxuICAgIGlmIChleHBvcnRzW2tleV0gIT0gb3V0KSBoaWRlKGV4cG9ydHMsIGtleSwgZXhwKTtcclxuICAgIGlmIChJU19QUk9UTyAmJiBleHBQcm90b1trZXldICE9IG91dCkgZXhwUHJvdG9ba2V5XSA9IG91dDtcclxuICB9XHJcbn07XHJcbmdsb2JhbC5jb3JlID0gY29yZTtcclxuLy8gdHlwZSBiaXRtYXBcclxuJGV4cG9ydC5GID0gMTsgICAvLyBmb3JjZWRcclxuJGV4cG9ydC5HID0gMjsgICAvLyBnbG9iYWxcclxuJGV4cG9ydC5TID0gNDsgICAvLyBzdGF0aWNcclxuJGV4cG9ydC5QID0gODsgICAvLyBwcm90b1xyXG4kZXhwb3J0LkIgPSAxNjsgIC8vIGJpbmRcclxuJGV4cG9ydC5XID0gMzI7ICAvLyB3cmFwXHJcbiRleHBvcnQuVSA9IDY0OyAgLy8gc2FmZVxyXG4kZXhwb3J0LlIgPSAxMjg7IC8vIHJlYWwgcHJvdG8gbWV0aG9kIGZvciBgbGlicmFyeWBcclxubW9kdWxlLmV4cG9ydHMgPSAkZXhwb3J0O1xyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICBpZiAoIWlzT2JqZWN0KGl0KSkgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYW4gb2JqZWN0IScpO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzg2I2lzc3VlY29tbWVudC0xMTU3NTkwMjhcclxudmFyIGdsb2JhbCA9IG1vZHVsZS5leHBvcnRzID0gdHlwZW9mIHdpbmRvdyAhPSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuTWF0aCA9PSBNYXRoXHJcbiAgPyB3aW5kb3cgOiB0eXBlb2Ygc2VsZiAhPSAndW5kZWZpbmVkJyAmJiBzZWxmLk1hdGggPT0gTWF0aCA/IHNlbGZcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcclxuICA6IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XHJcbmlmICh0eXBlb2YgX19nID09ICdudW1iZXInKSBfX2cgPSBnbG9iYWw7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gISFleGVjKCk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiB0eXBlb2YgaXQgPT09ICdvYmplY3QnID8gaXQgIT09IG51bGwgOiB0eXBlb2YgaXQgPT09ICdmdW5jdGlvbic7XHJcbn07XHJcbiIsInZhciBzdG9yZSA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCd3a3MnKTtcclxudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xyXG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuU3ltYm9sO1xyXG52YXIgVVNFX1NZTUJPTCA9IHR5cGVvZiBTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcclxuXHJcbnZhciAkZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICByZXR1cm4gc3RvcmVbbmFtZV0gfHwgKHN0b3JlW25hbWVdID1cclxuICAgIFVTRV9TWU1CT0wgJiYgU3ltYm9sW25hbWVdIHx8IChVU0VfU1lNQk9MID8gU3ltYm9sIDogdWlkKSgnU3ltYm9sLicgKyBuYW1lKSk7XHJcbn07XHJcblxyXG4kZXhwb3J0cy5zdG9yZSA9IHN0b3JlO1xyXG4iLCIvLyA3LjEuMTUgVG9MZW5ndGhcclxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcclxudmFyIG1pbiA9IE1hdGgubWluO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBpdCA+IDAgPyBtaW4odG9JbnRlZ2VyKGl0KSwgMHgxZmZmZmZmZmZmZmZmZikgOiAwOyAvLyBwb3coMiwgNTMpIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXHJcbn07XHJcbiIsIi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcclxubW9kdWxlLmV4cG9ydHMgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XHJcbn0pO1xyXG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbnZhciBkUCA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcclxuXHJcbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydHkgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKSB7XHJcbiAgYW5PYmplY3QoTyk7XHJcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xyXG4gIGFuT2JqZWN0KEF0dHJpYnV0ZXMpO1xyXG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcclxuICAgIHJldHVybiBkUChPLCBQLCBBdHRyaWJ1dGVzKTtcclxuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cclxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkIScpO1xyXG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xyXG4gIHJldHVybiBPO1xyXG59O1xyXG4iLCIvLyA3LjEuMTMgVG9PYmplY3QoYXJndW1lbnQpXHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBPYmplY3QoZGVmaW5lZChpdCkpO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIGlmICh0eXBlb2YgaXQgIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSBmdW5jdGlvbiEnKTtcclxuICByZXR1cm4gaXQ7XHJcbn07XHJcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZnVuY3Rpb24gKG9iamVjdCwga2V5LCB2YWx1ZSkge1xyXG4gIHJldHVybiBkUC5mKG9iamVjdCwga2V5LCBjcmVhdGVEZXNjKDEsIHZhbHVlKSk7XHJcbn0gOiBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XHJcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcclxuICByZXR1cm4gb2JqZWN0O1xyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XHJcbnZhciBTUkMgPSByZXF1aXJlKCcuL191aWQnKSgnc3JjJyk7XHJcbnZhciAkdG9TdHJpbmcgPSByZXF1aXJlKCcuL19mdW5jdGlvbi10by1zdHJpbmcnKTtcclxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XHJcbnZhciBUUEwgPSAoJycgKyAkdG9TdHJpbmcpLnNwbGl0KFRPX1NUUklORyk7XHJcblxyXG5yZXF1aXJlKCcuL19jb3JlJykuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiAkdG9TdHJpbmcuY2FsbChpdCk7XHJcbn07XHJcblxyXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywga2V5LCB2YWwsIHNhZmUpIHtcclxuICB2YXIgaXNGdW5jdGlvbiA9IHR5cGVvZiB2YWwgPT0gJ2Z1bmN0aW9uJztcclxuICBpZiAoaXNGdW5jdGlvbikgaGFzKHZhbCwgJ25hbWUnKSB8fCBoaWRlKHZhbCwgJ25hbWUnLCBrZXkpO1xyXG4gIGlmIChPW2tleV0gPT09IHZhbCkgcmV0dXJuO1xyXG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCBTUkMpIHx8IGhpZGUodmFsLCBTUkMsIE9ba2V5XSA/ICcnICsgT1trZXldIDogVFBMLmpvaW4oU3RyaW5nKGtleSkpKTtcclxuICBpZiAoTyA9PT0gZ2xvYmFsKSB7XHJcbiAgICBPW2tleV0gPSB2YWw7XHJcbiAgfSBlbHNlIGlmICghc2FmZSkge1xyXG4gICAgZGVsZXRlIE9ba2V5XTtcclxuICAgIGhpZGUoTywga2V5LCB2YWwpO1xyXG4gIH0gZWxzZSBpZiAoT1trZXldKSB7XHJcbiAgICBPW2tleV0gPSB2YWw7XHJcbiAgfSBlbHNlIHtcclxuICAgIGhpZGUoTywga2V5LCB2YWwpO1xyXG4gIH1cclxuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXHJcbn0pKEZ1bmN0aW9uLnByb3RvdHlwZSwgVE9fU1RSSU5HLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiB0aGlzW1NSQ10gfHwgJHRvU3RyaW5nLmNhbGwodGhpcyk7XHJcbn0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxudmFyIHF1b3QgPSAvXCIvZztcclxuLy8gQi4yLjMuMi4xIENyZWF0ZUhUTUwoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpXHJcbnZhciBjcmVhdGVIVE1MID0gZnVuY3Rpb24gKHN0cmluZywgdGFnLCBhdHRyaWJ1dGUsIHZhbHVlKSB7XHJcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcclxuICB2YXIgcDEgPSAnPCcgKyB0YWc7XHJcbiAgaWYgKGF0dHJpYnV0ZSAhPT0gJycpIHAxICs9ICcgJyArIGF0dHJpYnV0ZSArICc9XCInICsgU3RyaW5nKHZhbHVlKS5yZXBsYWNlKHF1b3QsICcmcXVvdDsnKSArICdcIic7XHJcbiAgcmV0dXJuIHAxICsgJz4nICsgUyArICc8LycgKyB0YWcgKyAnPic7XHJcbn07XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIGV4ZWMpIHtcclxuICB2YXIgTyA9IHt9O1xyXG4gIE9bTkFNRV0gPSBleGVjKGNyZWF0ZUhUTUwpO1xyXG4gICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHRlc3QgPSAnJ1tOQU1FXSgnXCInKTtcclxuICAgIHJldHVybiB0ZXN0ICE9PSB0ZXN0LnRvTG93ZXJDYXNlKCkgfHwgdGVzdC5zcGxpdCgnXCInKS5sZW5ndGggPiAzO1xyXG4gIH0pLCAnU3RyaW5nJywgTyk7XHJcbn07XHJcbiIsIi8qIGdsb2JhbHMgX19WVUVfU1NSX0NPTlRFWFRfXyAqL1xyXG5cclxuLy8gSU1QT1JUQU5UOiBEbyBOT1QgdXNlIEVTMjAxNSBmZWF0dXJlcyBpbiB0aGlzIGZpbGUgKGV4Y2VwdCBmb3IgbW9kdWxlcykuXHJcbi8vIFRoaXMgbW9kdWxlIGlzIGEgcnVudGltZSB1dGlsaXR5IGZvciBjbGVhbmVyIGNvbXBvbmVudCBtb2R1bGUgb3V0cHV0IGFuZCB3aWxsXHJcbi8vIGJlIGluY2x1ZGVkIGluIHRoZSBmaW5hbCB3ZWJwYWNrIHVzZXIgYnVuZGxlLlxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50IChcclxuICBzY3JpcHRFeHBvcnRzLFxyXG4gIHJlbmRlcixcclxuICBzdGF0aWNSZW5kZXJGbnMsXHJcbiAgZnVuY3Rpb25hbFRlbXBsYXRlLFxyXG4gIGluamVjdFN0eWxlcyxcclxuICBzY29wZUlkLFxyXG4gIG1vZHVsZUlkZW50aWZpZXIsIC8qIHNlcnZlciBvbmx5ICovXHJcbiAgc2hhZG93TW9kZSAvKiB2dWUtY2xpIG9ubHkgKi9cclxuKSB7XHJcbiAgLy8gVnVlLmV4dGVuZCBjb25zdHJ1Y3RvciBleHBvcnQgaW50ZXJvcFxyXG4gIHZhciBvcHRpb25zID0gdHlwZW9mIHNjcmlwdEV4cG9ydHMgPT09ICdmdW5jdGlvbidcclxuICAgID8gc2NyaXB0RXhwb3J0cy5vcHRpb25zXHJcbiAgICA6IHNjcmlwdEV4cG9ydHNcclxuXHJcbiAgLy8gcmVuZGVyIGZ1bmN0aW9uc1xyXG4gIGlmIChyZW5kZXIpIHtcclxuICAgIG9wdGlvbnMucmVuZGVyID0gcmVuZGVyXHJcbiAgICBvcHRpb25zLnN0YXRpY1JlbmRlckZucyA9IHN0YXRpY1JlbmRlckZuc1xyXG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlXHJcbiAgfVxyXG5cclxuICAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXHJcbiAgaWYgKGZ1bmN0aW9uYWxUZW1wbGF0ZSkge1xyXG4gICAgb3B0aW9ucy5mdW5jdGlvbmFsID0gdHJ1ZVxyXG4gIH1cclxuXHJcbiAgLy8gc2NvcGVkSWRcclxuICBpZiAoc2NvcGVJZCkge1xyXG4gICAgb3B0aW9ucy5fc2NvcGVJZCA9ICdkYXRhLXYtJyArIHNjb3BlSWRcclxuICB9XHJcblxyXG4gIHZhciBob29rXHJcbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHsgLy8gc2VydmVyIGJ1aWxkXHJcbiAgICBob29rID0gZnVuY3Rpb24gKGNvbnRleHQpIHtcclxuICAgICAgLy8gMi4zIGluamVjdGlvblxyXG4gICAgICBjb250ZXh0ID1cclxuICAgICAgICBjb250ZXh0IHx8IC8vIGNhY2hlZCBjYWxsXHJcbiAgICAgICAgKHRoaXMuJHZub2RlICYmIHRoaXMuJHZub2RlLnNzckNvbnRleHQpIHx8IC8vIHN0YXRlZnVsXHJcbiAgICAgICAgKHRoaXMucGFyZW50ICYmIHRoaXMucGFyZW50LiR2bm9kZSAmJiB0aGlzLnBhcmVudC4kdm5vZGUuc3NyQ29udGV4dCkgLy8gZnVuY3Rpb25hbFxyXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcclxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIGNvbnRleHQgPSBfX1ZVRV9TU1JfQ09OVEVYVF9fXHJcbiAgICAgIH1cclxuICAgICAgLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcclxuICAgICAgaWYgKGluamVjdFN0eWxlcykge1xyXG4gICAgICAgIGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIGNvbnRleHQpXHJcbiAgICAgIH1cclxuICAgICAgLy8gcmVnaXN0ZXIgY29tcG9uZW50IG1vZHVsZSBpZGVudGlmaWVyIGZvciBhc3luYyBjaHVuayBpbmZlcnJlbmNlXHJcbiAgICAgIGlmIChjb250ZXh0ICYmIGNvbnRleHQuX3JlZ2lzdGVyZWRDb21wb25lbnRzKSB7XHJcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXHJcbiAgICAvLyBuZXZlciBnZXRzIGNhbGxlZFxyXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rXHJcbiAgfSBlbHNlIGlmIChpbmplY3RTdHlsZXMpIHtcclxuICAgIGhvb2sgPSBzaGFkb3dNb2RlXHJcbiAgICAgID8gZnVuY3Rpb24gKCkgeyBpbmplY3RTdHlsZXMuY2FsbCh0aGlzLCB0aGlzLiRyb290LiRvcHRpb25zLnNoYWRvd1Jvb3QpIH1cclxuICAgICAgOiBpbmplY3RTdHlsZXNcclxuICB9XHJcblxyXG4gIGlmIChob29rKSB7XHJcbiAgICBpZiAob3B0aW9ucy5mdW5jdGlvbmFsKSB7XHJcbiAgICAgIC8vIGZvciB0ZW1wbGF0ZS1vbmx5IGhvdC1yZWxvYWQgYmVjYXVzZSBpbiB0aGF0IGNhc2UgdGhlIHJlbmRlciBmbiBkb2Vzbid0XHJcbiAgICAgIC8vIGdvIHRocm91Z2ggdGhlIG5vcm1hbGl6ZXJcclxuICAgICAgb3B0aW9ucy5faW5qZWN0U3R5bGVzID0gaG9va1xyXG4gICAgICAvLyByZWdpc3RlciBmb3IgZnVuY3Rpb2FsIGNvbXBvbmVudCBpbiB2dWUgZmlsZVxyXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlclxyXG4gICAgICBvcHRpb25zLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcldpdGhTdHlsZUluamVjdGlvbiAoaCwgY29udGV4dCkge1xyXG4gICAgICAgIGhvb2suY2FsbChjb250ZXh0KVxyXG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KVxyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHJlZ2lzdHJhdGlvbiBhcyBiZWZvcmVDcmVhdGUgaG9va1xyXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZVxyXG4gICAgICBvcHRpb25zLmJlZm9yZUNyZWF0ZSA9IGV4aXN0aW5nXHJcbiAgICAgICAgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spXHJcbiAgICAgICAgOiBbaG9va11cclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB7XHJcbiAgICBleHBvcnRzOiBzY3JpcHRFeHBvcnRzLFxyXG4gICAgb3B0aW9uczogb3B0aW9uc1xyXG4gIH1cclxufVxyXG4iLCJ2YXIgaGFzT3duUHJvcGVydHkgPSB7fS5oYXNPd25Qcm9wZXJ0eTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xyXG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xyXG59O1xyXG4iLCIvLyB0byBpbmRleGVkIG9iamVjdCwgdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcclxudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBJT2JqZWN0KGRlZmluZWQoaXQpKTtcclxufTtcclxuIiwidmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcclxudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XHJcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4vX2llOC1kb20tZGVmaW5lJyk7XHJcbnZhciBnT1BEID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxuXHJcbmV4cG9ydHMuZiA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BEIDogZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApIHtcclxuICBPID0gdG9JT2JqZWN0KE8pO1xyXG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcclxuICBpZiAoSUU4X0RPTV9ERUZJTkUpIHRyeSB7XHJcbiAgICByZXR1cm4gZ09QRChPLCBQKTtcclxuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cclxuICBpZiAoaGFzKE8sIFApKSByZXR1cm4gY3JlYXRlRGVzYyghcElFLmYuY2FsbChPLCBQKSwgT1tQXSk7XHJcbn07XHJcbiIsIi8vIDE5LjEuMi45IC8gMTUuMi4zLjIgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcclxudmFyIE9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChPKSB7XHJcbiAgTyA9IHRvT2JqZWN0KE8pO1xyXG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XHJcbiAgaWYgKHR5cGVvZiBPLmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgTyBpbnN0YW5jZW9mIE8uY29uc3RydWN0b3IpIHtcclxuICAgIHJldHVybiBPLmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcclxuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG8gOiBudWxsO1xyXG59O1xyXG4iLCJ2YXIgY29yZSA9IG1vZHVsZS5leHBvcnRzID0geyB2ZXJzaW9uOiAnMi42LjUnIH07XHJcbmlmICh0eXBlb2YgX19lID09ICdudW1iZXInKSBfX2UgPSBjb3JlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVuZGVmXHJcbiIsIi8vIG9wdGlvbmFsIC8gc2ltcGxlIGNvbnRleHQgYmluZGluZ1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChmbiwgdGhhdCwgbGVuZ3RoKSB7XHJcbiAgYUZ1bmN0aW9uKGZuKTtcclxuICBpZiAodGhhdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gZm47XHJcbiAgc3dpdGNoIChsZW5ndGgpIHtcclxuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEpO1xyXG4gICAgfTtcclxuICAgIGNhc2UgMjogcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIpO1xyXG4gICAgfTtcclxuICAgIGNhc2UgMzogcmV0dXJuIGZ1bmN0aW9uIChhLCBiLCBjKSB7XHJcbiAgICAgIHJldHVybiBmbi5jYWxsKHRoYXQsIGEsIGIsIGMpO1xyXG4gICAgfTtcclxuICB9XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgvKiAuLi5hcmdzICovKSB7XHJcbiAgICByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJndW1lbnRzKTtcclxuICB9O1xyXG59O1xyXG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwoaXQpLnNsaWNlKDgsIC0xKTtcclxufTtcclxuIiwiLy8gNy4xLjQgVG9JbnRlZ2VyXHJcbnZhciBjZWlsID0gTWF0aC5jZWlsO1xyXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBpc05hTihpdCA9ICtpdCkgPyAwIDogKGl0ID4gMCA/IGZsb29yIDogY2VpbCkoaXQpO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChtZXRob2QsIGFyZykge1xyXG4gIHJldHVybiAhIW1ldGhvZCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1jYWxsXHJcbiAgICBhcmcgPyBtZXRob2QuY2FsbChudWxsLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIDEpIDogbWV0aG9kLmNhbGwobnVsbCk7XHJcbiAgfSk7XHJcbn07XHJcbiIsIi8vIDcuMS4xIFRvUHJpbWl0aXZlKGlucHV0IFssIFByZWZlcnJlZFR5cGVdKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2VcclxuLy8gYW5kIHRoZSBzZWNvbmQgYXJndW1lbnQgLSBmbGFnIC0gcHJlZmVycmVkIHR5cGUgaXMgYSBzdHJpbmdcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFMpIHtcclxuICBpZiAoIWlzT2JqZWN0KGl0KSkgcmV0dXJuIGl0O1xyXG4gIHZhciBmbiwgdmFsO1xyXG4gIGlmIChTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xyXG4gIGlmICh0eXBlb2YgKGZuID0gaXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xyXG4gIGlmICghUyAmJiB0eXBlb2YgKGZuID0gaXQudG9TdHJpbmcpID09ICdmdW5jdGlvbicgJiYgIWlzT2JqZWN0KHZhbCA9IGZuLmNhbGwoaXQpKSkgcmV0dXJuIHZhbDtcclxuICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjb252ZXJ0IG9iamVjdCB0byBwcmltaXRpdmUgdmFsdWVcIik7XHJcbn07XHJcbiIsIi8vIDcuMi4xIFJlcXVpcmVPYmplY3RDb2VyY2libGUoYXJndW1lbnQpXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgaWYgKGl0ID09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKFwiQ2FuJ3QgY2FsbCBtZXRob2Qgb24gIFwiICsgaXQpO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxuIiwiLy8gbW9zdCBPYmplY3QgbWV0aG9kcyBieSBFUzYgc2hvdWxkIGFjY2VwdCBwcmltaXRpdmVzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIGV4ZWMpIHtcclxuICB2YXIgZm4gPSAoY29yZS5PYmplY3QgfHwge30pW0tFWV0gfHwgT2JqZWN0W0tFWV07XHJcbiAgdmFyIGV4cCA9IHt9O1xyXG4gIGV4cFtLRVldID0gZXhlYyhmbik7XHJcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IGZuKDEpOyB9KSwgJ09iamVjdCcsIGV4cCk7XHJcbn07XHJcbiIsIi8vIDAgLT4gQXJyYXkjZm9yRWFjaFxyXG4vLyAxIC0+IEFycmF5I21hcFxyXG4vLyAyIC0+IEFycmF5I2ZpbHRlclxyXG4vLyAzIC0+IEFycmF5I3NvbWVcclxuLy8gNCAtPiBBcnJheSNldmVyeVxyXG4vLyA1IC0+IEFycmF5I2ZpbmRcclxuLy8gNiAtPiBBcnJheSNmaW5kSW5kZXhcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgYXNjID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoVFlQRSwgJGNyZWF0ZSkge1xyXG4gIHZhciBJU19NQVAgPSBUWVBFID09IDE7XHJcbiAgdmFyIElTX0ZJTFRFUiA9IFRZUEUgPT0gMjtcclxuICB2YXIgSVNfU09NRSA9IFRZUEUgPT0gMztcclxuICB2YXIgSVNfRVZFUlkgPSBUWVBFID09IDQ7XHJcbiAgdmFyIElTX0ZJTkRfSU5ERVggPSBUWVBFID09IDY7XHJcbiAgdmFyIE5PX0hPTEVTID0gVFlQRSA9PSA1IHx8IElTX0ZJTkRfSU5ERVg7XHJcbiAgdmFyIGNyZWF0ZSA9ICRjcmVhdGUgfHwgYXNjO1xyXG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGNhbGxiYWNrZm4sIHRoYXQpIHtcclxuICAgIHZhciBPID0gdG9PYmplY3QoJHRoaXMpO1xyXG4gICAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xyXG4gICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgdGhhdCwgMyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoc2VsZi5sZW5ndGgpO1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHZhciByZXN1bHQgPSBJU19NQVAgPyBjcmVhdGUoJHRoaXMsIGxlbmd0aCkgOiBJU19GSUxURVIgPyBjcmVhdGUoJHRoaXMsIDApIDogdW5kZWZpbmVkO1xyXG4gICAgdmFyIHZhbCwgcmVzO1xyXG4gICAgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChOT19IT0xFUyB8fCBpbmRleCBpbiBzZWxmKSB7XHJcbiAgICAgIHZhbCA9IHNlbGZbaW5kZXhdO1xyXG4gICAgICByZXMgPSBmKHZhbCwgaW5kZXgsIE8pO1xyXG4gICAgICBpZiAoVFlQRSkge1xyXG4gICAgICAgIGlmIChJU19NQVApIHJlc3VsdFtpbmRleF0gPSByZXM7ICAgLy8gbWFwXHJcbiAgICAgICAgZWxzZSBpZiAocmVzKSBzd2l0Y2ggKFRZUEUpIHtcclxuICAgICAgICAgIGNhc2UgMzogcmV0dXJuIHRydWU7ICAgICAgICAgICAgIC8vIHNvbWVcclxuICAgICAgICAgIGNhc2UgNTogcmV0dXJuIHZhbDsgICAgICAgICAgICAgIC8vIGZpbmRcclxuICAgICAgICAgIGNhc2UgNjogcmV0dXJuIGluZGV4OyAgICAgICAgICAgIC8vIGZpbmRJbmRleFxyXG4gICAgICAgICAgY2FzZSAyOiByZXN1bHQucHVzaCh2YWwpOyAgICAgICAgLy8gZmlsdGVyXHJcbiAgICAgICAgfSBlbHNlIGlmIChJU19FVkVSWSkgcmV0dXJuIGZhbHNlOyAvLyBldmVyeVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSVNfRklORF9JTkRFWCA/IC0xIDogSVNfU09NRSB8fCBJU19FVkVSWSA/IElTX0VWRVJZIDogcmVzdWx0O1xyXG4gIH07XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykpIHtcclxuICB2YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcclxuICB2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbiAgdmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxuICB2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4gIHZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xyXG4gIHZhciAkYnVmZmVyID0gcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJyk7XHJcbiAgdmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG4gIHZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcclxuICB2YXIgcHJvcGVydHlEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xyXG4gIHZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG4gIHZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xyXG4gIHZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbiAgdmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbiAgdmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xyXG4gIHZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xyXG4gIHZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG4gIHZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxuICB2YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcclxuICB2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuICB2YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxuICB2YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XHJcbiAgdmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcclxuICB2YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbiAgdmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XHJcbiAgdmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XHJcbiAgdmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xyXG4gIHZhciB3a3MgPSByZXF1aXJlKCcuL193a3MnKTtcclxuICB2YXIgY3JlYXRlQXJyYXlNZXRob2QgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJyk7XHJcbiAgdmFyIGNyZWF0ZUFycmF5SW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpO1xyXG4gIHZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XHJcbiAgdmFyIEFycmF5SXRlcmF0b3JzID0gcmVxdWlyZSgnLi9lczYuYXJyYXkuaXRlcmF0b3InKTtcclxuICB2YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XHJcbiAgdmFyICRpdGVyRGV0ZWN0ID0gcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKTtcclxuICB2YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XHJcbiAgdmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcclxuICB2YXIgYXJyYXlDb3B5V2l0aGluID0gcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKTtcclxuICB2YXIgJERQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcbiAgdmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcclxuICB2YXIgZFAgPSAkRFAuZjtcclxuICB2YXIgZ09QRCA9ICRHT1BELmY7XHJcbiAgdmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcclxuICB2YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcclxuICB2YXIgVWludDhBcnJheSA9IGdsb2JhbC5VaW50OEFycmF5O1xyXG4gIHZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xyXG4gIHZhciBTSEFSRURfQlVGRkVSID0gJ1NoYXJlZCcgKyBBUlJBWV9CVUZGRVI7XHJcbiAgdmFyIEJZVEVTX1BFUl9FTEVNRU5UID0gJ0JZVEVTX1BFUl9FTEVNRU5UJztcclxuICB2YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XHJcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheVtQUk9UT1RZUEVdO1xyXG4gIHZhciAkQXJyYXlCdWZmZXIgPSAkYnVmZmVyLkFycmF5QnVmZmVyO1xyXG4gIHZhciAkRGF0YVZpZXcgPSAkYnVmZmVyLkRhdGFWaWV3O1xyXG4gIHZhciBhcnJheUZvckVhY2ggPSBjcmVhdGVBcnJheU1ldGhvZCgwKTtcclxuICB2YXIgYXJyYXlGaWx0ZXIgPSBjcmVhdGVBcnJheU1ldGhvZCgyKTtcclxuICB2YXIgYXJyYXlTb21lID0gY3JlYXRlQXJyYXlNZXRob2QoMyk7XHJcbiAgdmFyIGFycmF5RXZlcnkgPSBjcmVhdGVBcnJheU1ldGhvZCg0KTtcclxuICB2YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XHJcbiAgdmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XHJcbiAgdmFyIGFycmF5SW5jbHVkZXMgPSBjcmVhdGVBcnJheUluY2x1ZGVzKHRydWUpO1xyXG4gIHZhciBhcnJheUluZGV4T2YgPSBjcmVhdGVBcnJheUluY2x1ZGVzKGZhbHNlKTtcclxuICB2YXIgYXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9ycy52YWx1ZXM7XHJcbiAgdmFyIGFycmF5S2V5cyA9IEFycmF5SXRlcmF0b3JzLmtleXM7XHJcbiAgdmFyIGFycmF5RW50cmllcyA9IEFycmF5SXRlcmF0b3JzLmVudHJpZXM7XHJcbiAgdmFyIGFycmF5TGFzdEluZGV4T2YgPSBBcnJheVByb3RvLmxhc3RJbmRleE9mO1xyXG4gIHZhciBhcnJheVJlZHVjZSA9IEFycmF5UHJvdG8ucmVkdWNlO1xyXG4gIHZhciBhcnJheVJlZHVjZVJpZ2h0ID0gQXJyYXlQcm90by5yZWR1Y2VSaWdodDtcclxuICB2YXIgYXJyYXlKb2luID0gQXJyYXlQcm90by5qb2luO1xyXG4gIHZhciBhcnJheVNvcnQgPSBBcnJheVByb3RvLnNvcnQ7XHJcbiAgdmFyIGFycmF5U2xpY2UgPSBBcnJheVByb3RvLnNsaWNlO1xyXG4gIHZhciBhcnJheVRvU3RyaW5nID0gQXJyYXlQcm90by50b1N0cmluZztcclxuICB2YXIgYXJyYXlUb0xvY2FsZVN0cmluZyA9IEFycmF5UHJvdG8udG9Mb2NhbGVTdHJpbmc7XHJcbiAgdmFyIElURVJBVE9SID0gd2tzKCdpdGVyYXRvcicpO1xyXG4gIHZhciBUQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XHJcbiAgdmFyIFRZUEVEX0NPTlNUUlVDVE9SID0gdWlkKCd0eXBlZF9jb25zdHJ1Y3RvcicpO1xyXG4gIHZhciBERUZfQ09OU1RSVUNUT1IgPSB1aWQoJ2RlZl9jb25zdHJ1Y3RvcicpO1xyXG4gIHZhciBBTExfQ09OU1RSVUNUT1JTID0gJHR5cGVkLkNPTlNUUjtcclxuICB2YXIgVFlQRURfQVJSQVkgPSAkdHlwZWQuVFlQRUQ7XHJcbiAgdmFyIFZJRVcgPSAkdHlwZWQuVklFVztcclxuICB2YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xyXG5cclxuICB2YXIgJG1hcCA9IGNyZWF0ZUFycmF5TWV0aG9kKDEsIGZ1bmN0aW9uIChPLCBsZW5ndGgpIHtcclxuICAgIHJldHVybiBhbGxvY2F0ZShzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGVuZ3RoKTtcclxuICB9KTtcclxuXHJcbiAgdmFyIExJVFRMRV9FTkRJQU4gPSBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICAgIHJldHVybiBuZXcgVWludDhBcnJheShuZXcgVWludDE2QXJyYXkoWzFdKS5idWZmZXIpWzBdID09PSAxO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgRk9SQ0VEX1NFVCA9ICEhVWludDhBcnJheSAmJiAhIVVpbnQ4QXJyYXlbUFJPVE9UWVBFXS5zZXQgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgbmV3IFVpbnQ4QXJyYXkoMSkuc2V0KHt9KTtcclxuICB9KTtcclxuXHJcbiAgdmFyIHRvT2Zmc2V0ID0gZnVuY3Rpb24gKGl0LCBCWVRFUykge1xyXG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihpdCk7XHJcbiAgICBpZiAob2Zmc2V0IDwgMCB8fCBvZmZzZXQgJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xyXG4gICAgcmV0dXJuIG9mZnNldDtcclxuICB9O1xyXG5cclxuICB2YXIgdmFsaWRhdGUgPSBmdW5jdGlvbiAoaXQpIHtcclxuICAgIGlmIChpc09iamVjdChpdCkgJiYgVFlQRURfQVJSQVkgaW4gaXQpIHJldHVybiBpdDtcclxuICAgIHRocm93IFR5cGVFcnJvcihpdCArICcgaXMgbm90IGEgdHlwZWQgYXJyYXkhJyk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGFsbG9jYXRlID0gZnVuY3Rpb24gKEMsIGxlbmd0aCkge1xyXG4gICAgaWYgKCEoaXNPYmplY3QoQykgJiYgVFlQRURfQ09OU1RSVUNUT1IgaW4gQykpIHtcclxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdJdCBpcyBub3QgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciEnKTtcclxuICAgIH0gcmV0dXJuIG5ldyBDKGxlbmd0aCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHNwZWNpZXNGcm9tTGlzdCA9IGZ1bmN0aW9uIChPLCBsaXN0KSB7XHJcbiAgICByZXR1cm4gZnJvbUxpc3Qoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSksIGxpc3QpO1xyXG4gIH07XHJcblxyXG4gIHZhciBmcm9tTGlzdCA9IGZ1bmN0aW9uIChDLCBsaXN0KSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIGxlbmd0aCA9IGxpc3QubGVuZ3RoO1xyXG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKEMsIGxlbmd0aCk7XHJcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBsaXN0W2luZGV4KytdO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG5cclxuICB2YXIgYWRkR2V0dGVyID0gZnVuY3Rpb24gKGl0LCBrZXksIGludGVybmFsKSB7XHJcbiAgICBkUChpdCwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fZFtpbnRlcm5hbF07IH0gfSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyICRmcm9tID0gZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBmbiwgdGhpc0FyZyAqLykge1xyXG4gICAgdmFyIE8gPSB0b09iamVjdChzb3VyY2UpO1xyXG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIG1hcGZuID0gYUxlbiA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XHJcbiAgICB2YXIgbWFwcGluZyA9IG1hcGZuICE9PSB1bmRlZmluZWQ7XHJcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xyXG4gICAgdmFyIGksIGxlbmd0aCwgdmFsdWVzLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xyXG4gICAgaWYgKGl0ZXJGbiAhPSB1bmRlZmluZWQgJiYgIWlzQXJyYXlJdGVyKGl0ZXJGbikpIHtcclxuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCB2YWx1ZXMgPSBbXSwgaSA9IDA7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaSsrKSB7XHJcbiAgICAgICAgdmFsdWVzLnB1c2goc3RlcC52YWx1ZSk7XHJcbiAgICAgIH0gTyA9IHZhbHVlcztcclxuICAgIH1cclxuICAgIGlmIChtYXBwaW5nICYmIGFMZW4gPiAyKSBtYXBmbiA9IGN0eChtYXBmbiwgYXJndW1lbnRzWzJdLCAyKTtcclxuICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKSwgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTsgbGVuZ3RoID4gaTsgaSsrKSB7XHJcbiAgICAgIHJlc3VsdFtpXSA9IG1hcHBpbmcgPyBtYXBmbihPW2ldLCBpKSA6IE9baV07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIHZhciAkb2YgPSBmdW5jdGlvbiBvZigvKiAuLi5pdGVtcyAqLykge1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIHJlc3VsdCA9IGFsbG9jYXRlKHRoaXMsIGxlbmd0aCk7XHJcbiAgICB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHJlc3VsdFtpbmRleF0gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIC8vIGlPUyBTYWZhcmkgNi54IGZhaWxzIGhlcmVcclxuICB2YXIgVE9fTE9DQUxFX0JVRyA9ICEhVWludDhBcnJheSAmJiBmYWlscyhmdW5jdGlvbiAoKSB7IGFycmF5VG9Mb2NhbGVTdHJpbmcuY2FsbChuZXcgVWludDhBcnJheSgxKSk7IH0pO1xyXG5cclxuICB2YXIgJHRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9Mb2NhbGVTdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gYXJyYXlUb0xvY2FsZVN0cmluZy5hcHBseShUT19MT0NBTEVfQlVHID8gYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpKSA6IHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xyXG4gIH07XHJcblxyXG4gIHZhciBwcm90byA9IHtcclxuICAgIGNvcHlXaXRoaW46IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCAvKiAsIGVuZCAqLykge1xyXG4gICAgICByZXR1cm4gYXJyYXlDb3B5V2l0aGluLmNhbGwodmFsaWRhdGUodGhpcyksIHRhcmdldCwgc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgICAgcmV0dXJuIGFycmF5RXZlcnkodmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBmaWxsOiBmdW5jdGlvbiBmaWxsKHZhbHVlIC8qICwgc3RhcnQsIGVuZCAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgICAgIHJldHVybiBhcnJheUZpbGwuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgZmlsdGVyOiBmdW5jdGlvbiBmaWx0ZXIoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgICAgcmV0dXJuIHNwZWNpZXNGcm9tTGlzdCh0aGlzLCBhcnJheUZpbHRlcih2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbixcclxuICAgICAgICBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCkpO1xyXG4gICAgfSxcclxuICAgIGZpbmQ6IGZ1bmN0aW9uIGZpbmQocHJlZGljYXRlIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgICByZXR1cm4gYXJyYXlGaW5kKHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUZpbmRJbmRleCh2YWxpZGF0ZSh0aGlzKSwgcHJlZGljYXRlLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgICBhcnJheUZvckVhY2godmFsaWRhdGUodGhpcyksIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBpbmRleE9mOiBmdW5jdGlvbiBpbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcclxuICAgICAgcmV0dXJuIGFycmF5SW5kZXhPZih2YWxpZGF0ZSh0aGlzKSwgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUluY2x1ZGVzKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgam9pbjogZnVuY3Rpb24gam9pbihzZXBhcmF0b3IpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgICByZXR1cm4gYXJyYXlKb2luLmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xyXG4gICAgfSxcclxuICAgIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuICAgICAgcmV0dXJuIGFycmF5TGFzdEluZGV4T2YuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgbWFwOiBmdW5jdGlvbiBtYXAobWFwZm4gLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICAgIHJldHVybiAkbWFwKHZhbGlkYXRlKHRoaXMpLCBtYXBmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2UuYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgICByZXR1cm4gYXJyYXlSZWR1Y2VSaWdodC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xyXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgIHZhciBsZW5ndGggPSB2YWxpZGF0ZSh0aGF0KS5sZW5ndGg7XHJcbiAgICAgIHZhciBtaWRkbGUgPSBNYXRoLmZsb29yKGxlbmd0aCAvIDIpO1xyXG4gICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICB2YXIgdmFsdWU7XHJcbiAgICAgIHdoaWxlIChpbmRleCA8IG1pZGRsZSkge1xyXG4gICAgICAgIHZhbHVlID0gdGhhdFtpbmRleF07XHJcbiAgICAgICAgdGhhdFtpbmRleCsrXSA9IHRoYXRbLS1sZW5ndGhdO1xyXG4gICAgICAgIHRoYXRbbGVuZ3RoXSA9IHZhbHVlO1xyXG4gICAgICB9IHJldHVybiB0aGF0O1xyXG4gICAgfSxcclxuICAgIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgICAgcmV0dXJuIGFycmF5U29tZSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XHJcbiAgICAgIHJldHVybiBhcnJheVNvcnQuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgY29tcGFyZWZuKTtcclxuICAgIH0sXHJcbiAgICBzdWJhcnJheTogZnVuY3Rpb24gc3ViYXJyYXkoYmVnaW4sIGVuZCkge1xyXG4gICAgICB2YXIgTyA9IHZhbGlkYXRlKHRoaXMpO1xyXG4gICAgICB2YXIgbGVuZ3RoID0gTy5sZW5ndGg7XHJcbiAgICAgIHZhciAkYmVnaW4gPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbmd0aCk7XHJcbiAgICAgIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pKShcclxuICAgICAgICBPLmJ1ZmZlcixcclxuICAgICAgICBPLmJ5dGVPZmZzZXQgKyAkYmVnaW4gKiBPLkJZVEVTX1BFUl9FTEVNRU5ULFxyXG4gICAgICAgIHRvTGVuZ3RoKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbmd0aCA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbmd0aCkpIC0gJGJlZ2luKVxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciAkc2xpY2UgPSBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XHJcbiAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5U2xpY2UuY2FsbCh2YWxpZGF0ZSh0aGlzKSwgc3RhcnQsIGVuZCkpO1xyXG4gIH07XHJcblxyXG4gIHZhciAkc2V0ID0gZnVuY3Rpb24gc2V0KGFycmF5TGlrZSAvKiAsIG9mZnNldCAqLykge1xyXG4gICAgdmFsaWRhdGUodGhpcyk7XHJcbiAgICB2YXIgb2Zmc2V0ID0gdG9PZmZzZXQoYXJndW1lbnRzWzFdLCAxKTtcclxuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcclxuICAgIHZhciBzcmMgPSB0b09iamVjdChhcnJheUxpa2UpO1xyXG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHNyYy5sZW5ndGgpO1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIGlmIChsZW4gKyBvZmZzZXQgPiBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcclxuICAgIHdoaWxlIChpbmRleCA8IGxlbikgdGhpc1tvZmZzZXQgKyBpbmRleF0gPSBzcmNbaW5kZXgrK107XHJcbiAgfTtcclxuXHJcbiAgdmFyICRpdGVyYXRvcnMgPSB7XHJcbiAgICBlbnRyaWVzOiBmdW5jdGlvbiBlbnRyaWVzKCkge1xyXG4gICAgICByZXR1cm4gYXJyYXlFbnRyaWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xyXG4gICAgfSxcclxuICAgIGtleXM6IGZ1bmN0aW9uIGtleXMoKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUtleXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgdmFsdWVzOiBmdW5jdGlvbiB2YWx1ZXMoKSB7XHJcbiAgICAgIHJldHVybiBhcnJheVZhbHVlcy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICB2YXIgaXNUQUluZGV4ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QodGFyZ2V0KVxyXG4gICAgICAmJiB0YXJnZXRbVFlQRURfQVJSQVldXHJcbiAgICAgICYmIHR5cGVvZiBrZXkgIT0gJ3N5bWJvbCdcclxuICAgICAgJiYga2V5IGluIHRhcmdldFxyXG4gICAgICAmJiBTdHJpbmcoK2tleSkgPT0gU3RyaW5nKGtleSk7XHJcbiAgfTtcclxuICB2YXIgJGdldERlc2MgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIHtcclxuICAgIHJldHVybiBpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxyXG4gICAgICA/IHByb3BlcnR5RGVzYygyLCB0YXJnZXRba2V5XSlcclxuICAgICAgOiBnT1BEKHRhcmdldCwga2V5KTtcclxuICB9O1xyXG4gIHZhciAkc2V0RGVzYyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBkZXNjKSB7XHJcbiAgICBpZiAoaXNUQUluZGV4KHRhcmdldCwga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSlcclxuICAgICAgJiYgaXNPYmplY3QoZGVzYylcclxuICAgICAgJiYgaGFzKGRlc2MsICd2YWx1ZScpXHJcbiAgICAgICYmICFoYXMoZGVzYywgJ2dldCcpXHJcbiAgICAgICYmICFoYXMoZGVzYywgJ3NldCcpXHJcbiAgICAgIC8vIFRPRE86IGFkZCB2YWxpZGF0aW9uIGRlc2NyaXB0b3Igdy9vIGNhbGxpbmcgYWNjZXNzb3JzXHJcbiAgICAgICYmICFkZXNjLmNvbmZpZ3VyYWJsZVxyXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnd3JpdGFibGUnKSB8fCBkZXNjLndyaXRhYmxlKVxyXG4gICAgICAmJiAoIWhhcyhkZXNjLCAnZW51bWVyYWJsZScpIHx8IGRlc2MuZW51bWVyYWJsZSlcclxuICAgICkge1xyXG4gICAgICB0YXJnZXRba2V5XSA9IGRlc2MudmFsdWU7XHJcbiAgICAgIHJldHVybiB0YXJnZXQ7XHJcbiAgICB9IHJldHVybiBkUCh0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgfTtcclxuXHJcbiAgaWYgKCFBTExfQ09OU1RSVUNUT1JTKSB7XHJcbiAgICAkR09QRC5mID0gJGdldERlc2M7XHJcbiAgICAkRFAuZiA9ICRzZXREZXNjO1xyXG4gIH1cclxuXHJcbiAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhQUxMX0NPTlNUUlVDVE9SUywgJ09iamVjdCcsIHtcclxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcjogJGdldERlc2MsXHJcbiAgICBkZWZpbmVQcm9wZXJ0eTogJHNldERlc2NcclxuICB9KTtcclxuXHJcbiAgaWYgKGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb1N0cmluZy5jYWxsKHt9KTsgfSkpIHtcclxuICAgIGFycmF5VG9TdHJpbmcgPSBhcnJheVRvTG9jYWxlU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUpvaW4uY2FsbCh0aGlzKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICB2YXIgJFR5cGVkQXJyYXlQcm90b3R5cGUkID0gcmVkZWZpbmVBbGwoe30sIHByb3RvKTtcclxuICByZWRlZmluZUFsbCgkVHlwZWRBcnJheVByb3RvdHlwZSQsICRpdGVyYXRvcnMpO1xyXG4gIGhpZGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBJVEVSQVRPUiwgJGl0ZXJhdG9ycy52YWx1ZXMpO1xyXG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwge1xyXG4gICAgc2xpY2U6ICRzbGljZSxcclxuICAgIHNldDogJHNldCxcclxuICAgIGNvbnN0cnVjdG9yOiBmdW5jdGlvbiAoKSB7IC8qIG5vb3AgKi8gfSxcclxuICAgIHRvU3RyaW5nOiBhcnJheVRvU3RyaW5nLFxyXG4gICAgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZ1xyXG4gIH0pO1xyXG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdidWZmZXInLCAnYicpO1xyXG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlT2Zmc2V0JywgJ28nKTtcclxuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnYnl0ZUxlbmd0aCcsICdsJyk7XHJcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2xlbmd0aCcsICdlJyk7XHJcbiAgZFAoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCBUQUcsIHtcclxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tUWVBFRF9BUlJBWV07IH1cclxuICB9KTtcclxuXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG1heC1zdGF0ZW1lbnRzXHJcbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBCWVRFUywgd3JhcHBlciwgQ0xBTVBFRCkge1xyXG4gICAgQ0xBTVBFRCA9ICEhQ0xBTVBFRDtcclxuICAgIHZhciBOQU1FID0gS0VZICsgKENMQU1QRUQgPyAnQ2xhbXBlZCcgOiAnJykgKyAnQXJyYXknO1xyXG4gICAgdmFyIEdFVFRFUiA9ICdnZXQnICsgS0VZO1xyXG4gICAgdmFyIFNFVFRFUiA9ICdzZXQnICsgS0VZO1xyXG4gICAgdmFyIFR5cGVkQXJyYXkgPSBnbG9iYWxbTkFNRV07XHJcbiAgICB2YXIgQmFzZSA9IFR5cGVkQXJyYXkgfHwge307XHJcbiAgICB2YXIgVEFDID0gVHlwZWRBcnJheSAmJiBnZXRQcm90b3R5cGVPZihUeXBlZEFycmF5KTtcclxuICAgIHZhciBGT1JDRUQgPSAhVHlwZWRBcnJheSB8fCAhJHR5cGVkLkFCVjtcclxuICAgIHZhciBPID0ge307XHJcbiAgICB2YXIgVHlwZWRBcnJheVByb3RvdHlwZSA9IFR5cGVkQXJyYXkgJiYgVHlwZWRBcnJheVtQUk9UT1RZUEVdO1xyXG4gICAgdmFyIGdldHRlciA9IGZ1bmN0aW9uICh0aGF0LCBpbmRleCkge1xyXG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XHJcbiAgICAgIHJldHVybiBkYXRhLnZbR0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCBMSVRUTEVfRU5ESUFOKTtcclxuICAgIH07XHJcbiAgICB2YXIgc2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4LCB2YWx1ZSkge1xyXG4gICAgICB2YXIgZGF0YSA9IHRoYXQuX2Q7XHJcbiAgICAgIGlmIChDTEFNUEVEKSB2YWx1ZSA9ICh2YWx1ZSA9IE1hdGgucm91bmQodmFsdWUpKSA8IDAgPyAwIDogdmFsdWUgPiAweGZmID8gMHhmZiA6IHZhbHVlICYgMHhmZjtcclxuICAgICAgZGF0YS52W1NFVFRFUl0oaW5kZXggKiBCWVRFUyArIGRhdGEubywgdmFsdWUsIExJVFRMRV9FTkRJQU4pO1xyXG4gICAgfTtcclxuICAgIHZhciBhZGRFbGVtZW50ID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XHJcbiAgICAgIGRQKHRoYXQsIGluZGV4LCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICByZXR1cm4gZ2V0dGVyKHRoaXMsIGluZGV4KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICByZXR1cm4gc2V0dGVyKHRoaXMsIGluZGV4LCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIGlmIChGT1JDRUQpIHtcclxuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcclxuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUsICdfZCcpO1xyXG4gICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgdmFyIG9mZnNldCA9IDA7XHJcbiAgICAgICAgdmFyIGJ1ZmZlciwgYnl0ZUxlbmd0aCwgbGVuZ3RoLCBrbGFzcztcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSB7XHJcbiAgICAgICAgICBsZW5ndGggPSB0b0luZGV4KGRhdGEpO1xyXG4gICAgICAgICAgYnl0ZUxlbmd0aCA9IGxlbmd0aCAqIEJZVEVTO1xyXG4gICAgICAgICAgYnVmZmVyID0gbmV3ICRBcnJheUJ1ZmZlcihieXRlTGVuZ3RoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcclxuICAgICAgICAgIGJ1ZmZlciA9IGRhdGE7XHJcbiAgICAgICAgICBvZmZzZXQgPSB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyk7XHJcbiAgICAgICAgICB2YXIgJGxlbiA9IGRhdGEuYnl0ZUxlbmd0aDtcclxuICAgICAgICAgIGlmICgkbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgaWYgKCRsZW4gJSBCWVRFUykgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xyXG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gJGxlbiAtIG9mZnNldDtcclxuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggPCAwKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBieXRlTGVuZ3RoID0gdG9MZW5ndGgoJGxlbmd0aCkgKiBCWVRFUztcclxuICAgICAgICAgICAgaWYgKGJ5dGVMZW5ndGggKyBvZmZzZXQgPiAkbGVuKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBsZW5ndGggPSBieXRlTGVuZ3RoIC8gQllURVM7XHJcbiAgICAgICAgfSBlbHNlIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSB7XHJcbiAgICAgICAgICByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiAkZnJvbS5jYWxsKFR5cGVkQXJyYXksIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoaWRlKHRoYXQsICdfZCcsIHtcclxuICAgICAgICAgIGI6IGJ1ZmZlcixcclxuICAgICAgICAgIG86IG9mZnNldCxcclxuICAgICAgICAgIGw6IGJ5dGVMZW5ndGgsXHJcbiAgICAgICAgICBlOiBsZW5ndGgsXHJcbiAgICAgICAgICB2OiBuZXcgJERhdGFWaWV3KGJ1ZmZlcilcclxuICAgICAgICB9KTtcclxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIGFkZEVsZW1lbnQodGhhdCwgaW5kZXgrKyk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheVtQUk9UT1RZUEVdID0gY3JlYXRlKCRUeXBlZEFycmF5UHJvdG90eXBlJCk7XHJcbiAgICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgJ2NvbnN0cnVjdG9yJywgVHlwZWRBcnJheSk7XHJcbiAgICB9IGVsc2UgaWYgKCFmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgIFR5cGVkQXJyYXkoMSk7XHJcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICBuZXcgVHlwZWRBcnJheSgtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICB9KSB8fCAhJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHtcclxuICAgICAgbmV3IFR5cGVkQXJyYXkoKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICAgICAgbmV3IFR5cGVkQXJyYXkobnVsbCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICAgIG5ldyBUeXBlZEFycmF5KDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICAgIG5ldyBUeXBlZEFycmF5KGl0ZXIpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgfSwgdHJ1ZSkpIHtcclxuICAgICAgVHlwZWRBcnJheSA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGRhdGEsICRvZmZzZXQsICRsZW5ndGgpIHtcclxuICAgICAgICBhbkluc3RhbmNlKHRoYXQsIFR5cGVkQXJyYXksIE5BTUUpO1xyXG4gICAgICAgIHZhciBrbGFzcztcclxuICAgICAgICAvLyBgd3NgIG1vZHVsZSBidWcsIHRlbXBvcmFyaWx5IHJlbW92ZSB2YWxpZGF0aW9uIGxlbmd0aCBmb3IgVWludDhBcnJheVxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJzb2NrZXRzL3dzL3B1bGwvNjQ1XHJcbiAgICAgICAgaWYgKCFpc09iamVjdChkYXRhKSkgcmV0dXJuIG5ldyBCYXNlKHRvSW5kZXgoZGF0YSkpO1xyXG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgJEFycmF5QnVmZmVyIHx8IChrbGFzcyA9IGNsYXNzb2YoZGF0YSkpID09IEFSUkFZX0JVRkZFUiB8fCBrbGFzcyA9PSBTSEFSRURfQlVGRkVSKSB7XHJcbiAgICAgICAgICByZXR1cm4gJGxlbmd0aCAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpLCAkbGVuZ3RoKVxyXG4gICAgICAgICAgICA6ICRvZmZzZXQgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgID8gbmV3IEJhc2UoZGF0YSwgdG9PZmZzZXQoJG9mZnNldCwgQllURVMpKVxyXG4gICAgICAgICAgICAgIDogbmV3IEJhc2UoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChUWVBFRF9BUlJBWSBpbiBkYXRhKSByZXR1cm4gZnJvbUxpc3QoVHlwZWRBcnJheSwgZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBhcnJheUZvckVhY2goVEFDICE9PSBGdW5jdGlvbi5wcm90b3R5cGUgPyBnT1BOKEJhc2UpLmNvbmNhdChnT1BOKFRBQykpIDogZ09QTihCYXNlKSwgZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICghKGtleSBpbiBUeXBlZEFycmF5KSkgaGlkZShUeXBlZEFycmF5LCBrZXksIEJhc2Vba2V5XSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBUeXBlZEFycmF5UHJvdG90eXBlO1xyXG4gICAgICBpZiAoIUxJQlJBUlkpIFR5cGVkQXJyYXlQcm90b3R5cGUuY29uc3RydWN0b3IgPSBUeXBlZEFycmF5O1xyXG4gICAgfVxyXG4gICAgdmFyICRuYXRpdmVJdGVyYXRvciA9IFR5cGVkQXJyYXlQcm90b3R5cGVbSVRFUkFUT1JdO1xyXG4gICAgdmFyIENPUlJFQ1RfSVRFUl9OQU1FID0gISEkbmF0aXZlSXRlcmF0b3JcclxuICAgICAgJiYgKCRuYXRpdmVJdGVyYXRvci5uYW1lID09ICd2YWx1ZXMnIHx8ICRuYXRpdmVJdGVyYXRvci5uYW1lID09IHVuZGVmaW5lZCk7XHJcbiAgICB2YXIgJGl0ZXJhdG9yID0gJGl0ZXJhdG9ycy52YWx1ZXM7XHJcbiAgICBoaWRlKFR5cGVkQXJyYXksIFRZUEVEX0NPTlNUUlVDVE9SLCB0cnVlKTtcclxuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgVFlQRURfQVJSQVksIE5BTUUpO1xyXG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcclxuICAgIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgREVGX0NPTlNUUlVDVE9SLCBUeXBlZEFycmF5KTtcclxuXHJcbiAgICBpZiAoQ0xBTVBFRCA/IG5ldyBUeXBlZEFycmF5KDEpW1RBR10gIT0gTkFNRSA6ICEoVEFHIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSB7XHJcbiAgICAgIGRQKFR5cGVkQXJyYXlQcm90b3R5cGUsIFRBRywge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gTkFNRTsgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBPW05BTUVdID0gVHlwZWRBcnJheTtcclxuXHJcbiAgICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChUeXBlZEFycmF5ICE9IEJhc2UpLCBPKTtcclxuXHJcbiAgICAkZXhwb3J0KCRleHBvcnQuUywgTkFNRSwge1xyXG4gICAgICBCWVRFU19QRVJfRUxFTUVOVDogQllURVNcclxuICAgIH0pO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkgeyBCYXNlLm9mLmNhbGwoVHlwZWRBcnJheSwgMSk7IH0pLCBOQU1FLCB7XHJcbiAgICAgIGZyb206ICRmcm9tLFxyXG4gICAgICBvZjogJG9mXHJcbiAgICB9KTtcclxuXHJcbiAgICBpZiAoIShCWVRFU19QRVJfRUxFTUVOVCBpbiBUeXBlZEFycmF5UHJvdG90eXBlKSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBCWVRFU19QRVJfRUxFTUVOVCwgQllURVMpO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5QLCBOQU1FLCBwcm90byk7XHJcblxyXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcclxuXHJcbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFRF9TRVQsIE5BTUUsIHsgc2V0OiAkc2V0IH0pO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIUNPUlJFQ1RfSVRFUl9OQU1FLCBOQU1FLCAkaXRlcmF0b3JzKTtcclxuXHJcbiAgICBpZiAoIUxJQlJBUlkgJiYgVHlwZWRBcnJheVByb3RvdHlwZS50b1N0cmluZyAhPSBhcnJheVRvU3RyaW5nKSBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nID0gYXJyYXlUb1N0cmluZztcclxuXHJcbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgbmV3IFR5cGVkQXJyYXkoMSkuc2xpY2UoKTtcclxuICAgIH0pLCBOQU1FLCB7IHNsaWNlOiAkc2xpY2UgfSk7XHJcblxyXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICByZXR1cm4gWzEsIDJdLnRvTG9jYWxlU3RyaW5nKCkgIT0gbmV3IFR5cGVkQXJyYXkoWzEsIDJdKS50b0xvY2FsZVN0cmluZygpO1xyXG4gICAgfSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHlwZWRBcnJheVByb3RvdHlwZS50b0xvY2FsZVN0cmluZy5jYWxsKFsxLCAyXSk7XHJcbiAgICB9KSksIE5BTUUsIHsgdG9Mb2NhbGVTdHJpbmc6ICR0b0xvY2FsZVN0cmluZyB9KTtcclxuXHJcbiAgICBJdGVyYXRvcnNbTkFNRV0gPSBDT1JSRUNUX0lURVJfTkFNRSA/ICRuYXRpdmVJdGVyYXRvciA6ICRpdGVyYXRvcjtcclxuICAgIGlmICghTElCUkFSWSAmJiAhQ09SUkVDVF9JVEVSX05BTUUpIGhpZGUoVHlwZWRBcnJheVByb3RvdHlwZSwgSVRFUkFUT1IsICRpdGVyYXRvcik7XHJcbiAgfTtcclxufSBlbHNlIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xyXG4iLCJ2YXIgTWFwID0gcmVxdWlyZSgnLi9lczYubWFwJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbWV0YWRhdGEnKTtcclxudmFyIHN0b3JlID0gc2hhcmVkLnN0b3JlIHx8IChzaGFyZWQuc3RvcmUgPSBuZXcgKHJlcXVpcmUoJy4vZXM2LndlYWstbWFwJykpKCkpO1xyXG5cclxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXksIGNyZWF0ZSkge1xyXG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xyXG4gIGlmICghdGFyZ2V0TWV0YWRhdGEpIHtcclxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgc3RvcmUuc2V0KHRhcmdldCwgdGFyZ2V0TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xyXG4gIH1cclxuICB2YXIga2V5TWV0YWRhdGEgPSB0YXJnZXRNZXRhZGF0YS5nZXQodGFyZ2V0S2V5KTtcclxuICBpZiAoIWtleU1ldGFkYXRhKSB7XHJcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgIHRhcmdldE1ldGFkYXRhLnNldCh0YXJnZXRLZXksIGtleU1ldGFkYXRhID0gbmV3IE1hcCgpKTtcclxuICB9IHJldHVybiBrZXlNZXRhZGF0YTtcclxufTtcclxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcclxuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogbWV0YWRhdGFNYXAuaGFzKE1ldGFkYXRhS2V5KTtcclxufTtcclxudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIGZhbHNlKTtcclxuICByZXR1cm4gbWV0YWRhdGFNYXAgPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IG1ldGFkYXRhTWFwLmdldChNZXRhZGF0YUtleSk7XHJcbn07XHJcbnZhciBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBNZXRhZGF0YVZhbHVlLCBPLCBQKSB7XHJcbiAgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcChPLCBQLCB0cnVlKS5zZXQoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUpO1xyXG59O1xyXG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBmdW5jdGlvbiAodGFyZ2V0LCB0YXJnZXRLZXkpIHtcclxuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKHRhcmdldCwgdGFyZ2V0S2V5LCBmYWxzZSk7XHJcbiAgdmFyIGtleXMgPSBbXTtcclxuICBpZiAobWV0YWRhdGFNYXApIG1ldGFkYXRhTWFwLmZvckVhY2goZnVuY3Rpb24gKF8sIGtleSkgeyBrZXlzLnB1c2goa2V5KTsgfSk7XHJcbiAgcmV0dXJuIGtleXM7XHJcbn07XHJcbnZhciB0b01ldGFLZXkgPSBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCB8fCB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6IFN0cmluZyhpdCk7XHJcbn07XHJcbnZhciBleHAgPSBmdW5jdGlvbiAoTykge1xyXG4gICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIE8pO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgc3RvcmU6IHN0b3JlLFxyXG4gIG1hcDogZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCxcclxuICBoYXM6IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEsXHJcbiAgZ2V0OiBvcmRpbmFyeUdldE93bk1ldGFkYXRhLFxyXG4gIHNldDogb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSxcclxuICBrZXlzOiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyxcclxuICBrZXk6IHRvTWV0YUtleSxcclxuICBleHA6IGV4cFxyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xyXG4iLCJ2YXIgTUVUQSA9IHJlcXVpcmUoJy4vX3VpZCcpKCdtZXRhJyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XHJcbnZhciBzZXREZXNjID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIGlkID0gMDtcclxudmFyIGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGUgfHwgZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG52YXIgRlJFRVpFID0gIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBpc0V4dGVuc2libGUoT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKHt9KSk7XHJcbn0pO1xyXG52YXIgc2V0TWV0YSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHNldERlc2MoaXQsIE1FVEEsIHsgdmFsdWU6IHtcclxuICAgIGk6ICdPJyArICsraWQsIC8vIG9iamVjdCBJRFxyXG4gICAgdzoge30gICAgICAgICAgLy8gd2VhayBjb2xsZWN0aW9ucyBJRHNcclxuICB9IH0pO1xyXG59O1xyXG52YXIgZmFzdEtleSA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XHJcbiAgLy8gcmV0dXJuIHByaW1pdGl2ZSB3aXRoIHByZWZpeFxyXG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnID8gaXQgOiAodHlwZW9mIGl0ID09ICdzdHJpbmcnID8gJ1MnIDogJ1AnKSArIGl0O1xyXG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xyXG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcclxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuICdGJztcclxuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXHJcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuICdFJztcclxuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXHJcbiAgICBzZXRNZXRhKGl0KTtcclxuICAvLyByZXR1cm4gb2JqZWN0IElEXHJcbiAgfSByZXR1cm4gaXRbTUVUQV0uaTtcclxufTtcclxudmFyIGdldFdlYWsgPSBmdW5jdGlvbiAoaXQsIGNyZWF0ZSkge1xyXG4gIGlmICghaGFzKGl0LCBNRVRBKSkge1xyXG4gICAgLy8gY2FuJ3Qgc2V0IG1ldGFkYXRhIHRvIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RcclxuICAgIGlmICghaXNFeHRlbnNpYmxlKGl0KSkgcmV0dXJuIHRydWU7XHJcbiAgICAvLyBub3QgbmVjZXNzYXJ5IHRvIGFkZCBtZXRhZGF0YVxyXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiBmYWxzZTtcclxuICAgIC8vIGFkZCBtaXNzaW5nIG1ldGFkYXRhXHJcbiAgICBzZXRNZXRhKGl0KTtcclxuICAvLyByZXR1cm4gaGFzaCB3ZWFrIGNvbGxlY3Rpb25zIElEc1xyXG4gIH0gcmV0dXJuIGl0W01FVEFdLnc7XHJcbn07XHJcbi8vIGFkZCBtZXRhZGF0YSBvbiBmcmVlemUtZmFtaWx5IG1ldGhvZHMgY2FsbGluZ1xyXG52YXIgb25GcmVlemUgPSBmdW5jdGlvbiAoaXQpIHtcclxuICBpZiAoRlJFRVpFICYmIG1ldGEuTkVFRCAmJiBpc0V4dGVuc2libGUoaXQpICYmICFoYXMoaXQsIE1FVEEpKSBzZXRNZXRhKGl0KTtcclxuICByZXR1cm4gaXQ7XHJcbn07XHJcbnZhciBtZXRhID0gbW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgS0VZOiBNRVRBLFxyXG4gIE5FRUQ6IGZhbHNlLFxyXG4gIGZhc3RLZXk6IGZhc3RLZXksXHJcbiAgZ2V0V2VhazogZ2V0V2VhayxcclxuICBvbkZyZWV6ZTogb25GcmVlemVcclxufTtcclxuIiwiLy8gMjIuMS4zLjMxIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxyXG52YXIgVU5TQ09QQUJMRVMgPSByZXF1aXJlKCcuL193a3MnKSgndW5zY29wYWJsZXMnKTtcclxudmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XHJcbmlmIChBcnJheVByb3RvW1VOU0NPUEFCTEVTXSA9PSB1bmRlZmluZWQpIHJlcXVpcmUoJy4vX2hpZGUnKShBcnJheVByb3RvLCBVTlNDT1BBQkxFUywge30pO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICBBcnJheVByb3RvW1VOU0NPUEFCTEVTXVtrZXldID0gdHJ1ZTtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYml0bWFwLCB2YWx1ZSkge1xyXG4gIHJldHVybiB7XHJcbiAgICBlbnVtZXJhYmxlOiAhKGJpdG1hcCAmIDEpLFxyXG4gICAgY29uZmlndXJhYmxlOiAhKGJpdG1hcCAmIDIpLFxyXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXHJcbiAgICB2YWx1ZTogdmFsdWVcclxuICB9O1xyXG59O1xyXG4iLCJ2YXIgaWQgPSAwO1xyXG52YXIgcHggPSBNYXRoLnJhbmRvbSgpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICByZXR1cm4gJ1N5bWJvbCgnLmNvbmNhdChrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5LCAnKV8nLCAoKytpZCArIHB4KS50b1N0cmluZygzNikpO1xyXG59O1xyXG4iLCIvLyAxOS4xLjIuMTQgLyAxNS4yLjMuMTQgT2JqZWN0LmtleXMoTylcclxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcclxudmFyIGVudW1CdWdLZXlzID0gcmVxdWlyZSgnLi9fZW51bS1idWcta2V5cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcclxuICByZXR1cm4gJGtleXMoTywgZW51bUJ1Z0tleXMpO1xyXG59O1xyXG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgbWF4ID0gTWF0aC5tYXg7XHJcbnZhciBtaW4gPSBNYXRoLm1pbjtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xyXG4gIGluZGV4ID0gdG9JbnRlZ2VyKGluZGV4KTtcclxuICByZXR1cm4gaW5kZXggPCAwID8gbWF4KGluZGV4ICsgbGVuZ3RoLCAwKSA6IG1pbihpbmRleCwgbGVuZ3RoKTtcclxufTtcclxuIiwiLy8gMTkuMS4yLjIgLyAxNS4yLjMuNSBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgZFBzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwcycpO1xyXG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XHJcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcclxudmFyIEVtcHR5ID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xyXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XHJcblxyXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXHJcbnZhciBjcmVhdGVEaWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gIC8vIFRocmFzaCwgd2FzdGUgYW5kIHNvZG9teTogSUUgR0MgYnVnXHJcbiAgdmFyIGlmcmFtZSA9IHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnaWZyYW1lJyk7XHJcbiAgdmFyIGkgPSBlbnVtQnVnS2V5cy5sZW5ndGg7XHJcbiAgdmFyIGx0ID0gJzwnO1xyXG4gIHZhciBndCA9ICc+JztcclxuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XHJcbiAgaWZyYW1lLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgcmVxdWlyZSgnLi9faHRtbCcpLmFwcGVuZENoaWxkKGlmcmFtZSk7XHJcbiAgaWZyYW1lLnNyYyA9ICdqYXZhc2NyaXB0Oic7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tc2NyaXB0LXVybFxyXG4gIC8vIGNyZWF0ZURpY3QgPSBpZnJhbWUuY29udGVudFdpbmRvdy5PYmplY3Q7XHJcbiAgLy8gaHRtbC5yZW1vdmVDaGlsZChpZnJhbWUpO1xyXG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XHJcbiAgaWZyYW1lRG9jdW1lbnQub3BlbigpO1xyXG4gIGlmcmFtZURvY3VtZW50LndyaXRlKGx0ICsgJ3NjcmlwdCcgKyBndCArICdkb2N1bWVudC5GPU9iamVjdCcgKyBsdCArICcvc2NyaXB0JyArIGd0KTtcclxuICBpZnJhbWVEb2N1bWVudC5jbG9zZSgpO1xyXG4gIGNyZWF0ZURpY3QgPSBpZnJhbWVEb2N1bWVudC5GO1xyXG4gIHdoaWxlIChpLS0pIGRlbGV0ZSBjcmVhdGVEaWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbaV1dO1xyXG4gIHJldHVybiBjcmVhdGVEaWN0KCk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5jcmVhdGUgfHwgZnVuY3Rpb24gY3JlYXRlKE8sIFByb3BlcnRpZXMpIHtcclxuICB2YXIgcmVzdWx0O1xyXG4gIGlmIChPICE9PSBudWxsKSB7XHJcbiAgICBFbXB0eVtQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XHJcbiAgICByZXN1bHQgPSBuZXcgRW1wdHkoKTtcclxuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBudWxsO1xyXG4gICAgLy8gYWRkIFwiX19wcm90b19fXCIgZm9yIE9iamVjdC5nZXRQcm90b3R5cGVPZiBwb2x5ZmlsbFxyXG4gICAgcmVzdWx0W0lFX1BST1RPXSA9IE87XHJcbiAgfSBlbHNlIHJlc3VsdCA9IGNyZWF0ZURpY3QoKTtcclxuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZFBzKHJlc3VsdCwgUHJvcGVydGllcyk7XHJcbn07XHJcbiIsIi8vIDE5LjEuMi43IC8gMTUuMi4zLjQgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcclxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcclxudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJykuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XHJcblxyXG5leHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB8fCBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKE8pIHtcclxuICByZXR1cm4gJGtleXMoTywgaGlkZGVuS2V5cyk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcclxudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZKSB7XHJcbiAgdmFyIEMgPSBnbG9iYWxbS0VZXTtcclxuICBpZiAoREVTQ1JJUFRPUlMgJiYgQyAmJiAhQ1tTUEVDSUVTXSkgZFAuZihDLCBTUEVDSUVTLCB7XHJcbiAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH1cclxuICB9KTtcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIENvbnN0cnVjdG9yLCBuYW1lLCBmb3JiaWRkZW5GaWVsZCkge1xyXG4gIGlmICghKGl0IGluc3RhbmNlb2YgQ29uc3RydWN0b3IpIHx8IChmb3JiaWRkZW5GaWVsZCAhPT0gdW5kZWZpbmVkICYmIGZvcmJpZGRlbkZpZWxkIGluIGl0KSkge1xyXG4gICAgdGhyb3cgVHlwZUVycm9yKG5hbWUgKyAnOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcclxuICB9IHJldHVybiBpdDtcclxufTtcclxuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xyXG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XHJcbnZhciBCUkVBSyA9IHt9O1xyXG52YXIgUkVUVVJOID0ge307XHJcbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlcmFibGUsIGVudHJpZXMsIGZuLCB0aGF0LCBJVEVSQVRPUikge1xyXG4gIHZhciBpdGVyRm4gPSBJVEVSQVRPUiA/IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXJhYmxlOyB9IDogZ2V0SXRlckZuKGl0ZXJhYmxlKTtcclxuICB2YXIgZiA9IGN0eChmbiwgdGhhdCwgZW50cmllcyA/IDIgOiAxKTtcclxuICB2YXIgaW5kZXggPSAwO1xyXG4gIHZhciBsZW5ndGgsIHN0ZXAsIGl0ZXJhdG9yLCByZXN1bHQ7XHJcbiAgaWYgKHR5cGVvZiBpdGVyRm4gIT0gJ2Z1bmN0aW9uJykgdGhyb3cgVHlwZUVycm9yKGl0ZXJhYmxlICsgJyBpcyBub3QgaXRlcmFibGUhJyk7XHJcbiAgLy8gZmFzdCBjYXNlIGZvciBhcnJheXMgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yXHJcbiAgaWYgKGlzQXJyYXlJdGVyKGl0ZXJGbikpIGZvciAobGVuZ3RoID0gdG9MZW5ndGgoaXRlcmFibGUubGVuZ3RoKTsgbGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIHtcclxuICAgIHJlc3VsdCA9IGVudHJpZXMgPyBmKGFuT2JqZWN0KHN0ZXAgPSBpdGVyYWJsZVtpbmRleF0pWzBdLCBzdGVwWzFdKSA6IGYoaXRlcmFibGVbaW5kZXhdKTtcclxuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xyXG4gIH0gZWxzZSBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoaXRlcmFibGUpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7KSB7XHJcbiAgICByZXN1bHQgPSBjYWxsKGl0ZXJhdG9yLCBmLCBzdGVwLnZhbHVlLCBlbnRyaWVzKTtcclxuICAgIGlmIChyZXN1bHQgPT09IEJSRUFLIHx8IHJlc3VsdCA9PT0gUkVUVVJOKSByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufTtcclxuZXhwb3J0cy5CUkVBSyA9IEJSRUFLO1xyXG5leHBvcnRzLlJFVFVSTiA9IFJFVFVSTjtcclxuIiwidmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzcmMsIHNhZmUpIHtcclxuICBmb3IgKHZhciBrZXkgaW4gc3JjKSByZWRlZmluZSh0YXJnZXQsIGtleSwgc3JjW2tleV0sIHNhZmUpO1xyXG4gIHJldHVybiB0YXJnZXQ7XHJcbn07XHJcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgVFlQRSkge1xyXG4gIGlmICghaXNPYmplY3QoaXQpIHx8IGl0Ll90ICE9PSBUWVBFKSB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkIScpO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxuIiwidmFyIGRlZiA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIHRhZywgc3RhdCkge1xyXG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gc3RhdCA/IGl0IDogaXQucHJvdG90eXBlLCBUQUcpKSBkZWYoaXQsIFRBRywgeyBjb25maWd1cmFibGU6IHRydWUsIHZhbHVlOiB0YWcgfSk7XHJcbn07XHJcbiIsIi8vIGdldHRpbmcgdGFnIGZyb20gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXHJcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxudmFyIFRBRyA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpO1xyXG4vLyBFUzMgd3JvbmcgaGVyZVxyXG52YXIgQVJHID0gY29mKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA9PSAnQXJndW1lbnRzJztcclxuXHJcbi8vIGZhbGxiYWNrIGZvciBJRTExIFNjcmlwdCBBY2Nlc3MgRGVuaWVkIGVycm9yXHJcbnZhciB0cnlHZXQgPSBmdW5jdGlvbiAoaXQsIGtleSkge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4gaXRba2V5XTtcclxuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgdmFyIE8sIFQsIEI7XHJcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyAnVW5kZWZpbmVkJyA6IGl0ID09PSBudWxsID8gJ051bGwnXHJcbiAgICAvLyBAQHRvU3RyaW5nVGFnIGNhc2VcclxuICAgIDogdHlwZW9mIChUID0gdHJ5R2V0KE8gPSBPYmplY3QoaXQpLCBUQUcpKSA9PSAnc3RyaW5nJyA/IFRcclxuICAgIC8vIGJ1aWx0aW5UYWcgY2FzZVxyXG4gICAgOiBBUkcgPyBjb2YoTylcclxuICAgIC8vIEVTMyBhcmd1bWVudHMgZmFsbGJhY2tcclxuICAgIDogKEIgPSBjb2YoTykpID09ICdPYmplY3QnICYmIHR5cGVvZiBPLmNhbGxlZSA9PSAnZnVuY3Rpb24nID8gJ0FyZ3VtZW50cycgOiBCO1xyXG59O1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyIHNwYWNlcyA9IHJlcXVpcmUoJy4vX3N0cmluZy13cycpO1xyXG52YXIgc3BhY2UgPSAnWycgKyBzcGFjZXMgKyAnXSc7XHJcbnZhciBub24gPSAnXFx1MjAwYlxcdTAwODUnO1xyXG52YXIgbHRyaW0gPSBSZWdFeHAoJ14nICsgc3BhY2UgKyBzcGFjZSArICcqJyk7XHJcbnZhciBydHJpbSA9IFJlZ0V4cChzcGFjZSArIHNwYWNlICsgJyokJyk7XHJcblxyXG52YXIgZXhwb3J0ZXIgPSBmdW5jdGlvbiAoS0VZLCBleGVjLCBBTElBUykge1xyXG4gIHZhciBleHAgPSB7fTtcclxuICB2YXIgRk9SQ0UgPSBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gISFzcGFjZXNbS0VZXSgpIHx8IG5vbltLRVldKCkgIT0gbm9uO1xyXG4gIH0pO1xyXG4gIHZhciBmbiA9IGV4cFtLRVldID0gRk9SQ0UgPyBleGVjKHRyaW0pIDogc3BhY2VzW0tFWV07XHJcbiAgaWYgKEFMSUFTKSBleHBbQUxJQVNdID0gZm47XHJcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBGT1JDRSwgJ1N0cmluZycsIGV4cCk7XHJcbn07XHJcblxyXG4vLyAxIC0+IFN0cmluZyN0cmltTGVmdFxyXG4vLyAyIC0+IFN0cmluZyN0cmltUmlnaHRcclxuLy8gMyAtPiBTdHJpbmcjdHJpbVxyXG52YXIgdHJpbSA9IGV4cG9ydGVyLnRyaW0gPSBmdW5jdGlvbiAoc3RyaW5nLCBUWVBFKSB7XHJcbiAgc3RyaW5nID0gU3RyaW5nKGRlZmluZWQoc3RyaW5nKSk7XHJcbiAgaWYgKFRZUEUgJiAxKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShsdHJpbSwgJycpO1xyXG4gIGlmIChUWVBFICYgMikgc3RyaW5nID0gc3RyaW5nLnJlcGxhY2UocnRyaW0sICcnKTtcclxuICByZXR1cm4gc3RyaW5nO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBleHBvcnRlcjtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcclxuIiwidmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIFNIQVJFRCA9ICdfX2NvcmUtanNfc2hhcmVkX18nO1xyXG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCAoZ2xvYmFsW1NIQVJFRF0gPSB7fSk7XHJcblxyXG4obW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gIHJldHVybiBzdG9yZVtrZXldIHx8IChzdG9yZVtrZXldID0gdmFsdWUgIT09IHVuZGVmaW5lZCA/IHZhbHVlIDoge30pO1xyXG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XHJcbiAgdmVyc2lvbjogY29yZS52ZXJzaW9uLFxyXG4gIG1vZGU6IHJlcXVpcmUoJy4vX2xpYnJhcnknKSA/ICdwdXJlJyA6ICdnbG9iYWwnLFxyXG4gIGNvcHlyaWdodDogJ8KpIDIwMTkgRGVuaXMgUHVzaGthcmV2ICh6bG9pcm9jay5ydSknXHJcbn0pO1xyXG4iLCIvLyBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIGFuZCBub24tZW51bWVyYWJsZSBvbGQgVjggc3RyaW5nc1xyXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKSA/IE9iamVjdCA6IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBjb2YoaXQpID09ICdTdHJpbmcnID8gaXQuc3BsaXQoJycpIDogT2JqZWN0KGl0KTtcclxufTtcclxuIiwiZXhwb3J0cy5mID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3NcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciB0aGF0ID0gYW5PYmplY3QodGhpcyk7XHJcbiAgdmFyIHJlc3VsdCA9ICcnO1xyXG4gIGlmICh0aGF0Lmdsb2JhbCkgcmVzdWx0ICs9ICdnJztcclxuICBpZiAodGhhdC5pZ25vcmVDYXNlKSByZXN1bHQgKz0gJ2knO1xyXG4gIGlmICh0aGF0Lm11bHRpbGluZSkgcmVzdWx0ICs9ICdtJztcclxuICBpZiAodGhhdC51bmljb2RlKSByZXN1bHQgKz0gJ3UnO1xyXG4gIGlmICh0aGF0LnN0aWNreSkgcmVzdWx0ICs9ICd5JztcclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG4iLCIvLyA3LjMuMjAgU3BlY2llc0NvbnN0cnVjdG9yKE8sIGRlZmF1bHRDb25zdHJ1Y3RvcilcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTywgRCkge1xyXG4gIHZhciBDID0gYW5PYmplY3QoTykuY29uc3RydWN0b3I7XHJcbiAgdmFyIFM7XHJcbiAgcmV0dXJuIEMgPT09IHVuZGVmaW5lZCB8fCAoUyA9IGFuT2JqZWN0KEMpW1NQRUNJRVNdKSA9PSB1bmRlZmluZWQgPyBEIDogYUZ1bmN0aW9uKFMpO1xyXG59O1xyXG4iLCIvLyBmYWxzZSAtPiBBcnJheSNpbmRleE9mXHJcbi8vIHRydWUgIC0+IEFycmF5I2luY2x1ZGVzXHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XHJcbiAgICB2YXIgTyA9IHRvSU9iamVjdCgkdGhpcyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcclxuICAgIHZhciB2YWx1ZTtcclxuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICAgIGlmIChJU19JTkNMVURFUyAmJiBlbCAhPSBlbCkgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSB7XHJcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgICBpZiAodmFsdWUgIT0gdmFsdWUpIHJldHVybiB0cnVlO1xyXG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxyXG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSBpZiAoSVNfSU5DTFVERVMgfHwgaW5kZXggaW4gTykge1xyXG4gICAgICBpZiAoT1tpbmRleF0gPT09IGVsKSByZXR1cm4gSVNfSU5DTFVERVMgfHwgaW5kZXggfHwgMDtcclxuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcclxuICB9O1xyXG59O1xyXG4iLCJleHBvcnRzLmYgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG4iLCIvLyA3LjIuMiBJc0FycmF5KGFyZ3VtZW50KVxyXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiBpc0FycmF5KGFyZykge1xyXG4gIHJldHVybiBjb2YoYXJnKSA9PSAnQXJyYXknO1xyXG59O1xyXG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxuLy8gdHJ1ZSAgLT4gU3RyaW5nI2F0XHJcbi8vIGZhbHNlIC0+IFN0cmluZyNjb2RlUG9pbnRBdFxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUT19TVFJJTkcpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKHRoYXQsIHBvcykge1xyXG4gICAgdmFyIHMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XHJcbiAgICB2YXIgaSA9IHRvSW50ZWdlcihwb3MpO1xyXG4gICAgdmFyIGwgPSBzLmxlbmd0aDtcclxuICAgIHZhciBhLCBiO1xyXG4gICAgaWYgKGkgPCAwIHx8IGkgPj0gbCkgcmV0dXJuIFRPX1NUUklORyA/ICcnIDogdW5kZWZpbmVkO1xyXG4gICAgYSA9IHMuY2hhckNvZGVBdChpKTtcclxuICAgIHJldHVybiBhIDwgMHhkODAwIHx8IGEgPiAweGRiZmYgfHwgaSArIDEgPT09IGwgfHwgKGIgPSBzLmNoYXJDb2RlQXQoaSArIDEpKSA8IDB4ZGMwMCB8fCBiID4gMHhkZmZmXHJcbiAgICAgID8gVE9fU1RSSU5HID8gcy5jaGFyQXQoaSkgOiBhXHJcbiAgICAgIDogVE9fU1RSSU5HID8gcy5zbGljZShpLCBpICsgMikgOiAoYSAtIDB4ZDgwMCA8PCAxMCkgKyAoYiAtIDB4ZGMwMCkgKyAweDEwMDAwO1xyXG4gIH07XHJcbn07XHJcbiIsIi8vIDcuMi44IElzUmVnRXhwKGFyZ3VtZW50KVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xyXG52YXIgTUFUQ0ggPSByZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICB2YXIgaXNSZWdFeHA7XHJcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiAoKGlzUmVnRXhwID0gaXRbTUFUQ0hdKSAhPT0gdW5kZWZpbmVkID8gISFpc1JlZ0V4cCA6IGNvZihpdCkgPT0gJ1JlZ0V4cCcpO1xyXG59O1xyXG4iLCJ2YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcclxudmFyIFNBRkVfQ0xPU0lORyA9IGZhbHNlO1xyXG5cclxudHJ5IHtcclxuICB2YXIgcml0ZXIgPSBbN11bSVRFUkFUT1JdKCk7XHJcbiAgcml0ZXJbJ3JldHVybiddID0gZnVuY3Rpb24gKCkgeyBTQUZFX0NMT1NJTkcgPSB0cnVlOyB9O1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby10aHJvdy1saXRlcmFsXHJcbiAgQXJyYXkuZnJvbShyaXRlciwgZnVuY3Rpb24gKCkgeyB0aHJvdyAyOyB9KTtcclxufSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjLCBza2lwQ2xvc2luZykge1xyXG4gIGlmICghc2tpcENsb3NpbmcgJiYgIVNBRkVfQ0xPU0lORykgcmV0dXJuIGZhbHNlO1xyXG4gIHZhciBzYWZlID0gZmFsc2U7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBhcnIgPSBbN107XHJcbiAgICB2YXIgaXRlciA9IGFycltJVEVSQVRPUl0oKTtcclxuICAgIGl0ZXIubmV4dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHsgZG9uZTogc2FmZSA9IHRydWUgfTsgfTtcclxuICAgIGFycltJVEVSQVRPUl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBpdGVyOyB9O1xyXG4gICAgZXhlYyhhcnIpO1xyXG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxyXG4gIHJldHVybiBzYWZlO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcclxudmFyIGJ1aWx0aW5FeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xyXG5cclxuIC8vIGBSZWdFeHBFeGVjYCBhYnN0cmFjdCBvcGVyYXRpb25cclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwZXhlY1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChSLCBTKSB7XHJcbiAgdmFyIGV4ZWMgPSBSLmV4ZWM7XHJcbiAgaWYgKHR5cGVvZiBleGVjID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gZXhlYy5jYWxsKFIsIFMpO1xyXG4gICAgaWYgKHR5cGVvZiByZXN1bHQgIT09ICdvYmplY3QnKSB7XHJcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCBleGVjIG1ldGhvZCByZXR1cm5lZCBzb21ldGhpbmcgb3RoZXIgdGhhbiBhbiBPYmplY3Qgb3IgbnVsbCcpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbiAgaWYgKGNsYXNzb2YoUikgIT09ICdSZWdFeHAnKSB7XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdSZWdFeHAjZXhlYyBjYWxsZWQgb24gaW5jb21wYXRpYmxlIHJlY2VpdmVyJyk7XHJcbiAgfVxyXG4gIHJldHVybiBidWlsdGluRXhlYy5jYWxsKFIsIFMpO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5leGVjJyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xyXG52YXIgcmVnZXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjJyk7XHJcblxyXG52YXIgU1BFQ0lFUyA9IHdrcygnc3BlY2llcycpO1xyXG5cclxudmFyIFJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAvLyAjcmVwbGFjZSBuZWVkcyBidWlsdC1pbiBzdXBwb3J0IGZvciBuYW1lZCBncm91cHMuXHJcbiAgLy8gI21hdGNoIHdvcmtzIGZpbmUgYmVjYXVzZSBpdCBqdXN0IHJldHVybiB0aGUgZXhlYyByZXN1bHRzLCBldmVuIGlmIGl0IGhhc1xyXG4gIC8vIGEgXCJncm9wc1wiIHByb3BlcnR5LlxyXG4gIHZhciByZSA9IC8uLztcclxuICByZS5leGVjID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgcmVzdWx0Lmdyb3VwcyA9IHsgYTogJzcnIH07XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcbiAgcmV0dXJuICcnLnJlcGxhY2UocmUsICckPGE+JykgIT09ICc3JztcclxufSk7XHJcblxyXG52YXIgU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDID0gKGZ1bmN0aW9uICgpIHtcclxuICAvLyBDaHJvbWUgNTEgaGFzIGEgYnVnZ3kgXCJzcGxpdFwiIGltcGxlbWVudGF0aW9uIHdoZW4gUmVnRXhwI2V4ZWMgIT09IG5hdGl2ZUV4ZWNcclxuICB2YXIgcmUgPSAvKD86KS87XHJcbiAgdmFyIG9yaWdpbmFsRXhlYyA9IHJlLmV4ZWM7XHJcbiAgcmUuZXhlYyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG9yaWdpbmFsRXhlYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9O1xyXG4gIHZhciByZXN1bHQgPSAnYWInLnNwbGl0KHJlKTtcclxuICByZXR1cm4gcmVzdWx0Lmxlbmd0aCA9PT0gMiAmJiByZXN1bHRbMF0gPT09ICdhJyAmJiByZXN1bHRbMV0gPT09ICdiJztcclxufSkoKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgbGVuZ3RoLCBleGVjKSB7XHJcbiAgdmFyIFNZTUJPTCA9IHdrcyhLRVkpO1xyXG5cclxuICB2YXIgREVMRUdBVEVTX1RPX1NZTUJPTCA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTdHJpbmcgbWV0aG9kcyBjYWxsIHN5bWJvbC1uYW1lZCBSZWdFcCBtZXRob2RzXHJcbiAgICB2YXIgTyA9IHt9O1xyXG4gICAgT1tTWU1CT0xdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfTtcclxuICAgIHJldHVybiAnJ1tLRVldKE8pICE9IDc7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBERUxFR0FURVNfVE9fRVhFQyA9IERFTEVHQVRFU19UT19TWU1CT0wgPyAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gU3ltYm9sLW5hbWVkIFJlZ0V4cCBtZXRob2RzIGNhbGwgLmV4ZWNcclxuICAgIHZhciBleGVjQ2FsbGVkID0gZmFsc2U7XHJcbiAgICB2YXIgcmUgPSAvYS87XHJcbiAgICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyBleGVjQ2FsbGVkID0gdHJ1ZTsgcmV0dXJuIG51bGw7IH07XHJcbiAgICBpZiAoS0VZID09PSAnc3BsaXQnKSB7XHJcbiAgICAgIC8vIFJlZ0V4cFtAQHNwbGl0XSBkb2Vzbid0IGNhbGwgdGhlIHJlZ2V4J3MgZXhlYyBtZXRob2QsIGJ1dCBmaXJzdCBjcmVhdGVzXHJcbiAgICAgIC8vIGEgbmV3IG9uZS4gV2UgbmVlZCB0byByZXR1cm4gdGhlIHBhdGNoZWQgcmVnZXggd2hlbiBjcmVhdGluZyB0aGUgbmV3IG9uZS5cclxuICAgICAgcmUuY29uc3RydWN0b3IgPSB7fTtcclxuICAgICAgcmUuY29uc3RydWN0b3JbU1BFQ0lFU10gPSBmdW5jdGlvbiAoKSB7IHJldHVybiByZTsgfTtcclxuICAgIH1cclxuICAgIHJlW1NZTUJPTF0oJycpO1xyXG4gICAgcmV0dXJuICFleGVjQ2FsbGVkO1xyXG4gIH0pIDogdW5kZWZpbmVkO1xyXG5cclxuICBpZiAoXHJcbiAgICAhREVMRUdBVEVTX1RPX1NZTUJPTCB8fFxyXG4gICAgIURFTEVHQVRFU19UT19FWEVDIHx8XHJcbiAgICAoS0VZID09PSAncmVwbGFjZScgJiYgIVJFUExBQ0VfU1VQUE9SVFNfTkFNRURfR1JPVVBTKSB8fFxyXG4gICAgKEtFWSA9PT0gJ3NwbGl0JyAmJiAhU1BMSVRfV09SS1NfV0lUSF9PVkVSV1JJVFRFTl9FWEVDKVxyXG4gICkge1xyXG4gICAgdmFyIG5hdGl2ZVJlZ0V4cE1ldGhvZCA9IC8uL1tTWU1CT0xdO1xyXG4gICAgdmFyIGZucyA9IGV4ZWMoXHJcbiAgICAgIGRlZmluZWQsXHJcbiAgICAgIFNZTUJPTCxcclxuICAgICAgJydbS0VZXSxcclxuICAgICAgZnVuY3Rpb24gbWF5YmVDYWxsTmF0aXZlKG5hdGl2ZU1ldGhvZCwgcmVnZXhwLCBzdHIsIGFyZzIsIGZvcmNlU3RyaW5nTWV0aG9kKSB7XHJcbiAgICAgICAgaWYgKHJlZ2V4cC5leGVjID09PSByZWdleHBFeGVjKSB7XHJcbiAgICAgICAgICBpZiAoREVMRUdBVEVTX1RPX1NZTUJPTCAmJiAhZm9yY2VTdHJpbmdNZXRob2QpIHtcclxuICAgICAgICAgICAgLy8gVGhlIG5hdGl2ZSBTdHJpbmcgbWV0aG9kIGFscmVhZHkgZGVsZWdhdGVzIHRvIEBAbWV0aG9kICh0aGlzXHJcbiAgICAgICAgICAgIC8vIHBvbHlmaWxsZWQgZnVuY3Rpb24pLCBsZWFzaW5nIHRvIGluZmluaXRlIHJlY3Vyc2lvbi5cclxuICAgICAgICAgICAgLy8gV2UgYXZvaWQgaXQgYnkgZGlyZWN0bHkgY2FsbGluZyB0aGUgbmF0aXZlIEBAbWV0aG9kIG1ldGhvZC5cclxuICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZVJlZ0V4cE1ldGhvZC5jYWxsKHJlZ2V4cCwgc3RyLCBhcmcyKSB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHsgZG9uZTogdHJ1ZSwgdmFsdWU6IG5hdGl2ZU1ldGhvZC5jYWxsKHN0ciwgcmVnZXhwLCBhcmcyKSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSB9O1xyXG4gICAgICB9XHJcbiAgICApO1xyXG4gICAgdmFyIHN0cmZuID0gZm5zWzBdO1xyXG4gICAgdmFyIHJ4Zm4gPSBmbnNbMV07XHJcblxyXG4gICAgcmVkZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgS0VZLCBzdHJmbik7XHJcbiAgICBoaWRlKFJlZ0V4cC5wcm90b3R5cGUsIFNZTUJPTCwgbGVuZ3RoID09IDJcclxuICAgICAgLy8gMjEuMi41LjggUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdKHN0cmluZywgcmVwbGFjZVZhbHVlKVxyXG4gICAgICAvLyAyMS4yLjUuMTEgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XShzdHJpbmcsIGxpbWl0KVxyXG4gICAgICA/IGZ1bmN0aW9uIChzdHJpbmcsIGFyZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcywgYXJnKTsgfVxyXG4gICAgICAvLyAyMS4yLjUuNiBSZWdFeHAucHJvdG90eXBlW0BAbWF0Y2hdKHN0cmluZylcclxuICAgICAgLy8gMjEuMi41LjkgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF0oc3RyaW5nKVxyXG4gICAgICA6IGZ1bmN0aW9uIChzdHJpbmcpIHsgcmV0dXJuIHJ4Zm4uY2FsbChzdHJpbmcsIHRoaXMpOyB9XHJcbiAgICApO1xyXG4gIH1cclxufTtcclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgbmF2aWdhdG9yID0gZ2xvYmFsLm5hdmlnYXRvcjtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gbmF2aWdhdG9yICYmIG5hdmlnYXRvci51c2VyQWdlbnQgfHwgJyc7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xyXG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcclxudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XHJcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xyXG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xyXG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xyXG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChOQU1FLCB3cmFwcGVyLCBtZXRob2RzLCBjb21tb24sIElTX01BUCwgSVNfV0VBSykge1xyXG4gIHZhciBCYXNlID0gZ2xvYmFsW05BTUVdO1xyXG4gIHZhciBDID0gQmFzZTtcclxuICB2YXIgQURERVIgPSBJU19NQVAgPyAnc2V0JyA6ICdhZGQnO1xyXG4gIHZhciBwcm90byA9IEMgJiYgQy5wcm90b3R5cGU7XHJcbiAgdmFyIE8gPSB7fTtcclxuICB2YXIgZml4TWV0aG9kID0gZnVuY3Rpb24gKEtFWSkge1xyXG4gICAgdmFyIGZuID0gcHJvdG9bS0VZXTtcclxuICAgIHJlZGVmaW5lKHByb3RvLCBLRVksXHJcbiAgICAgIEtFWSA9PSAnZGVsZXRlJyA/IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XHJcbiAgICAgIH0gOiBLRVkgPT0gJ2hhcycgPyBmdW5jdGlvbiBoYXMoYSkge1xyXG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IGZhbHNlIDogZm4uY2FsbCh0aGlzLCBhID09PSAwID8gMCA6IGEpO1xyXG4gICAgICB9IDogS0VZID09ICdnZXQnID8gZnVuY3Rpb24gZ2V0KGEpIHtcclxuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyB1bmRlZmluZWQgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XHJcbiAgICAgIH0gOiBLRVkgPT0gJ2FkZCcgPyBmdW5jdGlvbiBhZGQoYSkgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7IHJldHVybiB0aGlzOyB9XHJcbiAgICAgICAgOiBmdW5jdGlvbiBzZXQoYSwgYikgeyBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSwgYik7IHJldHVybiB0aGlzOyB9XHJcbiAgICApO1xyXG4gIH07XHJcbiAgaWYgKHR5cGVvZiBDICE9ICdmdW5jdGlvbicgfHwgIShJU19XRUFLIHx8IHByb3RvLmZvckVhY2ggJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgIG5ldyBDKCkuZW50cmllcygpLm5leHQoKTtcclxuICB9KSkpIHtcclxuICAgIC8vIGNyZWF0ZSBjb2xsZWN0aW9uIGNvbnN0cnVjdG9yXHJcbiAgICBDID0gY29tbW9uLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpO1xyXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIG1ldGhvZHMpO1xyXG4gICAgbWV0YS5ORUVEID0gdHJ1ZTtcclxuICB9IGVsc2Uge1xyXG4gICAgdmFyIGluc3RhbmNlID0gbmV3IEMoKTtcclxuICAgIC8vIGVhcmx5IGltcGxlbWVudGF0aW9ucyBub3Qgc3VwcG9ydHMgY2hhaW5pbmdcclxuICAgIHZhciBIQVNOVF9DSEFJTklORyA9IGluc3RhbmNlW0FEREVSXShJU19XRUFLID8ge30gOiAtMCwgMSkgIT0gaW5zdGFuY2U7XHJcbiAgICAvLyBWOCB+ICBDaHJvbWl1bSA0MC0gd2Vhay1jb2xsZWN0aW9ucyB0aHJvd3Mgb24gcHJpbWl0aXZlcywgYnV0IHNob3VsZCByZXR1cm4gZmFsc2VcclxuICAgIHZhciBUSFJPV1NfT05fUFJJTUlUSVZFUyA9IGZhaWxzKGZ1bmN0aW9uICgpIHsgaW5zdGFuY2UuaGFzKDEpOyB9KTtcclxuICAgIC8vIG1vc3QgZWFybHkgaW1wbGVtZW50YXRpb25zIGRvZXNuJ3Qgc3VwcG9ydHMgaXRlcmFibGVzLCBtb3N0IG1vZGVybiAtIG5vdCBjbG9zZSBpdCBjb3JyZWN0bHlcclxuICAgIHZhciBBQ0NFUFRfSVRFUkFCTEVTID0gJGl0ZXJEZXRlY3QoZnVuY3Rpb24gKGl0ZXIpIHsgbmV3IEMoaXRlcik7IH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgLy8gZm9yIGVhcmx5IGltcGxlbWVudGF0aW9ucyAtMCBhbmQgKzAgbm90IHRoZSBzYW1lXHJcbiAgICB2YXIgQlVHR1lfWkVSTyA9ICFJU19XRUFLICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gVjggfiBDaHJvbWl1bSA0Mi0gZmFpbHMgb25seSB3aXRoIDUrIGVsZW1lbnRzXHJcbiAgICAgIHZhciAkaW5zdGFuY2UgPSBuZXcgQygpO1xyXG4gICAgICB2YXIgaW5kZXggPSA1O1xyXG4gICAgICB3aGlsZSAoaW5kZXgtLSkgJGluc3RhbmNlW0FEREVSXShpbmRleCwgaW5kZXgpO1xyXG4gICAgICByZXR1cm4gISRpbnN0YW5jZS5oYXMoLTApO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoIUFDQ0VQVF9JVEVSQUJMRVMpIHtcclxuICAgICAgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRhcmdldCwgaXRlcmFibGUpIHtcclxuICAgICAgICBhbkluc3RhbmNlKHRhcmdldCwgQywgTkFNRSk7XHJcbiAgICAgICAgdmFyIHRoYXQgPSBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSgpLCB0YXJnZXQsIEMpO1xyXG4gICAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcclxuICAgICAgICByZXR1cm4gdGhhdDtcclxuICAgICAgfSk7XHJcbiAgICAgIEMucHJvdG90eXBlID0gcHJvdG87XHJcbiAgICAgIHByb3RvLmNvbnN0cnVjdG9yID0gQztcclxuICAgIH1cclxuICAgIGlmIChUSFJPV1NfT05fUFJJTUlUSVZFUyB8fCBCVUdHWV9aRVJPKSB7XHJcbiAgICAgIGZpeE1ldGhvZCgnZGVsZXRlJyk7XHJcbiAgICAgIGZpeE1ldGhvZCgnaGFzJyk7XHJcbiAgICAgIElTX01BUCAmJiBmaXhNZXRob2QoJ2dldCcpO1xyXG4gICAgfVxyXG4gICAgaWYgKEJVR0dZX1pFUk8gfHwgSEFTTlRfQ0hBSU5JTkcpIGZpeE1ldGhvZChBRERFUik7XHJcbiAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIHNob3VsZCBub3QgY29udGFpbnMgLmNsZWFyIG1ldGhvZFxyXG4gICAgaWYgKElTX1dFQUsgJiYgcHJvdG8uY2xlYXIpIGRlbGV0ZSBwcm90by5jbGVhcjtcclxuICB9XHJcblxyXG4gIHNldFRvU3RyaW5nVGFnKEMsIE5BTUUpO1xyXG5cclxuICBPW05BTUVdID0gQztcclxuICAkZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChDICE9IEJhc2UpLCBPKTtcclxuXHJcbiAgaWYgKCFJU19XRUFLKSBjb21tb24uc2V0U3Ryb25nKEMsIE5BTUUsIElTX01BUCk7XHJcblxyXG4gIHJldHVybiBDO1xyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XHJcbnZhciBUWVBFRCA9IHVpZCgndHlwZWRfYXJyYXknKTtcclxudmFyIFZJRVcgPSB1aWQoJ3ZpZXcnKTtcclxudmFyIEFCViA9ICEhKGdsb2JhbC5BcnJheUJ1ZmZlciAmJiBnbG9iYWwuRGF0YVZpZXcpO1xyXG52YXIgQ09OU1RSID0gQUJWO1xyXG52YXIgaSA9IDA7XHJcbnZhciBsID0gOTtcclxudmFyIFR5cGVkO1xyXG5cclxudmFyIFR5cGVkQXJyYXlDb25zdHJ1Y3RvcnMgPSAoXHJcbiAgJ0ludDhBcnJheSxVaW50OEFycmF5LFVpbnQ4Q2xhbXBlZEFycmF5LEludDE2QXJyYXksVWludDE2QXJyYXksSW50MzJBcnJheSxVaW50MzJBcnJheSxGbG9hdDMyQXJyYXksRmxvYXQ2NEFycmF5J1xyXG4pLnNwbGl0KCcsJyk7XHJcblxyXG53aGlsZSAoaSA8IGwpIHtcclxuICBpZiAoVHlwZWQgPSBnbG9iYWxbVHlwZWRBcnJheUNvbnN0cnVjdG9yc1tpKytdXSkge1xyXG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFRZUEVELCB0cnVlKTtcclxuICAgIGhpZGUoVHlwZWQucHJvdG90eXBlLCBWSUVXLCB0cnVlKTtcclxuICB9IGVsc2UgQ09OU1RSID0gZmFsc2U7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIEFCVjogQUJWLFxyXG4gIENPTlNUUjogQ09OU1RSLFxyXG4gIFRZUEVEOiBUWVBFRCxcclxuICBWSUVXOiBWSUVXXHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gRm9yY2VkIHJlcGxhY2VtZW50IHByb3RvdHlwZSBhY2Nlc3NvcnMgbWV0aG9kc1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIEsgPSBNYXRoLnJhbmRvbSgpO1xyXG4gIC8vIEluIEZGIHRocm93cyBvbmx5IGRlZmluZSBtZXRob2RzXHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmLCBuby11c2VsZXNzLWNhbGxcclxuICBfX2RlZmluZVNldHRlcl9fLmNhbGwobnVsbCwgSywgZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcclxuICBkZWxldGUgcmVxdWlyZSgnLi9fZ2xvYmFsJylbS107XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS9cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKENPTExFQ1RJT04pIHtcclxuICAkZXhwb3J0KCRleHBvcnQuUywgQ09MTEVDVElPTiwgeyBvZjogZnVuY3Rpb24gb2YoKSB7XHJcbiAgICB2YXIgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIHZhciBBID0gbmV3IEFycmF5KGxlbmd0aCk7XHJcbiAgICB3aGlsZSAobGVuZ3RoLS0pIEFbbGVuZ3RoXSA9IGFyZ3VtZW50c1tsZW5ndGhdO1xyXG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xyXG4gIH0gfSk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xyXG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IGZyb206IGZ1bmN0aW9uIGZyb20oc291cmNlIC8qICwgbWFwRm4sIHRoaXNBcmcgKi8pIHtcclxuICAgIHZhciBtYXBGbiA9IGFyZ3VtZW50c1sxXTtcclxuICAgIHZhciBtYXBwaW5nLCBBLCBuLCBjYjtcclxuICAgIGFGdW5jdGlvbih0aGlzKTtcclxuICAgIG1hcHBpbmcgPSBtYXBGbiAhPT0gdW5kZWZpbmVkO1xyXG4gICAgaWYgKG1hcHBpbmcpIGFGdW5jdGlvbihtYXBGbik7XHJcbiAgICBpZiAoc291cmNlID09IHVuZGVmaW5lZCkgcmV0dXJuIG5ldyB0aGlzKCk7XHJcbiAgICBBID0gW107XHJcbiAgICBpZiAobWFwcGluZykge1xyXG4gICAgICBuID0gMDtcclxuICAgICAgY2IgPSBjdHgobWFwRm4sIGFyZ3VtZW50c1syXSwgMik7XHJcbiAgICAgIGZvck9mKHNvdXJjZSwgZmFsc2UsIGZ1bmN0aW9uIChuZXh0SXRlbSkge1xyXG4gICAgICAgIEEucHVzaChjYihuZXh0SXRlbSwgbisrKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgQS5wdXNoLCBBKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgdGhpcyhBKTtcclxuICB9IH0pO1xyXG59O1xyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XHJcbi8vIHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50IGlzICdvYmplY3QnIGluIG9sZCBJRVxyXG52YXIgaXMgPSBpc09iamVjdChkb2N1bWVudCkgJiYgaXNPYmplY3QoZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGlzID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcclxufTtcclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcclxudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XHJcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XHJcbnZhciBkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICB2YXIgJFN5bWJvbCA9IGNvcmUuU3ltYm9sIHx8IChjb3JlLlN5bWJvbCA9IExJQlJBUlkgPyB7fSA6IGdsb2JhbC5TeW1ib2wgfHwge30pO1xyXG4gIGlmIChuYW1lLmNoYXJBdCgwKSAhPSAnXycgJiYgIShuYW1lIGluICRTeW1ib2wpKSBkZWZpbmVQcm9wZXJ0eSgkU3ltYm9sLCBuYW1lLCB7IHZhbHVlOiB3a3NFeHQuZihuYW1lKSB9KTtcclxufTtcclxuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdrZXlzJyk7XHJcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgcmV0dXJuIHNoYXJlZFtrZXldIHx8IChzaGFyZWRba2V5XSA9IHVpZChrZXkpKTtcclxufTtcclxuIiwiLy8gSUUgOC0gZG9uJ3QgZW51bSBidWcga2V5c1xyXG5tb2R1bGUuZXhwb3J0cyA9IChcclxuICAnY29uc3RydWN0b3IsaGFzT3duUHJvcGVydHksaXNQcm90b3R5cGVPZixwcm9wZXJ0eUlzRW51bWVyYWJsZSx0b0xvY2FsZVN0cmluZyx0b1N0cmluZyx2YWx1ZU9mJ1xyXG4pLnNwbGl0KCcsJyk7XHJcbiIsInZhciBkb2N1bWVudCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmRvY3VtZW50O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGRvY3VtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudDtcclxuIiwiLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXHJcbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGNoZWNrID0gZnVuY3Rpb24gKE8sIHByb3RvKSB7XHJcbiAgYW5PYmplY3QoTyk7XHJcbiAgaWYgKCFpc09iamVjdChwcm90bykgJiYgcHJvdG8gIT09IG51bGwpIHRocm93IFR5cGVFcnJvcihwcm90byArIFwiOiBjYW4ndCBzZXQgYXMgcHJvdG90eXBlIVwiKTtcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgc2V0OiBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gLy8gZXNsaW50LWRpc2FibGUtbGluZVxyXG4gICAgZnVuY3Rpb24gKHRlc3QsIGJ1Z2d5LCBzZXQpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBzZXQgPSByZXF1aXJlKCcuL19jdHgnKShGdW5jdGlvbi5jYWxsLCByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmYoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldCwgMik7XHJcbiAgICAgICAgc2V0KHRlc3QsIFtdKTtcclxuICAgICAgICBidWdneSA9ICEodGVzdCBpbnN0YW5jZW9mIEFycmF5KTtcclxuICAgICAgfSBjYXRjaCAoZSkgeyBidWdneSA9IHRydWU7IH1cclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XHJcbiAgICAgICAgY2hlY2soTywgcHJvdG8pO1xyXG4gICAgICAgIGlmIChidWdneSkgTy5fX3Byb3RvX18gPSBwcm90bztcclxuICAgICAgICBlbHNlIHNldChPLCBwcm90byk7XHJcbiAgICAgICAgcmV0dXJuIE87XHJcbiAgICAgIH07XHJcbiAgICB9KHt9LCBmYWxzZSkgOiB1bmRlZmluZWQpLFxyXG4gIGNoZWNrOiBjaGVja1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9ICdcXHgwOVxceDBBXFx4MEJcXHgwQ1xceDBEXFx4MjBcXHhBMFxcdTE2ODBcXHUxODBFXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwMycgK1xyXG4gICdcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBBXFx1MjAyRlxcdTIwNUZcXHUzMDAwXFx1MjAyOFxcdTIwMjlcXHVGRUZGJztcclxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpLnNldDtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgdGFyZ2V0LCBDKSB7XHJcbiAgdmFyIFMgPSB0YXJnZXQuY29uc3RydWN0b3I7XHJcbiAgdmFyIFA7XHJcbiAgaWYgKFMgIT09IEMgJiYgdHlwZW9mIFMgPT0gJ2Z1bmN0aW9uJyAmJiAoUCA9IFMucHJvdG90eXBlKSAhPT0gQy5wcm90b3R5cGUgJiYgaXNPYmplY3QoUCkgJiYgc2V0UHJvdG90eXBlT2YpIHtcclxuICAgIHNldFByb3RvdHlwZU9mKHRoYXQsIFApO1xyXG4gIH0gcmV0dXJuIHRoYXQ7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcclxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHJlcGVhdChjb3VudCkge1xyXG4gIHZhciBzdHIgPSBTdHJpbmcoZGVmaW5lZCh0aGlzKSk7XHJcbiAgdmFyIHJlcyA9ICcnO1xyXG4gIHZhciBuID0gdG9JbnRlZ2VyKGNvdW50KTtcclxuICBpZiAobiA8IDAgfHwgbiA9PSBJbmZpbml0eSkgdGhyb3cgUmFuZ2VFcnJvcihcIkNvdW50IGNhbid0IGJlIG5lZ2F0aXZlXCIpO1xyXG4gIGZvciAoO24gPiAwOyAobiA+Pj49IDEpICYmIChzdHIgKz0gc3RyKSkgaWYgKG4gJiAxKSByZXMgKz0gc3RyO1xyXG4gIHJldHVybiByZXM7XHJcbn07XHJcbiIsIi8vIDIwLjIuMi4yOCBNYXRoLnNpZ24oeClcclxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNpZ24gfHwgZnVuY3Rpb24gc2lnbih4KSB7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwIHx8IHggIT0geCA/IHggOiB4IDwgMCA/IC0xIDogMTtcclxufTtcclxuIiwiLy8gMjAuMi4yLjE0IE1hdGguZXhwbTEoeClcclxudmFyICRleHBtMSA9IE1hdGguZXhwbTE7XHJcbm1vZHVsZS5leHBvcnRzID0gKCEkZXhwbTFcclxuICAvLyBPbGQgRkYgYnVnXHJcbiAgfHwgJGV4cG0xKDEwKSA+IDIyMDI1LjQ2NTc5NDgwNjcxOSB8fCAkZXhwbTEoMTApIDwgMjIwMjUuNDY1Nzk0ODA2NzE2NTE2OFxyXG4gIC8vIFRvciBCcm93c2VyIGJ1Z1xyXG4gIHx8ICRleHBtMSgtMmUtMTcpICE9IC0yZS0xN1xyXG4pID8gZnVuY3Rpb24gZXhwbTEoeCkge1xyXG4gIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IHggPiAtMWUtNiAmJiB4IDwgMWUtNiA/IHggKyB4ICogeCAvIDIgOiBNYXRoLmV4cCh4KSAtIDE7XHJcbn0gOiAkZXhwbTE7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XHJcbnZhciAkaXRlckNyZWF0ZSA9IHJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJyk7XHJcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XHJcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XHJcbnZhciBCVUdHWSA9ICEoW10ua2V5cyAmJiAnbmV4dCcgaW4gW10ua2V5cygpKTsgLy8gU2FmYXJpIGhhcyBidWdneSBpdGVyYXRvcnMgdy9vIGBuZXh0YFxyXG52YXIgRkZfSVRFUkFUT1IgPSAnQEBpdGVyYXRvcic7XHJcbnZhciBLRVlTID0gJ2tleXMnO1xyXG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XHJcblxyXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChCYXNlLCBOQU1FLCBDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcclxuICAkaXRlckNyZWF0ZShDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XHJcbiAgdmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChraW5kKSB7XHJcbiAgICBpZiAoIUJVR0dZICYmIGtpbmQgaW4gcHJvdG8pIHJldHVybiBwcm90b1traW5kXTtcclxuICAgIHN3aXRjaCAoa2luZCkge1xyXG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xyXG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcclxuICAgIH0gcmV0dXJuIGZ1bmN0aW9uIGVudHJpZXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XHJcbiAgfTtcclxuICB2YXIgVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xyXG4gIHZhciBERUZfVkFMVUVTID0gREVGQVVMVCA9PSBWQUxVRVM7XHJcbiAgdmFyIFZBTFVFU19CVUcgPSBmYWxzZTtcclxuICB2YXIgcHJvdG8gPSBCYXNlLnByb3RvdHlwZTtcclxuICB2YXIgJG5hdGl2ZSA9IHByb3RvW0lURVJBVE9SXSB8fCBwcm90b1tGRl9JVEVSQVRPUl0gfHwgREVGQVVMVCAmJiBwcm90b1tERUZBVUxUXTtcclxuICB2YXIgJGRlZmF1bHQgPSAkbmF0aXZlIHx8IGdldE1ldGhvZChERUZBVUxUKTtcclxuICB2YXIgJGVudHJpZXMgPSBERUZBVUxUID8gIURFRl9WQUxVRVMgPyAkZGVmYXVsdCA6IGdldE1ldGhvZCgnZW50cmllcycpIDogdW5kZWZpbmVkO1xyXG4gIHZhciAkYW55TmF0aXZlID0gTkFNRSA9PSAnQXJyYXknID8gcHJvdG8uZW50cmllcyB8fCAkbmF0aXZlIDogJG5hdGl2ZTtcclxuICB2YXIgbWV0aG9kcywga2V5LCBJdGVyYXRvclByb3RvdHlwZTtcclxuICAvLyBGaXggbmF0aXZlXHJcbiAgaWYgKCRhbnlOYXRpdmUpIHtcclxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoJGFueU5hdGl2ZS5jYWxsKG5ldyBCYXNlKCkpKTtcclxuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XHJcbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcclxuICAgICAgc2V0VG9TdHJpbmdUYWcoSXRlcmF0b3JQcm90b3R5cGUsIFRBRywgdHJ1ZSk7XHJcbiAgICAgIC8vIGZpeCBmb3Igc29tZSBvbGQgZW5naW5lc1xyXG4gICAgICBpZiAoIUxJQlJBUlkgJiYgdHlwZW9mIEl0ZXJhdG9yUHJvdG90eXBlW0lURVJBVE9SXSAhPSAnZnVuY3Rpb24nKSBoaWRlKEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcclxuICBpZiAoREVGX1ZBTFVFUyAmJiAkbmF0aXZlICYmICRuYXRpdmUubmFtZSAhPT0gVkFMVUVTKSB7XHJcbiAgICBWQUxVRVNfQlVHID0gdHJ1ZTtcclxuICAgICRkZWZhdWx0ID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gJG5hdGl2ZS5jYWxsKHRoaXMpOyB9O1xyXG4gIH1cclxuICAvLyBEZWZpbmUgaXRlcmF0b3JcclxuICBpZiAoKCFMSUJSQVJZIHx8IEZPUkNFRCkgJiYgKEJVR0dZIHx8IFZBTFVFU19CVUcgfHwgIXByb3RvW0lURVJBVE9SXSkpIHtcclxuICAgIGhpZGUocHJvdG8sIElURVJBVE9SLCAkZGVmYXVsdCk7XHJcbiAgfVxyXG4gIC8vIFBsdWcgZm9yIGxpYnJhcnlcclxuICBJdGVyYXRvcnNbTkFNRV0gPSAkZGVmYXVsdDtcclxuICBJdGVyYXRvcnNbVEFHXSA9IHJldHVyblRoaXM7XHJcbiAgaWYgKERFRkFVTFQpIHtcclxuICAgIG1ldGhvZHMgPSB7XHJcbiAgICAgIHZhbHVlczogREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKFZBTFVFUyksXHJcbiAgICAgIGtleXM6IElTX1NFVCA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKEtFWVMpLFxyXG4gICAgICBlbnRyaWVzOiAkZW50cmllc1xyXG4gICAgfTtcclxuICAgIGlmIChGT1JDRUQpIGZvciAoa2V5IGluIG1ldGhvZHMpIHtcclxuICAgICAgaWYgKCEoa2V5IGluIHByb3RvKSkgcmVkZWZpbmUocHJvdG8sIGtleSwgbWV0aG9kc1trZXldKTtcclxuICAgIH0gZWxzZSAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChCVUdHWSB8fCBWQUxVRVNfQlVHKSwgTkFNRSwgbWV0aG9kcyk7XHJcbiAgfVxyXG4gIHJldHVybiBtZXRob2RzO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XHJcbnZhciBkZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xyXG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpO1xyXG52YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcclxuXHJcbi8vIDI1LjEuMi4xLjEgJUl0ZXJhdG9yUHJvdG90eXBlJVtAQGl0ZXJhdG9yXSgpXHJcbnJlcXVpcmUoJy4vX2hpZGUnKShJdGVyYXRvclByb3RvdHlwZSwgcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyksIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ29uc3RydWN0b3IsIE5BTUUsIG5leHQpIHtcclxuICBDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogZGVzY3JpcHRvcigxLCBuZXh0KSB9KTtcclxuICBzZXRUb1N0cmluZ1RhZyhDb25zdHJ1Y3RvciwgTkFNRSArICcgSXRlcmF0b3InKTtcclxufTtcclxuIiwiLy8gaGVscGVyIGZvciBTdHJpbmcje3N0YXJ0c1dpdGgsIGVuZHNXaXRoLCBpbmNsdWRlc31cclxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgc2VhcmNoU3RyaW5nLCBOQU1FKSB7XHJcbiAgaWYgKGlzUmVnRXhwKHNlYXJjaFN0cmluZykpIHRocm93IFR5cGVFcnJvcignU3RyaW5nIycgKyBOQU1FICsgXCIgZG9lc24ndCBhY2NlcHQgcmVnZXghXCIpO1xyXG4gIHJldHVybiBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XHJcbn07XHJcbiIsInZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcclxuICB2YXIgcmUgPSAvLi87XHJcbiAgdHJ5IHtcclxuICAgICcvLi8nW0tFWV0ocmUpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJlW01BVENIXSA9IGZhbHNlO1xyXG4gICAgICByZXR1cm4gIScvLi8nW0tFWV0ocmUpO1xyXG4gICAgfSBjYXRjaCAoZikgeyAvKiBlbXB0eSAqLyB9XHJcbiAgfSByZXR1cm4gdHJ1ZTtcclxufTtcclxuIiwiLy8gY2hlY2sgb24gZGVmYXVsdCBBcnJheSBpdGVyYXRvclxyXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XHJcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xyXG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGl0ICE9PSB1bmRlZmluZWQgJiYgKEl0ZXJhdG9ycy5BcnJheSA9PT0gaXQgfHwgQXJyYXlQcm90b1tJVEVSQVRPUl0gPT09IGl0KTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob2JqZWN0LCBpbmRleCwgdmFsdWUpIHtcclxuICBpZiAoaW5kZXggaW4gb2JqZWN0KSAkZGVmaW5lUHJvcGVydHkuZihvYmplY3QsIGluZGV4LCBjcmVhdGVEZXNjKDAsIHZhbHVlKSk7XHJcbiAgZWxzZSBvYmplY3RbaW5kZXhdID0gdmFsdWU7XHJcbn07XHJcbiIsInZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvcmUnKS5nZXRJdGVyYXRvck1ldGhvZCA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIGlmIChpdCAhPSB1bmRlZmluZWQpIHJldHVybiBpdFtJVEVSQVRPUl1cclxuICAgIHx8IGl0WydAQGl0ZXJhdG9yJ11cclxuICAgIHx8IEl0ZXJhdG9yc1tjbGFzc29mKGl0KV07XHJcbn07XHJcbiIsIi8vIDkuNC4yLjMgQXJyYXlTcGVjaWVzQ3JlYXRlKG9yaWdpbmFsQXJyYXksIGxlbmd0aClcclxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY29uc3RydWN0b3InKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsLCBsZW5ndGgpIHtcclxuICByZXR1cm4gbmV3IChzcGVjaWVzQ29uc3RydWN0b3Iob3JpZ2luYWwpKShsZW5ndGgpO1xyXG59O1xyXG4iLCIvLyAyMi4xLjMuNiBBcnJheS5wcm90b3R5cGUuZmlsbCh2YWx1ZSwgc3RhcnQgPSAwLCBlbmQgPSB0aGlzLmxlbmd0aClcclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCA9IDAsIGVuZCA9IEBsZW5ndGggKi8pIHtcclxuICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xyXG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgbGVuZ3RoKTtcclxuICB2YXIgZW5kID0gYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQ7XHJcbiAgdmFyIGVuZFBvcyA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKTtcclxuICB3aGlsZSAoZW5kUG9zID4gaW5kZXgpIE9baW5kZXgrK10gPSB2YWx1ZTtcclxuICByZXR1cm4gTztcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpO1xyXG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xyXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcblxyXG4vLyAyMi4xLjMuNCBBcnJheS5wcm90b3R5cGUuZW50cmllcygpXHJcbi8vIDIyLjEuMy4xMyBBcnJheS5wcm90b3R5cGUua2V5cygpXHJcbi8vIDIyLjEuMy4yOSBBcnJheS5wcm90b3R5cGUudmFsdWVzKClcclxuLy8gMjIuMS4zLjMwIEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKShBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XHJcbiAgdGhpcy5fdCA9IHRvSU9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxyXG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XHJcbiAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgIC8vIGtpbmRcclxuLy8gMjIuMS41LjIuMSAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXHJcbn0sIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgTyA9IHRoaXMuX3Q7XHJcbiAgdmFyIGtpbmQgPSB0aGlzLl9rO1xyXG4gIHZhciBpbmRleCA9IHRoaXMuX2krKztcclxuICBpZiAoIU8gfHwgaW5kZXggPj0gTy5sZW5ndGgpIHtcclxuICAgIHRoaXMuX3QgPSB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gc3RlcCgxKTtcclxuICB9XHJcbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBpbmRleCk7XHJcbiAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIE9baW5kZXhdKTtcclxuICByZXR1cm4gc3RlcCgwLCBbaW5kZXgsIE9baW5kZXhdXSk7XHJcbn0sICd2YWx1ZXMnKTtcclxuXHJcbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJSAoOS40LjQuNiwgOS40LjQuNylcclxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcclxuXHJcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcclxuYWRkVG9VbnNjb3BhYmxlcygndmFsdWVzJyk7XHJcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIHJlZ2V4cEZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcclxuXHJcbnZhciBuYXRpdmVFeGVjID0gUmVnRXhwLnByb3RvdHlwZS5leGVjO1xyXG4vLyBUaGlzIGFsd2F5cyByZWZlcnMgdG8gdGhlIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiwgYmVjYXVzZSB0aGVcclxuLy8gU3RyaW5nI3JlcGxhY2UgcG9seWZpbGwgdXNlcyAuL2ZpeC1yZWdleHAtd2VsbC1rbm93bi1zeW1ib2wtbG9naWMuanMsXHJcbi8vIHdoaWNoIGxvYWRzIHRoaXMgZmlsZSBiZWZvcmUgcGF0Y2hpbmcgdGhlIG1ldGhvZC5cclxudmFyIG5hdGl2ZVJlcGxhY2UgPSBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2U7XHJcblxyXG52YXIgcGF0Y2hlZEV4ZWMgPSBuYXRpdmVFeGVjO1xyXG5cclxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcclxuXHJcbnZhciBVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgPSAoZnVuY3Rpb24gKCkge1xyXG4gIHZhciByZTEgPSAvYS8sXHJcbiAgICAgIHJlMiA9IC9iKi9nO1xyXG4gIG5hdGl2ZUV4ZWMuY2FsbChyZTEsICdhJyk7XHJcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMiwgJ2EnKTtcclxuICByZXR1cm4gcmUxW0xBU1RfSU5ERVhdICE9PSAwIHx8IHJlMltMQVNUX0lOREVYXSAhPT0gMDtcclxufSkoKTtcclxuXHJcbi8vIG5vbnBhcnRpY2lwYXRpbmcgY2FwdHVyaW5nIGdyb3VwLCBjb3BpZWQgZnJvbSBlczUtc2hpbSdzIFN0cmluZyNzcGxpdCBwYXRjaC5cclxudmFyIE5QQ0dfSU5DTFVERUQgPSAvKCk/Py8uZXhlYygnJylbMV0gIT09IHVuZGVmaW5lZDtcclxuXHJcbnZhciBQQVRDSCA9IFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyB8fCBOUENHX0lOQ0xVREVEO1xyXG5cclxuaWYgKFBBVENIKSB7XHJcbiAgcGF0Y2hlZEV4ZWMgPSBmdW5jdGlvbiBleGVjKHN0cikge1xyXG4gICAgdmFyIHJlID0gdGhpcztcclxuICAgIHZhciBsYXN0SW5kZXgsIHJlQ29weSwgbWF0Y2gsIGk7XHJcblxyXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQpIHtcclxuICAgICAgcmVDb3B5ID0gbmV3IFJlZ0V4cCgnXicgKyByZS5zb3VyY2UgKyAnJCg/IVxcXFxzKScsIHJlZ2V4cEZsYWdzLmNhbGwocmUpKTtcclxuICAgIH1cclxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcpIGxhc3RJbmRleCA9IHJlW0xBU1RfSU5ERVhdO1xyXG5cclxuICAgIG1hdGNoID0gbmF0aXZlRXhlYy5jYWxsKHJlLCBzdHIpO1xyXG5cclxuICAgIGlmIChVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkcgJiYgbWF0Y2gpIHtcclxuICAgICAgcmVbTEFTVF9JTkRFWF0gPSByZS5nbG9iYWwgPyBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aCA6IGxhc3RJbmRleDtcclxuICAgIH1cclxuICAgIGlmIChOUENHX0lOQ0xVREVEICYmIG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDEpIHtcclxuICAgICAgLy8gRml4IGJyb3dzZXJzIHdob3NlIGBleGVjYCBtZXRob2RzIGRvbid0IGNvbnNpc3RlbnRseSByZXR1cm4gYHVuZGVmaW5lZGBcclxuICAgICAgLy8gZm9yIE5QQ0csIGxpa2UgSUU4LiBOT1RFOiBUaGlzIGRvZXNuJyB3b3JrIGZvciAvKC4/KT8vXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1sb29wLWZ1bmNcclxuICAgICAgbmF0aXZlUmVwbGFjZS5jYWxsKG1hdGNoWzBdLCByZUNvcHksIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aCAtIDI7IGkrKykge1xyXG4gICAgICAgICAgaWYgKGFyZ3VtZW50c1tpXSA9PT0gdW5kZWZpbmVkKSBtYXRjaFtpXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBtYXRjaDtcclxuICB9O1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGNoZWRFeGVjO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xyXG5cclxuIC8vIGBBZHZhbmNlU3RyaW5nSW5kZXhgIGFic3RyYWN0IG9wZXJhdGlvblxyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hZHZhbmNlc3RyaW5naW5kZXhcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoUywgaW5kZXgsIHVuaWNvZGUpIHtcclxuICByZXR1cm4gaW5kZXggKyAodW5pY29kZSA/IGF0KFMsIGluZGV4KS5sZW5ndGggOiAxKTtcclxufTtcclxuIiwidmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XHJcbnZhciBodG1sID0gcmVxdWlyZSgnLi9faHRtbCcpO1xyXG52YXIgY2VsID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XHJcbnZhciBzZXRUYXNrID0gZ2xvYmFsLnNldEltbWVkaWF0ZTtcclxudmFyIGNsZWFyVGFzayA9IGdsb2JhbC5jbGVhckltbWVkaWF0ZTtcclxudmFyIE1lc3NhZ2VDaGFubmVsID0gZ2xvYmFsLk1lc3NhZ2VDaGFubmVsO1xyXG52YXIgRGlzcGF0Y2ggPSBnbG9iYWwuRGlzcGF0Y2g7XHJcbnZhciBjb3VudGVyID0gMDtcclxudmFyIHF1ZXVlID0ge307XHJcbnZhciBPTlJFQURZU1RBVEVDSEFOR0UgPSAnb25yZWFkeXN0YXRlY2hhbmdlJztcclxudmFyIGRlZmVyLCBjaGFubmVsLCBwb3J0O1xyXG52YXIgcnVuID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBpZCA9ICt0aGlzO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcclxuICBpZiAocXVldWUuaGFzT3duUHJvcGVydHkoaWQpKSB7XHJcbiAgICB2YXIgZm4gPSBxdWV1ZVtpZF07XHJcbiAgICBkZWxldGUgcXVldWVbaWRdO1xyXG4gICAgZm4oKTtcclxuICB9XHJcbn07XHJcbnZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIChldmVudCkge1xyXG4gIHJ1bi5jYWxsKGV2ZW50LmRhdGEpO1xyXG59O1xyXG4vLyBOb2RlLmpzIDAuOSsgJiBJRTEwKyBoYXMgc2V0SW1tZWRpYXRlLCBvdGhlcndpc2U6XHJcbmlmICghc2V0VGFzayB8fCAhY2xlYXJUYXNrKSB7XHJcbiAgc2V0VGFzayA9IGZ1bmN0aW9uIHNldEltbWVkaWF0ZShmbikge1xyXG4gICAgdmFyIGFyZ3MgPSBbXTtcclxuICAgIHZhciBpID0gMTtcclxuICAgIHdoaWxlIChhcmd1bWVudHMubGVuZ3RoID4gaSkgYXJncy5wdXNoKGFyZ3VtZW50c1tpKytdKTtcclxuICAgIHF1ZXVlWysrY291bnRlcl0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gICAgICBpbnZva2UodHlwZW9mIGZuID09ICdmdW5jdGlvbicgPyBmbiA6IEZ1bmN0aW9uKGZuKSwgYXJncyk7XHJcbiAgICB9O1xyXG4gICAgZGVmZXIoY291bnRlcik7XHJcbiAgICByZXR1cm4gY291bnRlcjtcclxuICB9O1xyXG4gIGNsZWFyVGFzayA9IGZ1bmN0aW9uIGNsZWFySW1tZWRpYXRlKGlkKSB7XHJcbiAgICBkZWxldGUgcXVldWVbaWRdO1xyXG4gIH07XHJcbiAgLy8gTm9kZS5qcyAwLjgtXHJcbiAgaWYgKHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJykge1xyXG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgcHJvY2Vzcy5uZXh0VGljayhjdHgocnVuLCBpZCwgMSkpO1xyXG4gICAgfTtcclxuICAvLyBTcGhlcmUgKEpTIGdhbWUgZW5naW5lKSBEaXNwYXRjaCBBUElcclxuICB9IGVsc2UgaWYgKERpc3BhdGNoICYmIERpc3BhdGNoLm5vdykge1xyXG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgRGlzcGF0Y2gubm93KGN0eChydW4sIGlkLCAxKSk7XHJcbiAgICB9O1xyXG4gIC8vIEJyb3dzZXJzIHdpdGggTWVzc2FnZUNoYW5uZWwsIGluY2x1ZGVzIFdlYldvcmtlcnNcclxuICB9IGVsc2UgaWYgKE1lc3NhZ2VDaGFubmVsKSB7XHJcbiAgICBjaGFubmVsID0gbmV3IE1lc3NhZ2VDaGFubmVsKCk7XHJcbiAgICBwb3J0ID0gY2hhbm5lbC5wb3J0MjtcclxuICAgIGNoYW5uZWwucG9ydDEub25tZXNzYWdlID0gbGlzdGVuZXI7XHJcbiAgICBkZWZlciA9IGN0eChwb3J0LnBvc3RNZXNzYWdlLCBwb3J0LCAxKTtcclxuICAvLyBCcm93c2VycyB3aXRoIHBvc3RNZXNzYWdlLCBza2lwIFdlYldvcmtlcnNcclxuICAvLyBJRTggaGFzIHBvc3RNZXNzYWdlLCBidXQgaXQncyBzeW5jICYgdHlwZW9mIGl0cyBwb3N0TWVzc2FnZSBpcyAnb2JqZWN0J1xyXG4gIH0gZWxzZSBpZiAoZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIgJiYgdHlwZW9mIHBvc3RNZXNzYWdlID09ICdmdW5jdGlvbicgJiYgIWdsb2JhbC5pbXBvcnRTY3JpcHRzKSB7XHJcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICBnbG9iYWwucG9zdE1lc3NhZ2UoaWQgKyAnJywgJyonKTtcclxuICAgIH07XHJcbiAgICBnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIGxpc3RlbmVyLCBmYWxzZSk7XHJcbiAgLy8gSUU4LVxyXG4gIH0gZWxzZSBpZiAoT05SRUFEWVNUQVRFQ0hBTkdFIGluIGNlbCgnc2NyaXB0JykpIHtcclxuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgIGh0bWwuYXBwZW5kQ2hpbGQoY2VsKCdzY3JpcHQnKSlbT05SRUFEWVNUQVRFQ0hBTkdFXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBodG1sLnJlbW92ZUNoaWxkKHRoaXMpO1xyXG4gICAgICAgIHJ1bi5jYWxsKGlkKTtcclxuICAgICAgfTtcclxuICAgIH07XHJcbiAgLy8gUmVzdCBvbGQgYnJvd3NlcnNcclxuICB9IGVsc2Uge1xyXG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgc2V0VGltZW91dChjdHgocnVuLCBpZCwgMSksIDApO1xyXG4gICAgfTtcclxuICB9XHJcbn1cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgc2V0OiBzZXRUYXNrLFxyXG4gIGNsZWFyOiBjbGVhclRhc2tcclxufTtcclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgbWFjcm90YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcclxudmFyIE9ic2VydmVyID0gZ2xvYmFsLk11dGF0aW9uT2JzZXJ2ZXIgfHwgZ2xvYmFsLldlYktpdE11dGF0aW9uT2JzZXJ2ZXI7XHJcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XHJcbnZhciBQcm9taXNlID0gZ2xvYmFsLlByb21pc2U7XHJcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgaGVhZCwgbGFzdCwgbm90aWZ5O1xyXG5cclxuICB2YXIgZmx1c2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgcGFyZW50LCBmbjtcclxuICAgIGlmIChpc05vZGUgJiYgKHBhcmVudCA9IHByb2Nlc3MuZG9tYWluKSkgcGFyZW50LmV4aXQoKTtcclxuICAgIHdoaWxlIChoZWFkKSB7XHJcbiAgICAgIGZuID0gaGVhZC5mbjtcclxuICAgICAgaGVhZCA9IGhlYWQubmV4dDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBmbigpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGhlYWQpIG5vdGlmeSgpO1xyXG4gICAgICAgIGVsc2UgbGFzdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgICB9XHJcbiAgICB9IGxhc3QgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAocGFyZW50KSBwYXJlbnQuZW50ZXIoKTtcclxuICB9O1xyXG5cclxuICAvLyBOb2RlLmpzXHJcbiAgaWYgKGlzTm9kZSkge1xyXG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZsdXNoKTtcclxuICAgIH07XHJcbiAgLy8gYnJvd3NlcnMgd2l0aCBNdXRhdGlvbk9ic2VydmVyLCBleGNlcHQgaU9TIFNhZmFyaSAtIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8zMzlcclxuICB9IGVsc2UgaWYgKE9ic2VydmVyICYmICEoZ2xvYmFsLm5hdmlnYXRvciAmJiBnbG9iYWwubmF2aWdhdG9yLnN0YW5kYWxvbmUpKSB7XHJcbiAgICB2YXIgdG9nZ2xlID0gdHJ1ZTtcclxuICAgIHZhciBub2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoJycpO1xyXG4gICAgbmV3IE9ic2VydmVyKGZsdXNoKS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgbm9kZS5kYXRhID0gdG9nZ2xlID0gIXRvZ2dsZTtcclxuICAgIH07XHJcbiAgLy8gZW52aXJvbm1lbnRzIHdpdGggbWF5YmUgbm9uLWNvbXBsZXRlbHkgY29ycmVjdCwgYnV0IGV4aXN0ZW50IFByb21pc2VcclxuICB9IGVsc2UgaWYgKFByb21pc2UgJiYgUHJvbWlzZS5yZXNvbHZlKSB7XHJcbiAgICAvLyBQcm9taXNlLnJlc29sdmUgd2l0aG91dCBhbiBhcmd1bWVudCB0aHJvd3MgYW4gZXJyb3IgaW4gTEcgV2ViT1MgMlxyXG4gICAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUodW5kZWZpbmVkKTtcclxuICAgIG5vdGlmeSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgcHJvbWlzZS50aGVuKGZsdXNoKTtcclxuICAgIH07XHJcbiAgLy8gZm9yIG90aGVyIGVudmlyb25tZW50cyAtIG1hY3JvdGFzayBiYXNlZCBvbjpcclxuICAvLyAtIHNldEltbWVkaWF0ZVxyXG4gIC8vIC0gTWVzc2FnZUNoYW5uZWxcclxuICAvLyAtIHdpbmRvdy5wb3N0TWVzc2FnXHJcbiAgLy8gLSBvbnJlYWR5c3RhdGVjaGFuZ2VcclxuICAvLyAtIHNldFRpbWVvdXRcclxuICB9IGVsc2Uge1xyXG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBzdHJhbmdlIElFICsgd2VicGFjayBkZXYgc2VydmVyIGJ1ZyAtIHVzZSAuY2FsbChnbG9iYWwpXHJcbiAgICAgIG1hY3JvdGFzay5jYWxsKGdsb2JhbCwgZmx1c2gpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiBmdW5jdGlvbiAoZm4pIHtcclxuICAgIHZhciB0YXNrID0geyBmbjogZm4sIG5leHQ6IHVuZGVmaW5lZCB9O1xyXG4gICAgaWYgKGxhc3QpIGxhc3QubmV4dCA9IHRhc2s7XHJcbiAgICBpZiAoIWhlYWQpIHtcclxuICAgICAgaGVhZCA9IHRhc2s7XHJcbiAgICAgIG5vdGlmeSgpO1xyXG4gICAgfSBsYXN0ID0gdGFzaztcclxuICB9O1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDI1LjQuMS41IE5ld1Byb21pc2VDYXBhYmlsaXR5KEMpXHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcblxyXG5mdW5jdGlvbiBQcm9taXNlQ2FwYWJpbGl0eShDKSB7XHJcbiAgdmFyIHJlc29sdmUsIHJlamVjdDtcclxuICB0aGlzLnByb21pc2UgPSBuZXcgQyhmdW5jdGlvbiAoJCRyZXNvbHZlLCAkJHJlamVjdCkge1xyXG4gICAgaWYgKHJlc29sdmUgIT09IHVuZGVmaW5lZCB8fCByZWplY3QgIT09IHVuZGVmaW5lZCkgdGhyb3cgVHlwZUVycm9yKCdCYWQgUHJvbWlzZSBjb25zdHJ1Y3RvcicpO1xyXG4gICAgcmVzb2x2ZSA9ICQkcmVzb2x2ZTtcclxuICAgIHJlamVjdCA9ICQkcmVqZWN0O1xyXG4gIH0pO1xyXG4gIHRoaXMucmVzb2x2ZSA9IGFGdW5jdGlvbihyZXNvbHZlKTtcclxuICB0aGlzLnJlamVjdCA9IGFGdW5jdGlvbihyZWplY3QpO1xyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gKEMpIHtcclxuICByZXR1cm4gbmV3IFByb21pc2VDYXBhYmlsaXR5KEMpO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcclxudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XHJcbnZhciAkdHlwZWQgPSByZXF1aXJlKCcuL190eXBlZCcpO1xyXG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcclxudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcclxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciB0b0luZGV4ID0gcmVxdWlyZSgnLi9fdG8taW5kZXgnKTtcclxudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XHJcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbnZhciBhcnJheUZpbGwgPSByZXF1aXJlKCcuL19hcnJheS1maWxsJyk7XHJcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XHJcbnZhciBBUlJBWV9CVUZGRVIgPSAnQXJyYXlCdWZmZXInO1xyXG52YXIgREFUQV9WSUVXID0gJ0RhdGFWaWV3JztcclxudmFyIFBST1RPVFlQRSA9ICdwcm90b3R5cGUnO1xyXG52YXIgV1JPTkdfTEVOR1RIID0gJ1dyb25nIGxlbmd0aCEnO1xyXG52YXIgV1JPTkdfSU5ERVggPSAnV3JvbmcgaW5kZXghJztcclxudmFyICRBcnJheUJ1ZmZlciA9IGdsb2JhbFtBUlJBWV9CVUZGRVJdO1xyXG52YXIgJERhdGFWaWV3ID0gZ2xvYmFsW0RBVEFfVklFV107XHJcbnZhciBNYXRoID0gZ2xvYmFsLk1hdGg7XHJcbnZhciBSYW5nZUVycm9yID0gZ2xvYmFsLlJhbmdlRXJyb3I7XHJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3ctcmVzdHJpY3RlZC1uYW1lc1xyXG52YXIgSW5maW5pdHkgPSBnbG9iYWwuSW5maW5pdHk7XHJcbnZhciBCYXNlQnVmZmVyID0gJEFycmF5QnVmZmVyO1xyXG52YXIgYWJzID0gTWF0aC5hYnM7XHJcbnZhciBwb3cgPSBNYXRoLnBvdztcclxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcclxudmFyIGxvZyA9IE1hdGgubG9nO1xyXG52YXIgTE4yID0gTWF0aC5MTjI7XHJcbnZhciBCVUZGRVIgPSAnYnVmZmVyJztcclxudmFyIEJZVEVfTEVOR1RIID0gJ2J5dGVMZW5ndGgnO1xyXG52YXIgQllURV9PRkZTRVQgPSAnYnl0ZU9mZnNldCc7XHJcbnZhciAkQlVGRkVSID0gREVTQ1JJUFRPUlMgPyAnX2InIDogQlVGRkVSO1xyXG52YXIgJExFTkdUSCA9IERFU0NSSVBUT1JTID8gJ19sJyA6IEJZVEVfTEVOR1RIO1xyXG52YXIgJE9GRlNFVCA9IERFU0NSSVBUT1JTID8gJ19vJyA6IEJZVEVfT0ZGU0VUO1xyXG5cclxuLy8gSUVFRTc1NCBjb252ZXJzaW9ucyBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2llZWU3NTRcclxuZnVuY3Rpb24gcGFja0lFRUU3NTQodmFsdWUsIG1MZW4sIG5CeXRlcykge1xyXG4gIHZhciBidWZmZXIgPSBuZXcgQXJyYXkobkJ5dGVzKTtcclxuICB2YXIgZUxlbiA9IG5CeXRlcyAqIDggLSBtTGVuIC0gMTtcclxuICB2YXIgZU1heCA9ICgxIDw8IGVMZW4pIC0gMTtcclxuICB2YXIgZUJpYXMgPSBlTWF4ID4+IDE7XHJcbiAgdmFyIHJ0ID0gbUxlbiA9PT0gMjMgPyBwb3coMiwgLTI0KSAtIHBvdygyLCAtNzcpIDogMDtcclxuICB2YXIgaSA9IDA7XHJcbiAgdmFyIHMgPSB2YWx1ZSA8IDAgfHwgdmFsdWUgPT09IDAgJiYgMSAvIHZhbHVlIDwgMCA/IDEgOiAwO1xyXG4gIHZhciBlLCBtLCBjO1xyXG4gIHZhbHVlID0gYWJzKHZhbHVlKTtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgaWYgKHZhbHVlICE9IHZhbHVlIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgbSA9IHZhbHVlICE9IHZhbHVlID8gMSA6IDA7XHJcbiAgICBlID0gZU1heDtcclxuICB9IGVsc2Uge1xyXG4gICAgZSA9IGZsb29yKGxvZyh2YWx1ZSkgLyBMTjIpO1xyXG4gICAgaWYgKHZhbHVlICogKGMgPSBwb3coMiwgLWUpKSA8IDEpIHtcclxuICAgICAgZS0tO1xyXG4gICAgICBjICo9IDI7XHJcbiAgICB9XHJcbiAgICBpZiAoZSArIGVCaWFzID49IDEpIHtcclxuICAgICAgdmFsdWUgKz0gcnQgLyBjO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFsdWUgKz0gcnQgKiBwb3coMiwgMSAtIGVCaWFzKTtcclxuICAgIH1cclxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xyXG4gICAgICBlKys7XHJcbiAgICAgIGMgLz0gMjtcclxuICAgIH1cclxuICAgIGlmIChlICsgZUJpYXMgPj0gZU1heCkge1xyXG4gICAgICBtID0gMDtcclxuICAgICAgZSA9IGVNYXg7XHJcbiAgICB9IGVsc2UgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XHJcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBwb3coMiwgbUxlbik7XHJcbiAgICAgIGUgPSBlICsgZUJpYXM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtID0gdmFsdWUgKiBwb3coMiwgZUJpYXMgLSAxKSAqIHBvdygyLCBtTGVuKTtcclxuICAgICAgZSA9IDA7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvciAoOyBtTGVuID49IDg7IGJ1ZmZlcltpKytdID0gbSAmIDI1NSwgbSAvPSAyNTYsIG1MZW4gLT0gOCk7XHJcbiAgZSA9IGUgPDwgbUxlbiB8IG07XHJcbiAgZUxlbiArPSBtTGVuO1xyXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW2krK10gPSBlICYgMjU1LCBlIC89IDI1NiwgZUxlbiAtPSA4KTtcclxuICBidWZmZXJbLS1pXSB8PSBzICogMTI4O1xyXG4gIHJldHVybiBidWZmZXI7XHJcbn1cclxuZnVuY3Rpb24gdW5wYWNrSUVFRTc1NChidWZmZXIsIG1MZW4sIG5CeXRlcykge1xyXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xyXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xyXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcclxuICB2YXIgbkJpdHMgPSBlTGVuIC0gNztcclxuICB2YXIgaSA9IG5CeXRlcyAtIDE7XHJcbiAgdmFyIHMgPSBidWZmZXJbaS0tXTtcclxuICB2YXIgZSA9IHMgJiAxMjc7XHJcbiAgdmFyIG07XHJcbiAgcyA+Pj0gNztcclxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltpXSwgaS0tLCBuQml0cyAtPSA4KTtcclxuICBtID0gZSAmICgxIDw8IC1uQml0cykgLSAxO1xyXG4gIGUgPj49IC1uQml0cztcclxuICBuQml0cyArPSBtTGVuO1xyXG4gIGZvciAoOyBuQml0cyA+IDA7IG0gPSBtICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xyXG4gIGlmIChlID09PSAwKSB7XHJcbiAgICBlID0gMSAtIGVCaWFzO1xyXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xyXG4gICAgcmV0dXJuIG0gPyBOYU4gOiBzID8gLUluZmluaXR5IDogSW5maW5pdHk7XHJcbiAgfSBlbHNlIHtcclxuICAgIG0gPSBtICsgcG93KDIsIG1MZW4pO1xyXG4gICAgZSA9IGUgLSBlQmlhcztcclxuICB9IHJldHVybiAocyA/IC0xIDogMSkgKiBtICogcG93KDIsIGUgLSBtTGVuKTtcclxufVxyXG5cclxuZnVuY3Rpb24gdW5wYWNrSTMyKGJ5dGVzKSB7XHJcbiAgcmV0dXJuIGJ5dGVzWzNdIDw8IDI0IHwgYnl0ZXNbMl0gPDwgMTYgfCBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XHJcbn1cclxuZnVuY3Rpb24gcGFja0k4KGl0KSB7XHJcbiAgcmV0dXJuIFtpdCAmIDB4ZmZdO1xyXG59XHJcbmZ1bmN0aW9uIHBhY2tJMTYoaXQpIHtcclxuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmZdO1xyXG59XHJcbmZ1bmN0aW9uIHBhY2tJMzIoaXQpIHtcclxuICByZXR1cm4gW2l0ICYgMHhmZiwgaXQgPj4gOCAmIDB4ZmYsIGl0ID4+IDE2ICYgMHhmZiwgaXQgPj4gMjQgJiAweGZmXTtcclxufVxyXG5mdW5jdGlvbiBwYWNrRjY0KGl0KSB7XHJcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCA1MiwgOCk7XHJcbn1cclxuZnVuY3Rpb24gcGFja0YzMihpdCkge1xyXG4gIHJldHVybiBwYWNrSUVFRTc1NChpdCwgMjMsIDQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBhZGRHZXR0ZXIoQywga2V5LCBpbnRlcm5hbCkge1xyXG4gIGRQKENbUFJPVE9UWVBFXSwga2V5LCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpc1tpbnRlcm5hbF07IH0gfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldCh2aWV3LCBieXRlcywgaW5kZXgsIGlzTGl0dGxlRW5kaWFuKSB7XHJcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xyXG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xyXG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XHJcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcclxuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XHJcbiAgdmFyIHBhY2sgPSBzdG9yZS5zbGljZShzdGFydCwgc3RhcnQgKyBieXRlcyk7XHJcbiAgcmV0dXJuIGlzTGl0dGxlRW5kaWFuID8gcGFjayA6IHBhY2sucmV2ZXJzZSgpO1xyXG59XHJcbmZ1bmN0aW9uIHNldCh2aWV3LCBieXRlcywgaW5kZXgsIGNvbnZlcnNpb24sIHZhbHVlLCBpc0xpdHRsZUVuZGlhbikge1xyXG4gIHZhciBudW1JbmRleCA9ICtpbmRleDtcclxuICB2YXIgaW50SW5kZXggPSB0b0luZGV4KG51bUluZGV4KTtcclxuICBpZiAoaW50SW5kZXggKyBieXRlcyA+IHZpZXdbJExFTkdUSF0pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfSU5ERVgpO1xyXG4gIHZhciBzdG9yZSA9IHZpZXdbJEJVRkZFUl0uX2I7XHJcbiAgdmFyIHN0YXJ0ID0gaW50SW5kZXggKyB2aWV3WyRPRkZTRVRdO1xyXG4gIHZhciBwYWNrID0gY29udmVyc2lvbigrdmFsdWUpO1xyXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXM7IGkrKykgc3RvcmVbc3RhcnQgKyBpXSA9IHBhY2tbaXNMaXR0bGVFbmRpYW4gPyBpIDogYnl0ZXMgLSBpIC0gMV07XHJcbn1cclxuXHJcbmlmICghJHR5cGVkLkFCVikge1xyXG4gICRBcnJheUJ1ZmZlciA9IGZ1bmN0aW9uIEFycmF5QnVmZmVyKGxlbmd0aCkge1xyXG4gICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XHJcbiAgICB2YXIgYnl0ZUxlbmd0aCA9IHRvSW5kZXgobGVuZ3RoKTtcclxuICAgIHRoaXMuX2IgPSBhcnJheUZpbGwuY2FsbChuZXcgQXJyYXkoYnl0ZUxlbmd0aCksIDApO1xyXG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XHJcbiAgfTtcclxuXHJcbiAgJERhdGFWaWV3ID0gZnVuY3Rpb24gRGF0YVZpZXcoYnVmZmVyLCBieXRlT2Zmc2V0LCBieXRlTGVuZ3RoKSB7XHJcbiAgICBhbkluc3RhbmNlKHRoaXMsICREYXRhVmlldywgREFUQV9WSUVXKTtcclxuICAgIGFuSW5zdGFuY2UoYnVmZmVyLCAkQXJyYXlCdWZmZXIsIERBVEFfVklFVyk7XHJcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYnVmZmVyWyRMRU5HVEhdO1xyXG4gICAgdmFyIG9mZnNldCA9IHRvSW50ZWdlcihieXRlT2Zmc2V0KTtcclxuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcignV3Jvbmcgb2Zmc2V0IScpO1xyXG4gICAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCA/IGJ1ZmZlckxlbmd0aCAtIG9mZnNldCA6IHRvTGVuZ3RoKGJ5dGVMZW5ndGgpO1xyXG4gICAgaWYgKG9mZnNldCArIGJ5dGVMZW5ndGggPiBidWZmZXJMZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcclxuICAgIHRoaXNbJEJVRkZFUl0gPSBidWZmZXI7XHJcbiAgICB0aGlzWyRPRkZTRVRdID0gb2Zmc2V0O1xyXG4gICAgdGhpc1skTEVOR1RIXSA9IGJ5dGVMZW5ndGg7XHJcbiAgfTtcclxuXHJcbiAgaWYgKERFU0NSSVBUT1JTKSB7XHJcbiAgICBhZGRHZXR0ZXIoJEFycmF5QnVmZmVyLCBCWVRFX0xFTkdUSCwgJ19sJyk7XHJcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCVUZGRVIsICdfYicpO1xyXG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9MRU5HVEgsICdfbCcpO1xyXG4gICAgYWRkR2V0dGVyKCREYXRhVmlldywgQllURV9PRkZTRVQsICdfbycpO1xyXG4gIH1cclxuXHJcbiAgcmVkZWZpbmVBbGwoJERhdGFWaWV3W1BST1RPVFlQRV0sIHtcclxuICAgIGdldEludDg6IGZ1bmN0aW9uIGdldEludDgoYnl0ZU9mZnNldCkge1xyXG4gICAgICByZXR1cm4gZ2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQpWzBdIDw8IDI0ID4+IDI0O1xyXG4gICAgfSxcclxuICAgIGdldFVpbnQ4OiBmdW5jdGlvbiBnZXRVaW50OChieXRlT2Zmc2V0KSB7XHJcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF07XHJcbiAgICB9LFxyXG4gICAgZ2V0SW50MTY6IGZ1bmN0aW9uIGdldEludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgIHJldHVybiAoYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdKSA8PCAxNiA+PiAxNjtcclxuICAgIH0sXHJcbiAgICBnZXRVaW50MTY6IGZ1bmN0aW9uIGdldFVpbnQxNihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHZhciBieXRlcyA9IGdldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pO1xyXG4gICAgICByZXR1cm4gYnl0ZXNbMV0gPDwgOCB8IGJ5dGVzWzBdO1xyXG4gICAgfSxcclxuICAgIGdldEludDMyOiBmdW5jdGlvbiBnZXRJbnQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHJldHVybiB1bnBhY2tJMzIoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSkpO1xyXG4gICAgfSxcclxuICAgIGdldFVpbnQzMjogZnVuY3Rpb24gZ2V0VWludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSkgPj4+IDA7XHJcbiAgICB9LFxyXG4gICAgZ2V0RmxvYXQzMjogZnVuY3Rpb24gZ2V0RmxvYXQzMihieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCAyMywgNCk7XHJcbiAgICB9LFxyXG4gICAgZ2V0RmxvYXQ2NDogZnVuY3Rpb24gZ2V0RmxvYXQ2NChieXRlT2Zmc2V0IC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHJldHVybiB1bnBhY2tJRUVFNzU0KGdldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pLCA1MiwgOCk7XHJcbiAgICB9LFxyXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xyXG4gICAgICBzZXQodGhpcywgMSwgYnl0ZU9mZnNldCwgcGFja0k4LCB2YWx1ZSk7XHJcbiAgICB9LFxyXG4gICAgc2V0VWludDg6IGZ1bmN0aW9uIHNldFVpbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XHJcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBzZXRJbnQxNjogZnVuY3Rpb24gc2V0SW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfSxcclxuICAgIHNldFVpbnQxNjogZnVuY3Rpb24gc2V0VWludDE2KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHNldCh0aGlzLCAyLCBieXRlT2Zmc2V0LCBwYWNrSTE2LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcclxuICAgIH0sXHJcbiAgICBzZXRJbnQzMjogZnVuY3Rpb24gc2V0SW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfSxcclxuICAgIHNldFVpbnQzMjogZnVuY3Rpb24gc2V0VWludDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrSTMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcclxuICAgIH0sXHJcbiAgICBzZXRGbG9hdDMyOiBmdW5jdGlvbiBzZXRGbG9hdDMyKGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHNldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBwYWNrRjMyLCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcclxuICAgIH0sXHJcbiAgICBzZXRGbG9hdDY0OiBmdW5jdGlvbiBzZXRGbG9hdDY0KGJ5dGVPZmZzZXQsIHZhbHVlIC8qICwgbGl0dGxlRW5kaWFuICovKSB7XHJcbiAgICAgIHNldCh0aGlzLCA4LCBieXRlT2Zmc2V0LCBwYWNrRjY0LCB2YWx1ZSwgYXJndW1lbnRzWzJdKTtcclxuICAgIH1cclxuICB9KTtcclxufSBlbHNlIHtcclxuICBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICRBcnJheUJ1ZmZlcigxKTtcclxuICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgbmV3ICRBcnJheUJ1ZmZlcigtMSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgfSkgfHwgZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgbmV3ICRBcnJheUJ1ZmZlcigpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgbmV3ICRBcnJheUJ1ZmZlcigxLjUpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgbmV3ICRBcnJheUJ1ZmZlcihOYU4pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgcmV0dXJuICRBcnJheUJ1ZmZlci5uYW1lICE9IEFSUkFZX0JVRkZFUjtcclxuICB9KSkge1xyXG4gICAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XHJcbiAgICAgIGFuSW5zdGFuY2UodGhpcywgJEFycmF5QnVmZmVyKTtcclxuICAgICAgcmV0dXJuIG5ldyBCYXNlQnVmZmVyKHRvSW5kZXgobGVuZ3RoKSk7XHJcbiAgICB9O1xyXG4gICAgdmFyIEFycmF5QnVmZmVyUHJvdG8gPSAkQXJyYXlCdWZmZXJbUFJPVE9UWVBFXSA9IEJhc2VCdWZmZXJbUFJPVE9UWVBFXTtcclxuICAgIGZvciAodmFyIGtleXMgPSBnT1BOKEJhc2VCdWZmZXIpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7KSB7XHJcbiAgICAgIGlmICghKChrZXkgPSBrZXlzW2orK10pIGluICRBcnJheUJ1ZmZlcikpIGhpZGUoJEFycmF5QnVmZmVyLCBrZXksIEJhc2VCdWZmZXJba2V5XSk7XHJcbiAgICB9XHJcbiAgICBpZiAoIUxJQlJBUlkpIEFycmF5QnVmZmVyUHJvdG8uY29uc3RydWN0b3IgPSAkQXJyYXlCdWZmZXI7XHJcbiAgfVxyXG4gIC8vIGlPUyBTYWZhcmkgNy54IGJ1Z1xyXG4gIHZhciB2aWV3ID0gbmV3ICREYXRhVmlldyhuZXcgJEFycmF5QnVmZmVyKDIpKTtcclxuICB2YXIgJHNldEludDggPSAkRGF0YVZpZXdbUFJPVE9UWVBFXS5zZXRJbnQ4O1xyXG4gIHZpZXcuc2V0SW50OCgwLCAyMTQ3NDgzNjQ4KTtcclxuICB2aWV3LnNldEludDgoMSwgMjE0NzQ4MzY0OSk7XHJcbiAgaWYgKHZpZXcuZ2V0SW50OCgwKSB8fCAhdmlldy5nZXRJbnQ4KDEpKSByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xyXG4gICAgc2V0SW50ODogZnVuY3Rpb24gc2V0SW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xyXG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcclxuICAgIH0sXHJcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcclxuICAgICAgJHNldEludDguY2FsbCh0aGlzLCBieXRlT2Zmc2V0LCB2YWx1ZSA8PCAyNCA+PiAyNCk7XHJcbiAgICB9XHJcbiAgfSwgdHJ1ZSk7XHJcbn1cclxuc2V0VG9TdHJpbmdUYWcoJEFycmF5QnVmZmVyLCBBUlJBWV9CVUZGRVIpO1xyXG5zZXRUb1N0cmluZ1RhZygkRGF0YVZpZXcsIERBVEFfVklFVyk7XHJcbmhpZGUoJERhdGFWaWV3W1BST1RPVFlQRV0sICR0eXBlZC5WSUVXLCB0cnVlKTtcclxuZXhwb3J0c1tBUlJBWV9CVUZGRVJdID0gJEFycmF5QnVmZmVyO1xyXG5leHBvcnRzW0RBVEFfVklFV10gPSAkRGF0YVZpZXc7XHJcbiIsInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKTtcclxufSBjYXRjaCAoZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlcXVpcmUoJy4vX2RvbS1jcmVhdGUnKSgnZGl2JyksICdhJywgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSkuYSAhPSA3O1xyXG59KTtcclxuIiwiZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fd2tzJyk7XHJcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIGFycmF5SW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xyXG52YXIgSUVfUFJPVE8gPSByZXF1aXJlKCcuL19zaGFyZWQta2V5JykoJ0lFX1BST1RPJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XHJcbiAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcclxuICB2YXIgaSA9IDA7XHJcbiAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gIHZhciBrZXk7XHJcbiAgZm9yIChrZXkgaW4gTykgaWYgKGtleSAhPSBJRV9QUk9UTykgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcclxuICAvLyBEb24ndCBlbnVtIGJ1ZyAmIGhpZGRlbiBrZXlzXHJcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIGlmIChoYXMoTywga2V5ID0gbmFtZXNbaSsrXSkpIHtcclxuICAgIH5hcnJheUluZGV4T2YocmVzdWx0LCBrZXkpIHx8IHJlc3VsdC5wdXNoKGtleSk7XHJcbiAgfVxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gT2JqZWN0LmRlZmluZVByb3BlcnRpZXMgOiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpIHtcclxuICBhbk9iamVjdChPKTtcclxuICB2YXIga2V5cyA9IGdldEtleXMoUHJvcGVydGllcyk7XHJcbiAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xyXG4gIHZhciBpID0gMDtcclxuICB2YXIgUDtcclxuICB3aGlsZSAobGVuZ3RoID4gaSkgZFAuZihPLCBQID0ga2V5c1tpKytdLCBQcm9wZXJ0aWVzW1BdKTtcclxuICByZXR1cm4gTztcclxufTtcclxuIiwiLy8gZmFsbGJhY2sgZm9yIElFMTEgYnVnZ3kgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgd2l0aCBpZnJhbWUgYW5kIHdpbmRvd1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcclxudmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XHJcblxyXG52YXIgd2luZG93TmFtZXMgPSB0eXBlb2Ygd2luZG93ID09ICdvYmplY3QnICYmIHdpbmRvdyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xyXG4gID8gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMod2luZG93KSA6IFtdO1xyXG5cclxudmFyIGdldFdpbmRvd05hbWVzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBnT1BOKGl0KTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gd2luZG93TmFtZXMuc2xpY2UoKTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cy5mID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xyXG4gIHJldHVybiB3aW5kb3dOYW1lcyAmJiB0b1N0cmluZy5jYWxsKGl0KSA9PSAnW29iamVjdCBXaW5kb3ddJyA/IGdldFdpbmRvd05hbWVzKGl0KSA6IGdPUE4odG9JT2JqZWN0KGl0KSk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMTkuMS4yLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSwgLi4uKVxyXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XHJcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcclxudmFyIHBJRSA9IHJlcXVpcmUoJy4vX29iamVjdC1waWUnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xyXG52YXIgJGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XHJcblxyXG4vLyBzaG91bGQgd29yayB3aXRoIHN5bWJvbHMgYW5kIHNob3VsZCBoYXZlIGRldGVybWluaXN0aWMgcHJvcGVydHkgb3JkZXIgKFY4IGJ1ZylcclxubW9kdWxlLmV4cG9ydHMgPSAhJGFzc2lnbiB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICB2YXIgQSA9IHt9O1xyXG4gIHZhciBCID0ge307XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXHJcbiAgdmFyIFMgPSBTeW1ib2woKTtcclxuICB2YXIgSyA9ICdhYmNkZWZnaGlqa2xtbm9wcXJzdCc7XHJcbiAgQVtTXSA9IDc7XHJcbiAgSy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAoaykgeyBCW2tdID0gazsgfSk7XHJcbiAgcmV0dXJuICRhc3NpZ24oe30sIEEpW1NdICE9IDcgfHwgT2JqZWN0LmtleXMoJGFzc2lnbih7fSwgQikpLmpvaW4oJycpICE9IEs7XHJcbn0pID8gZnVuY3Rpb24gYXNzaWduKHRhcmdldCwgc291cmNlKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuICB2YXIgVCA9IHRvT2JqZWN0KHRhcmdldCk7XHJcbiAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gIHZhciBpbmRleCA9IDE7XHJcbiAgdmFyIGdldFN5bWJvbHMgPSBnT1BTLmY7XHJcbiAgdmFyIGlzRW51bSA9IHBJRS5mO1xyXG4gIHdoaWxlIChhTGVuID4gaW5kZXgpIHtcclxuICAgIHZhciBTID0gSU9iamVjdChhcmd1bWVudHNbaW5kZXgrK10pO1xyXG4gICAgdmFyIGtleXMgPSBnZXRTeW1ib2xzID8gZ2V0S2V5cyhTKS5jb25jYXQoZ2V0U3ltYm9scyhTKSkgOiBnZXRLZXlzKFMpO1xyXG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xyXG4gICAgdmFyIGogPSAwO1xyXG4gICAgdmFyIGtleTtcclxuICAgIHdoaWxlIChsZW5ndGggPiBqKSBpZiAoaXNFbnVtLmNhbGwoUywga2V5ID0ga2V5c1tqKytdKSkgVFtrZXldID0gU1trZXldO1xyXG4gIH0gcmV0dXJuIFQ7XHJcbn0gOiAkYXNzaWduO1xyXG4iLCIvLyA3LjIuOSBTYW1lVmFsdWUoeCwgeSlcclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuaXMgfHwgZnVuY3Rpb24gaXMoeCwgeSkge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICByZXR1cm4geCA9PT0geSA/IHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5IDogeCAhPSB4ICYmIHkgIT0geTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGludm9rZSA9IHJlcXVpcmUoJy4vX2ludm9rZScpO1xyXG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xyXG52YXIgZmFjdG9yaWVzID0ge307XHJcblxyXG52YXIgY29uc3RydWN0ID0gZnVuY3Rpb24gKEYsIGxlbiwgYXJncykge1xyXG4gIGlmICghKGxlbiBpbiBmYWN0b3JpZXMpKSB7XHJcbiAgICBmb3IgKHZhciBuID0gW10sIGkgPSAwOyBpIDwgbGVuOyBpKyspIG5baV0gPSAnYVsnICsgaSArICddJztcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gICAgZmFjdG9yaWVzW2xlbl0gPSBGdW5jdGlvbignRixhJywgJ3JldHVybiBuZXcgRignICsgbi5qb2luKCcsJykgKyAnKScpO1xyXG4gIH0gcmV0dXJuIGZhY3Rvcmllc1tsZW5dKEYsIGFyZ3MpO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBGdW5jdGlvbi5iaW5kIHx8IGZ1bmN0aW9uIGJpbmQodGhhdCAvKiAsIC4uLmFyZ3MgKi8pIHtcclxuICB2YXIgZm4gPSBhRnVuY3Rpb24odGhpcyk7XHJcbiAgdmFyIHBhcnRBcmdzID0gYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XHJcbiAgdmFyIGJvdW5kID0gZnVuY3Rpb24gKC8qIGFyZ3MuLi4gKi8pIHtcclxuICAgIHZhciBhcmdzID0gcGFydEFyZ3MuY29uY2F0KGFycmF5U2xpY2UuY2FsbChhcmd1bWVudHMpKTtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgYm91bmQgPyBjb25zdHJ1Y3QoZm4sIGFyZ3MubGVuZ3RoLCBhcmdzKSA6IGludm9rZShmbiwgYXJncywgdGhhdCk7XHJcbiAgfTtcclxuICBpZiAoaXNPYmplY3QoZm4ucHJvdG90eXBlKSkgYm91bmQucHJvdG90eXBlID0gZm4ucHJvdG90eXBlO1xyXG4gIHJldHVybiBib3VuZDtcclxufTtcclxuIiwiLy8gZmFzdCBhcHBseSwgaHR0cDovL2pzcGVyZi5sbmtpdC5jb20vZmFzdC1hcHBseS81XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCBhcmdzLCB0aGF0KSB7XHJcbiAgdmFyIHVuID0gdGhhdCA9PT0gdW5kZWZpbmVkO1xyXG4gIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcclxuICAgIGNhc2UgMDogcmV0dXJuIHVuID8gZm4oKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQpO1xyXG4gICAgY2FzZSAxOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0pO1xyXG4gICAgY2FzZSAyOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0pO1xyXG4gICAgY2FzZSAzOiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xyXG4gICAgY2FzZSA0OiByZXR1cm4gdW4gPyBmbihhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgOiBmbi5jYWxsKHRoYXQsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xyXG4gIH0gcmV0dXJuIGZuLmFwcGx5KHRoYXQsIGFyZ3MpO1xyXG59O1xyXG4iLCJ2YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucGFyc2VJbnQ7XHJcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcclxudmFyIHdzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XHJcbnZhciBoZXggPSAvXlstK10/MFt4WF0vO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAkcGFyc2VJbnQod3MgKyAnMDgnKSAhPT0gOCB8fCAkcGFyc2VJbnQod3MgKyAnMHgxNicpICE9PSAyMiA/IGZ1bmN0aW9uIHBhcnNlSW50KHN0ciwgcmFkaXgpIHtcclxuICB2YXIgc3RyaW5nID0gJHRyaW0oU3RyaW5nKHN0ciksIDMpO1xyXG4gIHJldHVybiAkcGFyc2VJbnQoc3RyaW5nLCAocmFkaXggPj4+IDApIHx8IChoZXgudGVzdChzdHJpbmcpID8gMTYgOiAxMCkpO1xyXG59IDogJHBhcnNlSW50O1xyXG4iLCJ2YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUZsb2F0O1xyXG52YXIgJHRyaW0gPSByZXF1aXJlKCcuL19zdHJpbmctdHJpbScpLnRyaW07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IDEgLyAkcGFyc2VGbG9hdChyZXF1aXJlKCcuL19zdHJpbmctd3MnKSArICctMCcpICE9PSAtSW5maW5pdHkgPyBmdW5jdGlvbiBwYXJzZUZsb2F0KHN0cikge1xyXG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XHJcbiAgdmFyIHJlc3VsdCA9ICRwYXJzZUZsb2F0KHN0cmluZyk7XHJcbiAgcmV0dXJuIHJlc3VsdCA9PT0gMCAmJiBzdHJpbmcuY2hhckF0KDApID09ICctJyA/IC0wIDogcmVzdWx0O1xyXG59IDogJHBhcnNlRmxvYXQ7XHJcbiIsInZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIG1zZykge1xyXG4gIGlmICh0eXBlb2YgaXQgIT0gJ251bWJlcicgJiYgY29mKGl0KSAhPSAnTnVtYmVyJykgdGhyb3cgVHlwZUVycm9yKG1zZyk7XHJcbiAgcmV0dXJuICtpdDtcclxufTtcclxuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzSW50ZWdlcihpdCkge1xyXG4gIHJldHVybiAhaXNPYmplY3QoaXQpICYmIGlzRmluaXRlKGl0KSAmJiBmbG9vcihpdCkgPT09IGl0O1xyXG59O1xyXG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGgubG9nMXAgfHwgZnVuY3Rpb24gbG9nMXAoeCkge1xyXG4gIHJldHVybiAoeCA9ICt4KSA+IC0xZS04ICYmIHggPCAxZS04ID8geCAtIHggKiB4IC8gMiA6IE1hdGgubG9nKDEgKyB4KTtcclxufTtcclxuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXHJcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XHJcbnZhciBwb3cgPSBNYXRoLnBvdztcclxudmFyIEVQU0lMT04gPSBwb3coMiwgLTUyKTtcclxudmFyIEVQU0lMT04zMiA9IHBvdygyLCAtMjMpO1xyXG52YXIgTUFYMzIgPSBwb3coMiwgMTI3KSAqICgyIC0gRVBTSUxPTjMyKTtcclxudmFyIE1JTjMyID0gcG93KDIsIC0xMjYpO1xyXG5cclxudmFyIHJvdW5kVGllc1RvRXZlbiA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgcmV0dXJuIG4gKyAxIC8gRVBTSUxPTiAtIDEgLyBFUFNJTE9OO1xyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLmZyb3VuZCB8fCBmdW5jdGlvbiBmcm91bmQoeCkge1xyXG4gIHZhciAkYWJzID0gTWF0aC5hYnMoeCk7XHJcbiAgdmFyICRzaWduID0gc2lnbih4KTtcclxuICB2YXIgYSwgcmVzdWx0O1xyXG4gIGlmICgkYWJzIDwgTUlOMzIpIHJldHVybiAkc2lnbiAqIHJvdW5kVGllc1RvRXZlbigkYWJzIC8gTUlOMzIgLyBFUFNJTE9OMzIpICogTUlOMzIgKiBFUFNJTE9OMzI7XHJcbiAgYSA9ICgxICsgRVBTSUxPTjMyIC8gRVBTSUxPTikgKiAkYWJzO1xyXG4gIHJlc3VsdCA9IGEgLSAoYSAtICRhYnMpO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICBpZiAocmVzdWx0ID4gTUFYMzIgfHwgcmVzdWx0ICE9IHJlc3VsdCkgcmV0dXJuICRzaWduICogSW5maW5pdHk7XHJcbiAgcmV0dXJuICRzaWduICogcmVzdWx0O1xyXG59O1xyXG4iLCIvLyBjYWxsIHNvbWV0aGluZyBvbiBpdGVyYXRvciBzdGVwIHdpdGggc2FmZSBjbG9zaW5nIG9uIGVycm9yXHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYXRvciwgZm4sIHZhbHVlLCBlbnRyaWVzKSB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBlbnRyaWVzID8gZm4oYW5PYmplY3QodmFsdWUpWzBdLCB2YWx1ZVsxXSkgOiBmbih2YWx1ZSk7XHJcbiAgLy8gNy40LjYgSXRlcmF0b3JDbG9zZShpdGVyYXRvciwgY29tcGxldGlvbilcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICB2YXIgcmV0ID0gaXRlcmF0b3JbJ3JldHVybiddO1xyXG4gICAgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSBhbk9iamVjdChyZXQuY2FsbChpdGVyYXRvcikpO1xyXG4gICAgdGhyb3cgZTtcclxuICB9XHJcbn07XHJcbiIsInZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBjYWxsYmFja2ZuLCBhTGVuLCBtZW1vLCBpc1JpZ2h0KSB7XHJcbiAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xyXG4gIHZhciBPID0gdG9PYmplY3QodGhhdCk7XHJcbiAgdmFyIHNlbGYgPSBJT2JqZWN0KE8pO1xyXG4gIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgdmFyIGluZGV4ID0gaXNSaWdodCA/IGxlbmd0aCAtIDEgOiAwO1xyXG4gIHZhciBpID0gaXNSaWdodCA/IC0xIDogMTtcclxuICBpZiAoYUxlbiA8IDIpIGZvciAoOzspIHtcclxuICAgIGlmIChpbmRleCBpbiBzZWxmKSB7XHJcbiAgICAgIG1lbW8gPSBzZWxmW2luZGV4XTtcclxuICAgICAgaW5kZXggKz0gaTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgICBpbmRleCArPSBpO1xyXG4gICAgaWYgKGlzUmlnaHQgPyBpbmRleCA8IDAgOiBsZW5ndGggPD0gaW5kZXgpIHtcclxuICAgICAgdGhyb3cgVHlwZUVycm9yKCdSZWR1Y2Ugb2YgZW1wdHkgYXJyYXkgd2l0aCBubyBpbml0aWFsIHZhbHVlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZvciAoO2lzUmlnaHQgPyBpbmRleCA+PSAwIDogbGVuZ3RoID4gaW5kZXg7IGluZGV4ICs9IGkpIGlmIChpbmRleCBpbiBzZWxmKSB7XHJcbiAgICBtZW1vID0gY2FsbGJhY2tmbihtZW1vLCBzZWxmW2luZGV4XSwgaW5kZXgsIE8pO1xyXG4gIH1cclxuICByZXR1cm4gbWVtbztcclxufTtcclxuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXHJcbid1c2Ugc3RyaWN0JztcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gW10uY29weVdpdGhpbiB8fCBmdW5jdGlvbiBjb3B5V2l0aGluKHRhcmdldCAvKiA9IDAgKi8sIHN0YXJ0IC8qID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xyXG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgdmFyIGxlbiA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcclxuICB2YXIgdG8gPSB0b0Fic29sdXRlSW5kZXgodGFyZ2V0LCBsZW4pO1xyXG4gIHZhciBmcm9tID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xyXG4gIHZhciBlbmQgPSBhcmd1bWVudHMubGVuZ3RoID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuICB2YXIgY291bnQgPSBNYXRoLm1pbigoZW5kID09PSB1bmRlZmluZWQgPyBsZW4gOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pKSAtIGZyb20sIGxlbiAtIHRvKTtcclxuICB2YXIgaW5jID0gMTtcclxuICBpZiAoZnJvbSA8IHRvICYmIHRvIDwgZnJvbSArIGNvdW50KSB7XHJcbiAgICBpbmMgPSAtMTtcclxuICAgIGZyb20gKz0gY291bnQgLSAxO1xyXG4gICAgdG8gKz0gY291bnQgLSAxO1xyXG4gIH1cclxuICB3aGlsZSAoY291bnQtLSA+IDApIHtcclxuICAgIGlmIChmcm9tIGluIE8pIE9bdG9dID0gT1tmcm9tXTtcclxuICAgIGVsc2UgZGVsZXRlIE9bdG9dO1xyXG4gICAgdG8gKz0gaW5jO1xyXG4gICAgZnJvbSArPSBpbmM7XHJcbiAgfSByZXR1cm4gTztcclxufTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9uZSwgdmFsdWUpIHtcclxuICByZXR1cm4geyB2YWx1ZTogdmFsdWUsIGRvbmU6ICEhZG9uZSB9O1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcclxucmVxdWlyZSgnLi9fZXhwb3J0Jykoe1xyXG4gIHRhcmdldDogJ1JlZ0V4cCcsXHJcbiAgcHJvdG86IHRydWUsXHJcbiAgZm9yY2VkOiByZWdleHBFeGVjICE9PSAvLi8uZXhlY1xyXG59LCB7XHJcbiAgZXhlYzogcmVnZXhwRXhlY1xyXG59KTtcclxuIiwiLy8gMjEuMi41LjMgZ2V0IFJlZ0V4cC5wcm90b3R5cGUuZmxhZ3MoKVxyXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAvLi9nLmZsYWdzICE9ICdnJykgcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZihSZWdFeHAucHJvdG90eXBlLCAnZmxhZ3MnLCB7XHJcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gIGdldDogcmVxdWlyZSgnLi9fZmxhZ3MnKVxyXG59KTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xyXG4gIHRyeSB7XHJcbiAgICByZXR1cm4geyBlOiBmYWxzZSwgdjogZXhlYygpIH07XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgcmV0dXJuIHsgZTogdHJ1ZSwgdjogZSB9O1xyXG4gIH1cclxufTtcclxuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSByZXF1aXJlKCcuL19uZXctcHJvbWlzZS1jYXBhYmlsaXR5Jyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDLCB4KSB7XHJcbiAgYW5PYmplY3QoQyk7XHJcbiAgaWYgKGlzT2JqZWN0KHgpICYmIHguY29uc3RydWN0b3IgPT09IEMpIHJldHVybiB4O1xyXG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYoQyk7XHJcbiAgdmFyIHJlc29sdmUgPSBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlO1xyXG4gIHJlc29sdmUoeCk7XHJcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XHJcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcclxudmFyIE1BUCA9ICdNYXAnO1xyXG5cclxuLy8gMjMuMSBNYXAgT2JqZWN0c1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShNQVAsIGZ1bmN0aW9uIChnZXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gTWFwKCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcclxufSwge1xyXG4gIC8vIDIzLjEuMy42IE1hcC5wcm90b3R5cGUuZ2V0KGtleSlcclxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcclxuICAgIHZhciBlbnRyeSA9IHN0cm9uZy5nZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBNQVApLCBrZXkpO1xyXG4gICAgcmV0dXJuIGVudHJ5ICYmIGVudHJ5LnY7XHJcbiAgfSxcclxuICAvLyAyMy4xLjMuOSBNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxyXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcclxuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSA9PT0gMCA/IDAgOiBrZXksIHZhbHVlKTtcclxuICB9XHJcbn0sIHN0cm9uZywgdHJ1ZSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcclxudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XHJcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcclxudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcclxudmFyICRpdGVyRGVmaW5lID0gcmVxdWlyZSgnLi9faXRlci1kZWZpbmUnKTtcclxudmFyIHN0ZXAgPSByZXF1aXJlKCcuL19pdGVyLXN0ZXAnKTtcclxudmFyIHNldFNwZWNpZXMgPSByZXF1aXJlKCcuL19zZXQtc3BlY2llcycpO1xyXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xyXG52YXIgZmFzdEtleSA9IHJlcXVpcmUoJy4vX21ldGEnKS5mYXN0S2V5O1xyXG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XHJcbnZhciBTSVpFID0gREVTQ1JJUFRPUlMgPyAnX3MnIDogJ3NpemUnO1xyXG5cclxudmFyIGdldEVudHJ5ID0gZnVuY3Rpb24gKHRoYXQsIGtleSkge1xyXG4gIC8vIGZhc3QgY2FzZVxyXG4gIHZhciBpbmRleCA9IGZhc3RLZXkoa2V5KTtcclxuICB2YXIgZW50cnk7XHJcbiAgaWYgKGluZGV4ICE9PSAnRicpIHJldHVybiB0aGF0Ll9pW2luZGV4XTtcclxuICAvLyBmcm96ZW4gb2JqZWN0IGNhc2VcclxuICBmb3IgKGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xyXG4gICAgaWYgKGVudHJ5LmsgPT0ga2V5KSByZXR1cm4gZW50cnk7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XHJcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XHJcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XHJcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxyXG4gICAgICB0aGF0Ll9pID0gY3JlYXRlKG51bGwpOyAvLyBpbmRleFxyXG4gICAgICB0aGF0Ll9mID0gdW5kZWZpbmVkOyAgICAvLyBmaXJzdCBlbnRyeVxyXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAgICAvLyBsYXN0IGVudHJ5XHJcbiAgICAgIHRoYXRbU0laRV0gPSAwOyAgICAgICAgIC8vIHNpemVcclxuICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xyXG4gICAgfSk7XHJcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwge1xyXG4gICAgICAvLyAyMy4xLjMuMSBNYXAucHJvdG90eXBlLmNsZWFyKClcclxuICAgICAgLy8gMjMuMi4zLjIgU2V0LnByb3RvdHlwZS5jbGVhcigpXHJcbiAgICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcigpIHtcclxuICAgICAgICBmb3IgKHZhciB0aGF0ID0gdmFsaWRhdGUodGhpcywgTkFNRSksIGRhdGEgPSB0aGF0Ll9pLCBlbnRyeSA9IHRoYXQuX2Y7IGVudHJ5OyBlbnRyeSA9IGVudHJ5Lm4pIHtcclxuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xyXG4gICAgICAgICAgaWYgKGVudHJ5LnApIGVudHJ5LnAgPSBlbnRyeS5wLm4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBkZWxldGUgZGF0YVtlbnRyeS5pXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhhdC5fZiA9IHRoYXQuX2wgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgdGhhdFtTSVpFXSA9IDA7XHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIDIzLjEuMy4zIE1hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcclxuICAgICAgLy8gMjMuMi4zLjQgU2V0LnByb3RvdHlwZS5kZWxldGUodmFsdWUpXHJcbiAgICAgICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcclxuICAgICAgICB2YXIgZW50cnkgPSBnZXRFbnRyeSh0aGF0LCBrZXkpO1xyXG4gICAgICAgIGlmIChlbnRyeSkge1xyXG4gICAgICAgICAgdmFyIG5leHQgPSBlbnRyeS5uO1xyXG4gICAgICAgICAgdmFyIHByZXYgPSBlbnRyeS5wO1xyXG4gICAgICAgICAgZGVsZXRlIHRoYXQuX2lbZW50cnkuaV07XHJcbiAgICAgICAgICBlbnRyeS5yID0gdHJ1ZTtcclxuICAgICAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBuZXh0O1xyXG4gICAgICAgICAgaWYgKG5leHQpIG5leHQucCA9IHByZXY7XHJcbiAgICAgICAgICBpZiAodGhhdC5fZiA9PSBlbnRyeSkgdGhhdC5fZiA9IG5leHQ7XHJcbiAgICAgICAgICBpZiAodGhhdC5fbCA9PSBlbnRyeSkgdGhhdC5fbCA9IHByZXY7XHJcbiAgICAgICAgICB0aGF0W1NJWkVdLS07XHJcbiAgICAgICAgfSByZXR1cm4gISFlbnRyeTtcclxuICAgICAgfSxcclxuICAgICAgLy8gMjMuMi4zLjYgU2V0LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXHJcbiAgICAgIC8vIDIzLjEuMy41IE1hcC5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxyXG4gICAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XHJcbiAgICAgICAgdmFsaWRhdGUodGhpcywgTkFNRSk7XHJcbiAgICAgICAgdmFyIGYgPSBjdHgoY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIDMpO1xyXG4gICAgICAgIHZhciBlbnRyeTtcclxuICAgICAgICB3aGlsZSAoZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGlzLl9mKSB7XHJcbiAgICAgICAgICBmKGVudHJ5LnYsIGVudHJ5LmssIHRoaXMpO1xyXG4gICAgICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XHJcbiAgICAgICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgLy8gMjMuMS4zLjcgTWFwLnByb3RvdHlwZS5oYXMoa2V5KVxyXG4gICAgICAvLyAyMy4yLjMuNyBTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcclxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XHJcbiAgICAgICAgcmV0dXJuICEhZ2V0RW50cnkodmFsaWRhdGUodGhpcywgTkFNRSksIGtleSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgaWYgKERFU0NSSVBUT1JTKSBkUChDLnByb3RvdHlwZSwgJ3NpemUnLCB7XHJcbiAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB2YWxpZGF0ZSh0aGlzLCBOQU1FKVtTSVpFXTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gQztcclxuICB9LFxyXG4gIGRlZjogZnVuY3Rpb24gKHRoYXQsIGtleSwgdmFsdWUpIHtcclxuICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XHJcbiAgICB2YXIgcHJldiwgaW5kZXg7XHJcbiAgICAvLyBjaGFuZ2UgZXhpc3RpbmcgZW50cnlcclxuICAgIGlmIChlbnRyeSkge1xyXG4gICAgICBlbnRyeS52ID0gdmFsdWU7XHJcbiAgICAvLyBjcmVhdGUgbmV3IGVudHJ5XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGF0Ll9sID0gZW50cnkgPSB7XHJcbiAgICAgICAgaTogaW5kZXggPSBmYXN0S2V5KGtleSwgdHJ1ZSksIC8vIDwtIGluZGV4XHJcbiAgICAgICAgazoga2V5LCAgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIGtleVxyXG4gICAgICAgIHY6IHZhbHVlLCAgICAgICAgICAgICAgICAgICAgICAvLyA8LSB2YWx1ZVxyXG4gICAgICAgIHA6IHByZXYgPSB0aGF0Ll9sLCAgICAgICAgICAgICAvLyA8LSBwcmV2aW91cyBlbnRyeVxyXG4gICAgICAgIG46IHVuZGVmaW5lZCwgICAgICAgICAgICAgICAgICAvLyA8LSBuZXh0IGVudHJ5XHJcbiAgICAgICAgcjogZmFsc2UgICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHJlbW92ZWRcclxuICAgICAgfTtcclxuICAgICAgaWYgKCF0aGF0Ll9mKSB0aGF0Ll9mID0gZW50cnk7XHJcbiAgICAgIGlmIChwcmV2KSBwcmV2Lm4gPSBlbnRyeTtcclxuICAgICAgdGhhdFtTSVpFXSsrO1xyXG4gICAgICAvLyBhZGQgdG8gaW5kZXhcclxuICAgICAgaWYgKGluZGV4ICE9PSAnRicpIHRoYXQuX2lbaW5kZXhdID0gZW50cnk7XHJcbiAgICB9IHJldHVybiB0aGF0O1xyXG4gIH0sXHJcbiAgZ2V0RW50cnk6IGdldEVudHJ5LFxyXG4gIHNldFN0cm9uZzogZnVuY3Rpb24gKEMsIE5BTUUsIElTX01BUCkge1xyXG4gICAgLy8gYWRkIC5rZXlzLCAudmFsdWVzLCAuZW50cmllcywgW0BAaXRlcmF0b3JdXHJcbiAgICAvLyAyMy4xLjMuNCwgMjMuMS4zLjgsIDIzLjEuMy4xMSwgMjMuMS4zLjEyLCAyMy4yLjMuNSwgMjMuMi4zLjgsIDIzLjIuMy4xMCwgMjMuMi4zLjExXHJcbiAgICAkaXRlckRlZmluZShDLCBOQU1FLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcclxuICAgICAgdGhpcy5fdCA9IHZhbGlkYXRlKGl0ZXJhdGVkLCBOQU1FKTsgLy8gdGFyZ2V0XHJcbiAgICAgIHRoaXMuX2sgPSBraW5kOyAgICAgICAgICAgICAgICAgICAgIC8vIGtpbmRcclxuICAgICAgdGhpcy5fbCA9IHVuZGVmaW5lZDsgICAgICAgICAgICAgICAgLy8gcHJldmlvdXNcclxuICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICB2YXIga2luZCA9IHRoYXQuX2s7XHJcbiAgICAgIHZhciBlbnRyeSA9IHRoYXQuX2w7XHJcbiAgICAgIC8vIHJldmVydCB0byB0aGUgbGFzdCBleGlzdGluZyBlbnRyeVxyXG4gICAgICB3aGlsZSAoZW50cnkgJiYgZW50cnkucikgZW50cnkgPSBlbnRyeS5wO1xyXG4gICAgICAvLyBnZXQgbmV4dCBlbnRyeVxyXG4gICAgICBpZiAoIXRoYXQuX3QgfHwgISh0aGF0Ll9sID0gZW50cnkgPSBlbnRyeSA/IGVudHJ5Lm4gOiB0aGF0Ll90Ll9mKSkge1xyXG4gICAgICAgIC8vIG9yIGZpbmlzaCB0aGUgaXRlcmF0aW9uXHJcbiAgICAgICAgdGhhdC5fdCA9IHVuZGVmaW5lZDtcclxuICAgICAgICByZXR1cm4gc3RlcCgxKTtcclxuICAgICAgfVxyXG4gICAgICAvLyByZXR1cm4gc3RlcCBieSBraW5kXHJcbiAgICAgIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHN0ZXAoMCwgZW50cnkuayk7XHJcbiAgICAgIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS52KTtcclxuICAgICAgcmV0dXJuIHN0ZXAoMCwgW2VudHJ5LmssIGVudHJ5LnZdKTtcclxuICAgIH0sIElTX01BUCA/ICdlbnRyaWVzJyA6ICd2YWx1ZXMnLCAhSVNfTUFQLCB0cnVlKTtcclxuXHJcbiAgICAvLyBhZGQgW0BAc3BlY2llc10sIDIzLjEuMi4yLCAyMy4yLjIuMlxyXG4gICAgc2V0U3BlY2llcyhOQU1FKTtcclxuICB9XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHN0cm9uZyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tc3Ryb25nJyk7XHJcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcclxudmFyIFNFVCA9ICdTZXQnO1xyXG5cclxuLy8gMjMuMiBTZXQgT2JqZWN0c1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24nKShTRVQsIGZ1bmN0aW9uIChnZXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gU2V0KCkgeyByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTsgfTtcclxufSwge1xyXG4gIC8vIDIzLjIuMy4xIFNldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxyXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gc3Ryb25nLmRlZih2YWxpZGF0ZSh0aGlzLCBTRVQpLCB2YWx1ZSA9IHZhbHVlID09PSAwID8gMCA6IHZhbHVlLCB2YWx1ZSk7XHJcbiAgfVxyXG59LCBzdHJvbmcpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGVhY2ggPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMCk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpO1xyXG52YXIgYXNzaWduID0gcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpO1xyXG52YXIgd2VhayA9IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24td2VhaycpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgTkFUSVZFX1dFQUtfTUFQID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgSVNfSUUxMSA9ICFnbG9iYWwuQWN0aXZlWE9iamVjdCAmJiAnQWN0aXZlWE9iamVjdCcgaW4gZ2xvYmFsO1xyXG52YXIgV0VBS19NQVAgPSAnV2Vha01hcCc7XHJcbnZhciBnZXRXZWFrID0gbWV0YS5nZXRXZWFrO1xyXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZTtcclxudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSB3ZWFrLnVmc3RvcmU7XHJcbnZhciBJbnRlcm5hbE1hcDtcclxuXHJcbnZhciB3cmFwcGVyID0gZnVuY3Rpb24gKGdldCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBXZWFrTWFwKCkge1xyXG4gICAgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7XHJcbiAgfTtcclxufTtcclxuXHJcbnZhciBtZXRob2RzID0ge1xyXG4gIC8vIDIzLjMuMy4zIFdlYWtNYXAucHJvdG90eXBlLmdldChrZXkpXHJcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoa2V5KSB7XHJcbiAgICBpZiAoaXNPYmplY3Qoa2V5KSkge1xyXG4gICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcclxuICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSkuZ2V0KGtleSk7XHJcbiAgICAgIHJldHVybiBkYXRhID8gZGF0YVt0aGlzLl9pXSA6IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9LFxyXG4gIC8vIDIzLjMuMy41IFdlYWtNYXAucHJvdG90eXBlLnNldChrZXksIHZhbHVlKVxyXG4gIHNldDogZnVuY3Rpb24gc2V0KGtleSwgdmFsdWUpIHtcclxuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX01BUCksIGtleSwgdmFsdWUpO1xyXG4gIH1cclxufTtcclxuXHJcbi8vIDIzLjMgV2Vha01hcCBPYmplY3RzXHJcbnZhciAkV2Vha01hcCA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfTUFQLCB3cmFwcGVyLCBtZXRob2RzLCB3ZWFrLCB0cnVlLCB0cnVlKTtcclxuXHJcbi8vIElFMTEgV2Vha01hcCBmcm96ZW4ga2V5cyBmaXhcclxuaWYgKE5BVElWRV9XRUFLX01BUCAmJiBJU19JRTExKSB7XHJcbiAgSW50ZXJuYWxNYXAgPSB3ZWFrLmdldENvbnN0cnVjdG9yKHdyYXBwZXIsIFdFQUtfTUFQKTtcclxuICBhc3NpZ24oSW50ZXJuYWxNYXAucHJvdG90eXBlLCBtZXRob2RzKTtcclxuICBtZXRhLk5FRUQgPSB0cnVlO1xyXG4gIGVhY2goWydkZWxldGUnLCAnaGFzJywgJ2dldCcsICdzZXQnXSwgZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIHByb3RvID0gJFdlYWtNYXAucHJvdG90eXBlO1xyXG4gICAgdmFyIG1ldGhvZCA9IHByb3RvW2tleV07XHJcbiAgICByZWRlZmluZShwcm90bywga2V5LCBmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAvLyBzdG9yZSBmcm96ZW4gb2JqZWN0cyBvbiBpbnRlcm5hbCB3ZWFrbWFwIHNoaW1cclxuICAgICAgaWYgKGlzT2JqZWN0KGEpICYmICFpc0V4dGVuc2libGUoYSkpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2YpIHRoaXMuX2YgPSBuZXcgSW50ZXJuYWxNYXAoKTtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fZltrZXldKGEsIGIpO1xyXG4gICAgICAgIHJldHVybiBrZXkgPT0gJ3NldCcgPyB0aGlzIDogcmVzdWx0O1xyXG4gICAgICAvLyBzdG9yZSBhbGwgdGhlIHJlc3Qgb24gbmF0aXZlIHdlYWttYXBcclxuICAgICAgfSByZXR1cm4gbWV0aG9kLmNhbGwodGhpcywgYSwgYik7XHJcbiAgICB9KTtcclxuICB9KTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xyXG52YXIgZ2V0V2VhayA9IHJlcXVpcmUoJy4vX21ldGEnKS5nZXRXZWFrO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcclxudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcbnZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcclxudmFyICRoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgYXJyYXlGaW5kID0gY3JlYXRlQXJyYXlNZXRob2QoNSk7XHJcbnZhciBhcnJheUZpbmRJbmRleCA9IGNyZWF0ZUFycmF5TWV0aG9kKDYpO1xyXG52YXIgaWQgPSAwO1xyXG5cclxuLy8gZmFsbGJhY2sgZm9yIHVuY2F1Z2h0IGZyb3plbiBrZXlzXHJcbnZhciB1bmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKHRoYXQpIHtcclxuICByZXR1cm4gdGhhdC5fbCB8fCAodGhhdC5fbCA9IG5ldyBVbmNhdWdodEZyb3plblN0b3JlKCkpO1xyXG59O1xyXG52YXIgVW5jYXVnaHRGcm96ZW5TdG9yZSA9IGZ1bmN0aW9uICgpIHtcclxuICB0aGlzLmEgPSBbXTtcclxufTtcclxudmFyIGZpbmRVbmNhdWdodEZyb3plbiA9IGZ1bmN0aW9uIChzdG9yZSwga2V5KSB7XHJcbiAgcmV0dXJuIGFycmF5RmluZChzdG9yZS5hLCBmdW5jdGlvbiAoaXQpIHtcclxuICAgIHJldHVybiBpdFswXSA9PT0ga2V5O1xyXG4gIH0pO1xyXG59O1xyXG5VbmNhdWdodEZyb3plblN0b3JlLnByb3RvdHlwZSA9IHtcclxuICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHZhciBlbnRyeSA9IGZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xyXG4gICAgaWYgKGVudHJ5KSByZXR1cm4gZW50cnlbMV07XHJcbiAgfSxcclxuICBoYXM6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHJldHVybiAhIWZpbmRVbmNhdWdodEZyb3plbih0aGlzLCBrZXkpO1xyXG4gIH0sXHJcbiAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XHJcbiAgICBpZiAoZW50cnkpIGVudHJ5WzFdID0gdmFsdWU7XHJcbiAgICBlbHNlIHRoaXMuYS5wdXNoKFtrZXksIHZhbHVlXSk7XHJcbiAgfSxcclxuICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIGluZGV4ID0gYXJyYXlGaW5kSW5kZXgodGhpcy5hLCBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XHJcbiAgICB9KTtcclxuICAgIGlmICh+aW5kZXgpIHRoaXMuYS5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgcmV0dXJuICEhfmluZGV4O1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIGdldENvbnN0cnVjdG9yOiBmdW5jdGlvbiAod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUikge1xyXG4gICAgdmFyIEMgPSB3cmFwcGVyKGZ1bmN0aW9uICh0aGF0LCBpdGVyYWJsZSkge1xyXG4gICAgICBhbkluc3RhbmNlKHRoYXQsIEMsIE5BTUUsICdfaScpO1xyXG4gICAgICB0aGF0Ll90ID0gTkFNRTsgICAgICAvLyBjb2xsZWN0aW9uIHR5cGVcclxuICAgICAgdGhhdC5faSA9IGlkKys7ICAgICAgLy8gY29sbGVjdGlvbiBpZFxyXG4gICAgICB0aGF0Ll9sID0gdW5kZWZpbmVkOyAvLyBsZWFrIHN0b3JlIGZvciB1bmNhdWdodCBmcm96ZW4gb2JqZWN0c1xyXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XHJcbiAgICB9KTtcclxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XHJcbiAgICAgIC8vIDIzLjMuMy4yIFdlYWtNYXAucHJvdG90eXBlLmRlbGV0ZShrZXkpXHJcbiAgICAgIC8vIDIzLjQuMy4zIFdlYWtTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcclxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpWydkZWxldGUnXShrZXkpO1xyXG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSkgJiYgZGVsZXRlIGRhdGFbdGhpcy5faV07XHJcbiAgICAgIH0sXHJcbiAgICAgIC8vIDIzLjMuMy40IFdlYWtNYXAucHJvdG90eXBlLmhhcyhrZXkpXHJcbiAgICAgIC8vIDIzLjQuMy40IFdlYWtTZXQucHJvdG90eXBlLmhhcyh2YWx1ZSlcclxuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMoa2V5KSB7XHJcbiAgICAgICAgaWYgKCFpc09iamVjdChrZXkpKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdmFyIGRhdGEgPSBnZXRXZWFrKGtleSk7XHJcbiAgICAgICAgaWYgKGRhdGEgPT09IHRydWUpIHJldHVybiB1bmNhdWdodEZyb3plblN0b3JlKHZhbGlkYXRlKHRoaXMsIE5BTUUpKS5oYXMoa2V5KTtcclxuICAgICAgICByZXR1cm4gZGF0YSAmJiAkaGFzKGRhdGEsIHRoaXMuX2kpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBDO1xyXG4gIH0sXHJcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGRhdGEgPSBnZXRXZWFrKGFuT2JqZWN0KGtleSksIHRydWUpO1xyXG4gICAgaWYgKGRhdGEgPT09IHRydWUpIHVuY2F1Z2h0RnJvemVuU3RvcmUodGhhdCkuc2V0KGtleSwgdmFsdWUpO1xyXG4gICAgZWxzZSBkYXRhW3RoYXQuX2ldID0gdmFsdWU7XHJcbiAgICByZXR1cm4gdGhhdDtcclxuICB9LFxyXG4gIHVmc3RvcmU6IHVuY2F1Z2h0RnJvemVuU3RvcmVcclxufTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9pbmRleFxyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICBpZiAoaXQgPT09IHVuZGVmaW5lZCkgcmV0dXJuIDA7XHJcbiAgdmFyIG51bWJlciA9IHRvSW50ZWdlcihpdCk7XHJcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKG51bWJlcik7XHJcbiAgaWYgKG51bWJlciAhPT0gbGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBsZW5ndGghJyk7XHJcbiAgcmV0dXJuIGxlbmd0aDtcclxufTtcclxuIiwiLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xyXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJyk7XHJcbnZhciBnT1BTID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcHMnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBSZWZsZWN0ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdDtcclxubW9kdWxlLmV4cG9ydHMgPSBSZWZsZWN0ICYmIFJlZmxlY3Qub3duS2V5cyB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XHJcbiAgdmFyIGtleXMgPSBnT1BOLmYoYW5PYmplY3QoaXQpKTtcclxuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcclxuICByZXR1cm4gZ2V0U3ltYm9scyA/IGtleXMuY29uY2F0KGdldFN5bWJvbHMoaXQpKSA6IGtleXM7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtRmxhdHRlbkludG9BcnJheVxyXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgSVNfQ09OQ0FUX1NQUkVBREFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnaXNDb25jYXRTcHJlYWRhYmxlJyk7XHJcblxyXG5mdW5jdGlvbiBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIHNvdXJjZSwgc291cmNlTGVuLCBzdGFydCwgZGVwdGgsIG1hcHBlciwgdGhpc0FyZykge1xyXG4gIHZhciB0YXJnZXRJbmRleCA9IHN0YXJ0O1xyXG4gIHZhciBzb3VyY2VJbmRleCA9IDA7XHJcbiAgdmFyIG1hcEZuID0gbWFwcGVyID8gY3R4KG1hcHBlciwgdGhpc0FyZywgMykgOiBmYWxzZTtcclxuICB2YXIgZWxlbWVudCwgc3ByZWFkYWJsZTtcclxuXHJcbiAgd2hpbGUgKHNvdXJjZUluZGV4IDwgc291cmNlTGVuKSB7XHJcbiAgICBpZiAoc291cmNlSW5kZXggaW4gc291cmNlKSB7XHJcbiAgICAgIGVsZW1lbnQgPSBtYXBGbiA/IG1hcEZuKHNvdXJjZVtzb3VyY2VJbmRleF0sIHNvdXJjZUluZGV4LCBvcmlnaW5hbCkgOiBzb3VyY2Vbc291cmNlSW5kZXhdO1xyXG5cclxuICAgICAgc3ByZWFkYWJsZSA9IGZhbHNlO1xyXG4gICAgICBpZiAoaXNPYmplY3QoZWxlbWVudCkpIHtcclxuICAgICAgICBzcHJlYWRhYmxlID0gZWxlbWVudFtJU19DT05DQVRfU1BSRUFEQUJMRV07XHJcbiAgICAgICAgc3ByZWFkYWJsZSA9IHNwcmVhZGFibGUgIT09IHVuZGVmaW5lZCA/ICEhc3ByZWFkYWJsZSA6IGlzQXJyYXkoZWxlbWVudCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChzcHJlYWRhYmxlICYmIGRlcHRoID4gMCkge1xyXG4gICAgICAgIHRhcmdldEluZGV4ID0gZmxhdHRlbkludG9BcnJheSh0YXJnZXQsIG9yaWdpbmFsLCBlbGVtZW50LCB0b0xlbmd0aChlbGVtZW50Lmxlbmd0aCksIHRhcmdldEluZGV4LCBkZXB0aCAtIDEpIC0gMTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGFyZ2V0SW5kZXggPj0gMHgxZmZmZmZmZmZmZmZmZikgdGhyb3cgVHlwZUVycm9yKCk7XHJcbiAgICAgICAgdGFyZ2V0W3RhcmdldEluZGV4XSA9IGVsZW1lbnQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRhcmdldEluZGV4Kys7XHJcbiAgICB9XHJcbiAgICBzb3VyY2VJbmRleCsrO1xyXG4gIH1cclxuICByZXR1cm4gdGFyZ2V0SW5kZXg7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZmxhdHRlbkludG9BcnJheTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciByZXBlYXQgPSByZXF1aXJlKCcuL19zdHJpbmctcmVwZWF0Jyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGhhdCwgbWF4TGVuZ3RoLCBmaWxsU3RyaW5nLCBsZWZ0KSB7XHJcbiAgdmFyIFMgPSBTdHJpbmcoZGVmaW5lZCh0aGF0KSk7XHJcbiAgdmFyIHN0cmluZ0xlbmd0aCA9IFMubGVuZ3RoO1xyXG4gIHZhciBmaWxsU3RyID0gZmlsbFN0cmluZyA9PT0gdW5kZWZpbmVkID8gJyAnIDogU3RyaW5nKGZpbGxTdHJpbmcpO1xyXG4gIHZhciBpbnRNYXhMZW5ndGggPSB0b0xlbmd0aChtYXhMZW5ndGgpO1xyXG4gIGlmIChpbnRNYXhMZW5ndGggPD0gc3RyaW5nTGVuZ3RoIHx8IGZpbGxTdHIgPT0gJycpIHJldHVybiBTO1xyXG4gIHZhciBmaWxsTGVuID0gaW50TWF4TGVuZ3RoIC0gc3RyaW5nTGVuZ3RoO1xyXG4gIHZhciBzdHJpbmdGaWxsZXIgPSByZXBlYXQuY2FsbChmaWxsU3RyLCBNYXRoLmNlaWwoZmlsbExlbiAvIGZpbGxTdHIubGVuZ3RoKSk7XHJcbiAgaWYgKHN0cmluZ0ZpbGxlci5sZW5ndGggPiBmaWxsTGVuKSBzdHJpbmdGaWxsZXIgPSBzdHJpbmdGaWxsZXIuc2xpY2UoMCwgZmlsbExlbik7XHJcbiAgcmV0dXJuIGxlZnQgPyBzdHJpbmdGaWxsZXIgKyBTIDogUyArIHN0cmluZ0ZpbGxlcjtcclxufTtcclxuIiwidmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgaXNFbnVtID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpLmY7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGlzRW50cmllcykge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoaXQpIHtcclxuICAgIHZhciBPID0gdG9JT2JqZWN0KGl0KTtcclxuICAgIHZhciBrZXlzID0gZ2V0S2V5cyhPKTtcclxuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHZhciByZXN1bHQgPSBbXTtcclxuICAgIHZhciBrZXk7XHJcbiAgICB3aGlsZSAobGVuZ3RoID4gaSkgaWYgKGlzRW51bS5jYWxsKE8sIGtleSA9IGtleXNbaSsrXSkpIHtcclxuICAgICAgcmVzdWx0LnB1c2goaXNFbnRyaWVzID8gW2tleSwgT1trZXldXSA6IE9ba2V5XSk7XHJcbiAgICB9IHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxufTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxyXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcclxudmFyIGZyb20gPSByZXF1aXJlKCcuL19hcnJheS1mcm9tLWl0ZXJhYmxlJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gdG9KU09OKCkge1xyXG4gICAgaWYgKGNsYXNzb2YodGhpcykgIT0gTkFNRSkgdGhyb3cgVHlwZUVycm9yKE5BTUUgKyBcIiN0b0pTT04gaXNuJ3QgZ2VuZXJpY1wiKTtcclxuICAgIHJldHVybiBmcm9tKHRoaXMpO1xyXG4gIH07XHJcbn07XHJcbiIsInZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlciwgSVRFUkFUT1IpIHtcclxuICB2YXIgcmVzdWx0ID0gW107XHJcbiAgZm9yT2YoaXRlciwgZmFsc2UsIHJlc3VsdC5wdXNoLCByZXN1bHQsIElURVJBVE9SKTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5zY2FsZSB8fCBmdW5jdGlvbiBzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcclxuICBpZiAoXHJcbiAgICBhcmd1bWVudHMubGVuZ3RoID09PSAwXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICAgICAgfHwgeCAhPSB4XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICAgICAgfHwgaW5Mb3cgIT0gaW5Mb3dcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgICB8fCBpbkhpZ2ggIT0gaW5IaWdoXHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICAgICAgfHwgb3V0TG93ICE9IG91dExvd1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICAgIHx8IG91dEhpZ2ggIT0gb3V0SGlnaFxyXG4gICkgcmV0dXJuIE5hTjtcclxuICBpZiAoeCA9PT0gSW5maW5pdHkgfHwgeCA9PT0gLUluZmluaXR5KSByZXR1cm4geDtcclxuICByZXR1cm4gKHggLSBpbkxvdykgKiAob3V0SGlnaCAtIG91dExvdykgLyAoaW5IaWdoIC0gaW5Mb3cpICsgb3V0TG93O1xyXG59O1xyXG4iLCIvLyDlhajpg6jph4fnlKjlvILmraXnu4Tku7bnmoTmlrnlvI/liqDovb1cclxuLy8g5Y6L57ypIGpzIOS9k+enr1xyXG5jb25zdCBpbmRleCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9pbmRleC9pbmRleC52dWUnKTtcclxuY29uc3QgbG9naW4gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvbG9naW4vbG9naW4udnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JSb3V0ZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9yb3V0ZS9saXN0LnZ1ZScpO1xyXG5jb25zdCByb3V0ZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9yb3V0ZS9yb3V0ZS52dWUnKTtcclxuY29uc3QgbGlzdEZvclJvbGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvcm9sZS9saXN0LnZ1ZScpO1xyXG5jb25zdCByb2xlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3JvbGUvcm9sZS52dWUnKTtcclxuY29uc3QgcHJpdiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9yb2xlL3ByaXYudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JBZG1pbiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9hZG1pbi9saXN0LnZ1ZScpO1xyXG5jb25zdCBhZG1pbiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9hZG1pbi91c2VyLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yQnJhbmQgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYnJhbmQvbGlzdC52dWUnKTtcclxuY29uc3QgYnJhbmQgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYnJhbmQvYnJhbmQudnVlJyk7XHJcbmNvbnN0IGNhclNlcmllcyA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXJTZXJpZXMvY2FyU2VyaWVzLnZ1ZScpO1xyXG5jb25zdCBjYXJTZXJpZXNMaXN0ID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclNlcmllcy9jYXJTZXJpZXNMaXN0LnZ1ZScpO1xyXG5jb25zdCBjYXJTZXJpZXNHcm91cCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXJTZXJpZXMvY2FyU2VyaWVzR3JvdXAudnVlJyk7XHJcbmNvbnN0IGNhclNlcmllc0dyb3VwTGlzdCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXJTZXJpZXMvY2FyU2VyaWVzR3JvdXBMaXN0LnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yQ2FyQ29uZmlndXJhdGlvbkdyb3VwID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhckNvbmZpZ3VyYXRpb25Hcm91cC9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb25Hcm91cCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXJDb25maWd1cmF0aW9uR3JvdXAvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JDYXJDb25maWd1cmF0aW9uID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhckNvbmZpZ3VyYXRpb24vbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JDYXJDb25maWd1cmF0aW9uID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhckNvbmZpZ3VyYXRpb24vdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JDYXJUeXBlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclR5cGUvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JDYXJUeXBlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclR5cGUvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JDYXJNb2RlbCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXJNb2RlbC9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckNhck1vZGVsID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2Nhck1vZGVsL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yRGVjdGlvbk1vZHVsZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9kZXRlY3Rpb25Nb2R1bGUvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JEZWN0aW9uTW9kdWxlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2RldGVjdGlvbk1vZHVsZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckRlY3Rpb25Hcm91cCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25Hcm91cC9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckRlY3Rpb25Hcm91cCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25Hcm91cC90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckRlY3Rpb25Qb3MgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvRGV0ZWN0aW9uUG9zL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yRGVjdGlvblBvcyA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25Qb3MvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JEZWN0aW9uSXRlbSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25JdGVtL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yRGVjdGlvbkl0ZW0gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvRGV0ZWN0aW9uSXRlbS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvclNlcnZpY2UgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc2VydmljZS9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvclNlcnZpY2UgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc2VydmljZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckNhciA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXIvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JDYXIgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCByZXBvcnRGb3JDYXIgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyL3JlcG9ydC52dWUnKTtcclxuY29uc3QgbGlzdEZvckFydGljbGVUeXBlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2FydGljbGVUeXBlL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yQXJ0aWNsZVR5cGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYXJ0aWNsZVR5cGUvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JBcnRpY2xlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2FydGljbGUvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JBcnRpY2xlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2FydGljbGUvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JTaG93SW1hZ2UgID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3Nob3dJbWFnZS9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvclNob3dJbWFnZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zaG93SW1hZ2UvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JTYWxlQXBwbGljYXRpb24gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc2FsZUFwcGxpY2F0aW9uL2xpc3QudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JSZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3JlY29tbWVuZGF0aW9uQXBwbGljYXRpb24vbGlzdC52dWUnKTtcclxuY29uc3QgbGlzdEZvclN0YWdpbmdCdXlBcHBsaWNhdGlvbiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zdGFnaW5nQnV5QXBwbGljYXRpb24vbGlzdC52dWUnKTtcclxuY29uc3QgbGlzdEZvclJlc2VydmF0aW9uID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3Jlc2VydmF0aW9uL2xpc3QudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JVc2VyID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3VzZXIvbGlzdC52dWUnKTtcclxuLy8g5o6n5Yi26Z2i5p2/XHJcbmNvbnN0IHBhbm5lbCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9wYW5uZWwvcGFubmVsLnZ1ZScpO1xyXG5cclxuY29uc3QgbGlzdEZvclN0b3J5ID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3N0b3J5L2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yU3RvcnkgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc3RvcnkvdGhpbmcudnVlJyk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBbXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2hvbWUnICxcclxuICAgICAgICBwYXRoOiAnLycgLFxyXG4gICAgICAgIGNvbXBvbmVudDogaW5kZXhcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIG5hbWU6ICdsb2dpbicgLFxyXG4gICAgICAgIHBhdGg6ICcvbG9naW4nICxcclxuICAgICAgICBjb21wb25lbnQ6IGxvZ2luXHJcbiAgICB9ICxcclxuICAgIC8vIOaOp+WItumdouadv1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcGFubmVsJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBwYW5uZWxcclxuICAgIH0gLFxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5qih5Z2X77ya6Lev55SxXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yb3V0ZS9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yUm91dGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcm91dGUvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiByb3V0ZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yb3V0ZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiByb3V0ZVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5qih5Z2X77ya6KeS6ImyXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yb2xlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JSb2xlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvbGUvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiByb2xlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvbGUvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogcm9sZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yb2xlL3ByaXYnICxcclxuICAgICAgICBjb21wb25lbnQ6IHByaXZcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOWQjuWPsOeUqOaIt1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYWRtaW4vbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckFkbWluXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FkbWluL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IGFkbWluXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FkbWluL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogYWRtaW5cclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOW5s+WPsOeUqOaIt1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvdXNlci9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yVXNlclxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5ZOB54mMXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9icmFuZC9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQnJhbmRcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYnJhbmQvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogYnJhbmRcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYnJhbmQvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBicmFuZFxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m57O75YiG57uEXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJTZXJpZXNHcm91cC9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBjYXJTZXJpZXNHcm91cExpc3RcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyU2VyaWVzR3JvdXAvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogY2FyU2VyaWVzR3JvdXBcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyU2VyaWVzR3JvdXAvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBjYXJTZXJpZXNHcm91cFxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m57O7XHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJTZXJpZXMvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogY2FyU2VyaWVzTGlzdFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJTZXJpZXMvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogY2FyU2VyaWVzXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhclNlcmllcy9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IGNhclNlcmllc1xyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m6L6G6YWN572u5YiG57uEXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uR3JvdXAvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckNhckNvbmZpZ3VyYXRpb25Hcm91cFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uR3JvdXAvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJDb25maWd1cmF0aW9uR3JvdXBcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyQ29uZmlndXJhdGlvbkdyb3VwL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJDb25maWd1cmF0aW9uR3JvdXBcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi9pui+humFjee9rlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyQ29uZmlndXJhdGlvbi9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQ2FyQ29uZmlndXJhdGlvblxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyQ29uZmlndXJhdGlvblxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJDb25maWd1cmF0aW9uXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabovobliIbnsbtcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhclR5cGUvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckNhclR5cGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyVHlwZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckNhclR5cGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyVHlwZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyVHlwZVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m6L6G5Z6L5Y+3XHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJNb2RlbC9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQ2FyTW9kZWxcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyTW9kZWwvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJNb2RlbFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJNb2RlbC9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyTW9kZWxcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi0qOmHj+ajgOa1iy3mqKHlnZdcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbk1vZHVsZS9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yRGVjdGlvbk1vZHVsZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Nb2R1bGUvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uTW9kdWxlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbk1vZHVsZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yRGVjdGlvbk1vZHVsZVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6LSo6YeP5qOA5rWLLeS9jee9ruWIhue7hFxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uR3JvdXAvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckRlY3Rpb25Hcm91cFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Hcm91cC9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckRlY3Rpb25Hcm91cFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Hcm91cC9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yRGVjdGlvbkdyb3VwXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDotKjph4/mo4DmtYst5L2N572u5YiG57uEXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Qb3MvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckRlY3Rpb25Qb3NcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uUG9zL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yRGVjdGlvblBvc1xyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Qb3MvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckRlY3Rpb25Qb3NcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi0qOmHj+ajgOa1iy3mo4DmtYvpoblcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbkl0ZW0vbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckRlY3Rpb25JdGVtXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbkl0ZW0vZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uSXRlbVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25JdGVtL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uSXRlbVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m6L6G5pyN5YqhXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9zZXJ2aWNlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JTZXJ2aWNlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3NlcnZpY2UvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JTZXJ2aWNlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3NlcnZpY2UvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvclNlcnZpY2VcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi9pui+hueuoeeQhlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JDYXJcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2Nhci9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2Nhci9yZXBvcnQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHJlcG9ydEZvckNhclxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5paH56ug5YiG57G7XHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hcnRpY2xlVHlwZS9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQXJ0aWNsZVR5cGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYXJ0aWNsZVR5cGUvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JBcnRpY2xlVHlwZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hcnRpY2xlVHlwZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQXJ0aWNsZVR5cGVcclxuICAgIH0gLFxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5paH56ugXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hcnRpY2xlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JBcnRpY2xlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FydGljbGUvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JBcnRpY2xlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FydGljbGUvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckFydGljbGVcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOWxleekuuWbvueJh1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2hvd0ltYWdlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JTaG93SW1hZ2VcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2hvd0ltYWdlL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yU2hvd0ltYWdlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3Nob3dJbWFnZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yU2hvd0ltYWdlXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDljZbovabnlLPor7dcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3NhbGVBcHBsaWNhdGlvbi9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yU2FsZUFwcGxpY2F0aW9uXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JlY29tbWVuZGF0aW9uQXBwbGljYXRpb24vbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclJlY29tbWVuZGF0aW9uQXBwbGljYXRpb25cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc3RhZ2luZ0J1eUFwcGxpY2F0aW9uL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JTdGFnaW5nQnV5QXBwbGljYXRpb25cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcmVzZXJ2YXRpb24vbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclJlc2VydmF0aW9uXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDkubDovabmlYXkuotcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3N0b3J5L2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JTdG9yeVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9zdG9yeS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvclN0b3J5XHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3N0b3J5L2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JTdG9yeVxyXG4gICAgfSAsXHJcbl07IiwiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG5yZXF1aXJlKFwiY29yZS1qcy9zaGltXCIpO1xyXG5cclxucmVxdWlyZShcInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZVwiKTtcclxuXHJcbnJlcXVpcmUoXCJjb3JlLWpzL2ZuL3JlZ2V4cC9lc2NhcGVcIik7XHJcblxyXG5pZiAoZ2xvYmFsLl9iYWJlbFBvbHlmaWxsKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwib25seSBvbmUgaW5zdGFuY2Ugb2YgYmFiZWwtcG9seWZpbGwgaXMgYWxsb3dlZFwiKTtcclxufVxyXG5nbG9iYWwuX2JhYmVsUG9seWZpbGwgPSB0cnVlO1xyXG5cclxudmFyIERFRklORV9QUk9QRVJUWSA9IFwiZGVmaW5lUHJvcGVydHlcIjtcclxuZnVuY3Rpb24gZGVmaW5lKE8sIGtleSwgdmFsdWUpIHtcclxuICBPW2tleV0gfHwgT2JqZWN0W0RFRklORV9QUk9QRVJUWV0oTywga2V5LCB7XHJcbiAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgIHZhbHVlOiB2YWx1ZVxyXG4gIH0pO1xyXG59XHJcblxyXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRMZWZ0XCIsIFwiXCIucGFkU3RhcnQpO1xyXG5kZWZpbmUoU3RyaW5nLnByb3RvdHlwZSwgXCJwYWRSaWdodFwiLCBcIlwiLnBhZEVuZCk7XHJcblxyXG5cInBvcCxyZXZlcnNlLHNoaWZ0LGtleXMsdmFsdWVzLGVudHJpZXMsaW5kZXhPZixldmVyeSxzb21lLGZvckVhY2gsbWFwLGZpbHRlcixmaW5kLGZpbmRJbmRleCxpbmNsdWRlcyxqb2luLHNsaWNlLGNvbmNhdCxwdXNoLHNwbGljZSx1bnNoaWZ0LHNvcnQsbGFzdEluZGV4T2YscmVkdWNlLHJlZHVjZVJpZ2h0LGNvcHlXaXRoaW4sZmlsbFwiLnNwbGl0KFwiLFwiKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICBbXVtrZXldICYmIGRlZmluZShBcnJheSwga2V5LCBGdW5jdGlvbi5jYWxsLmJpbmQoW11ba2V5XSkpO1xyXG59KTsiLCJyZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN5bWJvbCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnR5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0aWVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmtleXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5mcmVlemUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Quc2VhbCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtZnJvemVuJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLXNlYWxlZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmFzc2lnbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnRvLXN0cmluZycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmJpbmQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uaGFzLWluc3RhbmNlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtaW50Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucGFyc2UtZmxvYXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuY29uc3RydWN0b3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tZml4ZWQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmVwc2lsb24nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtZmluaXRlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtbmFuJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLmlzLXNhZmUtaW50ZWdlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1pbi1zYWZlLWludGVnZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtZmxvYXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hY29zaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXNpbmgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jYnJ0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jbHozMicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguY29zaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZXhwbTEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmZyb3VuZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmltdWwnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzEwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cxcCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2lnbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguc2luaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudGFuaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgudHJ1bmMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJhdycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy50cmltJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmNvZGUtcG9pbnQtYXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZW5kcy13aXRoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnJlcGVhdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdGFydHMtd2l0aCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmlnJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJsaW5rJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZml4ZWQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udGNvbG9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLml0YWxpY3MnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcubGluaycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdHJpa2UnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3ViJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN1cCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUubm93Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1qc29uJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS50by1zdHJpbmcnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmlzLWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZnJvbScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lm9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuam9pbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNsaWNlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29ydCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZvci1lYWNoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkubWFwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmlsdGVyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc29tZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmV2ZXJ5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaW5kZXgtb2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5sYXN0LWluZGV4LW9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWxsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zcGVjaWVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZXhlYycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC50by1zdHJpbmcnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuZmxhZ3MnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2gnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAucmVwbGFjZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zZWFyY2gnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wcm9taXNlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWFwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc2V0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYud2Vhay1tYXAnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLXNldCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmFycmF5LWJ1ZmZlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmRhdGEtdmlldycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50OC1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWNsYW1wZWQtYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQxNi1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDMyLWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQzMi1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0NjQtYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5jb25zdHJ1Y3QnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmRlZmluZS1wcm9wZXJ0eScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5lbnVtZXJhdGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtcHJvdG90eXBlLW9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5oYXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0Lm93bi1rZXlzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5wcmV2ZW50LWV4dGVuc2lvbnMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0LXByb3RvdHlwZS1vZicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmluY2x1ZGVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0dGVuJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLmF0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy5wYWQtZW5kJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tbGVmdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLm1hdGNoLWFsbCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5hc3luYy1pdGVyYXRvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcnMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QudmFsdWVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZGVmaW5lLWdldHRlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtc2V0dGVyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLXNldHRlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC50by1qc29uJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc2V0LnRvLWpzb24nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAub2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQub2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0Lm9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLmZyb20nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQuZnJvbScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLmZyb20nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy53ZWFrLXNldC5mcm9tJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZ2xvYmFsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3lzdGVtLmdsb2JhbCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmVycm9yLmlzLWVycm9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5jbGFtcCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVnLXBlci1yYWQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmRlZ3JlZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaWFkZGgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmlzdWJoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pbXVsaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkLXBlci1kZWcnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnJhZGlhbnMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC51bXVsaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2lnbmJpdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnByb21pc2UudHJ5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5kZWZpbmUtbWV0YWRhdGEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW1ldGFkYXRhJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEta2V5cycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS1rZXlzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5oYXMtbWV0YWRhdGEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lm1ldGFkYXRhJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXNhcCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9ic2VydmFibGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi50aW1lcnMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5pbW1lZGlhdGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL21vZHVsZXMvX2NvcmUnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBFQ01BU2NyaXB0IDYgc3ltYm9scyBzaGltXHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xyXG52YXIgTUVUQSA9IHJlcXVpcmUoJy4vX21ldGEnKS5LRVk7XHJcbnZhciAkZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJyk7XHJcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XHJcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcclxudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xyXG52YXIgd2tzRXh0ID0gcmVxdWlyZSgnLi9fd2tzLWV4dCcpO1xyXG52YXIgd2tzRGVmaW5lID0gcmVxdWlyZSgnLi9fd2tzLWRlZmluZScpO1xyXG52YXIgZW51bUtleXMgPSByZXF1aXJlKCcuL19lbnVtLWtleXMnKTtcclxudmFyIGlzQXJyYXkgPSByZXF1aXJlKCcuL19pcy1hcnJheScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcclxudmFyIF9jcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XHJcbnZhciBnT1BORXh0ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0Jyk7XHJcbnZhciAkR09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XHJcbnZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxudmFyIGdPUEQgPSAkR09QRC5mO1xyXG52YXIgZFAgPSAkRFAuZjtcclxudmFyIGdPUE4gPSBnT1BORXh0LmY7XHJcbnZhciAkU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcclxudmFyICRKU09OID0gZ2xvYmFsLkpTT047XHJcbnZhciBfc3RyaW5naWZ5ID0gJEpTT04gJiYgJEpTT04uc3RyaW5naWZ5O1xyXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XHJcbnZhciBISURERU4gPSB3a3MoJ19oaWRkZW4nKTtcclxudmFyIFRPX1BSSU1JVElWRSA9IHdrcygndG9QcmltaXRpdmUnKTtcclxudmFyIGlzRW51bSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG52YXIgU3ltYm9sUmVnaXN0cnkgPSBzaGFyZWQoJ3N5bWJvbC1yZWdpc3RyeScpO1xyXG52YXIgQWxsU3ltYm9scyA9IHNoYXJlZCgnc3ltYm9scycpO1xyXG52YXIgT1BTeW1ib2xzID0gc2hhcmVkKCdvcC1zeW1ib2xzJyk7XHJcbnZhciBPYmplY3RQcm90byA9IE9iamVjdFtQUk9UT1RZUEVdO1xyXG52YXIgVVNFX05BVElWRSA9IHR5cGVvZiAkU3ltYm9sID09ICdmdW5jdGlvbic7XHJcbnZhciBRT2JqZWN0ID0gZ2xvYmFsLlFPYmplY3Q7XHJcbi8vIERvbid0IHVzZSBzZXR0ZXJzIGluIFF0IFNjcmlwdCwgaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzE3M1xyXG52YXIgc2V0dGVyID0gIVFPYmplY3QgfHwgIVFPYmplY3RbUFJPVE9UWVBFXSB8fCAhUU9iamVjdFtQUk9UT1RZUEVdLmZpbmRDaGlsZDtcclxuXHJcbi8vIGZhbGxiYWNrIGZvciBvbGQgQW5kcm9pZCwgaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTY4N1xyXG52YXIgc2V0U3ltYm9sRGVzYyA9IERFU0NSSVBUT1JTICYmICRmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIF9jcmVhdGUoZFAoe30sICdhJywge1xyXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBkUCh0aGlzLCAnYScsIHsgdmFsdWU6IDcgfSkuYTsgfVxyXG4gIH0pKS5hICE9IDc7XHJcbn0pID8gZnVuY3Rpb24gKGl0LCBrZXksIEQpIHtcclxuICB2YXIgcHJvdG9EZXNjID0gZ09QRChPYmplY3RQcm90bywga2V5KTtcclxuICBpZiAocHJvdG9EZXNjKSBkZWxldGUgT2JqZWN0UHJvdG9ba2V5XTtcclxuICBkUChpdCwga2V5LCBEKTtcclxuICBpZiAocHJvdG9EZXNjICYmIGl0ICE9PSBPYmplY3RQcm90bykgZFAoT2JqZWN0UHJvdG8sIGtleSwgcHJvdG9EZXNjKTtcclxufSA6IGRQO1xyXG5cclxudmFyIHdyYXAgPSBmdW5jdGlvbiAodGFnKSB7XHJcbiAgdmFyIHN5bSA9IEFsbFN5bWJvbHNbdGFnXSA9IF9jcmVhdGUoJFN5bWJvbFtQUk9UT1RZUEVdKTtcclxuICBzeW0uX2sgPSB0YWc7XHJcbiAgcmV0dXJuIHN5bTtcclxufTtcclxuXHJcbnZhciBpc1N5bWJvbCA9IFVTRV9OQVRJVkUgJiYgdHlwZW9mICRTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCcgPyBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gdHlwZW9mIGl0ID09ICdzeW1ib2wnO1xyXG59IDogZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGl0IGluc3RhbmNlb2YgJFN5bWJvbDtcclxufTtcclxuXHJcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eShpdCwga2V5LCBEKSB7XHJcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90bykgJGRlZmluZVByb3BlcnR5KE9QU3ltYm9scywga2V5LCBEKTtcclxuICBhbk9iamVjdChpdCk7XHJcbiAga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKTtcclxuICBhbk9iamVjdChEKTtcclxuICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSkpIHtcclxuICAgIGlmICghRC5lbnVtZXJhYmxlKSB7XHJcbiAgICAgIGlmICghaGFzKGl0LCBISURERU4pKSBkUChpdCwgSElEREVOLCBjcmVhdGVEZXNjKDEsIHt9KSk7XHJcbiAgICAgIGl0W0hJRERFTl1ba2V5XSA9IHRydWU7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAoaGFzKGl0LCBISURERU4pICYmIGl0W0hJRERFTl1ba2V5XSkgaXRbSElEREVOXVtrZXldID0gZmFsc2U7XHJcbiAgICAgIEQgPSBfY3JlYXRlKEQsIHsgZW51bWVyYWJsZTogY3JlYXRlRGVzYygwLCBmYWxzZSkgfSk7XHJcbiAgICB9IHJldHVybiBzZXRTeW1ib2xEZXNjKGl0LCBrZXksIEQpO1xyXG4gIH0gcmV0dXJuIGRQKGl0LCBrZXksIEQpO1xyXG59O1xyXG52YXIgJGRlZmluZVByb3BlcnRpZXMgPSBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKGl0LCBQKSB7XHJcbiAgYW5PYmplY3QoaXQpO1xyXG4gIHZhciBrZXlzID0gZW51bUtleXMoUCA9IHRvSU9iamVjdChQKSk7XHJcbiAgdmFyIGkgPSAwO1xyXG4gIHZhciBsID0ga2V5cy5sZW5ndGg7XHJcbiAgdmFyIGtleTtcclxuICB3aGlsZSAobCA+IGkpICRkZWZpbmVQcm9wZXJ0eShpdCwga2V5ID0ga2V5c1tpKytdLCBQW2tleV0pO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxudmFyICRjcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaXQsIFApIHtcclxuICByZXR1cm4gUCA9PT0gdW5kZWZpbmVkID8gX2NyZWF0ZShpdCkgOiAkZGVmaW5lUHJvcGVydGllcyhfY3JlYXRlKGl0KSwgUCk7XHJcbn07XHJcbnZhciAkcHJvcGVydHlJc0VudW1lcmFibGUgPSBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShrZXkpIHtcclxuICB2YXIgRSA9IGlzRW51bS5jYWxsKHRoaXMsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpO1xyXG4gIGlmICh0aGlzID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuIGZhbHNlO1xyXG4gIHJldHVybiBFIHx8ICFoYXModGhpcywga2V5KSB8fCAhaGFzKEFsbFN5bWJvbHMsIGtleSkgfHwgaGFzKHRoaXMsIEhJRERFTikgJiYgdGhpc1tISURERU5dW2tleV0gPyBFIDogdHJ1ZTtcclxufTtcclxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xyXG4gIGl0ID0gdG9JT2JqZWN0KGl0KTtcclxuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xyXG4gIGlmIChpdCA9PT0gT2JqZWN0UHJvdG8gJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIWhhcyhPUFN5bWJvbHMsIGtleSkpIHJldHVybjtcclxuICB2YXIgRCA9IGdPUEQoaXQsIGtleSk7XHJcbiAgaWYgKEQgJiYgaGFzKEFsbFN5bWJvbHMsIGtleSkgJiYgIShoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSkgRC5lbnVtZXJhYmxlID0gdHJ1ZTtcclxuICByZXR1cm4gRDtcclxufTtcclxudmFyICRnZXRPd25Qcm9wZXJ0eU5hbWVzID0gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhpdCkge1xyXG4gIHZhciBuYW1lcyA9IGdPUE4odG9JT2JqZWN0KGl0KSk7XHJcbiAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gIHZhciBpID0gMDtcclxuICB2YXIga2V5O1xyXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XHJcbiAgICBpZiAoIWhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiBrZXkgIT0gSElEREVOICYmIGtleSAhPSBNRVRBKSByZXN1bHQucHVzaChrZXkpO1xyXG4gIH0gcmV0dXJuIHJlc3VsdDtcclxufTtcclxudmFyICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoaXQpIHtcclxuICB2YXIgSVNfT1AgPSBpdCA9PT0gT2JqZWN0UHJvdG87XHJcbiAgdmFyIG5hbWVzID0gZ09QTihJU19PUCA/IE9QU3ltYm9scyA6IHRvSU9iamVjdChpdCkpO1xyXG4gIHZhciByZXN1bHQgPSBbXTtcclxuICB2YXIgaSA9IDA7XHJcbiAgdmFyIGtleTtcclxuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkge1xyXG4gICAgaWYgKGhhcyhBbGxTeW1ib2xzLCBrZXkgPSBuYW1lc1tpKytdKSAmJiAoSVNfT1AgPyBoYXMoT2JqZWN0UHJvdG8sIGtleSkgOiB0cnVlKSkgcmVzdWx0LnB1c2goQWxsU3ltYm9sc1trZXldKTtcclxuICB9IHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG4vLyAxOS40LjEuMSBTeW1ib2woW2Rlc2NyaXB0aW9uXSlcclxuaWYgKCFVU0VfTkFUSVZFKSB7XHJcbiAgJFN5bWJvbCA9IGZ1bmN0aW9uIFN5bWJvbCgpIHtcclxuICAgIGlmICh0aGlzIGluc3RhbmNlb2YgJFN5bWJvbCkgdGhyb3cgVHlwZUVycm9yKCdTeW1ib2wgaXMgbm90IGEgY29uc3RydWN0b3IhJyk7XHJcbiAgICB2YXIgdGFnID0gdWlkKGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcclxuICAgIHZhciAkc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgIGlmICh0aGlzID09PSBPYmplY3RQcm90bykgJHNldC5jYWxsKE9QU3ltYm9scywgdmFsdWUpO1xyXG4gICAgICBpZiAoaGFzKHRoaXMsIEhJRERFTikgJiYgaGFzKHRoaXNbSElEREVOXSwgdGFnKSkgdGhpc1tISURERU5dW3RhZ10gPSBmYWxzZTtcclxuICAgICAgc2V0U3ltYm9sRGVzYyh0aGlzLCB0YWcsIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcclxuICAgIH07XHJcbiAgICBpZiAoREVTQ1JJUFRPUlMgJiYgc2V0dGVyKSBzZXRTeW1ib2xEZXNjKE9iamVjdFByb3RvLCB0YWcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCBzZXQ6ICRzZXQgfSk7XHJcbiAgICByZXR1cm4gd3JhcCh0YWcpO1xyXG4gIH07XHJcbiAgcmVkZWZpbmUoJFN5bWJvbFtQUk9UT1RZUEVdLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiB0aGlzLl9rO1xyXG4gIH0pO1xyXG5cclxuICAkR09QRC5mID0gJGdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcclxuICAkRFAuZiA9ICRkZWZpbmVQcm9wZXJ0eTtcclxuICByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmYgPSBnT1BORXh0LmYgPSAkZ2V0T3duUHJvcGVydHlOYW1lcztcclxuICByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZiA9ICRwcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxuICByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpLmYgPSAkZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG5cclxuICBpZiAoREVTQ1JJUFRPUlMgJiYgIXJlcXVpcmUoJy4vX2xpYnJhcnknKSkge1xyXG4gICAgcmVkZWZpbmUoT2JqZWN0UHJvdG8sICdwcm9wZXJ0eUlzRW51bWVyYWJsZScsICRwcm9wZXJ0eUlzRW51bWVyYWJsZSwgdHJ1ZSk7XHJcbiAgfVxyXG5cclxuICB3a3NFeHQuZiA9IGZ1bmN0aW9uIChuYW1lKSB7XHJcbiAgICByZXR1cm4gd3JhcCh3a3MobmFtZSkpO1xyXG4gIH07XHJcbn1cclxuXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgU3ltYm9sOiAkU3ltYm9sIH0pO1xyXG5cclxuZm9yICh2YXIgZXM2U3ltYm9scyA9IChcclxuICAvLyAxOS40LjIuMiwgMTkuNC4yLjMsIDE5LjQuMi40LCAxOS40LjIuNiwgMTkuNC4yLjgsIDE5LjQuMi45LCAxOS40LjIuMTAsIDE5LjQuMi4xMSwgMTkuNC4yLjEyLCAxOS40LjIuMTMsIDE5LjQuMi4xNFxyXG4gICdoYXNJbnN0YW5jZSxpc0NvbmNhdFNwcmVhZGFibGUsaXRlcmF0b3IsbWF0Y2gscmVwbGFjZSxzZWFyY2gsc3BlY2llcyxzcGxpdCx0b1ByaW1pdGl2ZSx0b1N0cmluZ1RhZyx1bnNjb3BhYmxlcydcclxuKS5zcGxpdCgnLCcpLCBqID0gMDsgZXM2U3ltYm9scy5sZW5ndGggPiBqOyl3a3MoZXM2U3ltYm9sc1tqKytdKTtcclxuXHJcbmZvciAodmFyIHdlbGxLbm93blN5bWJvbHMgPSAka2V5cyh3a3Muc3RvcmUpLCBrID0gMDsgd2VsbEtub3duU3ltYm9scy5sZW5ndGggPiBrOykgd2tzRGVmaW5lKHdlbGxLbm93blN5bWJvbHNbaysrXSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnU3ltYm9sJywge1xyXG4gIC8vIDE5LjQuMi4xIFN5bWJvbC5mb3Ioa2V5KVxyXG4gICdmb3InOiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICByZXR1cm4gaGFzKFN5bWJvbFJlZ2lzdHJ5LCBrZXkgKz0gJycpXHJcbiAgICAgID8gU3ltYm9sUmVnaXN0cnlba2V5XVxyXG4gICAgICA6IFN5bWJvbFJlZ2lzdHJ5W2tleV0gPSAkU3ltYm9sKGtleSk7XHJcbiAgfSxcclxuICAvLyAxOS40LjIuNSBTeW1ib2wua2V5Rm9yKHN5bSlcclxuICBrZXlGb3I6IGZ1bmN0aW9uIGtleUZvcihzeW0pIHtcclxuICAgIGlmICghaXNTeW1ib2woc3ltKSkgdGhyb3cgVHlwZUVycm9yKHN5bSArICcgaXMgbm90IGEgc3ltYm9sIScpO1xyXG4gICAgZm9yICh2YXIga2V5IGluIFN5bWJvbFJlZ2lzdHJ5KSBpZiAoU3ltYm9sUmVnaXN0cnlba2V5XSA9PT0gc3ltKSByZXR1cm4ga2V5O1xyXG4gIH0sXHJcbiAgdXNlU2V0dGVyOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IHRydWU7IH0sXHJcbiAgdXNlU2ltcGxlOiBmdW5jdGlvbiAoKSB7IHNldHRlciA9IGZhbHNlOyB9XHJcbn0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgJ09iamVjdCcsIHtcclxuICAvLyAxOS4xLjIuMiBPYmplY3QuY3JlYXRlKE8gWywgUHJvcGVydGllc10pXHJcbiAgY3JlYXRlOiAkY3JlYXRlLFxyXG4gIC8vIDE5LjEuMi40IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxyXG4gIGRlZmluZVByb3BlcnR5OiAkZGVmaW5lUHJvcGVydHksXHJcbiAgLy8gMTkuMS4yLjMgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcylcclxuICBkZWZpbmVQcm9wZXJ0aWVzOiAkZGVmaW5lUHJvcGVydGllcyxcclxuICAvLyAxOS4xLjIuNiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApXHJcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yLFxyXG4gIC8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXHJcbiAgZ2V0T3duUHJvcGVydHlOYW1lczogJGdldE93blByb3BlcnR5TmFtZXMsXHJcbiAgLy8gMTkuMS4yLjggT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhPKVxyXG4gIGdldE93blByb3BlcnR5U3ltYm9sczogJGdldE93blByb3BlcnR5U3ltYm9sc1xyXG59KTtcclxuXHJcbi8vIDI0LjMuMiBKU09OLnN0cmluZ2lmeSh2YWx1ZSBbLCByZXBsYWNlciBbLCBzcGFjZV1dKVxyXG4kSlNPTiAmJiAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICghVVNFX05BVElWRSB8fCAkZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIHZhciBTID0gJFN5bWJvbCgpO1xyXG4gIC8vIE1TIEVkZ2UgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIHt9XHJcbiAgLy8gV2ViS2l0IGNvbnZlcnRzIHN5bWJvbCB2YWx1ZXMgdG8gSlNPTiBhcyBudWxsXHJcbiAgLy8gVjggdGhyb3dzIG9uIGJveGVkIHN5bWJvbHNcclxuICByZXR1cm4gX3N0cmluZ2lmeShbU10pICE9ICdbbnVsbF0nIHx8IF9zdHJpbmdpZnkoeyBhOiBTIH0pICE9ICd7fScgfHwgX3N0cmluZ2lmeShPYmplY3QoUykpICE9ICd7fSc7XHJcbn0pKSwgJ0pTT04nLCB7XHJcbiAgc3RyaW5naWZ5OiBmdW5jdGlvbiBzdHJpbmdpZnkoaXQpIHtcclxuICAgIHZhciBhcmdzID0gW2l0XTtcclxuICAgIHZhciBpID0gMTtcclxuICAgIHZhciByZXBsYWNlciwgJHJlcGxhY2VyO1xyXG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgJHJlcGxhY2VyID0gcmVwbGFjZXIgPSBhcmdzWzFdO1xyXG4gICAgaWYgKCFpc09iamVjdChyZXBsYWNlcikgJiYgaXQgPT09IHVuZGVmaW5lZCB8fCBpc1N5bWJvbChpdCkpIHJldHVybjsgLy8gSUU4IHJldHVybnMgc3RyaW5nIG9uIHVuZGVmaW5lZFxyXG4gICAgaWYgKCFpc0FycmF5KHJlcGxhY2VyKSkgcmVwbGFjZXIgPSBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICBpZiAodHlwZW9mICRyZXBsYWNlciA9PSAnZnVuY3Rpb24nKSB2YWx1ZSA9ICRyZXBsYWNlci5jYWxsKHRoaXMsIGtleSwgdmFsdWUpO1xyXG4gICAgICBpZiAoIWlzU3ltYm9sKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xyXG4gICAgfTtcclxuICAgIGFyZ3NbMV0gPSByZXBsYWNlcjtcclxuICAgIHJldHVybiBfc3RyaW5naWZ5LmFwcGx5KCRKU09OLCBhcmdzKTtcclxuICB9XHJcbn0pO1xyXG5cclxuLy8gMTkuNC4zLjQgU3ltYm9sLnByb3RvdHlwZVtAQHRvUHJpbWl0aXZlXShoaW50KVxyXG4kU3ltYm9sW1BST1RPVFlQRV1bVE9fUFJJTUlUSVZFXSB8fCByZXF1aXJlKCcuL19oaWRlJykoJFN5bWJvbFtQUk9UT1RZUEVdLCBUT19QUklNSVRJVkUsICRTeW1ib2xbUFJPVE9UWVBFXS52YWx1ZU9mKTtcclxuLy8gMTkuNC4zLjUgU3ltYm9sLnByb3RvdHlwZVtAQHRvU3RyaW5nVGFnXVxyXG5zZXRUb1N0cmluZ1RhZygkU3ltYm9sLCAnU3ltYm9sJyk7XHJcbi8vIDIwLjIuMS45IE1hdGhbQEB0b1N0cmluZ1RhZ11cclxuc2V0VG9TdHJpbmdUYWcoTWF0aCwgJ01hdGgnLCB0cnVlKTtcclxuLy8gMjQuMy4zIEpTT05bQEB0b1N0cmluZ1RhZ11cclxuc2V0VG9TdHJpbmdUYWcoZ2xvYmFsLkpTT04sICdKU09OJywgdHJ1ZSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ25hdGl2ZS1mdW5jdGlvbi10by1zdHJpbmcnLCBGdW5jdGlvbi50b1N0cmluZyk7XHJcbiIsIi8vIGFsbCBlbnVtZXJhYmxlIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBzeW1ib2xzXHJcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xyXG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHZhciByZXN1bHQgPSBnZXRLZXlzKGl0KTtcclxuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcclxuICBpZiAoZ2V0U3ltYm9scykge1xyXG4gICAgdmFyIHN5bWJvbHMgPSBnZXRTeW1ib2xzKGl0KTtcclxuICAgIHZhciBpc0VudW0gPSBwSUUuZjtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHZhciBrZXk7XHJcbiAgICB3aGlsZSAoc3ltYm9scy5sZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoaXQsIGtleSA9IHN5bWJvbHNbaSsrXSkpIHJlc3VsdC5wdXNoKGtleSk7XHJcbiAgfSByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4vLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcclxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGNyZWF0ZTogcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpIH0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4vLyAxOS4xLjIuNCAvIDE1LjIuMy42IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0eTogcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZiB9KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuLy8gMTkuMS4yLjMgLyAxNS4yLjMuNyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpLCAnT2JqZWN0JywgeyBkZWZpbmVQcm9wZXJ0aWVzOiByZXF1aXJlKCcuL19vYmplY3QtZHBzJykgfSk7XHJcbiIsIi8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XHJcblxyXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2dldE93blByb3BlcnR5RGVzY3JpcHRvcicsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGl0LCBrZXkpIHtcclxuICAgIHJldHVybiAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRvSU9iamVjdChpdCksIGtleSk7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi45IE9iamVjdC5nZXRQcm90b3R5cGVPZihPKVxyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyICRnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0UHJvdG90eXBlT2YnLCBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKGl0KSB7XHJcbiAgICByZXR1cm4gJGdldFByb3RvdHlwZU9mKHRvT2JqZWN0KGl0KSk7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi4xNCBPYmplY3Qua2V5cyhPKVxyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyICRrZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgna2V5cycsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gZnVuY3Rpb24ga2V5cyhpdCkge1xyXG4gICAgcmV0dXJuICRrZXlzKHRvT2JqZWN0KGl0KSk7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi43IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKE8pXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlOYW1lcycsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4tZXh0JykuZjtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi41IE9iamVjdC5mcmVlemUoTylcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdmcmVlemUnLCBmdW5jdGlvbiAoJGZyZWV6ZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBmcmVlemUoaXQpIHtcclxuICAgIHJldHVybiAkZnJlZXplICYmIGlzT2JqZWN0KGl0KSA/ICRmcmVlemUobWV0YShpdCkpIDogaXQ7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi4xNyBPYmplY3Quc2VhbChPKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XHJcblxyXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ3NlYWwnLCBmdW5jdGlvbiAoJHNlYWwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gc2VhbChpdCkge1xyXG4gICAgcmV0dXJuICRzZWFsICYmIGlzT2JqZWN0KGl0KSA/ICRzZWFsKG1ldGEoaXQpKSA6IGl0O1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAxOS4xLjIuMTUgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zKE8pXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgncHJldmVudEV4dGVuc2lvbnMnLCBmdW5jdGlvbiAoJHByZXZlbnRFeHRlbnNpb25zKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKGl0KSB7XHJcbiAgICByZXR1cm4gJHByZXZlbnRFeHRlbnNpb25zICYmIGlzT2JqZWN0KGl0KSA/ICRwcmV2ZW50RXh0ZW5zaW9ucyhtZXRhKGl0KSkgOiBpdDtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjEyIE9iamVjdC5pc0Zyb3plbihPKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNGcm96ZW4nLCBmdW5jdGlvbiAoJGlzRnJvemVuKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRnJvemVuKGl0KSB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRnJvemVuID8gJGlzRnJvemVuKGl0KSA6IGZhbHNlIDogdHJ1ZTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjEzIE9iamVjdC5pc1NlYWxlZChPKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNTZWFsZWQnLCBmdW5jdGlvbiAoJGlzU2VhbGVkKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzU2VhbGVkKGl0KSB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzU2VhbGVkID8gJGlzU2VhbGVkKGl0KSA6IGZhbHNlIDogdHJ1ZTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjExIE9iamVjdC5pc0V4dGVuc2libGUoTylcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcblxyXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2lzRXh0ZW5zaWJsZScsIGZ1bmN0aW9uICgkaXNFeHRlbnNpYmxlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGlzRXh0ZW5zaWJsZShpdCkge1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KGl0KSA/ICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKGl0KSA6IHRydWUgOiBmYWxzZTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4zLjEgT2JqZWN0LmFzc2lnbih0YXJnZXQsIHNvdXJjZSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GLCAnT2JqZWN0JywgeyBhc3NpZ246IHJlcXVpcmUoJy4vX29iamVjdC1hc3NpZ24nKSB9KTtcclxuIiwiLy8gMTkuMS4zLjEwIE9iamVjdC5pcyh2YWx1ZTEsIHZhbHVlMilcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IGlzOiByZXF1aXJlKCcuL19zYW1lLXZhbHVlJykgfSk7XHJcbiIsIi8vIDE5LjEuMy4xOSBPYmplY3Quc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0JywgeyBzZXRQcm90b3R5cGVPZjogcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0IH0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDE5LjEuMy42IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcoKVxyXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcclxudmFyIHRlc3QgPSB7fTtcclxudGVzdFtyZXF1aXJlKCcuL193a3MnKSgndG9TdHJpbmdUYWcnKV0gPSAneic7XHJcbmlmICh0ZXN0ICsgJycgIT0gJ1tvYmplY3Qgel0nKSB7XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShPYmplY3QucHJvdG90eXBlLCAndG9TdHJpbmcnLCBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAnW29iamVjdCAnICsgY2xhc3NvZih0aGlzKSArICddJztcclxuICB9LCB0cnVlKTtcclxufVxyXG4iLCIvLyAxOS4yLjMuMiAvIDE1LjMuNC41IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kKHRoaXNBcmcsIGFyZ3MuLi4pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0Z1bmN0aW9uJywgeyBiaW5kOiByZXF1aXJlKCcuL19iaW5kJykgfSk7XHJcbiIsInZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbnZhciBGUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XHJcbnZhciBuYW1lUkUgPSAvXlxccypmdW5jdGlvbiAoW14gKF0qKS87XHJcbnZhciBOQU1FID0gJ25hbWUnO1xyXG5cclxuLy8gMTkuMi40LjIgbmFtZVxyXG5OQU1FIGluIEZQcm90byB8fCByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIGRQKEZQcm90bywgTkFNRSwge1xyXG4gIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRyeSB7XHJcbiAgICAgIHJldHVybiAoJycgKyB0aGlzKS5tYXRjaChuYW1lUkUpWzFdO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgSEFTX0lOU1RBTkNFID0gcmVxdWlyZSgnLi9fd2tzJykoJ2hhc0luc3RhbmNlJyk7XHJcbnZhciBGdW5jdGlvblByb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xyXG4vLyAxOS4yLjMuNiBGdW5jdGlvbi5wcm90b3R5cGVbQEBoYXNJbnN0YW5jZV0oVilcclxuaWYgKCEoSEFTX0lOU1RBTkNFIGluIEZ1bmN0aW9uUHJvdG8pKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKEZ1bmN0aW9uUHJvdG8sIEhBU19JTlNUQU5DRSwgeyB2YWx1ZTogZnVuY3Rpb24gKE8pIHtcclxuICBpZiAodHlwZW9mIHRoaXMgIT0gJ2Z1bmN0aW9uJyB8fCAhaXNPYmplY3QoTykpIHJldHVybiBmYWxzZTtcclxuICBpZiAoIWlzT2JqZWN0KHRoaXMucHJvdG90eXBlKSkgcmV0dXJuIE8gaW5zdGFuY2VvZiB0aGlzO1xyXG4gIC8vIGZvciBlbnZpcm9ubWVudCB3L28gbmF0aXZlIGBAQGhhc0luc3RhbmNlYCBsb2dpYyBlbm91Z2ggYGluc3RhbmNlb2ZgLCBidXQgYWRkIHRoaXM6XHJcbiAgd2hpbGUgKE8gPSBnZXRQcm90b3R5cGVPZihPKSkgaWYgKHRoaXMucHJvdG90eXBlID09PSBPKSByZXR1cm4gdHJ1ZTtcclxuICByZXR1cm4gZmFsc2U7XHJcbn0gfSk7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19wYXJzZS1pbnQnKTtcclxuLy8gMTguMi41IHBhcnNlSW50KHN0cmluZywgcmFkaXgpXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlSW50ICE9ICRwYXJzZUludCksIHsgcGFyc2VJbnQ6ICRwYXJzZUludCB9KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcclxuLy8gMTguMi40IHBhcnNlRmxvYXQoc3RyaW5nKVxyXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuRiAqIChwYXJzZUZsb2F0ICE9ICRwYXJzZUZsb2F0KSwgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xyXG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XHJcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcclxudmFyIE5VTUJFUiA9ICdOdW1iZXInO1xyXG52YXIgJE51bWJlciA9IGdsb2JhbFtOVU1CRVJdO1xyXG52YXIgQmFzZSA9ICROdW1iZXI7XHJcbnZhciBwcm90byA9ICROdW1iZXIucHJvdG90eXBlO1xyXG4vLyBPcGVyYSB+MTIgaGFzIGJyb2tlbiBPYmplY3QjdG9TdHJpbmdcclxudmFyIEJST0tFTl9DT0YgPSBjb2YocmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpKHByb3RvKSkgPT0gTlVNQkVSO1xyXG52YXIgVFJJTSA9ICd0cmltJyBpbiBTdHJpbmcucHJvdG90eXBlO1xyXG5cclxuLy8gNy4xLjMgVG9OdW1iZXIoYXJndW1lbnQpXHJcbnZhciB0b051bWJlciA9IGZ1bmN0aW9uIChhcmd1bWVudCkge1xyXG4gIHZhciBpdCA9IHRvUHJpbWl0aXZlKGFyZ3VtZW50LCBmYWxzZSk7XHJcbiAgaWYgKHR5cGVvZiBpdCA9PSAnc3RyaW5nJyAmJiBpdC5sZW5ndGggPiAyKSB7XHJcbiAgICBpdCA9IFRSSU0gPyBpdC50cmltKCkgOiAkdHJpbShpdCwgMyk7XHJcbiAgICB2YXIgZmlyc3QgPSBpdC5jaGFyQ29kZUF0KDApO1xyXG4gICAgdmFyIHRoaXJkLCByYWRpeCwgbWF4Q29kZTtcclxuICAgIGlmIChmaXJzdCA9PT0gNDMgfHwgZmlyc3QgPT09IDQ1KSB7XHJcbiAgICAgIHRoaXJkID0gaXQuY2hhckNvZGVBdCgyKTtcclxuICAgICAgaWYgKHRoaXJkID09PSA4OCB8fCB0aGlyZCA9PT0gMTIwKSByZXR1cm4gTmFOOyAvLyBOdW1iZXIoJysweDEnKSBzaG91bGQgYmUgTmFOLCBvbGQgVjggZml4XHJcbiAgICB9IGVsc2UgaWYgKGZpcnN0ID09PSA0OCkge1xyXG4gICAgICBzd2l0Y2ggKGl0LmNoYXJDb2RlQXQoMSkpIHtcclxuICAgICAgICBjYXNlIDY2OiBjYXNlIDk4OiByYWRpeCA9IDI7IG1heENvZGUgPSA0OTsgYnJlYWs7IC8vIGZhc3QgZXF1YWwgL14wYlswMV0rJC9pXHJcbiAgICAgICAgY2FzZSA3OTogY2FzZSAxMTE6IHJhZGl4ID0gODsgbWF4Q29kZSA9IDU1OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBvWzAtN10rJC9pXHJcbiAgICAgICAgZGVmYXVsdDogcmV0dXJuICtpdDtcclxuICAgICAgfVxyXG4gICAgICBmb3IgKHZhciBkaWdpdHMgPSBpdC5zbGljZSgyKSwgaSA9IDAsIGwgPSBkaWdpdHMubGVuZ3RoLCBjb2RlOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgY29kZSA9IGRpZ2l0cy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgICAgIC8vIHBhcnNlSW50IHBhcnNlcyBhIHN0cmluZyB0byBhIGZpcnN0IHVuYXZhaWxhYmxlIHN5bWJvbFxyXG4gICAgICAgIC8vIGJ1dCBUb051bWJlciBzaG91bGQgcmV0dXJuIE5hTiBpZiBhIHN0cmluZyBjb250YWlucyB1bmF2YWlsYWJsZSBzeW1ib2xzXHJcbiAgICAgICAgaWYgKGNvZGUgPCA0OCB8fCBjb2RlID4gbWF4Q29kZSkgcmV0dXJuIE5hTjtcclxuICAgICAgfSByZXR1cm4gcGFyc2VJbnQoZGlnaXRzLCByYWRpeCk7XHJcbiAgICB9XHJcbiAgfSByZXR1cm4gK2l0O1xyXG59O1xyXG5cclxuaWYgKCEkTnVtYmVyKCcgMG8xJykgfHwgISROdW1iZXIoJzBiMScpIHx8ICROdW1iZXIoJysweDEnKSkge1xyXG4gICROdW1iZXIgPSBmdW5jdGlvbiBOdW1iZXIodmFsdWUpIHtcclxuICAgIHZhciBpdCA9IGFyZ3VtZW50cy5sZW5ndGggPCAxID8gMCA6IHZhbHVlO1xyXG4gICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgcmV0dXJuIHRoYXQgaW5zdGFuY2VvZiAkTnVtYmVyXHJcbiAgICAgIC8vIGNoZWNrIG9uIDEuLmNvbnN0cnVjdG9yKGZvbykgY2FzZVxyXG4gICAgICAmJiAoQlJPS0VOX0NPRiA/IGZhaWxzKGZ1bmN0aW9uICgpIHsgcHJvdG8udmFsdWVPZi5jYWxsKHRoYXQpOyB9KSA6IGNvZih0aGF0KSAhPSBOVU1CRVIpXHJcbiAgICAgICAgPyBpbmhlcml0SWZSZXF1aXJlZChuZXcgQmFzZSh0b051bWJlcihpdCkpLCB0aGF0LCAkTnVtYmVyKSA6IHRvTnVtYmVyKGl0KTtcclxuICB9O1xyXG4gIGZvciAodmFyIGtleXMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpID8gZ09QTihCYXNlKSA6IChcclxuICAgIC8vIEVTMzpcclxuICAgICdNQVhfVkFMVUUsTUlOX1ZBTFVFLE5hTixORUdBVElWRV9JTkZJTklUWSxQT1NJVElWRV9JTkZJTklUWSwnICtcclxuICAgIC8vIEVTNiAoaW4gY2FzZSwgaWYgbW9kdWxlcyB3aXRoIEVTNiBOdW1iZXIgc3RhdGljcyByZXF1aXJlZCBiZWZvcmUpOlxyXG4gICAgJ0VQU0lMT04saXNGaW5pdGUsaXNJbnRlZ2VyLGlzTmFOLGlzU2FmZUludGVnZXIsTUFYX1NBRkVfSU5URUdFUiwnICtcclxuICAgICdNSU5fU0FGRV9JTlRFR0VSLHBhcnNlRmxvYXQscGFyc2VJbnQsaXNJbnRlZ2VyJ1xyXG4gICkuc3BsaXQoJywnKSwgaiA9IDAsIGtleTsga2V5cy5sZW5ndGggPiBqOyBqKyspIHtcclxuICAgIGlmIChoYXMoQmFzZSwga2V5ID0ga2V5c1tqXSkgJiYgIWhhcygkTnVtYmVyLCBrZXkpKSB7XHJcbiAgICAgIGRQKCROdW1iZXIsIGtleSwgZ09QRChCYXNlLCBrZXkpKTtcclxuICAgIH1cclxuICB9XHJcbiAgJE51bWJlci5wcm90b3R5cGUgPSBwcm90bztcclxuICBwcm90by5jb25zdHJ1Y3RvciA9ICROdW1iZXI7XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsIE5VTUJFUiwgJE51bWJlcik7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgYU51bWJlclZhbHVlID0gcmVxdWlyZSgnLi9fYS1udW1iZXItdmFsdWUnKTtcclxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcclxudmFyICR0b0ZpeGVkID0gMS4wLnRvRml4ZWQ7XHJcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XHJcbnZhciBkYXRhID0gWzAsIDAsIDAsIDAsIDAsIDBdO1xyXG52YXIgRVJST1IgPSAnTnVtYmVyLnRvRml4ZWQ6IGluY29ycmVjdCBpbnZvY2F0aW9uISc7XHJcbnZhciBaRVJPID0gJzAnO1xyXG5cclxudmFyIG11bHRpcGx5ID0gZnVuY3Rpb24gKG4sIGMpIHtcclxuICB2YXIgaSA9IC0xO1xyXG4gIHZhciBjMiA9IGM7XHJcbiAgd2hpbGUgKCsraSA8IDYpIHtcclxuICAgIGMyICs9IG4gKiBkYXRhW2ldO1xyXG4gICAgZGF0YVtpXSA9IGMyICUgMWU3O1xyXG4gICAgYzIgPSBmbG9vcihjMiAvIDFlNyk7XHJcbiAgfVxyXG59O1xyXG52YXIgZGl2aWRlID0gZnVuY3Rpb24gKG4pIHtcclxuICB2YXIgaSA9IDY7XHJcbiAgdmFyIGMgPSAwO1xyXG4gIHdoaWxlICgtLWkgPj0gMCkge1xyXG4gICAgYyArPSBkYXRhW2ldO1xyXG4gICAgZGF0YVtpXSA9IGZsb29yKGMgLyBuKTtcclxuICAgIGMgPSAoYyAlIG4pICogMWU3O1xyXG4gIH1cclxufTtcclxudmFyIG51bVRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBpID0gNjtcclxuICB2YXIgcyA9ICcnO1xyXG4gIHdoaWxlICgtLWkgPj0gMCkge1xyXG4gICAgaWYgKHMgIT09ICcnIHx8IGkgPT09IDAgfHwgZGF0YVtpXSAhPT0gMCkge1xyXG4gICAgICB2YXIgdCA9IFN0cmluZyhkYXRhW2ldKTtcclxuICAgICAgcyA9IHMgPT09ICcnID8gdCA6IHMgKyByZXBlYXQuY2FsbChaRVJPLCA3IC0gdC5sZW5ndGgpICsgdDtcclxuICAgIH1cclxuICB9IHJldHVybiBzO1xyXG59O1xyXG52YXIgcG93ID0gZnVuY3Rpb24gKHgsIG4sIGFjYykge1xyXG4gIHJldHVybiBuID09PSAwID8gYWNjIDogbiAlIDIgPT09IDEgPyBwb3coeCwgbiAtIDEsIGFjYyAqIHgpIDogcG93KHggKiB4LCBuIC8gMiwgYWNjKTtcclxufTtcclxudmFyIGxvZyA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgdmFyIG4gPSAwO1xyXG4gIHZhciB4MiA9IHg7XHJcbiAgd2hpbGUgKHgyID49IDQwOTYpIHtcclxuICAgIG4gKz0gMTI7XHJcbiAgICB4MiAvPSA0MDk2O1xyXG4gIH1cclxuICB3aGlsZSAoeDIgPj0gMikge1xyXG4gICAgbiArPSAxO1xyXG4gICAgeDIgLz0gMjtcclxuICB9IHJldHVybiBuO1xyXG59O1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoISEkdG9GaXhlZCAmJiAoXHJcbiAgMC4wMDAwOC50b0ZpeGVkKDMpICE9PSAnMC4wMDAnIHx8XHJcbiAgMC45LnRvRml4ZWQoMCkgIT09ICcxJyB8fFxyXG4gIDEuMjU1LnRvRml4ZWQoMikgIT09ICcxLjI1JyB8fFxyXG4gIDEwMDAwMDAwMDAwMDAwMDAxMjguMC50b0ZpeGVkKDApICE9PSAnMTAwMDAwMDAwMDAwMDAwMDEyOCdcclxuKSB8fCAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cclxuICAkdG9GaXhlZC5jYWxsKHt9KTtcclxufSkpLCAnTnVtYmVyJywge1xyXG4gIHRvRml4ZWQ6IGZ1bmN0aW9uIHRvRml4ZWQoZnJhY3Rpb25EaWdpdHMpIHtcclxuICAgIHZhciB4ID0gYU51bWJlclZhbHVlKHRoaXMsIEVSUk9SKTtcclxuICAgIHZhciBmID0gdG9JbnRlZ2VyKGZyYWN0aW9uRGlnaXRzKTtcclxuICAgIHZhciBzID0gJyc7XHJcbiAgICB2YXIgbSA9IFpFUk87XHJcbiAgICB2YXIgZSwgeiwgaiwgaztcclxuICAgIGlmIChmIDwgMCB8fCBmID4gMjApIHRocm93IFJhbmdlRXJyb3IoRVJST1IpO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgaWYgKHggIT0geCkgcmV0dXJuICdOYU4nO1xyXG4gICAgaWYgKHggPD0gLTFlMjEgfHwgeCA+PSAxZTIxKSByZXR1cm4gU3RyaW5nKHgpO1xyXG4gICAgaWYgKHggPCAwKSB7XHJcbiAgICAgIHMgPSAnLSc7XHJcbiAgICAgIHggPSAteDtcclxuICAgIH1cclxuICAgIGlmICh4ID4gMWUtMjEpIHtcclxuICAgICAgZSA9IGxvZyh4ICogcG93KDIsIDY5LCAxKSkgLSA2OTtcclxuICAgICAgeiA9IGUgPCAwID8geCAqIHBvdygyLCAtZSwgMSkgOiB4IC8gcG93KDIsIGUsIDEpO1xyXG4gICAgICB6ICo9IDB4MTAwMDAwMDAwMDAwMDA7XHJcbiAgICAgIGUgPSA1MiAtIGU7XHJcbiAgICAgIGlmIChlID4gMCkge1xyXG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xyXG4gICAgICAgIGogPSBmO1xyXG4gICAgICAgIHdoaWxlIChqID49IDcpIHtcclxuICAgICAgICAgIG11bHRpcGx5KDFlNywgMCk7XHJcbiAgICAgICAgICBqIC09IDc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIG11bHRpcGx5KHBvdygxMCwgaiwgMSksIDApO1xyXG4gICAgICAgIGogPSBlIC0gMTtcclxuICAgICAgICB3aGlsZSAoaiA+PSAyMykge1xyXG4gICAgICAgICAgZGl2aWRlKDEgPDwgMjMpO1xyXG4gICAgICAgICAgaiAtPSAyMztcclxuICAgICAgICB9XHJcbiAgICAgICAgZGl2aWRlKDEgPDwgaik7XHJcbiAgICAgICAgbXVsdGlwbHkoMSwgMSk7XHJcbiAgICAgICAgZGl2aWRlKDIpO1xyXG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIG11bHRpcGx5KDAsIHopO1xyXG4gICAgICAgIG11bHRpcGx5KDEgPDwgLWUsIDApO1xyXG4gICAgICAgIG0gPSBudW1Ub1N0cmluZygpICsgcmVwZWF0LmNhbGwoWkVSTywgZik7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChmID4gMCkge1xyXG4gICAgICBrID0gbS5sZW5ndGg7XHJcbiAgICAgIG0gPSBzICsgKGsgPD0gZiA/ICcwLicgKyByZXBlYXQuY2FsbChaRVJPLCBmIC0gaykgKyBtIDogbS5zbGljZSgwLCBrIC0gZikgKyAnLicgKyBtLnNsaWNlKGsgLSBmKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBtID0gcyArIG07XHJcbiAgICB9IHJldHVybiBtO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xyXG52YXIgJHRvUHJlY2lzaW9uID0gMS4wLnRvUHJlY2lzaW9uO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoJGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAvLyBJRTctXHJcbiAgcmV0dXJuICR0b1ByZWNpc2lvbi5jYWxsKDEsIHVuZGVmaW5lZCkgIT09ICcxJztcclxufSkgfHwgISRmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgLy8gVjggfiBBbmRyb2lkIDQuMy1cclxuICAkdG9QcmVjaXNpb24uY2FsbCh7fSk7XHJcbn0pKSwgJ051bWJlcicsIHtcclxuICB0b1ByZWNpc2lvbjogZnVuY3Rpb24gdG9QcmVjaXNpb24ocHJlY2lzaW9uKSB7XHJcbiAgICB2YXIgdGhhdCA9IGFOdW1iZXJWYWx1ZSh0aGlzLCAnTnVtYmVyI3RvUHJlY2lzaW9uOiBpbmNvcnJlY3QgaW52b2NhdGlvbiEnKTtcclxuICAgIHJldHVybiBwcmVjaXNpb24gPT09IHVuZGVmaW5lZCA/ICR0b1ByZWNpc2lvbi5jYWxsKHRoYXQpIDogJHRvUHJlY2lzaW9uLmNhbGwodGhhdCwgcHJlY2lzaW9uKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4xLjIuMSBOdW1iZXIuRVBTSUxPTlxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IEVQU0lMT046IE1hdGgucG93KDIsIC01MikgfSk7XHJcbiIsIi8vIDIwLjEuMi4yIE51bWJlci5pc0Zpbml0ZShudW1iZXIpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBfaXNGaW5pdGUgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5pc0Zpbml0ZTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xyXG4gIGlzRmluaXRlOiBmdW5jdGlvbiBpc0Zpbml0ZShpdCkge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBpdCA9PSAnbnVtYmVyJyAmJiBfaXNGaW5pdGUoaXQpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjEuMi4zIE51bWJlci5pc0ludGVnZXIobnVtYmVyKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IGlzSW50ZWdlcjogcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpIH0pO1xyXG4iLCIvLyAyMC4xLjIuNCBOdW1iZXIuaXNOYU4obnVtYmVyKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XHJcbiAgaXNOYU46IGZ1bmN0aW9uIGlzTmFOKG51bWJlcikge1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgcmV0dXJuIG51bWJlciAhPSBudW1iZXI7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMS4yLjUgTnVtYmVyLmlzU2FmZUludGVnZXIobnVtYmVyKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgaXNJbnRlZ2VyID0gcmVxdWlyZSgnLi9faXMtaW50ZWdlcicpO1xyXG52YXIgYWJzID0gTWF0aC5hYnM7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcclxuICBpc1NhZmVJbnRlZ2VyOiBmdW5jdGlvbiBpc1NhZmVJbnRlZ2VyKG51bWJlcikge1xyXG4gICAgcmV0dXJuIGlzSW50ZWdlcihudW1iZXIpICYmIGFicyhudW1iZXIpIDw9IDB4MWZmZmZmZmZmZmZmZmY7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMS4yLjYgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNQVhfU0FGRV9JTlRFR0VSOiAweDFmZmZmZmZmZmZmZmZmIH0pO1xyXG4iLCIvLyAyMC4xLjIuMTAgTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVJcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywgeyBNSU5fU0FGRV9JTlRFR0VSOiAtMHgxZmZmZmZmZmZmZmZmZiB9KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYXJzZUZsb2F0ID0gcmVxdWlyZSgnLi9fcGFyc2UtZmxvYXQnKTtcclxuLy8gMjAuMS4yLjEyIE51bWJlci5wYXJzZUZsb2F0KHN0cmluZylcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCAnTnVtYmVyJywgeyBwYXJzZUZsb2F0OiAkcGFyc2VGbG9hdCB9KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xyXG4vLyAyMC4xLjIuMTMgTnVtYmVyLnBhcnNlSW50KHN0cmluZywgcmFkaXgpXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKE51bWJlci5wYXJzZUludCAhPSAkcGFyc2VJbnQpLCAnTnVtYmVyJywgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xyXG4iLCIvLyAyMC4yLjIuMyBNYXRoLmFjb3NoKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBsb2cxcCA9IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKTtcclxudmFyIHNxcnQgPSBNYXRoLnNxcnQ7XHJcbnZhciAkYWNvc2ggPSBNYXRoLmFjb3NoO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhKCRhY29zaFxyXG4gIC8vIFY4IGJ1ZzogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTM1MDlcclxuICAmJiBNYXRoLmZsb29yKCRhY29zaChOdW1iZXIuTUFYX1ZBTFVFKSkgPT0gNzEwXHJcbiAgLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFjb3NoKEluZmluaXR5KSAtPiBOYU5cclxuICAmJiAkYWNvc2goSW5maW5pdHkpID09IEluZmluaXR5XHJcbiksICdNYXRoJywge1xyXG4gIGFjb3NoOiBmdW5jdGlvbiBhY29zaCh4KSB7XHJcbiAgICByZXR1cm4gKHggPSAreCkgPCAxID8gTmFOIDogeCA+IDk0OTA2MjY1LjYyNDI1MTU2XHJcbiAgICAgID8gTWF0aC5sb2coeCkgKyBNYXRoLkxOMlxyXG4gICAgICA6IGxvZzFwKHggLSAxICsgc3FydCh4IC0gMSkgKiBzcXJ0KHggKyAxKSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjUgTWF0aC5hc2luaCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGFzaW5oID0gTWF0aC5hc2luaDtcclxuXHJcbmZ1bmN0aW9uIGFzaW5oKHgpIHtcclxuICByZXR1cm4gIWlzRmluaXRlKHggPSAreCkgfHwgeCA9PSAwID8geCA6IHggPCAwID8gLWFzaW5oKC14KSA6IE1hdGgubG9nKHggKyBNYXRoLnNxcnQoeCAqIHggKyAxKSk7XHJcbn1cclxuXHJcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hc2luaCgwKSAtPiAtMFxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFzaW5oICYmIDEgLyAkYXNpbmgoMCkgPiAwKSwgJ01hdGgnLCB7IGFzaW5oOiBhc2luaCB9KTtcclxuIiwiLy8gMjAuMi4yLjcgTWF0aC5hdGFuaCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGF0YW5oID0gTWF0aC5hdGFuaDtcclxuXHJcbi8vIFRvciBCcm93c2VyIGJ1ZzogTWF0aC5hdGFuaCgtMCkgLT4gMFxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGF0YW5oICYmIDEgLyAkYXRhbmgoLTApIDwgMCksICdNYXRoJywge1xyXG4gIGF0YW5oOiBmdW5jdGlvbiBhdGFuaCh4KSB7XHJcbiAgICByZXR1cm4gKHggPSAreCkgPT0gMCA/IHggOiBNYXRoLmxvZygoMSArIHgpIC8gKDEgLSB4KSkgLyAyO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjIuMi45IE1hdGguY2JydCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgc2lnbiA9IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGNicnQ6IGZ1bmN0aW9uIGNicnQoeCkge1xyXG4gICAgcmV0dXJuIHNpZ24oeCA9ICt4KSAqIE1hdGgucG93KE1hdGguYWJzKHgpLCAxIC8gMyk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjExIE1hdGguY2x6MzIoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBjbHozMjogZnVuY3Rpb24gY2x6MzIoeCkge1xyXG4gICAgcmV0dXJuICh4ID4+Pj0gMCkgPyAzMSAtIE1hdGguZmxvb3IoTWF0aC5sb2coeCArIDAuNSkgKiBNYXRoLkxPRzJFKSA6IDMyO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjIuMi4xMiBNYXRoLmNvc2goeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGV4cCA9IE1hdGguZXhwO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGNvc2g6IGZ1bmN0aW9uIGNvc2goeCkge1xyXG4gICAgcmV0dXJuIChleHAoeCA9ICt4KSArIGV4cCgteCkpIC8gMjtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoJGV4cG0xICE9IE1hdGguZXhwbTEpLCAnTWF0aCcsIHsgZXhwbTE6ICRleHBtMSB9KTtcclxuIiwiLy8gMjAuMi4yLjE2IE1hdGguZnJvdW5kKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IGZyb3VuZDogcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKSB9KTtcclxuIiwiLy8gMjAuMi4yLjE3IE1hdGguaHlwb3QoW3ZhbHVlMVssIHZhbHVlMlssIOKApiBdXV0pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhYnMgPSBNYXRoLmFicztcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBoeXBvdDogZnVuY3Rpb24gaHlwb3QodmFsdWUxLCB2YWx1ZTIpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgdmFyIHN1bSA9IDA7XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgbGFyZyA9IDA7XHJcbiAgICB2YXIgYXJnLCBkaXY7XHJcbiAgICB3aGlsZSAoaSA8IGFMZW4pIHtcclxuICAgICAgYXJnID0gYWJzKGFyZ3VtZW50c1tpKytdKTtcclxuICAgICAgaWYgKGxhcmcgPCBhcmcpIHtcclxuICAgICAgICBkaXYgPSBsYXJnIC8gYXJnO1xyXG4gICAgICAgIHN1bSA9IHN1bSAqIGRpdiAqIGRpdiArIDE7XHJcbiAgICAgICAgbGFyZyA9IGFyZztcclxuICAgICAgfSBlbHNlIGlmIChhcmcgPiAwKSB7XHJcbiAgICAgICAgZGl2ID0gYXJnIC8gbGFyZztcclxuICAgICAgICBzdW0gKz0gZGl2ICogZGl2O1xyXG4gICAgICB9IGVsc2Ugc3VtICs9IGFyZztcclxuICAgIH1cclxuICAgIHJldHVybiBsYXJnID09PSBJbmZpbml0eSA/IEluZmluaXR5IDogbGFyZyAqIE1hdGguc3FydChzdW0pO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjIuMi4xOCBNYXRoLmltdWwoeCwgeSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRpbXVsID0gTWF0aC5pbXVsO1xyXG5cclxuLy8gc29tZSBXZWJLaXQgdmVyc2lvbnMgZmFpbHMgd2l0aCBiaWcgbnVtYmVycywgc29tZSBoYXMgd3JvbmcgYXJpdHlcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gJGltdWwoMHhmZmZmZmZmZiwgNSkgIT0gLTUgfHwgJGltdWwubGVuZ3RoICE9IDI7XHJcbn0pLCAnTWF0aCcsIHtcclxuICBpbXVsOiBmdW5jdGlvbiBpbXVsKHgsIHkpIHtcclxuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XHJcbiAgICB2YXIgeG4gPSAreDtcclxuICAgIHZhciB5biA9ICt5O1xyXG4gICAgdmFyIHhsID0gVUlOVDE2ICYgeG47XHJcbiAgICB2YXIgeWwgPSBVSU5UMTYgJiB5bjtcclxuICAgIHJldHVybiAwIHwgeGwgKiB5bCArICgoVUlOVDE2ICYgeG4gPj4+IDE2KSAqIHlsICsgeGwgKiAoVUlOVDE2ICYgeW4gPj4+IDE2KSA8PCAxNiA+Pj4gMCk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjIxIE1hdGgubG9nMTAoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBsb2cxMDogZnVuY3Rpb24gbG9nMTAoeCkge1xyXG4gICAgcmV0dXJuIE1hdGgubG9nKHgpICogTWF0aC5MT0cxMEU7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjIwIE1hdGgubG9nMXAoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgbG9nMXA6IHJlcXVpcmUoJy4vX21hdGgtbG9nMXAnKSB9KTtcclxuIiwiLy8gMjAuMi4yLjIyIE1hdGgubG9nMih4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGxvZzI6IGZ1bmN0aW9uIGxvZzIoeCkge1xyXG4gICAgcmV0dXJuIE1hdGgubG9nKHgpIC8gTWF0aC5MTjI7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduOiByZXF1aXJlKCcuL19tYXRoLXNpZ24nKSB9KTtcclxuIiwiLy8gMjAuMi4yLjMwIE1hdGguc2luaCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XHJcbnZhciBleHAgPSBNYXRoLmV4cDtcclxuXHJcbi8vIFY4IG5lYXIgQ2hyb21pdW0gMzggaGFzIGEgcHJvYmxlbSB3aXRoIHZlcnkgc21hbGwgbnVtYmVyc1xyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiAhTWF0aC5zaW5oKC0yZS0xNykgIT0gLTJlLTE3O1xyXG59KSwgJ01hdGgnLCB7XHJcbiAgc2luaDogZnVuY3Rpb24gc2luaCh4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoeCA9ICt4KSA8IDFcclxuICAgICAgPyAoZXhwbTEoeCkgLSBleHBtMSgteCkpIC8gMlxyXG4gICAgICA6IChleHAoeCAtIDEpIC0gZXhwKC14IC0gMSkpICogKE1hdGguRSAvIDIpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjIuMi4zMyBNYXRoLnRhbmgoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGV4cG0xID0gcmVxdWlyZSgnLi9fbWF0aC1leHBtMScpO1xyXG52YXIgZXhwID0gTWF0aC5leHA7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgdGFuaDogZnVuY3Rpb24gdGFuaCh4KSB7XHJcbiAgICB2YXIgYSA9IGV4cG0xKHggPSAreCk7XHJcbiAgICB2YXIgYiA9IGV4cG0xKC14KTtcclxuICAgIHJldHVybiBhID09IEluZmluaXR5ID8gMSA6IGIgPT0gSW5maW5pdHkgPyAtMSA6IChhIC0gYikgLyAoZXhwKHgpICsgZXhwKC14KSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjM0IE1hdGgudHJ1bmMoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICB0cnVuYzogZnVuY3Rpb24gdHJ1bmMoaXQpIHtcclxuICAgIHJldHVybiAoaXQgPiAwID8gTWF0aC5mbG9vciA6IE1hdGguY2VpbCkoaXQpO1xyXG4gIH1cclxufSk7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xyXG52YXIgZnJvbUNoYXJDb2RlID0gU3RyaW5nLmZyb21DaGFyQ29kZTtcclxudmFyICRmcm9tQ29kZVBvaW50ID0gU3RyaW5nLmZyb21Db2RlUG9pbnQ7XHJcblxyXG4vLyBsZW5ndGggc2hvdWxkIGJlIDEsIG9sZCBGRiBwcm9ibGVtXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCEhJGZyb21Db2RlUG9pbnQgJiYgJGZyb21Db2RlUG9pbnQubGVuZ3RoICE9IDEpLCAnU3RyaW5nJywge1xyXG4gIC8vIDIxLjEuMi4yIFN0cmluZy5mcm9tQ29kZVBvaW50KC4uLmNvZGVQb2ludHMpXHJcbiAgZnJvbUNvZGVQb2ludDogZnVuY3Rpb24gZnJvbUNvZGVQb2ludCh4KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHZhciBjb2RlO1xyXG4gICAgd2hpbGUgKGFMZW4gPiBpKSB7XHJcbiAgICAgIGNvZGUgPSArYXJndW1lbnRzW2krK107XHJcbiAgICAgIGlmICh0b0Fic29sdXRlSW5kZXgoY29kZSwgMHgxMGZmZmYpICE9PSBjb2RlKSB0aHJvdyBSYW5nZUVycm9yKGNvZGUgKyAnIGlzIG5vdCBhIHZhbGlkIGNvZGUgcG9pbnQnKTtcclxuICAgICAgcmVzLnB1c2goY29kZSA8IDB4MTAwMDBcclxuICAgICAgICA/IGZyb21DaGFyQ29kZShjb2RlKVxyXG4gICAgICAgIDogZnJvbUNoYXJDb2RlKCgoY29kZSAtPSAweDEwMDAwKSA+PiAxMCkgKyAweGQ4MDAsIGNvZGUgJSAweDQwMCArIDB4ZGMwMClcclxuICAgICAgKTtcclxuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcclxuICB9XHJcbn0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnU3RyaW5nJywge1xyXG4gIC8vIDIxLjEuMi40IFN0cmluZy5yYXcoY2FsbFNpdGUsIC4uLnN1YnN0aXR1dGlvbnMpXHJcbiAgcmF3OiBmdW5jdGlvbiByYXcoY2FsbFNpdGUpIHtcclxuICAgIHZhciB0cGwgPSB0b0lPYmplY3QoY2FsbFNpdGUucmF3KTtcclxuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0cGwubGVuZ3RoKTtcclxuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIHZhciByZXMgPSBbXTtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHdoaWxlIChsZW4gPiBpKSB7XHJcbiAgICAgIHJlcy5wdXNoKFN0cmluZyh0cGxbaSsrXSkpO1xyXG4gICAgICBpZiAoaSA8IGFMZW4pIHJlcy5wdXNoKFN0cmluZyhhcmd1bWVudHNbaV0pKTtcclxuICAgIH0gcmV0dXJuIHJlcy5qb2luKCcnKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDIxLjEuMy4yNSBTdHJpbmcucHJvdG90eXBlLnRyaW0oKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltJywgZnVuY3Rpb24gKCR0cmltKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW0oKSB7XHJcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xyXG5cclxuLy8gMjEuMS4zLjI3IFN0cmluZy5wcm90b3R5cGVbQEBpdGVyYXRvcl0oKVxyXG5yZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKFN0cmluZywgJ1N0cmluZycsIGZ1bmN0aW9uIChpdGVyYXRlZCkge1xyXG4gIHRoaXMuX3QgPSBTdHJpbmcoaXRlcmF0ZWQpOyAvLyB0YXJnZXRcclxuICB0aGlzLl9pID0gMDsgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxyXG4vLyAyMS4xLjUuMi4xICVTdHJpbmdJdGVyYXRvclByb3RvdHlwZSUubmV4dCgpXHJcbn0sIGZ1bmN0aW9uICgpIHtcclxuICB2YXIgTyA9IHRoaXMuX3Q7XHJcbiAgdmFyIGluZGV4ID0gdGhpcy5faTtcclxuICB2YXIgcG9pbnQ7XHJcbiAgaWYgKGluZGV4ID49IE8ubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XHJcbiAgcG9pbnQgPSAkYXQoTywgaW5kZXgpO1xyXG4gIHRoaXMuX2kgKz0gcG9pbnQubGVuZ3RoO1xyXG4gIHJldHVybiB7IHZhbHVlOiBwb2ludCwgZG9uZTogZmFsc2UgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKGZhbHNlKTtcclxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XHJcbiAgLy8gMjEuMS4zLjMgU3RyaW5nLnByb3RvdHlwZS5jb2RlUG9pbnRBdChwb3MpXHJcbiAgY29kZVBvaW50QXQ6IGZ1bmN0aW9uIGNvZGVQb2ludEF0KHBvcykge1xyXG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIxLjEuMy42IFN0cmluZy5wcm90b3R5cGUuZW5kc1dpdGgoc2VhcmNoU3RyaW5nIFssIGVuZFBvc2l0aW9uXSlcclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xyXG52YXIgRU5EU19XSVRIID0gJ2VuZHNXaXRoJztcclxudmFyICRlbmRzV2l0aCA9ICcnW0VORFNfV0lUSF07XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKEVORFNfV0lUSCksICdTdHJpbmcnLCB7XHJcbiAgZW5kc1dpdGg6IGZ1bmN0aW9uIGVuZHNXaXRoKHNlYXJjaFN0cmluZyAvKiAsIGVuZFBvc2l0aW9uID0gQGxlbmd0aCAqLykge1xyXG4gICAgdmFyIHRoYXQgPSBjb250ZXh0KHRoaXMsIHNlYXJjaFN0cmluZywgRU5EU19XSVRIKTtcclxuICAgIHZhciBlbmRQb3NpdGlvbiA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xyXG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoYXQubGVuZ3RoKTtcclxuICAgIHZhciBlbmQgPSBlbmRQb3NpdGlvbiA9PT0gdW5kZWZpbmVkID8gbGVuIDogTWF0aC5taW4odG9MZW5ndGgoZW5kUG9zaXRpb24pLCBsZW4pO1xyXG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xyXG4gICAgcmV0dXJuICRlbmRzV2l0aFxyXG4gICAgICA/ICRlbmRzV2l0aC5jYWxsKHRoYXQsIHNlYXJjaCwgZW5kKVxyXG4gICAgICA6IHRoYXQuc2xpY2UoZW5kIC0gc2VhcmNoLmxlbmd0aCwgZW5kKSA9PT0gc2VhcmNoO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIxLjEuMy43IFN0cmluZy5wcm90b3R5cGUuaW5jbHVkZXMoc2VhcmNoU3RyaW5nLCBwb3NpdGlvbiA9IDApXHJcbid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xyXG52YXIgSU5DTFVERVMgPSAnaW5jbHVkZXMnO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShJTkNMVURFUyksICdTdHJpbmcnLCB7XHJcbiAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaFN0cmluZyAvKiAsIHBvc2l0aW9uID0gMCAqLykge1xyXG4gICAgcmV0dXJuICEhfmNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBJTkNMVURFUylcclxuICAgICAgLmluZGV4T2Yoc2VhcmNoU3RyaW5nLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG59KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xyXG4gIC8vIDIxLjEuMy4xMyBTdHJpbmcucHJvdG90eXBlLnJlcGVhdChjb3VudClcclxuICByZXBlYXQ6IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKVxyXG59KTtcclxuIiwiLy8gMjEuMS4zLjE4IFN0cmluZy5wcm90b3R5cGUuc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgWywgcG9zaXRpb24gXSlcclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGNvbnRleHQgPSByZXF1aXJlKCcuL19zdHJpbmctY29udGV4dCcpO1xyXG52YXIgU1RBUlRTX1dJVEggPSAnc3RhcnRzV2l0aCc7XHJcbnZhciAkc3RhcnRzV2l0aCA9ICcnW1NUQVJUU19XSVRIXTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoU1RBUlRTX1dJVEgpLCAnU3RyaW5nJywge1xyXG4gIHN0YXJ0c1dpdGg6IGZ1bmN0aW9uIHN0YXJ0c1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XHJcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBTVEFSVFNfV0lUSCk7XHJcbiAgICB2YXIgaW5kZXggPSB0b0xlbmd0aChNYXRoLm1pbihhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdGhhdC5sZW5ndGgpKTtcclxuICAgIHZhciBzZWFyY2ggPSBTdHJpbmcoc2VhcmNoU3RyaW5nKTtcclxuICAgIHJldHVybiAkc3RhcnRzV2l0aFxyXG4gICAgICA/ICRzdGFydHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBpbmRleClcclxuICAgICAgOiB0aGF0LnNsaWNlKGluZGV4LCBpbmRleCArIHNlYXJjaC5sZW5ndGgpID09PSBzZWFyY2g7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy4yIFN0cmluZy5wcm90b3R5cGUuYW5jaG9yKG5hbWUpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2FuY2hvcicsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGFuY2hvcihuYW1lKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYScsICduYW1lJywgbmFtZSk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuMyBTdHJpbmcucHJvdG90eXBlLmJpZygpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JpZycsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGJpZygpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiaWcnLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjQgU3RyaW5nLnByb3RvdHlwZS5ibGluaygpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2JsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gYmxpbmsoKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYmxpbmsnLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjUgU3RyaW5nLnByb3RvdHlwZS5ib2xkKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYm9sZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGJvbGQoKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnYicsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuNiBTdHJpbmcucHJvdG90eXBlLmZpeGVkKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZml4ZWQnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBmaXhlZCgpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICd0dCcsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuNyBTdHJpbmcucHJvdG90eXBlLmZvbnRjb2xvcihjb2xvcilcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udGNvbG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gZm9udGNvbG9yKGNvbG9yKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdjb2xvcicsIGNvbG9yKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy44IFN0cmluZy5wcm90b3R5cGUuZm9udHNpemUoc2l6ZSlcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnZm9udHNpemUnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBmb250c2l6ZShzaXplKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnZm9udCcsICdzaXplJywgc2l6ZSk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuOSBTdHJpbmcucHJvdG90eXBlLml0YWxpY3MoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdpdGFsaWNzJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gaXRhbGljcygpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdpJywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy4xMCBTdHJpbmcucHJvdG90eXBlLmxpbmsodXJsKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdsaW5rJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gbGluayh1cmwpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ2hyZWYnLCB1cmwpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjExIFN0cmluZy5wcm90b3R5cGUuc21hbGwoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzbWFsbCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHNtYWxsKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3NtYWxsJywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy4xMiBTdHJpbmcucHJvdG90eXBlLnN0cmlrZSgpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N0cmlrZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHN0cmlrZSgpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdHJpa2UnLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjEzIFN0cmluZy5wcm90b3R5cGUuc3ViKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3ViJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gc3ViKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N1YicsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuMTQgU3RyaW5nLnByb3RvdHlwZS5zdXAoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdXAnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBzdXAoKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3VwJywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMjAuMy4zLjEgLyAxNS45LjQuNCBEYXRlLm5vdygpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ0RhdGUnLCB7IG5vdzogZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCk7IH0gfSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gbmV3IERhdGUoTmFOKS50b0pTT04oKSAhPT0gbnVsbFxyXG4gICAgfHwgRGF0ZS5wcm90b3R5cGUudG9KU09OLmNhbGwoeyB0b0lTT1N0cmluZzogZnVuY3Rpb24gKCkgeyByZXR1cm4gMTsgfSB9KSAhPT0gMTtcclxufSksICdEYXRlJywge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gIHRvSlNPTjogZnVuY3Rpb24gdG9KU09OKGtleSkge1xyXG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcclxuICAgIHZhciBwdiA9IHRvUHJpbWl0aXZlKE8pO1xyXG4gICAgcmV0dXJuIHR5cGVvZiBwdiA9PSAnbnVtYmVyJyAmJiAhaXNGaW5pdGUocHYpID8gbnVsbCA6IE8udG9JU09TdHJpbmcoKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9JU09TdHJpbmcgPSByZXF1aXJlKCcuL19kYXRlLXRvLWlzby1zdHJpbmcnKTtcclxuXHJcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZyAhPT0gdG9JU09TdHJpbmcpLCAnRGF0ZScsIHtcclxuICB0b0lTT1N0cmluZzogdG9JU09TdHJpbmdcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjAuMy40LjM2IC8gMTUuOS41LjQzIERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nKClcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyIGdldFRpbWUgPSBEYXRlLnByb3RvdHlwZS5nZXRUaW1lO1xyXG52YXIgJHRvSVNPU3RyaW5nID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XHJcblxyXG52YXIgbHogPSBmdW5jdGlvbiAobnVtKSB7XHJcbiAgcmV0dXJuIG51bSA+IDkgPyBudW0gOiAnMCcgKyBudW07XHJcbn07XHJcblxyXG4vLyBQaGFudG9tSlMgLyBvbGQgV2ViS2l0IGhhcyBhIGJyb2tlbiBpbXBsZW1lbnRhdGlvbnNcclxubW9kdWxlLmV4cG9ydHMgPSAoZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZSgtNWUxMyAtIDEpKSAhPSAnMDM4NS0wNy0yNVQwNzowNjozOS45OTlaJztcclxufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAkdG9JU09TdHJpbmcuY2FsbChuZXcgRGF0ZShOYU4pKTtcclxufSkpID8gZnVuY3Rpb24gdG9JU09TdHJpbmcoKSB7XHJcbiAgaWYgKCFpc0Zpbml0ZShnZXRUaW1lLmNhbGwodGhpcykpKSB0aHJvdyBSYW5nZUVycm9yKCdJbnZhbGlkIHRpbWUgdmFsdWUnKTtcclxuICB2YXIgZCA9IHRoaXM7XHJcbiAgdmFyIHkgPSBkLmdldFVUQ0Z1bGxZZWFyKCk7XHJcbiAgdmFyIG0gPSBkLmdldFVUQ01pbGxpc2Vjb25kcygpO1xyXG4gIHZhciBzID0geSA8IDAgPyAnLScgOiB5ID4gOTk5OSA/ICcrJyA6ICcnO1xyXG4gIHJldHVybiBzICsgKCcwMDAwMCcgKyBNYXRoLmFicyh5KSkuc2xpY2UocyA/IC02IDogLTQpICtcclxuICAgICctJyArIGx6KGQuZ2V0VVRDTW9udGgoKSArIDEpICsgJy0nICsgbHooZC5nZXRVVENEYXRlKCkpICtcclxuICAgICdUJyArIGx6KGQuZ2V0VVRDSG91cnMoKSkgKyAnOicgKyBseihkLmdldFVUQ01pbnV0ZXMoKSkgK1xyXG4gICAgJzonICsgbHooZC5nZXRVVENTZWNvbmRzKCkpICsgJy4nICsgKG0gPiA5OSA/IG0gOiAnMCcgKyBseihtKSkgKyAnWic7XHJcbn0gOiAkdG9JU09TdHJpbmc7XHJcbiIsInZhciBEYXRlUHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcclxudmFyIElOVkFMSURfREFURSA9ICdJbnZhbGlkIERhdGUnO1xyXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcclxudmFyICR0b1N0cmluZyA9IERhdGVQcm90b1tUT19TVFJJTkddO1xyXG52YXIgZ2V0VGltZSA9IERhdGVQcm90by5nZXRUaW1lO1xyXG5pZiAobmV3IERhdGUoTmFOKSArICcnICE9IElOVkFMSURfREFURSkge1xyXG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoRGF0ZVByb3RvLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgdmFyIHZhbHVlID0gZ2V0VGltZS5jYWxsKHRoaXMpO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSA/ICR0b1N0cmluZy5jYWxsKHRoaXMpIDogSU5WQUxJRF9EQVRFO1xyXG4gIH0pO1xyXG59XHJcbiIsInZhciBUT19QUklNSVRJVkUgPSByZXF1aXJlKCcuL193a3MnKSgndG9QcmltaXRpdmUnKTtcclxudmFyIHByb3RvID0gRGF0ZS5wcm90b3R5cGU7XHJcblxyXG5pZiAoIShUT19QUklNSVRJVkUgaW4gcHJvdG8pKSByZXF1aXJlKCcuL19oaWRlJykocHJvdG8sIFRPX1BSSU1JVElWRSwgcmVxdWlyZSgnLi9fZGF0ZS10by1wcmltaXRpdmUnKSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgTlVNQkVSID0gJ251bWJlcic7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChoaW50KSB7XHJcbiAgaWYgKGhpbnQgIT09ICdzdHJpbmcnICYmIGhpbnQgIT09IE5VTUJFUiAmJiBoaW50ICE9PSAnZGVmYXVsdCcpIHRocm93IFR5cGVFcnJvcignSW5jb3JyZWN0IGhpbnQnKTtcclxuICByZXR1cm4gdG9QcmltaXRpdmUoYW5PYmplY3QodGhpcyksIGhpbnQgIT0gTlVNQkVSKTtcclxufTtcclxuIiwiLy8gMjIuMS4yLjIgLyAxNS40LjMuMiBBcnJheS5pc0FycmF5KGFyZylcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnQXJyYXknLCB7IGlzQXJyYXk6IHJlcXVpcmUoJy4vX2lzLWFycmF5JykgfSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIGNhbGwgPSByZXF1aXJlKCcuL19pdGVyLWNhbGwnKTtcclxudmFyIGlzQXJyYXlJdGVyID0gcmVxdWlyZSgnLi9faXMtYXJyYXktaXRlcicpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XHJcbnZhciBnZXRJdGVyRm4gPSByZXF1aXJlKCcuL2NvcmUuZ2V0LWl0ZXJhdG9yLW1ldGhvZCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9faXRlci1kZXRlY3QnKShmdW5jdGlvbiAoaXRlcikgeyBBcnJheS5mcm9tKGl0ZXIpOyB9KSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMi4xIEFycmF5LmZyb20oYXJyYXlMaWtlLCBtYXBmbiA9IHVuZGVmaW5lZCwgdGhpc0FyZyA9IHVuZGVmaW5lZClcclxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKGFycmF5TGlrZSAvKiAsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkICovKSB7XHJcbiAgICB2YXIgTyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XHJcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09ICdmdW5jdGlvbicgPyB0aGlzIDogQXJyYXk7XHJcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcclxuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICB2YXIgaXRlckZuID0gZ2V0SXRlckZuKE8pO1xyXG4gICAgdmFyIGxlbmd0aCwgcmVzdWx0LCBzdGVwLCBpdGVyYXRvcjtcclxuICAgIGlmIChtYXBwaW5nKSBtYXBmbiA9IGN0eChtYXBmbiwgYUxlbiA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQsIDIpO1xyXG4gICAgLy8gaWYgb2JqZWN0IGlzbid0IGl0ZXJhYmxlIG9yIGl0J3MgYXJyYXkgd2l0aCBkZWZhdWx0IGl0ZXJhdG9yIC0gdXNlIHNpbXBsZSBjYXNlXHJcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhKEMgPT0gQXJyYXkgJiYgaXNBcnJheUl0ZXIoaXRlckZuKSkpIHtcclxuICAgICAgZm9yIChpdGVyYXRvciA9IGl0ZXJGbi5jYWxsKE8pLCByZXN1bHQgPSBuZXcgQygpOyAhKHN0ZXAgPSBpdGVyYXRvci5uZXh0KCkpLmRvbmU7IGluZGV4KyspIHtcclxuICAgICAgICBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBtYXBwaW5nID8gY2FsbChpdGVyYXRvciwgbWFwZm4sIFtzdGVwLnZhbHVlLCBpbmRleF0sIHRydWUpIDogc3RlcC52YWx1ZSk7XHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcclxuICAgICAgZm9yIChyZXN1bHQgPSBuZXcgQyhsZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xyXG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBtYXBmbihPW2luZGV4XSwgaW5kZXgpIDogT1tpbmRleF0pO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXN1bHQubGVuZ3RoID0gaW5kZXg7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XHJcblxyXG4vLyBXZWJLaXQgQXJyYXkub2YgaXNuJ3QgZ2VuZXJpY1xyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cclxuICByZXR1cm4gIShBcnJheS5vZi5jYWxsKEYpIGluc3RhbmNlb2YgRik7XHJcbn0pLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4yLjMgQXJyYXkub2YoIC4uLml0ZW1zKVxyXG4gIG9mOiBmdW5jdGlvbiBvZigvKiAuLi5hcmdzICovKSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIHJlc3VsdCA9IG5ldyAodHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheSkoYUxlbik7XHJcbiAgICB3aGlsZSAoYUxlbiA+IGluZGV4KSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGluZGV4LCBhcmd1bWVudHNbaW5kZXgrK10pO1xyXG4gICAgcmVzdWx0Lmxlbmd0aCA9IGFMZW47XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5qb2luKHNlcGFyYXRvcilcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIGFycmF5Sm9pbiA9IFtdLmpvaW47XHJcblxyXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2Ugc3RyaW5nc1xyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChyZXF1aXJlKCcuL19pb2JqZWN0JykgIT0gT2JqZWN0IHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoYXJyYXlKb2luKSksICdBcnJheScsIHtcclxuICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikge1xyXG4gICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRvSU9iamVjdCh0aGlzKSwgc2VwYXJhdG9yID09PSB1bmRlZmluZWQgPyAnLCcgOiBzZXBhcmF0b3IpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XHJcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgYXJyYXlTbGljZSA9IFtdLnNsaWNlO1xyXG5cclxuLy8gZmFsbGJhY2sgZm9yIG5vdCBhcnJheS1saWtlIEVTMyBzdHJpbmdzIGFuZCBET00gb2JqZWN0c1xyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIGlmIChodG1sKSBhcnJheVNsaWNlLmNhbGwoaHRtbCk7XHJcbn0pLCAnQXJyYXknLCB7XHJcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKGJlZ2luLCBlbmQpIHtcclxuICAgIHZhciBsZW4gPSB0b0xlbmd0aCh0aGlzLmxlbmd0aCk7XHJcbiAgICB2YXIga2xhc3MgPSBjb2YodGhpcyk7XHJcbiAgICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZDtcclxuICAgIGlmIChrbGFzcyA9PSAnQXJyYXknKSByZXR1cm4gYXJyYXlTbGljZS5jYWxsKHRoaXMsIGJlZ2luLCBlbmQpO1xyXG4gICAgdmFyIHN0YXJ0ID0gdG9BYnNvbHV0ZUluZGV4KGJlZ2luLCBsZW4pO1xyXG4gICAgdmFyIHVwVG8gPSB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW4pO1xyXG4gICAgdmFyIHNpemUgPSB0b0xlbmd0aCh1cFRvIC0gc3RhcnQpO1xyXG4gICAgdmFyIGNsb25lZCA9IG5ldyBBcnJheShzaXplKTtcclxuICAgIHZhciBpID0gMDtcclxuICAgIGZvciAoOyBpIDwgc2l6ZTsgaSsrKSBjbG9uZWRbaV0gPSBrbGFzcyA9PSAnU3RyaW5nJ1xyXG4gICAgICA/IHRoaXMuY2hhckF0KHN0YXJ0ICsgaSlcclxuICAgICAgOiB0aGlzW3N0YXJ0ICsgaV07XHJcbiAgICByZXR1cm4gY2xvbmVkO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciAkc29ydCA9IFtdLnNvcnQ7XHJcbnZhciB0ZXN0ID0gWzEsIDIsIDNdO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIC8vIElFOC1cclxuICB0ZXN0LnNvcnQodW5kZWZpbmVkKTtcclxufSkgfHwgIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAvLyBWOCBidWdcclxuICB0ZXN0LnNvcnQobnVsbCk7XHJcbiAgLy8gT2xkIFdlYktpdFxyXG59KSB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRzb3J0KSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMjUgQXJyYXkucHJvdG90eXBlLnNvcnQoY29tcGFyZWZuKVxyXG4gIHNvcnQ6IGZ1bmN0aW9uIHNvcnQoY29tcGFyZWZuKSB7XHJcbiAgICByZXR1cm4gY29tcGFyZWZuID09PSB1bmRlZmluZWRcclxuICAgICAgPyAkc29ydC5jYWxsKHRvT2JqZWN0KHRoaXMpKVxyXG4gICAgICA6ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcyksIGFGdW5jdGlvbihjb21wYXJlZm4pKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkZm9yRWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcclxudmFyIFNUUklDVCA9IHJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5mb3JFYWNoLCB0cnVlKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIVNUUklDVCwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xMCAvIDE1LjQuNC4xOCBBcnJheS5wcm90b3R5cGUuZm9yRWFjaChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgIHJldHVybiAkZm9yRWFjaCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XHJcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XHJcbnZhciBTUEVDSUVTID0gcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9yaWdpbmFsKSB7XHJcbiAgdmFyIEM7XHJcbiAgaWYgKGlzQXJyYXkob3JpZ2luYWwpKSB7XHJcbiAgICBDID0gb3JpZ2luYWwuY29uc3RydWN0b3I7XHJcbiAgICAvLyBjcm9zcy1yZWFsbSBmYWxsYmFja1xyXG4gICAgaWYgKHR5cGVvZiBDID09ICdmdW5jdGlvbicgJiYgKEMgPT09IEFycmF5IHx8IGlzQXJyYXkoQy5wcm90b3R5cGUpKSkgQyA9IHVuZGVmaW5lZDtcclxuICAgIGlmIChpc09iamVjdChDKSkge1xyXG4gICAgICBDID0gQ1tTUEVDSUVTXTtcclxuICAgICAgaWYgKEMgPT09IG51bGwpIEMgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgfSByZXR1cm4gQyA9PT0gdW5kZWZpbmVkID8gQXJyYXkgOiBDO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkbWFwID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDEpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLm1hcCwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTUgLyAxNS40LjQuMTkgQXJyYXkucHJvdG90eXBlLm1hcChjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIG1hcDogZnVuY3Rpb24gbWFwKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICByZXR1cm4gJG1hcCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRmaWx0ZXIgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMik7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10uZmlsdGVyLCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy43IC8gMTUuNC40LjIwIEFycmF5LnByb3RvdHlwZS5maWx0ZXIoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcclxuICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgcmV0dXJuICRmaWx0ZXIodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkc29tZSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgzKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5zb21lLCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4yMyAvIDE1LjQuNC4xNyBBcnJheS5wcm90b3R5cGUuc29tZShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIHNvbWU6IGZ1bmN0aW9uIHNvbWUoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgIHJldHVybiAkc29tZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRldmVyeSA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg0KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5ldmVyeSwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuNSAvIDE1LjQuNC4xNiBBcnJheS5wcm90b3R5cGUuZXZlcnkoY2FsbGJhY2tmbiBbLCB0aGlzQXJnXSlcclxuICBldmVyeTogZnVuY3Rpb24gZXZlcnkoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgIHJldHVybiAkZXZlcnkodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzWzFdKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlLCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xOCAvIDE1LjQuNC4yMSBBcnJheS5wcm90b3R5cGUucmVkdWNlKGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcclxuICByZWR1Y2U6IGZ1bmN0aW9uIHJlZHVjZShjYWxsYmFja2ZuIC8qICwgaW5pdGlhbFZhbHVlICovKSB7XHJcbiAgICByZXR1cm4gJHJlZHVjZSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoLCBhcmd1bWVudHNbMV0sIGZhbHNlKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkcmVkdWNlID0gcmVxdWlyZSgnLi9fYXJyYXktcmVkdWNlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ucmVkdWNlUmlnaHQsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjE5IC8gMTUuNC40LjIyIEFycmF5LnByb3RvdHlwZS5yZWR1Y2VSaWdodChjYWxsYmFja2ZuIFssIGluaXRpYWxWYWx1ZV0pXHJcbiAgcmVkdWNlUmlnaHQ6IGZ1bmN0aW9uIHJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcclxuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGluZGV4T2YgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKGZhbHNlKTtcclxudmFyICRuYXRpdmUgPSBbXS5pbmRleE9mO1xyXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmluZGV4T2YoMSwgLTApIDwgMDtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKE5FR0FUSVZFX1pFUk8gfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKSgkbmF0aXZlKSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTEgLyAxNS40LjQuMTQgQXJyYXkucHJvdG90eXBlLmluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxyXG4gIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcclxuICAgIHJldHVybiBORUdBVElWRV9aRVJPXHJcbiAgICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcclxuICAgICAgPyAkbmF0aXZlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgMFxyXG4gICAgICA6ICRpbmRleE9mKHRoaXMsIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyICRuYXRpdmUgPSBbXS5sYXN0SW5kZXhPZjtcclxudmFyIE5FR0FUSVZFX1pFUk8gPSAhISRuYXRpdmUgJiYgMSAvIFsxXS5sYXN0SW5kZXhPZigxLCAtMCkgPCAwO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xNCAvIDE1LjQuNC4xNSBBcnJheS5wcm90b3R5cGUubGFzdEluZGV4T2Yoc2VhcmNoRWxlbWVudCBbLCBmcm9tSW5kZXhdKVxyXG4gIGxhc3RJbmRleE9mOiBmdW5jdGlvbiBsYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gQFsqLTFdICovKSB7XHJcbiAgICAvLyBjb252ZXJ0IC0wIHRvICswXHJcbiAgICBpZiAoTkVHQVRJVkVfWkVSTykgcmV0dXJuICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwO1xyXG4gICAgdmFyIE8gPSB0b0lPYmplY3QodGhpcyk7XHJcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgdmFyIGluZGV4ID0gbGVuZ3RoIC0gMTtcclxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkgaW5kZXggPSBNYXRoLm1pbihpbmRleCwgdG9JbnRlZ2VyKGFyZ3VtZW50c1sxXSkpO1xyXG4gICAgaWYgKGluZGV4IDwgMCkgaW5kZXggPSBsZW5ndGggKyBpbmRleDtcclxuICAgIGZvciAoO2luZGV4ID49IDA7IGluZGV4LS0pIGlmIChpbmRleCBpbiBPKSBpZiAoT1tpbmRleF0gPT09IHNlYXJjaEVsZW1lbnQpIHJldHVybiBpbmRleCB8fCAwO1xyXG4gICAgcmV0dXJuIC0xO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIyLjEuMy4zIEFycmF5LnByb3RvdHlwZS5jb3B5V2l0aGluKHRhcmdldCwgc3RhcnQsIGVuZCA9IHRoaXMubGVuZ3RoKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgY29weVdpdGhpbjogcmVxdWlyZSgnLi9fYXJyYXktY29weS13aXRoaW4nKSB9KTtcclxuXHJcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdjb3B5V2l0aGluJyk7XHJcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHsgZmlsbDogcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpIH0pO1xyXG5cclxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZpbGwnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyMi4xLjMuOCBBcnJheS5wcm90b3R5cGUuZmluZChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg1KTtcclxudmFyIEtFWSA9ICdmaW5kJztcclxudmFyIGZvcmNlZCA9IHRydWU7XHJcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXHJcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XHJcbiAgZmluZDogZnVuY3Rpb24gZmluZChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xyXG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICB9XHJcbn0pO1xyXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDIyLjEuMy45IEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgocHJlZGljYXRlLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGZpbmQgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoNik7XHJcbnZhciBLRVkgPSAnZmluZEluZGV4JztcclxudmFyIGZvcmNlZCA9IHRydWU7XHJcbi8vIFNob3VsZG4ndCBza2lwIGhvbGVzXHJcbmlmIChLRVkgaW4gW10pIEFycmF5KDEpW0tFWV0oZnVuY3Rpb24gKCkgeyBmb3JjZWQgPSBmYWxzZTsgfSk7XHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZm9yY2VkLCAnQXJyYXknLCB7XHJcbiAgZmluZEluZGV4OiBmdW5jdGlvbiBmaW5kSW5kZXgoY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcclxuICAgIHJldHVybiAkZmluZCh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG59KTtcclxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoS0VZKTtcclxuIiwicmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnQXJyYXknKTtcclxuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgaW5oZXJpdElmUmVxdWlyZWQgPSByZXF1aXJlKCcuL19pbmhlcml0LWlmLXJlcXVpcmVkJyk7XHJcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmY7XHJcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xyXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcclxudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XHJcbnZhciAkUmVnRXhwID0gZ2xvYmFsLlJlZ0V4cDtcclxudmFyIEJhc2UgPSAkUmVnRXhwO1xyXG52YXIgcHJvdG8gPSAkUmVnRXhwLnByb3RvdHlwZTtcclxudmFyIHJlMSA9IC9hL2c7XHJcbnZhciByZTIgPSAvYS9nO1xyXG4vLyBcIm5ld1wiIGNyZWF0ZXMgYSBuZXcgb2JqZWN0LCBvbGQgd2Via2l0IGJ1Z2d5IGhlcmVcclxudmFyIENPUlJFQ1RfTkVXID0gbmV3ICRSZWdFeHAocmUxKSAhPT0gcmUxO1xyXG5cclxuaWYgKHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgKCFDT1JSRUNUX05FVyB8fCByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZTJbcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyldID0gZmFsc2U7XHJcbiAgLy8gUmVnRXhwIGNvbnN0cnVjdG9yIGNhbiBhbHRlciBmbGFncyBhbmQgSXNSZWdFeHAgd29ya3MgY29ycmVjdCB3aXRoIEBAbWF0Y2hcclxuICByZXR1cm4gJFJlZ0V4cChyZTEpICE9IHJlMSB8fCAkUmVnRXhwKHJlMikgPT0gcmUyIHx8ICRSZWdFeHAocmUxLCAnaScpICE9ICcvYS9pJztcclxufSkpKSB7XHJcbiAgJFJlZ0V4cCA9IGZ1bmN0aW9uIFJlZ0V4cChwLCBmKSB7XHJcbiAgICB2YXIgdGlSRSA9IHRoaXMgaW5zdGFuY2VvZiAkUmVnRXhwO1xyXG4gICAgdmFyIHBpUkUgPSBpc1JlZ0V4cChwKTtcclxuICAgIHZhciBmaVUgPSBmID09PSB1bmRlZmluZWQ7XHJcbiAgICByZXR1cm4gIXRpUkUgJiYgcGlSRSAmJiBwLmNvbnN0cnVjdG9yID09PSAkUmVnRXhwICYmIGZpVSA/IHBcclxuICAgICAgOiBpbmhlcml0SWZSZXF1aXJlZChDT1JSRUNUX05FV1xyXG4gICAgICAgID8gbmV3IEJhc2UocGlSRSAmJiAhZmlVID8gcC5zb3VyY2UgOiBwLCBmKVxyXG4gICAgICAgIDogQmFzZSgocGlSRSA9IHAgaW5zdGFuY2VvZiAkUmVnRXhwKSA/IHAuc291cmNlIDogcCwgcGlSRSAmJiBmaVUgPyAkZmxhZ3MuY2FsbChwKSA6IGYpXHJcbiAgICAgICwgdGlSRSA/IHRoaXMgOiBwcm90bywgJFJlZ0V4cCk7XHJcbiAgfTtcclxuICB2YXIgcHJveHkgPSBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICBrZXkgaW4gJFJlZ0V4cCB8fCBkUCgkUmVnRXhwLCBrZXksIHtcclxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJhc2Vba2V5XTsgfSxcclxuICAgICAgc2V0OiBmdW5jdGlvbiAoaXQpIHsgQmFzZVtrZXldID0gaXQ7IH1cclxuICAgIH0pO1xyXG4gIH07XHJcbiAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZSksIGkgPSAwOyBrZXlzLmxlbmd0aCA+IGk7KSBwcm94eShrZXlzW2krK10pO1xyXG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJFJlZ0V4cDtcclxuICAkUmVnRXhwLnByb3RvdHlwZSA9IHByb3RvO1xyXG4gIHJlcXVpcmUoJy4vX3JlZGVmaW5lJykoZ2xvYmFsLCAnUmVnRXhwJywgJFJlZ0V4cCk7XHJcbn1cclxuXHJcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ1JlZ0V4cCcpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnJlcXVpcmUoJy4vZXM2LnJlZ2V4cC5mbGFncycpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyICRmbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XHJcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XHJcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xyXG52YXIgJHRvU3RyaW5nID0gLy4vW1RPX1NUUklOR107XHJcblxyXG52YXIgZGVmaW5lID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShSZWdFeHAucHJvdG90eXBlLCBUT19TVFJJTkcsIGZuLCB0cnVlKTtcclxufTtcclxuXHJcbi8vIDIxLjIuNS4xNCBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nKClcclxuaWYgKHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkgeyByZXR1cm4gJHRvU3RyaW5nLmNhbGwoeyBzb3VyY2U6ICdhJywgZmxhZ3M6ICdiJyB9KSAhPSAnL2EvYic7IH0pKSB7XHJcbiAgZGVmaW5lKGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgdmFyIFIgPSBhbk9iamVjdCh0aGlzKTtcclxuICAgIHJldHVybiAnLycuY29uY2F0KFIuc291cmNlLCAnLycsXHJcbiAgICAgICdmbGFncycgaW4gUiA/IFIuZmxhZ3MgOiAhREVTQ1JJUFRPUlMgJiYgUiBpbnN0YW5jZW9mIFJlZ0V4cCA/ICRmbGFncy5jYWxsKFIpIDogdW5kZWZpbmVkKTtcclxuICB9KTtcclxuLy8gRkY0NC0gUmVnRXhwI3RvU3RyaW5nIGhhcyBhIHdyb25nIG5hbWVcclxufSBlbHNlIGlmICgkdG9TdHJpbmcubmFtZSAhPSBUT19TVFJJTkcpIHtcclxuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICByZXR1cm4gJHRvU3RyaW5nLmNhbGwodGhpcyk7XHJcbiAgfSk7XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcclxudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xyXG5cclxuLy8gQEBtYXRjaCBsb2dpY1xyXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ21hdGNoJywgMSwgZnVuY3Rpb24gKGRlZmluZWQsIE1BVENILCAkbWF0Y2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xyXG4gIHJldHVybiBbXHJcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5tYXRjaGAgbWV0aG9kXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLm1hdGNoXHJcbiAgICBmdW5jdGlvbiBtYXRjaChyZWdleHApIHtcclxuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xyXG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW01BVENIXTtcclxuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyBmbi5jYWxsKHJlZ2V4cCwgTykgOiBuZXcgUmVnRXhwKHJlZ2V4cClbTUFUQ0hdKFN0cmluZyhPKSk7XHJcbiAgICB9LFxyXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF1gIG1ldGhvZFxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQG1hdGNoXHJcbiAgICBmdW5jdGlvbiAocmVnZXhwKSB7XHJcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoJG1hdGNoLCByZWdleHAsIHRoaXMpO1xyXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XHJcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XHJcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICBpZiAoIXJ4Lmdsb2JhbCkgcmV0dXJuIHJlZ0V4cEV4ZWMocngsIFMpO1xyXG4gICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xyXG4gICAgICByeC5sYXN0SW5kZXggPSAwO1xyXG4gICAgICB2YXIgQSA9IFtdO1xyXG4gICAgICB2YXIgbiA9IDA7XHJcbiAgICAgIHZhciByZXN1bHQ7XHJcbiAgICAgIHdoaWxlICgocmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUykpICE9PSBudWxsKSB7XHJcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XHJcbiAgICAgICAgQVtuXSA9IG1hdGNoU3RyO1xyXG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XHJcbiAgICAgICAgbisrO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IEE7XHJcbiAgICB9XHJcbiAgXTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xyXG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XHJcbnZhciBtYXggPSBNYXRoLm1heDtcclxudmFyIG1pbiA9IE1hdGgubWluO1xyXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG52YXIgU1VCU1RJVFVUSU9OX1NZTUJPTFMgPSAvXFwkKFskJmAnXXxcXGRcXGQ/fDxbXj5dKj4pL2c7XHJcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRCA9IC9cXCQoWyQmYCddfFxcZFxcZD8pL2c7XHJcblxyXG52YXIgbWF5YmVUb1N0cmluZyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkID8gaXQgOiBTdHJpbmcoaXQpO1xyXG59O1xyXG5cclxuLy8gQEByZXBsYWNlIGxvZ2ljXHJcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgncmVwbGFjZScsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBSRVBMQUNFLCAkcmVwbGFjZSwgbWF5YmVDYWxsTmF0aXZlKSB7XHJcbiAgcmV0dXJuIFtcclxuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnJlcGxhY2VgIG1ldGhvZFxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlXHJcbiAgICBmdW5jdGlvbiByZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpIHtcclxuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xyXG4gICAgICB2YXIgZm4gPSBzZWFyY2hWYWx1ZSA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiBzZWFyY2hWYWx1ZVtSRVBMQUNFXTtcclxuICAgICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWRcclxuICAgICAgICA/IGZuLmNhbGwoc2VhcmNoVmFsdWUsIE8sIHJlcGxhY2VWYWx1ZSlcclxuICAgICAgICA6ICRyZXBsYWNlLmNhbGwoU3RyaW5nKE8pLCBzZWFyY2hWYWx1ZSwgcmVwbGFjZVZhbHVlKTtcclxuICAgIH0sXHJcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHJlcGxhY2VdYCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEByZXBsYWNlXHJcbiAgICBmdW5jdGlvbiAocmVnZXhwLCByZXBsYWNlVmFsdWUpIHtcclxuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkcmVwbGFjZSwgcmVnZXhwLCB0aGlzLCByZXBsYWNlVmFsdWUpO1xyXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XHJcblxyXG4gICAgICB2YXIgcnggPSBhbk9iamVjdChyZWdleHApO1xyXG4gICAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcclxuICAgICAgdmFyIGZ1bmN0aW9uYWxSZXBsYWNlID0gdHlwZW9mIHJlcGxhY2VWYWx1ZSA9PT0gJ2Z1bmN0aW9uJztcclxuICAgICAgaWYgKCFmdW5jdGlvbmFsUmVwbGFjZSkgcmVwbGFjZVZhbHVlID0gU3RyaW5nKHJlcGxhY2VWYWx1ZSk7XHJcbiAgICAgIHZhciBnbG9iYWwgPSByeC5nbG9iYWw7XHJcbiAgICAgIGlmIChnbG9iYWwpIHtcclxuICAgICAgICB2YXIgZnVsbFVuaWNvZGUgPSByeC51bmljb2RlO1xyXG4gICAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XHJcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gbnVsbCkgYnJlYWs7XHJcbiAgICAgICAgcmVzdWx0cy5wdXNoKHJlc3VsdCk7XHJcbiAgICAgICAgaWYgKCFnbG9iYWwpIGJyZWFrO1xyXG4gICAgICAgIHZhciBtYXRjaFN0ciA9IFN0cmluZyhyZXN1bHRbMF0pO1xyXG4gICAgICAgIGlmIChtYXRjaFN0ciA9PT0gJycpIHJ4Lmxhc3RJbmRleCA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCB0b0xlbmd0aChyeC5sYXN0SW5kZXgpLCBmdWxsVW5pY29kZSk7XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGFjY3VtdWxhdGVkUmVzdWx0ID0gJyc7XHJcbiAgICAgIHZhciBuZXh0U291cmNlUG9zaXRpb24gPSAwO1xyXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICByZXN1bHQgPSByZXN1bHRzW2ldO1xyXG4gICAgICAgIHZhciBtYXRjaGVkID0gU3RyaW5nKHJlc3VsdFswXSk7XHJcbiAgICAgICAgdmFyIHBvc2l0aW9uID0gbWF4KG1pbih0b0ludGVnZXIocmVzdWx0LmluZGV4KSwgUy5sZW5ndGgpLCAwKTtcclxuICAgICAgICB2YXIgY2FwdHVyZXMgPSBbXTtcclxuICAgICAgICAvLyBOT1RFOiBUaGlzIGlzIGVxdWl2YWxlbnQgdG9cclxuICAgICAgICAvLyAgIGNhcHR1cmVzID0gcmVzdWx0LnNsaWNlKDEpLm1hcChtYXliZVRvU3RyaW5nKVxyXG4gICAgICAgIC8vIGJ1dCBmb3Igc29tZSByZWFzb24gYG5hdGl2ZVNsaWNlLmNhbGwocmVzdWx0LCAxLCByZXN1bHQubGVuZ3RoKWAgKGNhbGxlZCBpblxyXG4gICAgICAgIC8vIHRoZSBzbGljZSBwb2x5ZmlsbCB3aGVuIHNsaWNpbmcgbmF0aXZlIGFycmF5cykgXCJkb2Vzbid0IHdvcmtcIiBpbiBzYWZhcmkgOSBhbmRcclxuICAgICAgICAvLyBjYXVzZXMgYSBjcmFzaCAoaHR0cHM6Ly9wYXN0ZWJpbi5jb20vTjIxUXplUUEpIHdoZW4gdHJ5aW5nIHRvIGRlYnVnIGl0LlxyXG4gICAgICAgIGZvciAodmFyIGogPSAxOyBqIDwgcmVzdWx0Lmxlbmd0aDsgaisrKSBjYXB0dXJlcy5wdXNoKG1heWJlVG9TdHJpbmcocmVzdWx0W2pdKSk7XHJcbiAgICAgICAgdmFyIG5hbWVkQ2FwdHVyZXMgPSByZXN1bHQuZ3JvdXBzO1xyXG4gICAgICAgIGlmIChmdW5jdGlvbmFsUmVwbGFjZSkge1xyXG4gICAgICAgICAgdmFyIHJlcGxhY2VyQXJncyA9IFttYXRjaGVkXS5jb25jYXQoY2FwdHVyZXMsIHBvc2l0aW9uLCBTKTtcclxuICAgICAgICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHJlcGxhY2VyQXJncy5wdXNoKG5hbWVkQ2FwdHVyZXMpO1xyXG4gICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gU3RyaW5nKHJlcGxhY2VWYWx1ZS5hcHBseSh1bmRlZmluZWQsIHJlcGxhY2VyQXJncykpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICByZXBsYWNlbWVudCA9IGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBTLCBwb3NpdGlvbiwgY2FwdHVyZXMsIG5hbWVkQ2FwdHVyZXMsIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb3NpdGlvbiA+PSBuZXh0U291cmNlUG9zaXRpb24pIHtcclxuICAgICAgICAgIGFjY3VtdWxhdGVkUmVzdWx0ICs9IFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uLCBwb3NpdGlvbikgKyByZXBsYWNlbWVudDtcclxuICAgICAgICAgIG5leHRTb3VyY2VQb3NpdGlvbiA9IHBvc2l0aW9uICsgbWF0Y2hlZC5sZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhY2N1bXVsYXRlZFJlc3VsdCArIFMuc2xpY2UobmV4dFNvdXJjZVBvc2l0aW9uKTtcclxuICAgIH1cclxuICBdO1xyXG5cclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWdldHN1YnN0aXR1dGlvblxyXG4gIGZ1bmN0aW9uIGdldFN1YnN0aXR1dGlvbihtYXRjaGVkLCBzdHIsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZW1lbnQpIHtcclxuICAgIHZhciB0YWlsUG9zID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcclxuICAgIHZhciBtID0gY2FwdHVyZXMubGVuZ3RoO1xyXG4gICAgdmFyIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MU19OT19OQU1FRDtcclxuICAgIGlmIChuYW1lZENhcHR1cmVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgbmFtZWRDYXB0dXJlcyA9IHRvT2JqZWN0KG5hbWVkQ2FwdHVyZXMpO1xyXG4gICAgICBzeW1ib2xzID0gU1VCU1RJVFVUSU9OX1NZTUJPTFM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChyZXBsYWNlbWVudCwgc3ltYm9scywgZnVuY3Rpb24gKG1hdGNoLCBjaCkge1xyXG4gICAgICB2YXIgY2FwdHVyZTtcclxuICAgICAgc3dpdGNoIChjaC5jaGFyQXQoMCkpIHtcclxuICAgICAgICBjYXNlICckJzogcmV0dXJuICckJztcclxuICAgICAgICBjYXNlICcmJzogcmV0dXJuIG1hdGNoZWQ7XHJcbiAgICAgICAgY2FzZSAnYCc6IHJldHVybiBzdHIuc2xpY2UoMCwgcG9zaXRpb24pO1xyXG4gICAgICAgIGNhc2UgXCInXCI6IHJldHVybiBzdHIuc2xpY2UodGFpbFBvcyk7XHJcbiAgICAgICAgY2FzZSAnPCc6XHJcbiAgICAgICAgICBjYXB0dXJlID0gbmFtZWRDYXB0dXJlc1tjaC5zbGljZSgxLCAtMSldO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDogLy8gXFxkXFxkP1xyXG4gICAgICAgICAgdmFyIG4gPSArY2g7XHJcbiAgICAgICAgICBpZiAobiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgICAgaWYgKG4gPiBtKSB7XHJcbiAgICAgICAgICAgIHZhciBmID0gZmxvb3IobiAvIDEwKTtcclxuICAgICAgICAgICAgaWYgKGYgPT09IDApIHJldHVybiBtYXRjaDtcclxuICAgICAgICAgICAgaWYgKGYgPD0gbSkgcmV0dXJuIGNhcHR1cmVzW2YgLSAxXSA9PT0gdW5kZWZpbmVkID8gY2guY2hhckF0KDEpIDogY2FwdHVyZXNbZiAtIDFdICsgY2guY2hhckF0KDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWF0Y2g7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBjYXB0dXJlID0gY2FwdHVyZXNbbiAtIDFdO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBjYXB0dXJlID09PSB1bmRlZmluZWQgPyAnJyA6IGNhcHR1cmU7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHNhbWVWYWx1ZSA9IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKTtcclxudmFyIHJlZ0V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYy1hYnN0cmFjdCcpO1xyXG5cclxuLy8gQEBzZWFyY2ggbG9naWNcclxucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzZWFyY2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgU0VBUkNILCAkc2VhcmNoLCBtYXliZUNhbGxOYXRpdmUpIHtcclxuICByZXR1cm4gW1xyXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUuc2VhcmNoYCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc2VhcmNoXHJcbiAgICBmdW5jdGlvbiBzZWFyY2gocmVnZXhwKSB7XHJcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcclxuICAgICAgdmFyIGZuID0gcmVnZXhwID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHJlZ2V4cFtTRUFSQ0hdO1xyXG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtTRUFSQ0hdKFN0cmluZyhPKSk7XHJcbiAgICB9LFxyXG4gICAgLy8gYFJlZ0V4cC5wcm90b3R5cGVbQEBzZWFyY2hdYCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzZWFyY2hcclxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcclxuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkc2VhcmNoLCByZWdleHAsIHRoaXMpO1xyXG4gICAgICBpZiAocmVzLmRvbmUpIHJldHVybiByZXMudmFsdWU7XHJcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XHJcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICB2YXIgcHJldmlvdXNMYXN0SW5kZXggPSByeC5sYXN0SW5kZXg7XHJcbiAgICAgIGlmICghc2FtZVZhbHVlKHByZXZpb3VzTGFzdEluZGV4LCAwKSkgcngubGFzdEluZGV4ID0gMDtcclxuICAgICAgdmFyIHJlc3VsdCA9IHJlZ0V4cEV4ZWMocngsIFMpO1xyXG4gICAgICBpZiAoIXNhbWVWYWx1ZShyeC5sYXN0SW5kZXgsIHByZXZpb3VzTGFzdEluZGV4KSkgcngubGFzdEluZGV4ID0gcHJldmlvdXNMYXN0SW5kZXg7XHJcbiAgICAgIHJldHVybiByZXN1bHQgPT09IG51bGwgPyAtMSA6IHJlc3VsdC5pbmRleDtcclxuICAgIH1cclxuICBdO1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xyXG52YXIgYWR2YW5jZVN0cmluZ0luZGV4ID0gcmVxdWlyZSgnLi9fYWR2YW5jZS1zdHJpbmctaW5kZXgnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciBjYWxsUmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XHJcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyICRtaW4gPSBNYXRoLm1pbjtcclxudmFyICRwdXNoID0gW10ucHVzaDtcclxudmFyICRTUExJVCA9ICdzcGxpdCc7XHJcbnZhciBMRU5HVEggPSAnbGVuZ3RoJztcclxudmFyIExBU1RfSU5ERVggPSAnbGFzdEluZGV4JztcclxudmFyIE1BWF9VSU5UMzIgPSAweGZmZmZmZmZmO1xyXG5cclxuLy8gYmFiZWwtbWluaWZ5IHRyYW5zcGlsZXMgUmVnRXhwKCd4JywgJ3knKSAtPiAveC95IGFuZCBpdCBjYXVzZXMgU3ludGF4RXJyb3JcclxudmFyIFNVUFBPUlRTX1kgPSAhZmFpbHMoZnVuY3Rpb24gKCkgeyBSZWdFeHAoTUFYX1VJTlQzMiwgJ3knKTsgfSk7XHJcblxyXG4vLyBAQHNwbGl0IGxvZ2ljXHJcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnc3BsaXQnLCAyLCBmdW5jdGlvbiAoZGVmaW5lZCwgU1BMSVQsICRzcGxpdCwgbWF5YmVDYWxsTmF0aXZlKSB7XHJcbiAgdmFyIGludGVybmFsU3BsaXQ7XHJcbiAgaWYgKFxyXG4gICAgJ2FiYmMnWyRTUExJVF0oLyhiKSovKVsxXSA9PSAnYycgfHxcclxuICAgICd0ZXN0J1skU1BMSVRdKC8oPzopLywgLTEpW0xFTkdUSF0gIT0gNCB8fFxyXG4gICAgJ2FiJ1skU1BMSVRdKC8oPzphYikqLylbTEVOR1RIXSAhPSAyIHx8XHJcbiAgICAnLidbJFNQTElUXSgvKC4/KSguPykvKVtMRU5HVEhdICE9IDQgfHxcclxuICAgICcuJ1skU1BMSVRdKC8oKSgpLylbTEVOR1RIXSA+IDEgfHxcclxuICAgICcnWyRTUExJVF0oLy4/LylbTEVOR1RIXVxyXG4gICkge1xyXG4gICAgLy8gYmFzZWQgb24gZXM1LXNoaW0gaW1wbGVtZW50YXRpb24sIG5lZWQgdG8gcmV3b3JrIGl0XHJcbiAgICBpbnRlcm5hbFNwbGl0ID0gZnVuY3Rpb24gKHNlcGFyYXRvciwgbGltaXQpIHtcclxuICAgICAgdmFyIHN0cmluZyA9IFN0cmluZyh0aGlzKTtcclxuICAgICAgaWYgKHNlcGFyYXRvciA9PT0gdW5kZWZpbmVkICYmIGxpbWl0ID09PSAwKSByZXR1cm4gW107XHJcbiAgICAgIC8vIElmIGBzZXBhcmF0b3JgIGlzIG5vdCBhIHJlZ2V4LCB1c2UgbmF0aXZlIHNwbGl0XHJcbiAgICAgIGlmICghaXNSZWdFeHAoc2VwYXJhdG9yKSkgcmV0dXJuICRzcGxpdC5jYWxsKHN0cmluZywgc2VwYXJhdG9yLCBsaW1pdCk7XHJcbiAgICAgIHZhciBvdXRwdXQgPSBbXTtcclxuICAgICAgdmFyIGZsYWdzID0gKHNlcGFyYXRvci5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgKHNlcGFyYXRvci5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnVuaWNvZGUgPyAndScgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLnN0aWNreSA/ICd5JyA6ICcnKTtcclxuICAgICAgdmFyIGxhc3RMYXN0SW5kZXggPSAwO1xyXG4gICAgICB2YXIgc3BsaXRMaW1pdCA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XHJcbiAgICAgIC8vIE1ha2UgYGdsb2JhbGAgYW5kIGF2b2lkIGBsYXN0SW5kZXhgIGlzc3VlcyBieSB3b3JraW5nIHdpdGggYSBjb3B5XHJcbiAgICAgIHZhciBzZXBhcmF0b3JDb3B5ID0gbmV3IFJlZ0V4cChzZXBhcmF0b3Iuc291cmNlLCBmbGFncyArICdnJyk7XHJcbiAgICAgIHZhciBtYXRjaCwgbGFzdEluZGV4LCBsYXN0TGVuZ3RoO1xyXG4gICAgICB3aGlsZSAobWF0Y2ggPSByZWdleHBFeGVjLmNhbGwoc2VwYXJhdG9yQ29weSwgc3RyaW5nKSkge1xyXG4gICAgICAgIGxhc3RJbmRleCA9IHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF07XHJcbiAgICAgICAgaWYgKGxhc3RJbmRleCA+IGxhc3RMYXN0SW5kZXgpIHtcclxuICAgICAgICAgIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4LCBtYXRjaC5pbmRleCkpO1xyXG4gICAgICAgICAgaWYgKG1hdGNoW0xFTkdUSF0gPiAxICYmIG1hdGNoLmluZGV4IDwgc3RyaW5nW0xFTkdUSF0pICRwdXNoLmFwcGx5KG91dHB1dCwgbWF0Y2guc2xpY2UoMSkpO1xyXG4gICAgICAgICAgbGFzdExlbmd0aCA9IG1hdGNoWzBdW0xFTkdUSF07XHJcbiAgICAgICAgICBsYXN0TGFzdEluZGV4ID0gbGFzdEluZGV4O1xyXG4gICAgICAgICAgaWYgKG91dHB1dFtMRU5HVEhdID49IHNwbGl0TGltaXQpIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSA9PT0gbWF0Y2guaW5kZXgpIHNlcGFyYXRvckNvcHlbTEFTVF9JTkRFWF0rKzsgLy8gQXZvaWQgYW4gaW5maW5pdGUgbG9vcFxyXG4gICAgICB9XHJcbiAgICAgIGlmIChsYXN0TGFzdEluZGV4ID09PSBzdHJpbmdbTEVOR1RIXSkge1xyXG4gICAgICAgIGlmIChsYXN0TGVuZ3RoIHx8ICFzZXBhcmF0b3JDb3B5LnRlc3QoJycpKSBvdXRwdXQucHVzaCgnJyk7XHJcbiAgICAgIH0gZWxzZSBvdXRwdXQucHVzaChzdHJpbmcuc2xpY2UobGFzdExhc3RJbmRleCkpO1xyXG4gICAgICByZXR1cm4gb3V0cHV0W0xFTkdUSF0gPiBzcGxpdExpbWl0ID8gb3V0cHV0LnNsaWNlKDAsIHNwbGl0TGltaXQpIDogb3V0cHV0O1xyXG4gICAgfTtcclxuICAvLyBDaGFrcmEsIFY4XHJcbiAgfSBlbHNlIGlmICgnMCdbJFNQTElUXSh1bmRlZmluZWQsIDApW0xFTkdUSF0pIHtcclxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xyXG4gICAgICByZXR1cm4gc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDAgPyBbXSA6ICRzcGxpdC5jYWxsKHRoaXMsIHNlcGFyYXRvciwgbGltaXQpO1xyXG4gICAgfTtcclxuICB9IGVsc2Uge1xyXG4gICAgaW50ZXJuYWxTcGxpdCA9ICRzcGxpdDtcclxuICB9XHJcblxyXG4gIHJldHVybiBbXHJcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zcGxpdGAgbWV0aG9kXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnNwbGl0XHJcbiAgICBmdW5jdGlvbiBzcGxpdChzZXBhcmF0b3IsIGxpbWl0KSB7XHJcbiAgICAgIHZhciBPID0gZGVmaW5lZCh0aGlzKTtcclxuICAgICAgdmFyIHNwbGl0dGVyID0gc2VwYXJhdG9yID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlcGFyYXRvcltTUExJVF07XHJcbiAgICAgIHJldHVybiBzcGxpdHRlciAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgPyBzcGxpdHRlci5jYWxsKHNlcGFyYXRvciwgTywgbGltaXQpXHJcbiAgICAgICAgOiBpbnRlcm5hbFNwbGl0LmNhbGwoU3RyaW5nKE8pLCBzZXBhcmF0b3IsIGxpbWl0KTtcclxuICAgIH0sXHJcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNwbGl0XWAgbWV0aG9kXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAc3BsaXRcclxuICAgIC8vXHJcbiAgICAvLyBOT1RFOiBUaGlzIGNhbm5vdCBiZSBwcm9wZXJseSBwb2x5ZmlsbGVkIGluIGVuZ2luZXMgdGhhdCBkb24ndCBzdXBwb3J0XHJcbiAgICAvLyB0aGUgJ3knIGZsYWcuXHJcbiAgICBmdW5jdGlvbiAocmVnZXhwLCBsaW1pdCkge1xyXG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKGludGVybmFsU3BsaXQsIHJlZ2V4cCwgdGhpcywgbGltaXQsIGludGVybmFsU3BsaXQgIT09ICRzcGxpdCk7XHJcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcclxuXHJcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XHJcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3RvcihyeCwgUmVnRXhwKTtcclxuXHJcbiAgICAgIHZhciB1bmljb2RlTWF0Y2hpbmcgPSByeC51bmljb2RlO1xyXG4gICAgICB2YXIgZmxhZ3MgPSAocnguaWdub3JlQ2FzZSA/ICdpJyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgIChyeC5tdWx0aWxpbmUgPyAnbScgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAocngudW5pY29kZSA/ICd1JyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgIChTVVBQT1JUU19ZID8gJ3knIDogJ2cnKTtcclxuXHJcbiAgICAgIC8vIF4oPyArIHJ4ICsgKSBpcyBuZWVkZWQsIGluIGNvbWJpbmF0aW9uIHdpdGggc29tZSBTIHNsaWNpbmcsIHRvXHJcbiAgICAgIC8vIHNpbXVsYXRlIHRoZSAneScgZmxhZy5cclxuICAgICAgdmFyIHNwbGl0dGVyID0gbmV3IEMoU1VQUE9SVFNfWSA/IHJ4IDogJ14oPzonICsgcnguc291cmNlICsgJyknLCBmbGFncyk7XHJcbiAgICAgIHZhciBsaW0gPSBsaW1pdCA9PT0gdW5kZWZpbmVkID8gTUFYX1VJTlQzMiA6IGxpbWl0ID4+PiAwO1xyXG4gICAgICBpZiAobGltID09PSAwKSByZXR1cm4gW107XHJcbiAgICAgIGlmIChTLmxlbmd0aCA9PT0gMCkgcmV0dXJuIGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTKSA9PT0gbnVsbCA/IFtTXSA6IFtdO1xyXG4gICAgICB2YXIgcCA9IDA7XHJcbiAgICAgIHZhciBxID0gMDtcclxuICAgICAgdmFyIEEgPSBbXTtcclxuICAgICAgd2hpbGUgKHEgPCBTLmxlbmd0aCkge1xyXG4gICAgICAgIHNwbGl0dGVyLmxhc3RJbmRleCA9IFNVUFBPUlRTX1kgPyBxIDogMDtcclxuICAgICAgICB2YXIgeiA9IGNhbGxSZWdFeHBFeGVjKHNwbGl0dGVyLCBTVVBQT1JUU19ZID8gUyA6IFMuc2xpY2UocSkpO1xyXG4gICAgICAgIHZhciBlO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgIHogPT09IG51bGwgfHxcclxuICAgICAgICAgIChlID0gJG1pbih0b0xlbmd0aChzcGxpdHRlci5sYXN0SW5kZXggKyAoU1VQUE9SVFNfWSA/IDAgOiBxKSksIFMubGVuZ3RoKSkgPT09IHBcclxuICAgICAgICApIHtcclxuICAgICAgICAgIHEgPSBhZHZhbmNlU3RyaW5nSW5kZXgoUywgcSwgdW5pY29kZU1hdGNoaW5nKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgQS5wdXNoKFMuc2xpY2UocCwgcSkpO1xyXG4gICAgICAgICAgaWYgKEEubGVuZ3RoID09PSBsaW0pIHJldHVybiBBO1xyXG4gICAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPD0gei5sZW5ndGggLSAxOyBpKyspIHtcclxuICAgICAgICAgICAgQS5wdXNoKHpbaV0pO1xyXG4gICAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBxID0gcCA9IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIEEucHVzaChTLnNsaWNlKHApKTtcclxuICAgICAgcmV0dXJuIEE7XHJcbiAgICB9XHJcbiAgXTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIExJQlJBUlkgPSByZXF1aXJlKCcuL19saWJyYXJ5Jyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4vX2NsYXNzb2YnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcclxudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XHJcbnZhciB0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpLnNldDtcclxudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XHJcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcclxudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XHJcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XHJcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xyXG52YXIgUFJPTUlTRSA9ICdQcm9taXNlJztcclxudmFyIFR5cGVFcnJvciA9IGdsb2JhbC5UeXBlRXJyb3I7XHJcbnZhciBwcm9jZXNzID0gZ2xvYmFsLnByb2Nlc3M7XHJcbnZhciB2ZXJzaW9ucyA9IHByb2Nlc3MgJiYgcHJvY2Vzcy52ZXJzaW9ucztcclxudmFyIHY4ID0gdmVyc2lvbnMgJiYgdmVyc2lvbnMudjggfHwgJyc7XHJcbnZhciAkUHJvbWlzZSA9IGdsb2JhbFtQUk9NSVNFXTtcclxudmFyIGlzTm9kZSA9IGNsYXNzb2YocHJvY2VzcykgPT0gJ3Byb2Nlc3MnO1xyXG52YXIgZW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XHJcbnZhciBJbnRlcm5hbCwgbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5LCBPd25Qcm9taXNlQ2FwYWJpbGl0eSwgV3JhcHBlcjtcclxudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZjtcclxuXHJcbnZhciBVU0VfTkFUSVZFID0gISFmdW5jdGlvbiAoKSB7XHJcbiAgdHJ5IHtcclxuICAgIC8vIGNvcnJlY3Qgc3ViY2xhc3Npbmcgd2l0aCBAQHNwZWNpZXMgc3VwcG9ydFxyXG4gICAgdmFyIHByb21pc2UgPSAkUHJvbWlzZS5yZXNvbHZlKDEpO1xyXG4gICAgdmFyIEZha2VQcm9taXNlID0gKHByb21pc2UuY29uc3RydWN0b3IgPSB7fSlbcmVxdWlyZSgnLi9fd2tzJykoJ3NwZWNpZXMnKV0gPSBmdW5jdGlvbiAoZXhlYykge1xyXG4gICAgICBleGVjKGVtcHR5LCBlbXB0eSk7XHJcbiAgICB9O1xyXG4gICAgLy8gdW5oYW5kbGVkIHJlamVjdGlvbnMgdHJhY2tpbmcgc3VwcG9ydCwgTm9kZUpTIFByb21pc2Ugd2l0aG91dCBpdCBmYWlscyBAQHNwZWNpZXMgdGVzdFxyXG4gICAgcmV0dXJuIChpc05vZGUgfHwgdHlwZW9mIFByb21pc2VSZWplY3Rpb25FdmVudCA9PSAnZnVuY3Rpb24nKVxyXG4gICAgICAmJiBwcm9taXNlLnRoZW4oZW1wdHkpIGluc3RhbmNlb2YgRmFrZVByb21pc2VcclxuICAgICAgLy8gdjggNi42IChOb2RlIDEwIGFuZCBDaHJvbWUgNjYpIGhhdmUgYSBidWcgd2l0aCByZXNvbHZpbmcgY3VzdG9tIHRoZW5hYmxlc1xyXG4gICAgICAvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD04MzA1NjVcclxuICAgICAgLy8gd2UgY2FuJ3QgZGV0ZWN0IGl0IHN5bmNocm9ub3VzbHksIHNvIGp1c3QgY2hlY2sgdmVyc2lvbnNcclxuICAgICAgJiYgdjguaW5kZXhPZignNi42JykgIT09IDBcclxuICAgICAgJiYgdXNlckFnZW50LmluZGV4T2YoJ0Nocm9tZS82NicpID09PSAtMTtcclxuICB9IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cclxufSgpO1xyXG5cclxuLy8gaGVscGVyc1xyXG52YXIgaXNUaGVuYWJsZSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHZhciB0aGVuO1xyXG4gIHJldHVybiBpc09iamVjdChpdCkgJiYgdHlwZW9mICh0aGVuID0gaXQudGhlbikgPT0gJ2Z1bmN0aW9uJyA/IHRoZW4gOiBmYWxzZTtcclxufTtcclxudmFyIG5vdGlmeSA9IGZ1bmN0aW9uIChwcm9taXNlLCBpc1JlamVjdCkge1xyXG4gIGlmIChwcm9taXNlLl9uKSByZXR1cm47XHJcbiAgcHJvbWlzZS5fbiA9IHRydWU7XHJcbiAgdmFyIGNoYWluID0gcHJvbWlzZS5fYztcclxuICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIHZhbHVlID0gcHJvbWlzZS5fdjtcclxuICAgIHZhciBvayA9IHByb21pc2UuX3MgPT0gMTtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHZhciBydW4gPSBmdW5jdGlvbiAocmVhY3Rpb24pIHtcclxuICAgICAgdmFyIGhhbmRsZXIgPSBvayA/IHJlYWN0aW9uLm9rIDogcmVhY3Rpb24uZmFpbDtcclxuICAgICAgdmFyIHJlc29sdmUgPSByZWFjdGlvbi5yZXNvbHZlO1xyXG4gICAgICB2YXIgcmVqZWN0ID0gcmVhY3Rpb24ucmVqZWN0O1xyXG4gICAgICB2YXIgZG9tYWluID0gcmVhY3Rpb24uZG9tYWluO1xyXG4gICAgICB2YXIgcmVzdWx0LCB0aGVuLCBleGl0ZWQ7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgaWYgKGhhbmRsZXIpIHtcclxuICAgICAgICAgIGlmICghb2spIHtcclxuICAgICAgICAgICAgaWYgKHByb21pc2UuX2ggPT0gMikgb25IYW5kbGVVbmhhbmRsZWQocHJvbWlzZSk7XHJcbiAgICAgICAgICAgIHByb21pc2UuX2ggPSAxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKGhhbmRsZXIgPT09IHRydWUpIHJlc3VsdCA9IHZhbHVlO1xyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChkb21haW4pIGRvbWFpbi5lbnRlcigpO1xyXG4gICAgICAgICAgICByZXN1bHQgPSBoYW5kbGVyKHZhbHVlKTsgLy8gbWF5IHRocm93XHJcbiAgICAgICAgICAgIGlmIChkb21haW4pIHtcclxuICAgICAgICAgICAgICBkb21haW4uZXhpdCgpO1xyXG4gICAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmIChyZXN1bHQgPT09IHJlYWN0aW9uLnByb21pc2UpIHtcclxuICAgICAgICAgICAgcmVqZWN0KFR5cGVFcnJvcignUHJvbWlzZS1jaGFpbiBjeWNsZScpKTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodGhlbiA9IGlzVGhlbmFibGUocmVzdWx0KSkge1xyXG4gICAgICAgICAgICB0aGVuLmNhbGwocmVzdWx0LCByZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgICAgfSBlbHNlIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICB9IGVsc2UgcmVqZWN0KHZhbHVlKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGlmIChkb21haW4gJiYgIWV4aXRlZCkgZG9tYWluLmV4aXQoKTtcclxuICAgICAgICByZWplY3QoZSk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB3aGlsZSAoY2hhaW4ubGVuZ3RoID4gaSkgcnVuKGNoYWluW2krK10pOyAvLyB2YXJpYWJsZSBsZW5ndGggLSBjYW4ndCB1c2UgZm9yRWFjaFxyXG4gICAgcHJvbWlzZS5fYyA9IFtdO1xyXG4gICAgcHJvbWlzZS5fbiA9IGZhbHNlO1xyXG4gICAgaWYgKGlzUmVqZWN0ICYmICFwcm9taXNlLl9oKSBvblVuaGFuZGxlZChwcm9taXNlKTtcclxuICB9KTtcclxufTtcclxudmFyIG9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xyXG4gICAgdmFyIHVuaGFuZGxlZCA9IGlzVW5oYW5kbGVkKHByb21pc2UpO1xyXG4gICAgdmFyIHJlc3VsdCwgaGFuZGxlciwgY29uc29sZTtcclxuICAgIGlmICh1bmhhbmRsZWQpIHtcclxuICAgICAgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKGlzTm9kZSkge1xyXG4gICAgICAgICAgcHJvY2Vzcy5lbWl0KCd1bmhhbmRsZWRSZWplY3Rpb24nLCB2YWx1ZSwgcHJvbWlzZSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9udW5oYW5kbGVkcmVqZWN0aW9uKSB7XHJcbiAgICAgICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiB2YWx1ZSB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKChjb25zb2xlID0gZ2xvYmFsLmNvbnNvbGUpICYmIGNvbnNvbGUuZXJyb3IpIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuaGFuZGxlZCBwcm9taXNlIHJlamVjdGlvbicsIHZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICAvLyBCcm93c2VycyBzaG91bGQgbm90IHRyaWdnZXIgYHJlamVjdGlvbkhhbmRsZWRgIGV2ZW50IGlmIGl0IHdhcyBoYW5kbGVkIGhlcmUsIE5vZGVKUyAtIHNob3VsZFxyXG4gICAgICBwcm9taXNlLl9oID0gaXNOb2RlIHx8IGlzVW5oYW5kbGVkKHByb21pc2UpID8gMiA6IDE7XHJcbiAgICB9IHByb21pc2UuX2EgPSB1bmRlZmluZWQ7XHJcbiAgICBpZiAodW5oYW5kbGVkICYmIHJlc3VsdC5lKSB0aHJvdyByZXN1bHQudjtcclxuICB9KTtcclxufTtcclxudmFyIGlzVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICByZXR1cm4gcHJvbWlzZS5faCAhPT0gMSAmJiAocHJvbWlzZS5fYSB8fCBwcm9taXNlLl9jKS5sZW5ndGggPT09IDA7XHJcbn07XHJcbnZhciBvbkhhbmRsZVVuaGFuZGxlZCA9IGZ1bmN0aW9uIChwcm9taXNlKSB7XHJcbiAgdGFzay5jYWxsKGdsb2JhbCwgZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGhhbmRsZXI7XHJcbiAgICBpZiAoaXNOb2RlKSB7XHJcbiAgICAgIHByb2Nlc3MuZW1pdCgncmVqZWN0aW9uSGFuZGxlZCcsIHByb21pc2UpO1xyXG4gICAgfSBlbHNlIGlmIChoYW5kbGVyID0gZ2xvYmFsLm9ucmVqZWN0aW9uaGFuZGxlZCkge1xyXG4gICAgICBoYW5kbGVyKHsgcHJvbWlzZTogcHJvbWlzZSwgcmVhc29uOiBwcm9taXNlLl92IH0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG52YXIgJHJlamVjdCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gIHZhciBwcm9taXNlID0gdGhpcztcclxuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xyXG4gIHByb21pc2UuX2QgPSB0cnVlO1xyXG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxyXG4gIHByb21pc2UuX3YgPSB2YWx1ZTtcclxuICBwcm9taXNlLl9zID0gMjtcclxuICBpZiAoIXByb21pc2UuX2EpIHByb21pc2UuX2EgPSBwcm9taXNlLl9jLnNsaWNlKCk7XHJcbiAgbm90aWZ5KHByb21pc2UsIHRydWUpO1xyXG59O1xyXG52YXIgJHJlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICB2YXIgcHJvbWlzZSA9IHRoaXM7XHJcbiAgdmFyIHRoZW47XHJcbiAgaWYgKHByb21pc2UuX2QpIHJldHVybjtcclxuICBwcm9taXNlLl9kID0gdHJ1ZTtcclxuICBwcm9taXNlID0gcHJvbWlzZS5fdyB8fCBwcm9taXNlOyAvLyB1bndyYXBcclxuICB0cnkge1xyXG4gICAgaWYgKHByb21pc2UgPT09IHZhbHVlKSB0aHJvdyBUeXBlRXJyb3IoXCJQcm9taXNlIGNhbid0IGJlIHJlc29sdmVkIGl0c2VsZlwiKTtcclxuICAgIGlmICh0aGVuID0gaXNUaGVuYWJsZSh2YWx1ZSkpIHtcclxuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgd3JhcHBlciA9IHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9OyAvLyB3cmFwXHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHRoZW4uY2FsbCh2YWx1ZSwgY3R4KCRyZXNvbHZlLCB3cmFwcGVyLCAxKSwgY3R4KCRyZWplY3QsIHdyYXBwZXIsIDEpKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAkcmVqZWN0LmNhbGwod3JhcHBlciwgZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHByb21pc2UuX3YgPSB2YWx1ZTtcclxuICAgICAgcHJvbWlzZS5fcyA9IDE7XHJcbiAgICAgIG5vdGlmeShwcm9taXNlLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgJHJlamVjdC5jYWxsKHsgX3c6IHByb21pc2UsIF9kOiBmYWxzZSB9LCBlKTsgLy8gd3JhcFxyXG4gIH1cclxufTtcclxuXHJcbi8vIGNvbnN0cnVjdG9yIHBvbHlmaWxsXHJcbmlmICghVVNFX05BVElWRSkge1xyXG4gIC8vIDI1LjQuMy4xIFByb21pc2UoZXhlY3V0b3IpXHJcbiAgJFByb21pc2UgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XHJcbiAgICBhbkluc3RhbmNlKHRoaXMsICRQcm9taXNlLCBQUk9NSVNFLCAnX2gnKTtcclxuICAgIGFGdW5jdGlvbihleGVjdXRvcik7XHJcbiAgICBJbnRlcm5hbC5jYWxsKHRoaXMpO1xyXG4gICAgdHJ5IHtcclxuICAgICAgZXhlY3V0b3IoY3R4KCRyZXNvbHZlLCB0aGlzLCAxKSwgY3R4KCRyZWplY3QsIHRoaXMsIDEpKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICAkcmVqZWN0LmNhbGwodGhpcywgZXJyKTtcclxuICAgIH1cclxuICB9O1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gIEludGVybmFsID0gZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xyXG4gICAgdGhpcy5fYyA9IFtdOyAgICAgICAgICAgICAvLyA8LSBhd2FpdGluZyByZWFjdGlvbnNcclxuICAgIHRoaXMuX2EgPSB1bmRlZmluZWQ7ICAgICAgLy8gPC0gY2hlY2tlZCBpbiBpc1VuaGFuZGxlZCByZWFjdGlvbnNcclxuICAgIHRoaXMuX3MgPSAwOyAgICAgICAgICAgICAgLy8gPC0gc3RhdGVcclxuICAgIHRoaXMuX2QgPSBmYWxzZTsgICAgICAgICAgLy8gPC0gZG9uZVxyXG4gICAgdGhpcy5fdiA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSB2YWx1ZVxyXG4gICAgdGhpcy5faCA9IDA7ICAgICAgICAgICAgICAvLyA8LSByZWplY3Rpb24gc3RhdGUsIDAgLSBkZWZhdWx0LCAxIC0gaGFuZGxlZCwgMiAtIHVuaGFuZGxlZFxyXG4gICAgdGhpcy5fbiA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBub3RpZnlcclxuICB9O1xyXG4gIEludGVybmFsLnByb3RvdHlwZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpKCRQcm9taXNlLnByb3RvdHlwZSwge1xyXG4gICAgLy8gMjUuNC41LjMgUHJvbWlzZS5wcm90b3R5cGUudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcclxuICAgIHRoZW46IGZ1bmN0aW9uIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcclxuICAgICAgdmFyIHJlYWN0aW9uID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRQcm9taXNlKSk7XHJcbiAgICAgIHJlYWN0aW9uLm9rID0gdHlwZW9mIG9uRnVsZmlsbGVkID09ICdmdW5jdGlvbicgPyBvbkZ1bGZpbGxlZCA6IHRydWU7XHJcbiAgICAgIHJlYWN0aW9uLmZhaWwgPSB0eXBlb2Ygb25SZWplY3RlZCA9PSAnZnVuY3Rpb24nICYmIG9uUmVqZWN0ZWQ7XHJcbiAgICAgIHJlYWN0aW9uLmRvbWFpbiA9IGlzTm9kZSA/IHByb2Nlc3MuZG9tYWluIDogdW5kZWZpbmVkO1xyXG4gICAgICB0aGlzLl9jLnB1c2gocmVhY3Rpb24pO1xyXG4gICAgICBpZiAodGhpcy5fYSkgdGhpcy5fYS5wdXNoKHJlYWN0aW9uKTtcclxuICAgICAgaWYgKHRoaXMuX3MpIG5vdGlmeSh0aGlzLCBmYWxzZSk7XHJcbiAgICAgIHJldHVybiByZWFjdGlvbi5wcm9taXNlO1xyXG4gICAgfSxcclxuICAgIC8vIDI1LjQuNS4xIFByb21pc2UucHJvdG90eXBlLmNhdGNoKG9uUmVqZWN0ZWQpXHJcbiAgICAnY2F0Y2gnOiBmdW5jdGlvbiAob25SZWplY3RlZCkge1xyXG4gICAgICByZXR1cm4gdGhpcy50aGVuKHVuZGVmaW5lZCwgb25SZWplY3RlZCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbiAgT3duUHJvbWlzZUNhcGFiaWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgcHJvbWlzZSA9IG5ldyBJbnRlcm5hbCgpO1xyXG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcclxuICAgIHRoaXMucmVzb2x2ZSA9IGN0eCgkcmVzb2x2ZSwgcHJvbWlzZSwgMSk7XHJcbiAgICB0aGlzLnJlamVjdCA9IGN0eCgkcmVqZWN0LCBwcm9taXNlLCAxKTtcclxuICB9O1xyXG4gIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlLmYgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uIChDKSB7XHJcbiAgICByZXR1cm4gQyA9PT0gJFByb21pc2UgfHwgQyA9PT0gV3JhcHBlclxyXG4gICAgICA/IG5ldyBPd25Qcm9taXNlQ2FwYWJpbGl0eShDKVxyXG4gICAgICA6IG5ld0dlbmVyaWNQcm9taXNlQ2FwYWJpbGl0eShDKTtcclxuICB9O1xyXG59XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCB7IFByb21pc2U6ICRQcm9taXNlIH0pO1xyXG5yZXF1aXJlKCcuL19zZXQtdG8tc3RyaW5nLXRhZycpKCRQcm9taXNlLCBQUk9NSVNFKTtcclxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKShQUk9NSVNFKTtcclxuV3JhcHBlciA9IHJlcXVpcmUoJy4vX2NvcmUnKVtQUk9NSVNFXTtcclxuXHJcbi8vIHN0YXRpY3NcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgUFJPTUlTRSwge1xyXG4gIC8vIDI1LjQuNC41IFByb21pc2UucmVqZWN0KHIpXHJcbiAgcmVqZWN0OiBmdW5jdGlvbiByZWplY3Qocikge1xyXG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eSh0aGlzKTtcclxuICAgIHZhciAkJHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xyXG4gICAgJCRyZWplY3Qocik7XHJcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xyXG4gIH1cclxufSk7XHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKExJQlJBUlkgfHwgIVVTRV9OQVRJVkUpLCBQUk9NSVNFLCB7XHJcbiAgLy8gMjUuNC40LjYgUHJvbWlzZS5yZXNvbHZlKHgpXHJcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZSh4KSB7XHJcbiAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoTElCUkFSWSAmJiB0aGlzID09PSBXcmFwcGVyID8gJFByb21pc2UgOiB0aGlzLCB4KTtcclxuICB9XHJcbn0pO1xyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoVVNFX05BVElWRSAmJiByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7XHJcbiAgJFByb21pc2UuYWxsKGl0ZXIpWydjYXRjaCddKGVtcHR5KTtcclxufSkpLCBQUk9NSVNFLCB7XHJcbiAgLy8gMjUuNC40LjEgUHJvbWlzZS5hbGwoaXRlcmFibGUpXHJcbiAgYWxsOiBmdW5jdGlvbiBhbGwoaXRlcmFibGUpIHtcclxuICAgIHZhciBDID0gdGhpcztcclxuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XHJcbiAgICB2YXIgcmVzb2x2ZSA9IGNhcGFiaWxpdHkucmVzb2x2ZTtcclxuICAgIHZhciByZWplY3QgPSBjYXBhYmlsaXR5LnJlamVjdDtcclxuICAgIHZhciByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcclxuICAgICAgdmFyIHZhbHVlcyA9IFtdO1xyXG4gICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICB2YXIgcmVtYWluaW5nID0gMTtcclxuICAgICAgZm9yT2YoaXRlcmFibGUsIGZhbHNlLCBmdW5jdGlvbiAocHJvbWlzZSkge1xyXG4gICAgICAgIHZhciAkaW5kZXggPSBpbmRleCsrO1xyXG4gICAgICAgIHZhciBhbHJlYWR5Q2FsbGVkID0gZmFsc2U7XHJcbiAgICAgICAgdmFsdWVzLnB1c2godW5kZWZpbmVkKTtcclxuICAgICAgICByZW1haW5pbmcrKztcclxuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgIGlmIChhbHJlYWR5Q2FsbGVkKSByZXR1cm47XHJcbiAgICAgICAgICBhbHJlYWR5Q2FsbGVkID0gdHJ1ZTtcclxuICAgICAgICAgIHZhbHVlc1skaW5kZXhdID0gdmFsdWU7XHJcbiAgICAgICAgICAtLXJlbWFpbmluZyB8fCByZXNvbHZlKHZhbHVlcyk7XHJcbiAgICAgICAgfSwgcmVqZWN0KTtcclxuICAgICAgfSk7XHJcbiAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xyXG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcclxuICB9LFxyXG4gIC8vIDI1LjQuNC40IFByb21pc2UucmFjZShpdGVyYWJsZSlcclxuICByYWNlOiBmdW5jdGlvbiByYWNlKGl0ZXJhYmxlKSB7XHJcbiAgICB2YXIgQyA9IHRoaXM7XHJcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KEMpO1xyXG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xyXG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xyXG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XHJcbiAgICAgICAgQy5yZXNvbHZlKHByb21pc2UpLnRoZW4oY2FwYWJpbGl0eS5yZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgaWYgKHJlc3VsdC5lKSByZWplY3QocmVzdWx0LnYpO1xyXG4gICAgcmV0dXJuIGNhcGFiaWxpdHkucHJvbWlzZTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XHJcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcclxudmFyIFdFQUtfU0VUID0gJ1dlYWtTZXQnO1xyXG5cclxuLy8gMjMuNCBXZWFrU2V0IE9iamVjdHNcclxucmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFdFQUtfU0VULCBmdW5jdGlvbiAoZ2V0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xyXG59LCB7XHJcbiAgLy8gMjMuNC4zLjEgV2Vha1NldC5wcm90b3R5cGUuYWRkKHZhbHVlKVxyXG4gIGFkZDogZnVuY3Rpb24gYWRkKHZhbHVlKSB7XHJcbiAgICByZXR1cm4gd2Vhay5kZWYodmFsaWRhdGUodGhpcywgV0VBS19TRVQpLCB2YWx1ZSwgdHJ1ZSk7XHJcbiAgfVxyXG59LCB3ZWFrLCBmYWxzZSwgdHJ1ZSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XHJcbnZhciBidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBBcnJheUJ1ZmZlciA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLkFycmF5QnVmZmVyO1xyXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xyXG52YXIgJEFycmF5QnVmZmVyID0gYnVmZmVyLkFycmF5QnVmZmVyO1xyXG52YXIgJERhdGFWaWV3ID0gYnVmZmVyLkRhdGFWaWV3O1xyXG52YXIgJGlzVmlldyA9ICR0eXBlZC5BQlYgJiYgQXJyYXlCdWZmZXIuaXNWaWV3O1xyXG52YXIgJHNsaWNlID0gJEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZTtcclxudmFyIFZJRVcgPSAkdHlwZWQuVklFVztcclxudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuVyArICRleHBvcnQuRiAqIChBcnJheUJ1ZmZlciAhPT0gJEFycmF5QnVmZmVyKSwgeyBBcnJheUJ1ZmZlcjogJEFycmF5QnVmZmVyIH0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhJHR5cGVkLkNPTlNUUiwgQVJSQVlfQlVGRkVSLCB7XHJcbiAgLy8gMjQuMS4zLjEgQXJyYXlCdWZmZXIuaXNWaWV3KGFyZylcclxuICBpc1ZpZXc6IGZ1bmN0aW9uIGlzVmlldyhpdCkge1xyXG4gICAgcmV0dXJuICRpc1ZpZXcgJiYgJGlzVmlldyhpdCkgfHwgaXNPYmplY3QoaXQpICYmIFZJRVcgaW4gaXQ7XHJcbiAgfVxyXG59KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5VICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuICFuZXcgJEFycmF5QnVmZmVyKDIpLnNsaWNlKDEsIHVuZGVmaW5lZCkuYnl0ZUxlbmd0aDtcclxufSksIEFSUkFZX0JVRkZFUiwge1xyXG4gIC8vIDI0LjEuNC4zIEFycmF5QnVmZmVyLnByb3RvdHlwZS5zbGljZShzdGFydCwgZW5kKVxyXG4gIHNsaWNlOiBmdW5jdGlvbiBzbGljZShzdGFydCwgZW5kKSB7XHJcbiAgICBpZiAoJHNsaWNlICE9PSB1bmRlZmluZWQgJiYgZW5kID09PSB1bmRlZmluZWQpIHJldHVybiAkc2xpY2UuY2FsbChhbk9iamVjdCh0aGlzKSwgc3RhcnQpOyAvLyBGRiBmaXhcclxuICAgIHZhciBsZW4gPSBhbk9iamVjdCh0aGlzKS5ieXRlTGVuZ3RoO1xyXG4gICAgdmFyIGZpcnN0ID0gdG9BYnNvbHV0ZUluZGV4KHN0YXJ0LCBsZW4pO1xyXG4gICAgdmFyIGZpbiA9IHRvQWJzb2x1dGVJbmRleChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IGVuZCwgbGVuKTtcclxuICAgIHZhciByZXN1bHQgPSBuZXcgKHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCAkQXJyYXlCdWZmZXIpKSh0b0xlbmd0aChmaW4gLSBmaXJzdCkpO1xyXG4gICAgdmFyIHZpZXdTID0gbmV3ICREYXRhVmlldyh0aGlzKTtcclxuICAgIHZhciB2aWV3VCA9IG5ldyAkRGF0YVZpZXcocmVzdWx0KTtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICB3aGlsZSAoZmlyc3QgPCBmaW4pIHtcclxuICAgICAgdmlld1Quc2V0VWludDgoaW5kZXgrKywgdmlld1MuZ2V0VWludDgoZmlyc3QrKykpO1xyXG4gICAgfSByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufSk7XHJcblxyXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKEFSUkFZX0JVRkZFUik7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3R5cGVkJykuQUJWLCB7XHJcbiAgRGF0YVZpZXc6IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpLkRhdGFWaWV3XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQ4JywgMSwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gSW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBVaW50OEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBVaW50OENsYW1wZWRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgfTtcclxufSwgdHJ1ZSk7XHJcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gSW50MTZBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgfTtcclxufSk7XHJcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ1VpbnQxNicsIDIsIGZ1bmN0aW9uIChpbml0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBJbnQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gVWludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDMyJywgNCwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQzMkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnRmxvYXQ2NCcsIDgsIGZ1bmN0aW9uIChpbml0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIEZsb2F0NjRBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDI2LjEuMSBSZWZsZWN0LmFwcGx5KHRhcmdldCwgdGhpc0FyZ3VtZW50LCBhcmd1bWVudHNMaXN0KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHJBcHBseSA9IChyZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0IHx8IHt9KS5hcHBseTtcclxudmFyIGZBcHBseSA9IEZ1bmN0aW9uLmFwcGx5O1xyXG4vLyBNUyBFZGdlIGFyZ3VtZW50c0xpc3QgYXJndW1lbnQgaXMgb3B0aW9uYWxcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgckFwcGx5KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XHJcbn0pLCAnUmVmbGVjdCcsIHtcclxuICBhcHBseTogZnVuY3Rpb24gYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpIHtcclxuICAgIHZhciBUID0gYUZ1bmN0aW9uKHRhcmdldCk7XHJcbiAgICB2YXIgTCA9IGFuT2JqZWN0KGFyZ3VtZW50c0xpc3QpO1xyXG4gICAgcmV0dXJuIHJBcHBseSA/IHJBcHBseShULCB0aGlzQXJndW1lbnQsIEwpIDogZkFwcGx5LmNhbGwoVCwgdGhpc0FyZ3VtZW50LCBMKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjIgUmVmbGVjdC5jb25zdHJ1Y3QodGFyZ2V0LCBhcmd1bWVudHNMaXN0IFssIG5ld1RhcmdldF0pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyIGJpbmQgPSByZXF1aXJlKCcuL19iaW5kJyk7XHJcbnZhciByQ29uc3RydWN0ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmNvbnN0cnVjdDtcclxuXHJcbi8vIE1TIEVkZ2Ugc3VwcG9ydHMgb25seSAyIGFyZ3VtZW50cyBhbmQgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxyXG4vLyBGRiBOaWdodGx5IHNldHMgdGhpcmQgYXJndW1lbnQgYXMgYG5ldy50YXJnZXRgLCBidXQgZG9lcyBub3QgY3JlYXRlIGB0aGlzYCBmcm9tIGl0XHJcbnZhciBORVdfVEFSR0VUX0JVRyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICBmdW5jdGlvbiBGKCkgeyAvKiBlbXB0eSAqLyB9XHJcbiAgcmV0dXJuICEockNvbnN0cnVjdChmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0sIFtdLCBGKSBpbnN0YW5jZW9mIEYpO1xyXG59KTtcclxudmFyIEFSR1NfQlVHID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICByQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSk7XHJcbn0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTkVXX1RBUkdFVF9CVUcgfHwgQVJHU19CVUcpLCAnUmVmbGVjdCcsIHtcclxuICBjb25zdHJ1Y3Q6IGZ1bmN0aW9uIGNvbnN0cnVjdChUYXJnZXQsIGFyZ3MgLyogLCBuZXdUYXJnZXQgKi8pIHtcclxuICAgIGFGdW5jdGlvbihUYXJnZXQpO1xyXG4gICAgYW5PYmplY3QoYXJncyk7XHJcbiAgICB2YXIgbmV3VGFyZ2V0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyBUYXJnZXQgOiBhRnVuY3Rpb24oYXJndW1lbnRzWzJdKTtcclxuICAgIGlmIChBUkdTX0JVRyAmJiAhTkVXX1RBUkdFVF9CVUcpIHJldHVybiByQ29uc3RydWN0KFRhcmdldCwgYXJncywgbmV3VGFyZ2V0KTtcclxuICAgIGlmIChUYXJnZXQgPT0gbmV3VGFyZ2V0KSB7XHJcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgb3B0aW1pemF0aW9uIGZvciAwLTQgYXJndW1lbnRzXHJcbiAgICAgIHN3aXRjaCAoYXJncy5sZW5ndGgpIHtcclxuICAgICAgICBjYXNlIDA6IHJldHVybiBuZXcgVGFyZ2V0KCk7XHJcbiAgICAgICAgY2FzZSAxOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdKTtcclxuICAgICAgICBjYXNlIDI6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0pO1xyXG4gICAgICAgIGNhc2UgMzogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XHJcbiAgICAgICAgY2FzZSA0OiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdLCBhcmdzWzNdKTtcclxuICAgICAgfVxyXG4gICAgICAvLyB3L28gYWx0ZXJlZCBuZXdUYXJnZXQsIGxvdCBvZiBhcmd1bWVudHMgY2FzZVxyXG4gICAgICB2YXIgJGFyZ3MgPSBbbnVsbF07XHJcbiAgICAgICRhcmdzLnB1c2guYXBwbHkoJGFyZ3MsIGFyZ3MpO1xyXG4gICAgICByZXR1cm4gbmV3IChiaW5kLmFwcGx5KFRhcmdldCwgJGFyZ3MpKSgpO1xyXG4gICAgfVxyXG4gICAgLy8gd2l0aCBhbHRlcmVkIG5ld1RhcmdldCwgbm90IHN1cHBvcnQgYnVpbHQtaW4gY29uc3RydWN0b3JzXHJcbiAgICB2YXIgcHJvdG8gPSBuZXdUYXJnZXQucHJvdG90eXBlO1xyXG4gICAgdmFyIGluc3RhbmNlID0gY3JlYXRlKGlzT2JqZWN0KHByb3RvKSA/IHByb3RvIDogT2JqZWN0LnByb3RvdHlwZSk7XHJcbiAgICB2YXIgcmVzdWx0ID0gRnVuY3Rpb24uYXBwbHkuY2FsbChUYXJnZXQsIGluc3RhbmNlLCBhcmdzKTtcclxuICAgIHJldHVybiBpc09iamVjdChyZXN1bHQpID8gcmVzdWx0IDogaW5zdGFuY2U7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjYuMS4zIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcylcclxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcclxuXHJcbi8vIE1TIEVkZ2UgaGFzIGJyb2tlbiBSZWZsZWN0LmRlZmluZVByb3BlcnR5IC0gdGhyb3dpbmcgaW5zdGVhZCBvZiByZXR1cm5pbmcgZmFsc2VcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICBSZWZsZWN0LmRlZmluZVByb3BlcnR5KGRQLmYoe30sIDEsIHsgdmFsdWU6IDEgfSksIDEsIHsgdmFsdWU6IDIgfSk7XHJcbn0pLCAnUmVmbGVjdCcsIHtcclxuICBkZWZpbmVQcm9wZXJ0eTogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcykge1xyXG4gICAgYW5PYmplY3QodGFyZ2V0KTtcclxuICAgIHByb3BlcnR5S2V5ID0gdG9QcmltaXRpdmUocHJvcGVydHlLZXksIHRydWUpO1xyXG4gICAgYW5PYmplY3QoYXR0cmlidXRlcyk7XHJcbiAgICB0cnkge1xyXG4gICAgICBkUC5mKHRhcmdldCwgcHJvcGVydHlLZXksIGF0dHJpYnV0ZXMpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuNCBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHlLZXkpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcclxuICBkZWxldGVQcm9wZXJ0eTogZnVuY3Rpb24gZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgdmFyIGRlc2MgPSBnT1BEKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcclxuICAgIHJldHVybiBkZXNjICYmICFkZXNjLmNvbmZpZ3VyYWJsZSA/IGZhbHNlIDogZGVsZXRlIHRhcmdldFtwcm9wZXJ0eUtleV07XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyNi4xLjUgUmVmbGVjdC5lbnVtZXJhdGUodGFyZ2V0KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIEVudW1lcmF0ZSA9IGZ1bmN0aW9uIChpdGVyYXRlZCkge1xyXG4gIHRoaXMuX3QgPSBhbk9iamVjdChpdGVyYXRlZCk7IC8vIHRhcmdldFxyXG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcclxuICB2YXIga2V5cyA9IHRoaXMuX2sgPSBbXTsgICAgICAvLyBrZXlzXHJcbiAgdmFyIGtleTtcclxuICBmb3IgKGtleSBpbiBpdGVyYXRlZCkga2V5cy5wdXNoKGtleSk7XHJcbn07XHJcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoRW51bWVyYXRlLCAnT2JqZWN0JywgZnVuY3Rpb24gKCkge1xyXG4gIHZhciB0aGF0ID0gdGhpcztcclxuICB2YXIga2V5cyA9IHRoYXQuX2s7XHJcbiAgdmFyIGtleTtcclxuICBkbyB7XHJcbiAgICBpZiAodGhhdC5faSA+PSBrZXlzLmxlbmd0aCkgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xyXG4gIH0gd2hpbGUgKCEoKGtleSA9IGtleXNbdGhhdC5faSsrXSkgaW4gdGhhdC5fdCkpO1xyXG4gIHJldHVybiB7IHZhbHVlOiBrZXksIGRvbmU6IGZhbHNlIH07XHJcbn0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIGVudW1lcmF0ZTogZnVuY3Rpb24gZW51bWVyYXRlKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIG5ldyBFbnVtZXJhdGUodGFyZ2V0KTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjYgUmVmbGVjdC5nZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSBbLCByZWNlaXZlcl0pXHJcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxuXHJcbmZ1bmN0aW9uIGdldCh0YXJnZXQsIHByb3BlcnR5S2V5IC8qICwgcmVjZWl2ZXIgKi8pIHtcclxuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHRhcmdldCA6IGFyZ3VtZW50c1syXTtcclxuICB2YXIgZGVzYywgcHJvdG87XHJcbiAgaWYgKGFuT2JqZWN0KHRhcmdldCkgPT09IHJlY2VpdmVyKSByZXR1cm4gdGFyZ2V0W3Byb3BlcnR5S2V5XTtcclxuICBpZiAoZGVzYyA9IGdPUEQuZih0YXJnZXQsIHByb3BlcnR5S2V5KSkgcmV0dXJuIGhhcyhkZXNjLCAndmFsdWUnKVxyXG4gICAgPyBkZXNjLnZhbHVlXHJcbiAgICA6IGRlc2MuZ2V0ICE9PSB1bmRlZmluZWRcclxuICAgICAgPyBkZXNjLmdldC5jYWxsKHJlY2VpdmVyKVxyXG4gICAgICA6IHVuZGVmaW5lZDtcclxuICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkgcmV0dXJuIGdldChwcm90bywgcHJvcGVydHlLZXksIHJlY2VpdmVyKTtcclxufVxyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBnZXQ6IGdldCB9KTtcclxuIiwiLy8gMjYuMS43IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHlLZXkpXHJcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSkge1xyXG4gICAgcmV0dXJuIGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjYuMS44IFJlZmxlY3QuZ2V0UHJvdG90eXBlT2YodGFyZ2V0KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZ2V0UHJvdG8gPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIGdldFByb3RvdHlwZU9mOiBmdW5jdGlvbiBnZXRQcm90b3R5cGVPZih0YXJnZXQpIHtcclxuICAgIHJldHVybiBnZXRQcm90byhhbk9iamVjdCh0YXJnZXQpKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjkgUmVmbGVjdC5oYXModGFyZ2V0LCBwcm9wZXJ0eUtleSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcclxuICBoYXM6IGZ1bmN0aW9uIGhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICByZXR1cm4gcHJvcGVydHlLZXkgaW4gdGFyZ2V0O1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuMTAgUmVmbGVjdC5pc0V4dGVuc2libGUodGFyZ2V0KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyICRpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIGlzRXh0ZW5zaWJsZTogZnVuY3Rpb24gaXNFeHRlbnNpYmxlKHRhcmdldCkge1xyXG4gICAgYW5PYmplY3QodGFyZ2V0KTtcclxuICAgIHJldHVybiAkaXNFeHRlbnNpYmxlID8gJGlzRXh0ZW5zaWJsZSh0YXJnZXQpIDogdHJ1ZTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjExIFJlZmxlY3Qub3duS2V5cyh0YXJnZXQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IG93bktleXM6IHJlcXVpcmUoJy4vX293bi1rZXlzJykgfSk7XHJcbiIsIi8vIDI2LjEuMTIgUmVmbGVjdC5wcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgJHByZXZlbnRFeHRlbnNpb25zID0gT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIHByZXZlbnRFeHRlbnNpb25zOiBmdW5jdGlvbiBwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpIHtcclxuICAgIGFuT2JqZWN0KHRhcmdldCk7XHJcbiAgICB0cnkge1xyXG4gICAgICBpZiAoJHByZXZlbnRFeHRlbnNpb25zKSAkcHJldmVudEV4dGVuc2lvbnModGFyZ2V0KTtcclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjEzIFJlZmxlY3Quc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgWywgcmVjZWl2ZXJdKVxyXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuXHJcbmZ1bmN0aW9uIHNldCh0YXJnZXQsIHByb3BlcnR5S2V5LCBWIC8qICwgcmVjZWl2ZXIgKi8pIHtcclxuICB2YXIgcmVjZWl2ZXIgPSBhcmd1bWVudHMubGVuZ3RoIDwgNCA/IHRhcmdldCA6IGFyZ3VtZW50c1szXTtcclxuICB2YXIgb3duRGVzYyA9IGdPUEQuZihhbk9iamVjdCh0YXJnZXQpLCBwcm9wZXJ0eUtleSk7XHJcbiAgdmFyIGV4aXN0aW5nRGVzY3JpcHRvciwgcHJvdG87XHJcbiAgaWYgKCFvd25EZXNjKSB7XHJcbiAgICBpZiAoaXNPYmplY3QocHJvdG8gPSBnZXRQcm90b3R5cGVPZih0YXJnZXQpKSkge1xyXG4gICAgICByZXR1cm4gc2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgViwgcmVjZWl2ZXIpO1xyXG4gICAgfVxyXG4gICAgb3duRGVzYyA9IGNyZWF0ZURlc2MoMCk7XHJcbiAgfVxyXG4gIGlmIChoYXMob3duRGVzYywgJ3ZhbHVlJykpIHtcclxuICAgIGlmIChvd25EZXNjLndyaXRhYmxlID09PSBmYWxzZSB8fCAhaXNPYmplY3QocmVjZWl2ZXIpKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yID0gZ09QRC5mKHJlY2VpdmVyLCBwcm9wZXJ0eUtleSkpIHtcclxuICAgICAgaWYgKGV4aXN0aW5nRGVzY3JpcHRvci5nZXQgfHwgZXhpc3RpbmdEZXNjcmlwdG9yLnNldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iud3JpdGFibGUgPT09IGZhbHNlKSByZXR1cm4gZmFsc2U7XHJcbiAgICAgIGV4aXN0aW5nRGVzY3JpcHRvci52YWx1ZSA9IFY7XHJcbiAgICAgIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBleGlzdGluZ0Rlc2NyaXB0b3IpO1xyXG4gICAgfSBlbHNlIGRQLmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5LCBjcmVhdGVEZXNjKDAsIFYpKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH1cclxuICByZXR1cm4gb3duRGVzYy5zZXQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogKG93bkRlc2Muc2V0LmNhbGwocmVjZWl2ZXIsIFYpLCB0cnVlKTtcclxufVxyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgeyBzZXQ6IHNldCB9KTtcclxuIiwiLy8gMjYuMS4xNCBSZWZsZWN0LnNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBzZXRQcm90byA9IHJlcXVpcmUoJy4vX3NldC1wcm90bycpO1xyXG5cclxuaWYgKHNldFByb3RvKSAkZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgc2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKHRhcmdldCwgcHJvdG8pIHtcclxuICAgIHNldFByb3RvLmNoZWNrKHRhcmdldCwgcHJvdG8pO1xyXG4gICAgdHJ5IHtcclxuICAgICAgc2V0UHJvdG8uc2V0KHRhcmdldCwgcHJvdG8pO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkaW5jbHVkZXMgPSByZXF1aXJlKCcuL19hcnJheS1pbmNsdWRlcycpKHRydWUpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcclxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoZWwgLyogLCBmcm9tSW5kZXggPSAwICovKSB7XHJcbiAgICByZXR1cm4gJGluY2x1ZGVzKHRoaXMsIGVsLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgfVxyXG59KTtcclxuXHJcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdpbmNsdWRlcycpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtZmxhdE1hcC8jc2VjLUFycmF5LnByb3RvdHlwZS5mbGF0TWFwXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBmbGF0dGVuSW50b0FycmF5ID0gcmVxdWlyZSgnLi9fZmxhdHRlbi1pbnRvLWFycmF5Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIGFycmF5U3BlY2llc0NyZWF0ZSA9IHJlcXVpcmUoJy4vX2FycmF5LXNwZWNpZXMtY3JlYXRlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xyXG4gIGZsYXRNYXA6IGZ1bmN0aW9uIGZsYXRNYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgICB2YXIgc291cmNlTGVuLCBBO1xyXG4gICAgYUZ1bmN0aW9uKGNhbGxiYWNrZm4pO1xyXG4gICAgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcclxuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCAxLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gICAgcmV0dXJuIEE7XHJcbiAgfVxyXG59KTtcclxuXHJcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0TWFwJyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXR0ZW5cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XHJcbiAgZmxhdHRlbjogZnVuY3Rpb24gZmxhdHRlbigvKiBkZXB0aEFyZyA9IDEgKi8pIHtcclxuICAgIHZhciBkZXB0aEFyZyA9IGFyZ3VtZW50c1swXTtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgICB2YXIgc291cmNlTGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgdmFyIEEgPSBhcnJheVNwZWNpZXNDcmVhdGUoTywgMCk7XHJcbiAgICBmbGF0dGVuSW50b0FycmF5KEEsIE8sIE8sIHNvdXJjZUxlbiwgMCwgZGVwdGhBcmcgPT09IHVuZGVmaW5lZCA/IDEgOiB0b0ludGVnZXIoZGVwdGhBcmcpKTtcclxuICAgIHJldHVybiBBO1xyXG4gIH1cclxufSk7XHJcblxyXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmxhdHRlbicpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRoaWFzYnluZW5zL1N0cmluZy5wcm90b3R5cGUuYXRcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1hdCcpKHRydWUpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XHJcbiAgYXQ6IGZ1bmN0aW9uIGF0KHBvcykge1xyXG4gICAgcmV0dXJuICRhdCh0aGlzLCBwb3MpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XHJcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XHJcblxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXHJcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XHJcbiAgcGFkU3RhcnQ6IGZ1bmN0aW9uIHBhZFN0YXJ0KG1heExlbmd0aCAvKiAsIGZpbGxTdHJpbmcgPSAnICcgKi8pIHtcclxuICAgIHJldHVybiAkcGFkKHRoaXMsIG1heExlbmd0aCwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQsIHRydWUpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtc3RyaW5nLXBhZC1zdGFydC1lbmRcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYWQgPSByZXF1aXJlKCcuL19zdHJpbmctcGFkJyk7XHJcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XHJcblxyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMjgwXHJcbnZhciBXRUJLSVRfQlVHID0gL1ZlcnNpb25cXC8xMFxcLlxcZCsoXFwuXFxkKyk/KCBNb2JpbGVcXC9cXHcrKT8gU2FmYXJpXFwvLy50ZXN0KHVzZXJBZ2VudCk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIFdFQktJVF9CVUcsICdTdHJpbmcnLCB7XHJcbiAgcGFkRW5kOiBmdW5jdGlvbiBwYWRFbmQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xyXG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgZmFsc2UpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxyXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltTGVmdCcsIGZ1bmN0aW9uICgkdHJpbSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiB0cmltTGVmdCgpIHtcclxuICAgIHJldHVybiAkdHJpbSh0aGlzLCAxKTtcclxuICB9O1xyXG59LCAndHJpbVN0YXJ0Jyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3NlYm1hcmtiYWdlL2VjbWFzY3JpcHQtc3RyaW5nLWxlZnQtcmlnaHQtdHJpbVxyXG5yZXF1aXJlKCcuL19zdHJpbmctdHJpbScpKCd0cmltUmlnaHQnLCBmdW5jdGlvbiAoJHRyaW0pIHtcclxuICByZXR1cm4gZnVuY3Rpb24gdHJpbVJpZ2h0KCkge1xyXG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDIpO1xyXG4gIH07XHJcbn0sICd0cmltRW5kJyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9TdHJpbmcucHJvdG90eXBlLm1hdGNoQWxsL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xyXG52YXIgZ2V0RmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xyXG52YXIgUmVnRXhwUHJvdG8gPSBSZWdFeHAucHJvdG90eXBlO1xyXG5cclxudmFyICRSZWdFeHBTdHJpbmdJdGVyYXRvciA9IGZ1bmN0aW9uIChyZWdleHAsIHN0cmluZykge1xyXG4gIHRoaXMuX3IgPSByZWdleHA7XHJcbiAgdGhpcy5fcyA9IHN0cmluZztcclxufTtcclxuXHJcbnJlcXVpcmUoJy4vX2l0ZXItY3JlYXRlJykoJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yLCAnUmVnRXhwIFN0cmluZycsIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgdmFyIG1hdGNoID0gdGhpcy5fci5leGVjKHRoaXMuX3MpO1xyXG4gIHJldHVybiB7IHZhbHVlOiBtYXRjaCwgZG9uZTogbWF0Y2ggPT09IG51bGwgfTtcclxufSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcclxuICBtYXRjaEFsbDogZnVuY3Rpb24gbWF0Y2hBbGwocmVnZXhwKSB7XHJcbiAgICBkZWZpbmVkKHRoaXMpO1xyXG4gICAgaWYgKCFpc1JlZ0V4cChyZWdleHApKSB0aHJvdyBUeXBlRXJyb3IocmVnZXhwICsgJyBpcyBub3QgYSByZWdleHAhJyk7XHJcbiAgICB2YXIgUyA9IFN0cmluZyh0aGlzKTtcclxuICAgIHZhciBmbGFncyA9ICdmbGFncycgaW4gUmVnRXhwUHJvdG8gPyBTdHJpbmcocmVnZXhwLmZsYWdzKSA6IGdldEZsYWdzLmNhbGwocmVnZXhwKTtcclxuICAgIHZhciByeCA9IG5ldyBSZWdFeHAocmVnZXhwLnNvdXJjZSwgfmZsYWdzLmluZGV4T2YoJ2cnKSA/IGZsYWdzIDogJ2cnICsgZmxhZ3MpO1xyXG4gICAgcngubGFzdEluZGV4ID0gdG9MZW5ndGgocmVnZXhwLmxhc3RJbmRleCk7XHJcbiAgICByZXR1cm4gbmV3ICRSZWdFeHBTdHJpbmdJdGVyYXRvcihyeCwgUyk7XHJcbiAgfVxyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdhc3luY0l0ZXJhdG9yJyk7XHJcbiIsInJlcXVpcmUoJy4vX3drcy1kZWZpbmUnKSgnb2JzZXJ2YWJsZScpO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtZ2V0b3ducHJvcGVydHlkZXNjcmlwdG9yc1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4vX293bi1rZXlzJyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciBnT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcclxudmFyIGNyZWF0ZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fY3JlYXRlLXByb3BlcnR5Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcclxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKG9iamVjdCkge1xyXG4gICAgdmFyIE8gPSB0b0lPYmplY3Qob2JqZWN0KTtcclxuICAgIHZhciBnZXREZXNjID0gZ09QRC5mO1xyXG4gICAgdmFyIGtleXMgPSBvd25LZXlzKE8pO1xyXG4gICAgdmFyIHJlc3VsdCA9IHt9O1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIGtleSwgZGVzYztcclxuICAgIHdoaWxlIChrZXlzLmxlbmd0aCA+IGkpIHtcclxuICAgICAgZGVzYyA9IGdldERlc2MoTywga2V5ID0ga2V5c1tpKytdKTtcclxuICAgICAgaWYgKGRlc2MgIT09IHVuZGVmaW5lZCkgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBrZXksIGRlc2MpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYmplY3QtdmFsdWVzLWVudHJpZXNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICR2YWx1ZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKShmYWxzZSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHtcclxuICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcyhpdCkge1xyXG4gICAgcmV0dXJuICR2YWx1ZXMoaXQpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGVudHJpZXMgPSByZXF1aXJlKCcuL19vYmplY3QtdG8tYXJyYXknKSh0cnVlKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xyXG4gIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoaXQpIHtcclxuICAgIHJldHVybiAkZW50cmllcyhpdCk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG5cclxuLy8gQi4yLjIuMiBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2RlZmluZUdldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZUdldHRlcl9fKFAsIGdldHRlcikge1xyXG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgZ2V0OiBhRnVuY3Rpb24oZ2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxuXHJcbi8vIEIuMi4yLjMgT2JqZWN0LnByb3RvdHlwZS5fX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcilcclxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XHJcbiAgX19kZWZpbmVTZXR0ZXJfXzogZnVuY3Rpb24gX19kZWZpbmVTZXR0ZXJfXyhQLCBzZXR0ZXIpIHtcclxuICAgICRkZWZpbmVQcm9wZXJ0eS5mKHRvT2JqZWN0KHRoaXMpLCBQLCB7IHNldDogYUZ1bmN0aW9uKHNldHRlciksIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xyXG5cclxuLy8gQi4yLjIuNCBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwR2V0dGVyX18oUClcclxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XHJcbiAgX19sb29rdXBHZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBHZXR0ZXJfXyhQKSB7XHJcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xyXG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcclxuICAgIHZhciBEO1xyXG4gICAgZG8ge1xyXG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuZ2V0O1xyXG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKS5mO1xyXG5cclxuLy8gQi4yLjIuNSBPYmplY3QucHJvdG90eXBlLl9fbG9va3VwU2V0dGVyX18oUClcclxucmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAkZXhwb3J0KCRleHBvcnQuUCArIHJlcXVpcmUoJy4vX29iamVjdC1mb3JjZWQtcGFtJyksICdPYmplY3QnLCB7XHJcbiAgX19sb29rdXBTZXR0ZXJfXzogZnVuY3Rpb24gX19sb29rdXBTZXR0ZXJfXyhQKSB7XHJcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xyXG4gICAgdmFyIEsgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcclxuICAgIHZhciBEO1xyXG4gICAgZG8ge1xyXG4gICAgICBpZiAoRCA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBLKSkgcmV0dXJuIEQuc2V0O1xyXG4gICAgfSB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ01hcCcsIHsgdG9KU09OOiByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXRvLWpzb24nKSgnTWFwJykgfSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnU2V0JywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdTZXQnKSB9KTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLm9mXHJcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ01hcCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQub2ZcclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnU2V0Jyk7XHJcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWttYXAub2ZcclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha01hcCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0Lm9mXHJcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLW9mJykoJ1dlYWtTZXQnKTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtbWFwLmZyb21cclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdNYXAnKTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtc2V0LmZyb21cclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdTZXQnKTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5mcm9tXHJcbnJlcXVpcmUoJy4vX3NldC1jb2xsZWN0aW9uLWZyb20nKSgnV2Vha01hcCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrc2V0LmZyb21cclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrU2V0Jyk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLWdsb2JhbFxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1N5c3RlbScsIHsgZ2xvYmFsOiByZXF1aXJlKCcuL19nbG9iYWwnKSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9wcm9wb3NhbC1pcy1lcnJvclxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ0Vycm9yJywge1xyXG4gIGlzRXJyb3I6IGZ1bmN0aW9uIGlzRXJyb3IoaXQpIHtcclxuICAgIHJldHVybiBjb2YoaXQpID09PSAnRXJyb3InO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBjbGFtcDogZnVuY3Rpb24gY2xhbXAoeCwgbG93ZXIsIHVwcGVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5taW4odXBwZXIsIE1hdGgubWF4KGxvd2VyLCB4KSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBERUdfUEVSX1JBRDogTWF0aC5QSSAvIDE4MCB9KTtcclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgUkFEX1BFUl9ERUcgPSAxODAgLyBNYXRoLlBJO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGRlZ3JlZXM6IGZ1bmN0aW9uIGRlZ3JlZXMocmFkaWFucykge1xyXG4gICAgcmV0dXJuIHJhZGlhbnMgKiBSQURfUEVSX0RFRztcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBzY2FsZSA9IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKTtcclxudmFyIGZyb3VuZCA9IHJlcXVpcmUoJy4vX21hdGgtZnJvdW5kJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgZnNjYWxlOiBmdW5jdGlvbiBmc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSB7XHJcbiAgICByZXR1cm4gZnJvdW5kKHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgaWFkZGg6IGZ1bmN0aW9uIGlhZGRoKHgwLCB4MSwgeTAsIHkxKSB7XHJcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XHJcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XHJcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XHJcbiAgICByZXR1cm4gJHgxICsgKHkxID4+PiAwKSArICgoJHgwICYgJHkwIHwgKCR4MCB8ICR5MCkgJiB+KCR4MCArICR5MCA+Pj4gMCkpID4+PiAzMSkgfCAwO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgaXN1Ymg6IGZ1bmN0aW9uIGlzdWJoKHgwLCB4MSwgeTAsIHkxKSB7XHJcbiAgICB2YXIgJHgwID0geDAgPj4+IDA7XHJcbiAgICB2YXIgJHgxID0geDEgPj4+IDA7XHJcbiAgICB2YXIgJHkwID0geTAgPj4+IDA7XHJcbiAgICByZXR1cm4gJHgxIC0gKHkxID4+PiAwKSAtICgofiR4MCAmICR5MCB8IH4oJHgwIF4gJHkwKSAmICR4MCAtICR5MCA+Pj4gMCkgPj4+IDMxKSB8IDA7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBpbXVsaDogZnVuY3Rpb24gaW11bGgodSwgdikge1xyXG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcclxuICAgIHZhciAkdSA9ICt1O1xyXG4gICAgdmFyICR2ID0gK3Y7XHJcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcclxuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xyXG4gICAgdmFyIHUxID0gJHUgPj4gMTY7XHJcbiAgICB2YXIgdjEgPSAkdiA+PiAxNjtcclxuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcclxuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+PiAxNik7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBSQURfUEVSX0RFRzogMTgwIC8gTWF0aC5QSSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgREVHX1BFUl9SQUQgPSBNYXRoLlBJIC8gMTgwO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIHJhZGlhbnM6IGZ1bmN0aW9uIHJhZGlhbnMoZGVncmVlcykge1xyXG4gICAgcmV0dXJuIGRlZ3JlZXMgKiBERUdfUEVSX1JBRDtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNjYWxlOiByZXF1aXJlKCcuL19tYXRoLXNjYWxlJykgfSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL0JyZW5kYW5FaWNoLzQyOTRkNWMyMTJhNmQyMjU0NzAzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgdW11bGg6IGZ1bmN0aW9uIHVtdWxoKHUsIHYpIHtcclxuICAgIHZhciBVSU5UMTYgPSAweGZmZmY7XHJcbiAgICB2YXIgJHUgPSArdTtcclxuICAgIHZhciAkdiA9ICt2O1xyXG4gICAgdmFyIHUwID0gJHUgJiBVSU5UMTY7XHJcbiAgICB2YXIgdjAgPSAkdiAmIFVJTlQxNjtcclxuICAgIHZhciB1MSA9ICR1ID4+PiAxNjtcclxuICAgIHZhciB2MSA9ICR2ID4+PiAxNjtcclxuICAgIHZhciB0ID0gKHUxICogdjAgPj4+IDApICsgKHUwICogdjAgPj4+IDE2KTtcclxuICAgIHJldHVybiB1MSAqIHYxICsgKHQgPj4+IDE2KSArICgodTAgKiB2MSA+Pj4gMCkgKyAodCAmIFVJTlQxNikgPj4+IDE2KTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwOi8vamZiYXN0aWVuLmdpdGh1Yi5pby9wYXBlcnMvTWF0aC5zaWduYml0Lmh0bWxcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2lnbmJpdDogZnVuY3Rpb24gc2lnbmJpdCh4KSB7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gIHJldHVybiAoeCA9ICt4KSAhPSB4ID8geCA6IHggPT0gMCA/IDEgLyB4ID09IEluZmluaXR5IDogeCA+IDA7XHJcbn0gfSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtZmluYWxseVxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XHJcbnZhciBwcm9taXNlUmVzb2x2ZSA9IHJlcXVpcmUoJy4vX3Byb21pc2UtcmVzb2x2ZScpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdQcm9taXNlJywgeyAnZmluYWxseSc6IGZ1bmN0aW9uIChvbkZpbmFsbHkpIHtcclxuICB2YXIgQyA9IHNwZWNpZXNDb25zdHJ1Y3Rvcih0aGlzLCBjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpO1xyXG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIG9uRmluYWxseSA9PSAnZnVuY3Rpb24nO1xyXG4gIHJldHVybiB0aGlzLnRoZW4oXHJcbiAgICBpc0Z1bmN0aW9uID8gZnVuY3Rpb24gKHgpIHtcclxuICAgICAgcmV0dXJuIHByb21pc2VSZXNvbHZlKEMsIG9uRmluYWxseSgpKS50aGVuKGZ1bmN0aW9uICgpIHsgcmV0dXJuIHg7IH0pO1xyXG4gICAgfSA6IG9uRmluYWxseSxcclxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoZSkge1xyXG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyB0aHJvdyBlOyB9KTtcclxuICAgIH0gOiBvbkZpbmFsbHlcclxuICApO1xyXG59IH0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLXByb21pc2UtdHJ5XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcclxudmFyIHBlcmZvcm0gPSByZXF1aXJlKCcuL19wZXJmb3JtJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1Byb21pc2UnLCB7ICd0cnknOiBmdW5jdGlvbiAoY2FsbGJhY2tmbikge1xyXG4gIHZhciBwcm9taXNlQ2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5LmYodGhpcyk7XHJcbiAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oY2FsbGJhY2tmbik7XHJcbiAgKHJlc3VsdC5lID8gcHJvbWlzZUNhcGFiaWxpdHkucmVqZWN0IDogcHJvbWlzZUNhcGFiaWxpdHkucmVzb2x2ZSkocmVzdWx0LnYpO1xyXG4gIHJldHVybiBwcm9taXNlQ2FwYWJpbGl0eS5wcm9taXNlO1xyXG59IH0pO1xyXG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcclxudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5zZXQ7XHJcblxyXG5tZXRhZGF0YS5leHAoeyBkZWZpbmVNZXRhZGF0YTogZnVuY3Rpb24gZGVmaW5lTWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsIHRhcmdldCwgdGFyZ2V0S2V5KSB7XHJcbiAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgYW5PYmplY3QodGFyZ2V0KSwgdG9NZXRhS2V5KHRhcmdldEtleSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcclxudmFyIGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAgPSBtZXRhZGF0YS5tYXA7XHJcbnZhciBzdG9yZSA9IG1ldGFkYXRhLnN0b3JlO1xyXG5cclxubWV0YWRhdGEuZXhwKHsgZGVsZXRlTWV0YWRhdGE6IGZ1bmN0aW9uIGRlbGV0ZU1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcclxuICB2YXIgdGFyZ2V0S2V5ID0gYXJndW1lbnRzLmxlbmd0aCA8IDMgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzJdKTtcclxuICB2YXIgbWV0YWRhdGFNYXAgPSBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKGFuT2JqZWN0KHRhcmdldCksIHRhcmdldEtleSwgZmFsc2UpO1xyXG4gIGlmIChtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkIHx8ICFtZXRhZGF0YU1hcFsnZGVsZXRlJ10obWV0YWRhdGFLZXkpKSByZXR1cm4gZmFsc2U7XHJcbiAgaWYgKG1ldGFkYXRhTWFwLnNpemUpIHJldHVybiB0cnVlO1xyXG4gIHZhciB0YXJnZXRNZXRhZGF0YSA9IHN0b3JlLmdldCh0YXJnZXQpO1xyXG4gIHRhcmdldE1ldGFkYXRhWydkZWxldGUnXSh0YXJnZXRLZXkpO1xyXG4gIHJldHVybiAhIXRhcmdldE1ldGFkYXRhLnNpemUgfHwgc3RvcmVbJ2RlbGV0ZSddKHRhcmdldCk7XHJcbn0gfSk7XHJcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xyXG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IG1ldGFkYXRhLmdldDtcclxudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcclxuXHJcbnZhciBvcmRpbmFyeUdldE1ldGFkYXRhID0gZnVuY3Rpb24gKE1ldGFkYXRhS2V5LCBPLCBQKSB7XHJcbiAgdmFyIGhhc093biA9IG9yZGluYXJ5SGFzT3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xyXG4gIGlmIChoYXNPd24pIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcclxuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XHJcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5R2V0TWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG5tZXRhZGF0YS5leHAoeyBnZXRNZXRhZGF0YTogZnVuY3Rpb24gZ2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeUdldE1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcclxufSB9KTtcclxuIiwidmFyIFNldCA9IHJlcXVpcmUoJy4vZXM2LnNldCcpO1xyXG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcclxudmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcclxudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcclxuXHJcbnZhciBvcmRpbmFyeU1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uIChPLCBQKSB7XHJcbiAgdmFyIG9LZXlzID0gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoTywgUCk7XHJcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xyXG4gIGlmIChwYXJlbnQgPT09IG51bGwpIHJldHVybiBvS2V5cztcclxuICB2YXIgcEtleXMgPSBvcmRpbmFyeU1ldGFkYXRhS2V5cyhwYXJlbnQsIFApO1xyXG4gIHJldHVybiBwS2V5cy5sZW5ndGggPyBvS2V5cy5sZW5ndGggPyBmcm9tKG5ldyBTZXQob0tleXMuY29uY2F0KHBLZXlzKSkpIDogcEtleXMgOiBvS2V5cztcclxufTtcclxuXHJcbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0TWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeU1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcclxufSB9KTtcclxuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG5cclxubWV0YWRhdGEuZXhwKHsgZ2V0T3duTWV0YWRhdGE6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcclxuICByZXR1cm4gb3JkaW5hcnlHZXRPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxyXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcclxufSB9KTtcclxuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IG1ldGFkYXRhLmtleXM7XHJcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XHJcblxyXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YUtleXM6IGZ1bmN0aW9uIGdldE93bk1ldGFkYXRhS2V5cyh0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcclxuICByZXR1cm4gb3JkaW5hcnlPd25NZXRhZGF0YUtleXMoYW5PYmplY3QodGFyZ2V0KSwgYXJndW1lbnRzLmxlbmd0aCA8IDIgPyB1bmRlZmluZWQgOiB0b01ldGFLZXkoYXJndW1lbnRzWzFdKSk7XHJcbn0gfSk7XHJcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG5cclxudmFyIG9yZGluYXJ5SGFzTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XHJcbiAgaWYgKGhhc093bikgcmV0dXJuIHRydWU7XHJcbiAgdmFyIHBhcmVudCA9IGdldFByb3RvdHlwZU9mKE8pO1xyXG4gIHJldHVybiBwYXJlbnQgIT09IG51bGwgPyBvcmRpbmFyeUhhc01ldGFkYXRhKE1ldGFkYXRhS2V5LCBwYXJlbnQsIFApIDogZmFsc2U7XHJcbn07XHJcblxyXG5tZXRhZGF0YS5leHAoeyBoYXNNZXRhZGF0YTogZnVuY3Rpb24gaGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeUhhc01ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcclxufSB9KTtcclxuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBvcmRpbmFyeUhhc093bk1ldGFkYXRhID0gbWV0YWRhdGEuaGFzO1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG5cclxubWV0YWRhdGEuZXhwKHsgaGFzT3duTWV0YWRhdGE6IGZ1bmN0aW9uIGhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCB0YXJnZXQgLyogLCB0YXJnZXRLZXkgKi8pIHtcclxuICByZXR1cm4gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShtZXRhZGF0YUtleSwgYW5PYmplY3QodGFyZ2V0KVxyXG4gICAgLCBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pKTtcclxufSB9KTtcclxuIiwidmFyICRtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgdG9NZXRhS2V5ID0gJG1ldGFkYXRhLmtleTtcclxudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSAkbWV0YWRhdGEuc2V0O1xyXG5cclxuJG1ldGFkYXRhLmV4cCh7IG1ldGFkYXRhOiBmdW5jdGlvbiBtZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBkZWNvcmF0b3IodGFyZ2V0LCB0YXJnZXRLZXkpIHtcclxuICAgIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEoXHJcbiAgICAgIG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLFxyXG4gICAgICAodGFyZ2V0S2V5ICE9PSB1bmRlZmluZWQgPyBhbk9iamVjdCA6IGFGdW5jdGlvbikodGFyZ2V0KSxcclxuICAgICAgdG9NZXRhS2V5KHRhcmdldEtleSlcclxuICAgICk7XHJcbiAgfTtcclxufSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3J3YWxkcm9uL3RjMzktbm90ZXMvYmxvYi9tYXN0ZXIvZXM2LzIwMTQtMDkvc2VwdC0yNS5tZCM1MTAtZ2xvYmFsYXNhcC1mb3ItZW5xdWV1aW5nLWEtbWljcm90YXNrXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xyXG52YXIgcHJvY2VzcyA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnByb2Nlc3M7XHJcbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL19jb2YnKShwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuRywge1xyXG4gIGFzYXA6IGZ1bmN0aW9uIGFzYXAoZm4pIHtcclxuICAgIHZhciBkb21haW4gPSBpc05vZGUgJiYgcHJvY2Vzcy5kb21haW47XHJcbiAgICBtaWNyb3Rhc2soZG9tYWluID8gZG9tYWluLmJpbmQoZm4pIDogZm4pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3plbnBhcnNpbmcvZXMtb2JzZXJ2YWJsZVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xyXG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcclxudmFyIE9CU0VSVkFCTEUgPSByZXF1aXJlKCcuL193a3MnKSgnb2JzZXJ2YWJsZScpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xyXG52YXIgUkVUVVJOID0gZm9yT2YuUkVUVVJOO1xyXG5cclxudmFyIGdldE1ldGhvZCA9IGZ1bmN0aW9uIChmbikge1xyXG4gIHJldHVybiBmbiA9PSBudWxsID8gdW5kZWZpbmVkIDogYUZ1bmN0aW9uKGZuKTtcclxufTtcclxuXHJcbnZhciBjbGVhbnVwU3Vic2NyaXB0aW9uID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gIHZhciBjbGVhbnVwID0gc3Vic2NyaXB0aW9uLl9jO1xyXG4gIGlmIChjbGVhbnVwKSB7XHJcbiAgICBzdWJzY3JpcHRpb24uX2MgPSB1bmRlZmluZWQ7XHJcbiAgICBjbGVhbnVwKCk7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIHN1YnNjcmlwdGlvbkNsb3NlZCA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICByZXR1cm4gc3Vic2NyaXB0aW9uLl9vID09PSB1bmRlZmluZWQ7XHJcbn07XHJcblxyXG52YXIgY2xvc2VTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xyXG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xyXG4gICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xyXG4gIH1cclxufTtcclxuXHJcbnZhciBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAob2JzZXJ2ZXIsIHN1YnNjcmliZXIpIHtcclxuICBhbk9iamVjdChvYnNlcnZlcik7XHJcbiAgdGhpcy5fYyA9IHVuZGVmaW5lZDtcclxuICB0aGlzLl9vID0gb2JzZXJ2ZXI7XHJcbiAgb2JzZXJ2ZXIgPSBuZXcgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIodGhpcyk7XHJcbiAgdHJ5IHtcclxuICAgIHZhciBjbGVhbnVwID0gc3Vic2NyaWJlcihvYnNlcnZlcik7XHJcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gY2xlYW51cDtcclxuICAgIGlmIChjbGVhbnVwICE9IG51bGwpIHtcclxuICAgICAgaWYgKHR5cGVvZiBjbGVhbnVwLnVuc3Vic2NyaWJlID09PSAnZnVuY3Rpb24nKSBjbGVhbnVwID0gZnVuY3Rpb24gKCkgeyBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTsgfTtcclxuICAgICAgZWxzZSBhRnVuY3Rpb24oY2xlYW51cCk7XHJcbiAgICAgIHRoaXMuX2MgPSBjbGVhbnVwO1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIG9ic2VydmVyLmVycm9yKGUpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH0gaWYgKHN1YnNjcmlwdGlvbkNsb3NlZCh0aGlzKSkgY2xlYW51cFN1YnNjcmlwdGlvbih0aGlzKTtcclxufTtcclxuXHJcblN1YnNjcmlwdGlvbi5wcm90b3R5cGUgPSByZWRlZmluZUFsbCh7fSwge1xyXG4gIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHsgY2xvc2VTdWJzY3JpcHRpb24odGhpcyk7IH1cclxufSk7XHJcblxyXG52YXIgU3Vic2NyaXB0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgdGhpcy5fcyA9IHN1YnNjcmlwdGlvbjtcclxufTtcclxuXHJcblN1YnNjcmlwdGlvbk9ic2VydmVyLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XHJcbiAgbmV4dDogZnVuY3Rpb24gbmV4dCh2YWx1ZSkge1xyXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XHJcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XHJcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5uZXh0KTtcclxuICAgICAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIGNsb3NlU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSxcclxuICBlcnJvcjogZnVuY3Rpb24gZXJyb3IodmFsdWUpIHtcclxuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xyXG4gICAgaWYgKHN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB0aHJvdyB2YWx1ZTtcclxuICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcclxuICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcclxuICAgIHRyeSB7XHJcbiAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmVycm9yKTtcclxuICAgICAgaWYgKCFtKSB0aHJvdyB2YWx1ZTtcclxuICAgICAgdmFsdWUgPSBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgdGhyb3cgZTtcclxuICAgICAgfVxyXG4gICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgICByZXR1cm4gdmFsdWU7XHJcbiAgfSxcclxuICBjb21wbGV0ZTogZnVuY3Rpb24gY29tcGxldGUodmFsdWUpIHtcclxuICAgIHZhciBzdWJzY3JpcHRpb24gPSB0aGlzLl9zO1xyXG4gICAgaWYgKCFzdWJzY3JpcHRpb25DbG9zZWQoc3Vic2NyaXB0aW9uKSkge1xyXG4gICAgICB2YXIgb2JzZXJ2ZXIgPSBzdWJzY3JpcHRpb24uX287XHJcbiAgICAgIHN1YnNjcmlwdGlvbi5fbyA9IHVuZGVmaW5lZDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICB2YXIgbSA9IGdldE1ldGhvZChvYnNlcnZlci5jb21wbGV0ZSk7XHJcbiAgICAgICAgdmFsdWUgPSBtID8gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY2xlYW51cFN1YnNjcmlwdGlvbihzdWJzY3JpcHRpb24pO1xyXG4gICAgICAgIH0gZmluYWxseSB7XHJcbiAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG5cclxudmFyICRPYnNlcnZhYmxlID0gZnVuY3Rpb24gT2JzZXJ2YWJsZShzdWJzY3JpYmVyKSB7XHJcbiAgYW5JbnN0YW5jZSh0aGlzLCAkT2JzZXJ2YWJsZSwgJ09ic2VydmFibGUnLCAnX2YnKS5fZiA9IGFGdW5jdGlvbihzdWJzY3JpYmVyKTtcclxufTtcclxuXHJcbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwge1xyXG4gIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKG9ic2VydmVyKSB7XHJcbiAgICByZXR1cm4gbmV3IFN1YnNjcmlwdGlvbihvYnNlcnZlciwgdGhpcy5fZik7XHJcbiAgfSxcclxuICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICByZXR1cm4gbmV3IChjb3JlLlByb21pc2UgfHwgZ2xvYmFsLlByb21pc2UpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgYUZ1bmN0aW9uKGZuKTtcclxuICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoYXQuc3Vic2NyaWJlKHtcclxuICAgICAgICBuZXh0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmbih2YWx1ZSk7XHJcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJlamVjdChlKTtcclxuICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlcnJvcjogcmVqZWN0LFxyXG4gICAgICAgIGNvbXBsZXRlOiByZXNvbHZlXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59KTtcclxuXHJcbnJlZGVmaW5lQWxsKCRPYnNlcnZhYmxlLCB7XHJcbiAgZnJvbTogZnVuY3Rpb24gZnJvbSh4KSB7XHJcbiAgICB2YXIgQyA9IHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlO1xyXG4gICAgdmFyIG1ldGhvZCA9IGdldE1ldGhvZChhbk9iamVjdCh4KVtPQlNFUlZBQkxFXSk7XHJcbiAgICBpZiAobWV0aG9kKSB7XHJcbiAgICAgIHZhciBvYnNlcnZhYmxlID0gYW5PYmplY3QobWV0aG9kLmNhbGwoeCkpO1xyXG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZS5jb25zdHJ1Y3RvciA9PT0gQyA/IG9ic2VydmFibGUgOiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zdWJzY3JpYmUob2JzZXJ2ZXIpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgQyhmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcclxuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIWRvbmUpIHtcclxuICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGlmIChmb3JPZih4LCBmYWxzZSwgZnVuY3Rpb24gKGl0KSB7XHJcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdCk7XHJcbiAgICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybiBSRVRVUk47XHJcbiAgICAgICAgICAgIH0pID09PSBSRVRVUk4pIHJldHVybjtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgaWYgKGRvbmUpIHRocm93IGU7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGUpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIG9mOiBmdW5jdGlvbiBvZigpIHtcclxuICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aCwgaXRlbXMgPSBuZXcgQXJyYXkobCk7IGkgPCBsOykgaXRlbXNbaV0gPSBhcmd1bWVudHNbaSsrXTtcclxuICAgIHJldHVybiBuZXcgKHR5cGVvZiB0aGlzID09PSAnZnVuY3Rpb24nID8gdGhpcyA6ICRPYnNlcnZhYmxlKShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcclxuICAgICAgdmFyIGRvbmUgPSBmYWxzZTtcclxuICAgICAgbWljcm90YXNrKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIWRvbmUpIHtcclxuICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgaXRlbXMubGVuZ3RoOyArK2opIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChpdGVtc1tqXSk7XHJcbiAgICAgICAgICAgIGlmIChkb25lKSByZXR1cm47XHJcbiAgICAgICAgICB9IG9ic2VydmVyLmNvbXBsZXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgZG9uZSA9IHRydWU7IH07XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxuaGlkZSgkT2JzZXJ2YWJsZS5wcm90b3R5cGUsIE9CU0VSVkFCTEUsIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LkcsIHsgT2JzZXJ2YWJsZTogJE9ic2VydmFibGUgfSk7XHJcblxyXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdPYnNlcnZhYmxlJyk7XHJcbiIsIi8vIGllOS0gc2V0VGltZW91dCAmIHNldEludGVydmFsIGFkZGl0aW9uYWwgcGFyYW1ldGVycyBmaXhcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdXNlckFnZW50ID0gcmVxdWlyZSgnLi9fdXNlci1hZ2VudCcpO1xyXG52YXIgc2xpY2UgPSBbXS5zbGljZTtcclxudmFyIE1TSUUgPSAvTVNJRSAuXFwuLy50ZXN0KHVzZXJBZ2VudCk7IC8vIDwtIGRpcnR5IGllOS0gY2hlY2tcclxudmFyIHdyYXAgPSBmdW5jdGlvbiAoc2V0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbiwgdGltZSAvKiAsIC4uLmFyZ3MgKi8pIHtcclxuICAgIHZhciBib3VuZEFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoID4gMjtcclxuICAgIHZhciBhcmdzID0gYm91bmRBcmdzID8gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpIDogZmFsc2U7XHJcbiAgICByZXR1cm4gc2V0KGJvdW5kQXJncyA/IGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICAgICh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pKS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH0gOiBmbiwgdGltZSk7XHJcbiAgfTtcclxufTtcclxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkIgKyAkZXhwb3J0LkYgKiBNU0lFLCB7XHJcbiAgc2V0VGltZW91dDogd3JhcChnbG9iYWwuc2V0VGltZW91dCksXHJcbiAgc2V0SW50ZXJ2YWw6IHdyYXAoZ2xvYmFsLnNldEludGVydmFsKVxyXG59KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICR0YXNrID0gcmVxdWlyZSgnLi9fdGFzaycpO1xyXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiwge1xyXG4gIHNldEltbWVkaWF0ZTogJHRhc2suc2V0LFxyXG4gIGNsZWFySW1tZWRpYXRlOiAkdGFzay5jbGVhclxyXG59KTtcclxuIiwidmFyICRpdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xyXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcclxudmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xyXG52YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XHJcbnZhciBUT19TVFJJTkdfVEFHID0gd2tzKCd0b1N0cmluZ1RhZycpO1xyXG52YXIgQXJyYXlWYWx1ZXMgPSBJdGVyYXRvcnMuQXJyYXk7XHJcblxyXG52YXIgRE9NSXRlcmFibGVzID0ge1xyXG4gIENTU1J1bGVMaXN0OiB0cnVlLCAvLyBUT0RPOiBOb3Qgc3BlYyBjb21wbGlhbnQsIHNob3VsZCBiZSBmYWxzZS5cclxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiBmYWxzZSxcclxuICBDU1NWYWx1ZUxpc3Q6IGZhbHNlLFxyXG4gIENsaWVudFJlY3RMaXN0OiBmYWxzZSxcclxuICBET01SZWN0TGlzdDogZmFsc2UsXHJcbiAgRE9NU3RyaW5nTGlzdDogZmFsc2UsXHJcbiAgRE9NVG9rZW5MaXN0OiB0cnVlLFxyXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiBmYWxzZSxcclxuICBGaWxlTGlzdDogZmFsc2UsXHJcbiAgSFRNTEFsbENvbGxlY3Rpb246IGZhbHNlLFxyXG4gIEhUTUxDb2xsZWN0aW9uOiBmYWxzZSxcclxuICBIVE1MRm9ybUVsZW1lbnQ6IGZhbHNlLFxyXG4gIEhUTUxTZWxlY3RFbGVtZW50OiBmYWxzZSxcclxuICBNZWRpYUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxyXG4gIE1pbWVUeXBlQXJyYXk6IGZhbHNlLFxyXG4gIE5hbWVkTm9kZU1hcDogZmFsc2UsXHJcbiAgTm9kZUxpc3Q6IHRydWUsXHJcbiAgUGFpbnRSZXF1ZXN0TGlzdDogZmFsc2UsXHJcbiAgUGx1Z2luOiBmYWxzZSxcclxuICBQbHVnaW5BcnJheTogZmFsc2UsXHJcbiAgU1ZHTGVuZ3RoTGlzdDogZmFsc2UsXHJcbiAgU1ZHTnVtYmVyTGlzdDogZmFsc2UsXHJcbiAgU1ZHUGF0aFNlZ0xpc3Q6IGZhbHNlLFxyXG4gIFNWR1BvaW50TGlzdDogZmFsc2UsXHJcbiAgU1ZHU3RyaW5nTGlzdDogZmFsc2UsXHJcbiAgU1ZHVHJhbnNmb3JtTGlzdDogZmFsc2UsXHJcbiAgU291cmNlQnVmZmVyTGlzdDogZmFsc2UsXHJcbiAgU3R5bGVTaGVldExpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxyXG4gIFRleHRUcmFja0N1ZUxpc3Q6IGZhbHNlLFxyXG4gIFRleHRUcmFja0xpc3Q6IGZhbHNlLFxyXG4gIFRvdWNoTGlzdDogZmFsc2VcclxufTtcclxuXHJcbmZvciAodmFyIGNvbGxlY3Rpb25zID0gZ2V0S2V5cyhET01JdGVyYWJsZXMpLCBpID0gMDsgaSA8IGNvbGxlY3Rpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgdmFyIE5BTUUgPSBjb2xsZWN0aW9uc1tpXTtcclxuICB2YXIgZXhwbGljaXQgPSBET01JdGVyYWJsZXNbTkFNRV07XHJcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbTkFNRV07XHJcbiAgdmFyIHByb3RvID0gQ29sbGVjdGlvbiAmJiBDb2xsZWN0aW9uLnByb3RvdHlwZTtcclxuICB2YXIga2V5O1xyXG4gIGlmIChwcm90bykge1xyXG4gICAgaWYgKCFwcm90b1tJVEVSQVRPUl0pIGhpZGUocHJvdG8sIElURVJBVE9SLCBBcnJheVZhbHVlcyk7XHJcbiAgICBpZiAoIXByb3RvW1RPX1NUUklOR19UQUddKSBoaWRlKHByb3RvLCBUT19TVFJJTkdfVEFHLCBOQU1FKTtcclxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IEFycmF5VmFsdWVzO1xyXG4gICAgaWYgKGV4cGxpY2l0KSBmb3IgKGtleSBpbiAkaXRlcmF0b3JzKSBpZiAoIXByb3RvW2tleV0pIHJlZGVmaW5lKHByb3RvLCBrZXksICRpdGVyYXRvcnNba2V5XSwgdHJ1ZSk7XHJcbiAgfVxyXG59XHJcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTQsIEZhY2Vib29rLCBJbmMuXHJcbiAqIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxyXG4gKiBodHRwczovL3Jhdy5naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL21hc3Rlci9MSUNFTlNFIGZpbGUuIEFuXHJcbiAqIGFkZGl0aW9uYWwgZ3JhbnQgb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpblxyXG4gKiB0aGUgc2FtZSBkaXJlY3RvcnkuXHJcbiAqL1xyXG5cclxuIShmdW5jdGlvbihnbG9iYWwpIHtcclxuICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgdmFyIE9wID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICB2YXIgaGFzT3duID0gT3AuaGFzT3duUHJvcGVydHk7XHJcbiAgdmFyIHVuZGVmaW5lZDsgLy8gTW9yZSBjb21wcmVzc2libGUgdGhhbiB2b2lkIDAuXHJcbiAgdmFyICRTeW1ib2wgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgPyBTeW1ib2wgOiB7fTtcclxuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xyXG4gIHZhciBhc3luY0l0ZXJhdG9yU3ltYm9sID0gJFN5bWJvbC5hc3luY0l0ZXJhdG9yIHx8IFwiQEBhc3luY0l0ZXJhdG9yXCI7XHJcbiAgdmFyIHRvU3RyaW5nVGFnU3ltYm9sID0gJFN5bWJvbC50b1N0cmluZ1RhZyB8fCBcIkBAdG9TdHJpbmdUYWdcIjtcclxuXHJcbiAgdmFyIGluTW9kdWxlID0gdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIjtcclxuICB2YXIgcnVudGltZSA9IGdsb2JhbC5yZWdlbmVyYXRvclJ1bnRpbWU7XHJcbiAgaWYgKHJ1bnRpbWUpIHtcclxuICAgIGlmIChpbk1vZHVsZSkge1xyXG4gICAgICAvLyBJZiByZWdlbmVyYXRvclJ1bnRpbWUgaXMgZGVmaW5lZCBnbG9iYWxseSBhbmQgd2UncmUgaW4gYSBtb2R1bGUsXHJcbiAgICAgIC8vIG1ha2UgdGhlIGV4cG9ydHMgb2JqZWN0IGlkZW50aWNhbCB0byByZWdlbmVyYXRvclJ1bnRpbWUuXHJcbiAgICAgIG1vZHVsZS5leHBvcnRzID0gcnVudGltZTtcclxuICAgIH1cclxuICAgIC8vIERvbid0IGJvdGhlciBldmFsdWF0aW5nIHRoZSByZXN0IG9mIHRoaXMgZmlsZSBpZiB0aGUgcnVudGltZSB3YXNcclxuICAgIC8vIGFscmVhZHkgZGVmaW5lZCBnbG9iYWxseS5cclxuICAgIHJldHVybjtcclxuICB9XHJcblxyXG4gIC8vIERlZmluZSB0aGUgcnVudGltZSBnbG9iYWxseSAoYXMgZXhwZWN0ZWQgYnkgZ2VuZXJhdGVkIGNvZGUpIGFzIGVpdGhlclxyXG4gIC8vIG1vZHVsZS5leHBvcnRzIChpZiB3ZSdyZSBpbiBhIG1vZHVsZSkgb3IgYSBuZXcsIGVtcHR5IG9iamVjdC5cclxuICBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZSA9IGluTW9kdWxlID8gbW9kdWxlLmV4cG9ydHMgOiB7fTtcclxuXHJcbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xyXG4gICAgLy8gSWYgb3V0ZXJGbiBwcm92aWRlZCBhbmQgb3V0ZXJGbi5wcm90b3R5cGUgaXMgYSBHZW5lcmF0b3IsIHRoZW4gb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IuXHJcbiAgICB2YXIgcHJvdG9HZW5lcmF0b3IgPSBvdXRlckZuICYmIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yID8gb3V0ZXJGbiA6IEdlbmVyYXRvcjtcclxuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XHJcbiAgICB2YXIgY29udGV4dCA9IG5ldyBDb250ZXh0KHRyeUxvY3NMaXN0IHx8IFtdKTtcclxuXHJcbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXHJcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMuXHJcbiAgICBnZW5lcmF0b3IuX2ludm9rZSA9IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XHJcblxyXG4gICAgcmV0dXJuIGdlbmVyYXRvcjtcclxuICB9XHJcbiAgcnVudGltZS53cmFwID0gd3JhcDtcclxuXHJcbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXHJcbiAgLy8gcmVjb3JkIGxpa2UgY29udGV4dC50cnlFbnRyaWVzW2ldLmNvbXBsZXRpb24uIFRoaXMgaW50ZXJmYWNlIGNvdWxkXHJcbiAgLy8gaGF2ZSBiZWVuIChhbmQgd2FzIHByZXZpb3VzbHkpIGRlc2lnbmVkIHRvIHRha2UgYSBjbG9zdXJlIHRvIGJlXHJcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxyXG4gIC8vIGFscmVhZHkgaGF2ZSBhbiBleGlzdGluZyBtZXRob2Qgd2Ugd2FudCB0byBjYWxsLCBzbyB0aGVyZSdzIG5vIG5lZWRcclxuICAvLyB0byBjcmVhdGUgYSBuZXcgZnVuY3Rpb24gb2JqZWN0LiBXZSBjYW4gZXZlbiBnZXQgYXdheSB3aXRoIGFzc3VtaW5nXHJcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcclxuICAvLyBpbiBldmVyeSBjYXNlLCBzbyB3ZSBkb24ndCBoYXZlIHRvIHRvdWNoIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBUaGVcclxuICAvLyBvbmx5IGFkZGl0aW9uYWwgYWxsb2NhdGlvbiByZXF1aXJlZCBpcyB0aGUgY29tcGxldGlvbiByZWNvcmQsIHdoaWNoXHJcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxyXG4gIGZ1bmN0aW9uIHRyeUNhdGNoKGZuLCBvYmosIGFyZykge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgIHJldHVybiB7IHR5cGU6IFwidGhyb3dcIiwgYXJnOiBlcnIgfTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xyXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkID0gXCJzdXNwZW5kZWRZaWVsZFwiO1xyXG4gIHZhciBHZW5TdGF0ZUV4ZWN1dGluZyA9IFwiZXhlY3V0aW5nXCI7XHJcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcclxuXHJcbiAgLy8gUmV0dXJuaW5nIHRoaXMgb2JqZWN0IGZyb20gdGhlIGlubmVyRm4gaGFzIHRoZSBzYW1lIGVmZmVjdCBhc1xyXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cclxuICB2YXIgQ29udGludWVTZW50aW5lbCA9IHt9O1xyXG5cclxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcclxuICAvLyAuY29uc3RydWN0b3IucHJvdG90eXBlIHByb3BlcnRpZXMgZm9yIGZ1bmN0aW9ucyB0aGF0IHJldHVybiBHZW5lcmF0b3JcclxuICAvLyBvYmplY3RzLiBGb3IgZnVsbCBzcGVjIGNvbXBsaWFuY2UsIHlvdSBtYXkgd2lzaCB0byBjb25maWd1cmUgeW91clxyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXHJcbiAgZnVuY3Rpb24gR2VuZXJhdG9yKCkge31cclxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvbigpIHt9XHJcbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxyXG5cclxuICAvLyBUaGlzIGlzIGEgcG9seWZpbGwgZm9yICVJdGVyYXRvclByb3RvdHlwZSUgZm9yIGVudmlyb25tZW50cyB0aGF0XHJcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cclxuICB2YXIgSXRlcmF0b3JQcm90b3R5cGUgPSB7fTtcclxuICBJdGVyYXRvclByb3RvdHlwZVtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9O1xyXG5cclxuICB2YXIgZ2V0UHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XHJcbiAgdmFyIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG8gJiYgZ2V0UHJvdG8oZ2V0UHJvdG8odmFsdWVzKFtdKSkpO1xyXG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxyXG4gICAgICBOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAhPT0gT3AgJiZcclxuICAgICAgaGFzT3duLmNhbGwoTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUsIGl0ZXJhdG9yU3ltYm9sKSkge1xyXG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcclxuICAgIC8vIG9mIHRoZSBwb2x5ZmlsbC5cclxuICAgIEl0ZXJhdG9yUHJvdG90eXBlID0gTmF0aXZlSXRlcmF0b3JQcm90b3R5cGU7XHJcbiAgfVxyXG5cclxuICB2YXIgR3AgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5wcm90b3R5cGUgPVxyXG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xyXG4gIEdlbmVyYXRvckZ1bmN0aW9uLnByb3RvdHlwZSA9IEdwLmNvbnN0cnVjdG9yID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XHJcbiAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvbjtcclxuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZVt0b1N0cmluZ1RhZ1N5bWJvbF0gPVxyXG4gICAgR2VuZXJhdG9yRnVuY3Rpb24uZGlzcGxheU5hbWUgPSBcIkdlbmVyYXRvckZ1bmN0aW9uXCI7XHJcblxyXG4gIC8vIEhlbHBlciBmb3IgZGVmaW5pbmcgdGhlIC5uZXh0LCAudGhyb3csIGFuZCAucmV0dXJuIG1ldGhvZHMgb2YgdGhlXHJcbiAgLy8gSXRlcmF0b3IgaW50ZXJmYWNlIGluIHRlcm1zIG9mIGEgc2luZ2xlIC5faW52b2tlIG1ldGhvZC5cclxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XHJcbiAgICBbXCJuZXh0XCIsIFwidGhyb3dcIiwgXCJyZXR1cm5cIl0uZm9yRWFjaChmdW5jdGlvbihtZXRob2QpIHtcclxuICAgICAgcHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbihhcmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcclxuICAgICAgfTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XHJcbiAgICB2YXIgY3RvciA9IHR5cGVvZiBnZW5GdW4gPT09IFwiZnVuY3Rpb25cIiAmJiBnZW5GdW4uY29uc3RydWN0b3I7XHJcbiAgICByZXR1cm4gY3RvclxyXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XHJcbiAgICAgICAgLy8gRm9yIHRoZSBuYXRpdmUgR2VuZXJhdG9yRnVuY3Rpb24gY29uc3RydWN0b3IsIHRoZSBiZXN0IHdlIGNhblxyXG4gICAgICAgIC8vIGRvIGlzIHRvIGNoZWNrIGl0cyAubmFtZSBwcm9wZXJ0eS5cclxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcclxuICAgICAgOiBmYWxzZTtcclxuICB9O1xyXG5cclxuICBydW50aW1lLm1hcmsgPSBmdW5jdGlvbihnZW5GdW4pIHtcclxuICAgIGlmIChPYmplY3Quc2V0UHJvdG90eXBlT2YpIHtcclxuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZ2VuRnVuLl9fcHJvdG9fXyA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlO1xyXG4gICAgICBpZiAoISh0b1N0cmluZ1RhZ1N5bWJvbCBpbiBnZW5GdW4pKSB7XHJcbiAgICAgICAgZ2VuRnVuW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xyXG4gICAgcmV0dXJuIGdlbkZ1bjtcclxuICB9O1xyXG5cclxuICAvLyBXaXRoaW4gdGhlIGJvZHkgb2YgYW55IGFzeW5jIGZ1bmN0aW9uLCBgYXdhaXQgeGAgaXMgdHJhbnNmb3JtZWQgdG9cclxuICAvLyBgeWllbGQgcmVnZW5lcmF0b3JSdW50aW1lLmF3cmFwKHgpYCwgc28gdGhhdCB0aGUgcnVudGltZSBjYW4gdGVzdFxyXG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcclxuICAvLyBtZWFudCB0byBiZSBhd2FpdGVkLlxyXG4gIHJ1bnRpbWUuYXdyYXAgPSBmdW5jdGlvbihhcmcpIHtcclxuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcclxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcclxuICAgICAgICByZWplY3QocmVjb3JkLmFyZyk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlY29yZC5hcmc7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gcmVzdWx0LnZhbHVlO1xyXG4gICAgICAgIGlmICh2YWx1ZSAmJlxyXG4gICAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgJiZcclxuICAgICAgICAgICAgaGFzT3duLmNhbGwodmFsdWUsIFwiX19hd2FpdFwiKSkge1xyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZS5fX2F3YWl0KS50aGVuKGZ1bmN0aW9uKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIGludm9rZShcIm5leHRcIiwgdmFsdWUsIHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICAgICAgaW52b2tlKFwidGhyb3dcIiwgZXJyLCByZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xyXG4gICAgICAgICAgLy8gV2hlbiBhIHlpZWxkZWQgUHJvbWlzZSBpcyByZXNvbHZlZCwgaXRzIGZpbmFsIHZhbHVlIGJlY29tZXNcclxuICAgICAgICAgIC8vIHRoZSAudmFsdWUgb2YgdGhlIFByb21pc2U8e3ZhbHVlLGRvbmV9PiByZXN1bHQgZm9yIHRoZVxyXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uIElmIHRoZSBQcm9taXNlIGlzIHJlamVjdGVkLCBob3dldmVyLCB0aGVcclxuICAgICAgICAgIC8vIHJlc3VsdCBmb3IgdGhpcyBpdGVyYXRpb24gd2lsbCBiZSByZWplY3RlZCB3aXRoIHRoZSBzYW1lXHJcbiAgICAgICAgICAvLyByZWFzb24uIE5vdGUgdGhhdCByZWplY3Rpb25zIG9mIHlpZWxkZWQgUHJvbWlzZXMgYXJlIG5vdFxyXG4gICAgICAgICAgLy8gdGhyb3duIGJhY2sgaW50byB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBhcyBpcyB0aGUgY2FzZVxyXG4gICAgICAgICAgLy8gd2hlbiBhbiBhd2FpdGVkIFByb21pc2UgaXMgcmVqZWN0ZWQuIFRoaXMgZGlmZmVyZW5jZSBpblxyXG4gICAgICAgICAgLy8gYmVoYXZpb3IgYmV0d2VlbiB5aWVsZCBhbmQgYXdhaXQgaXMgaW1wb3J0YW50LCBiZWNhdXNlIGl0XHJcbiAgICAgICAgICAvLyBhbGxvd3MgdGhlIGNvbnN1bWVyIHRvIGRlY2lkZSB3aGF0IHRvIGRvIHdpdGggdGhlIHlpZWxkZWRcclxuICAgICAgICAgIC8vIHJlamVjdGlvbiAoc3dhbGxvdyBpdCBhbmQgY29udGludWUsIG1hbnVhbGx5IC50aHJvdyBpdCBiYWNrXHJcbiAgICAgICAgICAvLyBpbnRvIHRoZSBnZW5lcmF0b3IsIGFiYW5kb24gaXRlcmF0aW9uLCB3aGF0ZXZlcikuIFdpdGhcclxuICAgICAgICAgIC8vIGF3YWl0LCBieSBjb250cmFzdCwgdGhlcmUgaXMgbm8gb3Bwb3J0dW5pdHkgdG8gZXhhbWluZSB0aGVcclxuICAgICAgICAgIC8vIHJlamVjdGlvbiByZWFzb24gb3V0c2lkZSB0aGUgZ2VuZXJhdG9yIGZ1bmN0aW9uLCBzbyB0aGVcclxuICAgICAgICAgIC8vIG9ubHkgb3B0aW9uIGlzIHRvIHRocm93IGl0IGZyb20gdGhlIGF3YWl0IGV4cHJlc3Npb24sIGFuZFxyXG4gICAgICAgICAgLy8gbGV0IHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24gaGFuZGxlIHRoZSBleGNlcHRpb24uXHJcbiAgICAgICAgICByZXN1bHQudmFsdWUgPSB1bndyYXBwZWQ7XHJcbiAgICAgICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICAgICAgfSwgcmVqZWN0KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsLnByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiYgZ2xvYmFsLnByb2Nlc3MuZG9tYWluKSB7XHJcbiAgICAgIGludm9rZSA9IGdsb2JhbC5wcm9jZXNzLmRvbWFpbi5iaW5kKGludm9rZSk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHByZXZpb3VzUHJvbWlzZTtcclxuXHJcbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XHJcbiAgICAgIGZ1bmN0aW9uIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICAgIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHByZXZpb3VzUHJvbWlzZSA9XHJcbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxyXG4gICAgICAgIC8vIGFsbCBwcmV2aW91cyBQcm9taXNlcyBoYXZlIGJlZW4gcmVzb2x2ZWQgYmVmb3JlIGNhbGxpbmcgaW52b2tlLFxyXG4gICAgICAgIC8vIHNvIHRoYXQgcmVzdWx0cyBhcmUgYWx3YXlzIGRlbGl2ZXJlZCBpbiB0aGUgY29ycmVjdCBvcmRlci4gSWZcclxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xyXG4gICAgICAgIC8vIGNhbGwgaW52b2tlIGltbWVkaWF0ZWx5LCB3aXRob3V0IHdhaXRpbmcgb24gYSBjYWxsYmFjayB0byBmaXJlLFxyXG4gICAgICAgIC8vIHNvIHRoYXQgdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBoYXMgdGhlIG9wcG9ydHVuaXR5IHRvIGRvXHJcbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxyXG4gICAgICAgIC8vIGlzIHdoeSB0aGUgUHJvbWlzZSBjb25zdHJ1Y3RvciBzeW5jaHJvbm91c2x5IGludm9rZXMgaXRzXHJcbiAgICAgICAgLy8gZXhlY3V0b3IgY2FsbGJhY2ssIGFuZCB3aHkgYXN5bmMgZnVuY3Rpb25zIHN5bmNocm9ub3VzbHlcclxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxyXG4gICAgICAgIC8vIGFzeW5jIGZ1bmN0aW9ucyBpbiB0ZXJtcyBvZiBhc3luYyBnZW5lcmF0b3JzLCBpdCBpcyBlc3BlY2lhbGx5XHJcbiAgICAgICAgLy8gaW1wb3J0YW50IHRvIGdldCB0aGlzIHJpZ2h0LCBldmVuIHRob3VnaCBpdCByZXF1aXJlcyBjYXJlLlxyXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxyXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcsXHJcbiAgICAgICAgICAvLyBBdm9pZCBwcm9wYWdhdGluZyBmYWlsdXJlcyB0byBQcm9taXNlcyByZXR1cm5lZCBieSBsYXRlclxyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxyXG4gICAgICAgICAgY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmdcclxuICAgICAgICApIDogY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBEZWZpbmUgdGhlIHVuaWZpZWQgaGVscGVyIG1ldGhvZCB0aGF0IGlzIHVzZWQgdG8gaW1wbGVtZW50IC5uZXh0LFxyXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXHJcbiAgICB0aGlzLl9pbnZva2UgPSBlbnF1ZXVlO1xyXG4gIH1cclxuXHJcbiAgZGVmaW5lSXRlcmF0b3JNZXRob2RzKEFzeW5jSXRlcmF0b3IucHJvdG90eXBlKTtcclxuICBBc3luY0l0ZXJhdG9yLnByb3RvdHlwZVthc3luY0l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcbiAgcnVudGltZS5Bc3luY0l0ZXJhdG9yID0gQXN5bmNJdGVyYXRvcjtcclxuXHJcbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxyXG4gIC8vIEFzeW5jSXRlcmF0b3Igb2JqZWN0czsgdGhleSBqdXN0IHJldHVybiBhIFByb21pc2UgZm9yIHRoZSB2YWx1ZSBvZlxyXG4gIC8vIHRoZSBmaW5hbCByZXN1bHQgcHJvZHVjZWQgYnkgdGhlIGl0ZXJhdG9yLlxyXG4gIHJ1bnRpbWUuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xyXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcclxuICAgICAgd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdClcclxuICAgICk7XHJcblxyXG4gICAgcmV0dXJuIHJ1bnRpbWUuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxyXG4gICAgICA/IGl0ZXIgLy8gSWYgb3V0ZXJGbiBpcyBhIGdlbmVyYXRvciwgcmV0dXJuIHRoZSBmdWxsIGl0ZXJhdG9yLlxyXG4gICAgICA6IGl0ZXIubmV4dCgpLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcclxuICAgICAgICB9KTtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBtYWtlSW52b2tlTWV0aG9kKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpIHtcclxuICAgIHZhciBzdGF0ZSA9IEdlblN0YXRlU3VzcGVuZGVkU3RhcnQ7XHJcblxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZykge1xyXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlRXhlY3V0aW5nKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xyXG4gICAgICAgIGlmIChtZXRob2QgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgICAgdGhyb3cgYXJnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gQmUgZm9yZ2l2aW5nLCBwZXIgMjUuMy4zLjMuMyBvZiB0aGUgc3BlYzpcclxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXHJcbiAgICAgICAgcmV0dXJuIGRvbmVSZXN1bHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29udGV4dC5tZXRob2QgPSBtZXRob2Q7XHJcbiAgICAgIGNvbnRleHQuYXJnID0gYXJnO1xyXG5cclxuICAgICAgd2hpbGUgKHRydWUpIHtcclxuICAgICAgICB2YXIgZGVsZWdhdGUgPSBjb250ZXh0LmRlbGVnYXRlO1xyXG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xyXG4gICAgICAgICAgdmFyIGRlbGVnYXRlUmVzdWx0ID0gbWF5YmVJbnZva2VEZWxlZ2F0ZShkZWxlZ2F0ZSwgY29udGV4dCk7XHJcbiAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQpIHtcclxuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGRlbGVnYXRlUmVzdWx0O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcIm5leHRcIikge1xyXG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXHJcbiAgICAgICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxyXG4gICAgICAgICAgY29udGV4dC5zZW50ID0gY29udGV4dC5fc2VudCA9IGNvbnRleHQuYXJnO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcclxuICAgICAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydCkge1xyXG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xyXG4gICAgICAgICAgICB0aHJvdyBjb250ZXh0LmFyZztcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xyXG4gICAgICAgICAgY29udGV4dC5hYnJ1cHQoXCJyZXR1cm5cIiwgY29udGV4dC5hcmcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3RhdGUgPSBHZW5TdGF0ZUV4ZWN1dGluZztcclxuXHJcbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xyXG4gICAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIikge1xyXG4gICAgICAgICAgLy8gSWYgYW4gZXhjZXB0aW9uIGlzIHRocm93biBmcm9tIGlubmVyRm4sIHdlIGxlYXZlIHN0YXRlID09PVxyXG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxyXG4gICAgICAgICAgc3RhdGUgPSBjb250ZXh0LmRvbmVcclxuICAgICAgICAgICAgPyBHZW5TdGF0ZUNvbXBsZXRlZFxyXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XHJcblxyXG4gICAgICAgICAgaWYgKHJlY29yZC5hcmcgPT09IENvbnRpbnVlU2VudGluZWwpIHtcclxuICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdmFsdWU6IHJlY29yZC5hcmcsXHJcbiAgICAgICAgICAgIGRvbmU6IGNvbnRleHQuZG9uZVxyXG4gICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xyXG4gICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlIGV4Y2VwdGlvbiBieSBsb29waW5nIGJhY2sgYXJvdW5kIHRvIHRoZVxyXG4gICAgICAgICAgLy8gY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZykgY2FsbCBhYm92ZS5cclxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xyXG4gICAgICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIC8vIENhbGwgZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdKGNvbnRleHQuYXJnKSBhbmQgaGFuZGxlIHRoZVxyXG4gIC8vIHJlc3VsdCwgZWl0aGVyIGJ5IHJldHVybmluZyBhIHsgdmFsdWUsIGRvbmUgfSByZXN1bHQgZnJvbSB0aGVcclxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcclxuICAvLyBzZXR0aW5nIGNvbnRleHQuZGVsZWdhdGUgdG8gbnVsbCwgYW5kIHJldHVybmluZyB0aGUgQ29udGludWVTZW50aW5lbC5cclxuICBmdW5jdGlvbiBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KSB7XHJcbiAgICB2YXIgbWV0aG9kID0gZGVsZWdhdGUuaXRlcmF0b3JbY29udGV4dC5tZXRob2RdO1xyXG4gICAgaWYgKG1ldGhvZCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xyXG4gICAgICAvLyBtZXRob2QgYWx3YXlzIHRlcm1pbmF0ZXMgdGhlIHlpZWxkKiBsb29wLlxyXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcclxuXHJcbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgaWYgKGRlbGVnYXRlLml0ZXJhdG9yLnJldHVybikge1xyXG4gICAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxyXG4gICAgICAgICAgLy8gY2hhbmNlIHRvIGNsZWFuIHVwLlxyXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInJldHVyblwiO1xyXG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcclxuXHJcbiAgICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgICAgICAvLyBJZiBtYXliZUludm9rZURlbGVnYXRlKGNvbnRleHQpIGNoYW5nZWQgY29udGV4dC5tZXRob2QgZnJvbVxyXG4gICAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cclxuICAgICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcclxuICAgICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXHJcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ3Rocm93JyBtZXRob2RcIik7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XHJcblxyXG4gICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcclxuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XHJcbiAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcclxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XHJcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcclxuXHJcbiAgICBpZiAoISBpbmZvKSB7XHJcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xyXG4gICAgICBjb250ZXh0LmFyZyA9IG5ldyBUeXBlRXJyb3IoXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFwiKTtcclxuICAgICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XHJcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChpbmZvLmRvbmUpIHtcclxuICAgICAgLy8gQXNzaWduIHRoZSByZXN1bHQgb2YgdGhlIGZpbmlzaGVkIGRlbGVnYXRlIHRvIHRoZSB0ZW1wb3JhcnlcclxuICAgICAgLy8gdmFyaWFibGUgc3BlY2lmaWVkIGJ5IGRlbGVnYXRlLnJlc3VsdE5hbWUgKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cclxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XHJcblxyXG4gICAgICAvLyBSZXN1bWUgZXhlY3V0aW9uIGF0IHRoZSBkZXNpcmVkIGxvY2F0aW9uIChzZWUgZGVsZWdhdGVZaWVsZCkuXHJcbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XHJcblxyXG4gICAgICAvLyBJZiBjb250ZXh0Lm1ldGhvZCB3YXMgXCJ0aHJvd1wiIGJ1dCB0aGUgZGVsZWdhdGUgaGFuZGxlZCB0aGVcclxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxyXG4gICAgICAvLyBjb250ZXh0Lm1ldGhvZCB3YXMgXCJuZXh0XCIsIGZvcmdldCBjb250ZXh0LmFyZyBzaW5jZSBpdCBoYXMgYmVlblxyXG4gICAgICAvLyBcImNvbnN1bWVkXCIgYnkgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yLiBJZiBjb250ZXh0Lm1ldGhvZCB3YXNcclxuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcclxuICAgICAgLy8gb3V0ZXIgZ2VuZXJhdG9yLlxyXG4gICAgICBpZiAoY29udGV4dC5tZXRob2QgIT09IFwicmV0dXJuXCIpIHtcclxuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xyXG4gICAgICAgIGNvbnRleHQuYXJnID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgLy8gUmUteWllbGQgdGhlIHJlc3VsdCByZXR1cm5lZCBieSB0aGUgZGVsZWdhdGUgbWV0aG9kLlxyXG4gICAgICByZXR1cm4gaW5mbztcclxuICAgIH1cclxuXHJcbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxyXG4gICAgLy8gdGhlIG91dGVyIGdlbmVyYXRvci5cclxuICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xyXG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgfVxyXG5cclxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxyXG4gIC8vIHVuaWZpZWQgLl9pbnZva2UgaGVscGVyIG1ldGhvZC5cclxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoR3ApO1xyXG5cclxuICBHcFt0b1N0cmluZ1RhZ1N5bWJvbF0gPSBcIkdlbmVyYXRvclwiO1xyXG5cclxuICAvLyBBIEdlbmVyYXRvciBzaG91bGQgYWx3YXlzIHJldHVybiBpdHNlbGYgYXMgdGhlIGl0ZXJhdG9yIG9iamVjdCB3aGVuIHRoZVxyXG4gIC8vIEBAaXRlcmF0b3IgZnVuY3Rpb24gaXMgY2FsbGVkIG9uIGl0LiBTb21lIGJyb3dzZXJzJyBpbXBsZW1lbnRhdGlvbnMgb2YgdGhlXHJcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcclxuICAvLyBvYmplY3QgdG8gbm90IGJlIHJldHVybmVkIGZyb20gdGhpcyBjYWxsLiBUaGlzIGVuc3VyZXMgdGhhdCBkb2Vzbid0IGhhcHBlbi5cclxuICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlZ2VuZXJhdG9yL2lzc3Vlcy8yNzQgZm9yIG1vcmUgZGV0YWlscy5cclxuICBHcFtpdGVyYXRvclN5bWJvbF0gPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIEdwLnRvU3RyaW5nID0gZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gXCJbb2JqZWN0IEdlbmVyYXRvcl1cIjtcclxuICB9O1xyXG5cclxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xyXG4gICAgdmFyIGVudHJ5ID0geyB0cnlMb2M6IGxvY3NbMF0gfTtcclxuXHJcbiAgICBpZiAoMSBpbiBsb2NzKSB7XHJcbiAgICAgIGVudHJ5LmNhdGNoTG9jID0gbG9jc1sxXTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoMiBpbiBsb2NzKSB7XHJcbiAgICAgIGVudHJ5LmZpbmFsbHlMb2MgPSBsb2NzWzJdO1xyXG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xyXG4gICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb24gfHwge307XHJcbiAgICByZWNvcmQudHlwZSA9IFwibm9ybWFsXCI7XHJcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcclxuICAgIGVudHJ5LmNvbXBsZXRpb24gPSByZWNvcmQ7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBDb250ZXh0KHRyeUxvY3NMaXN0KSB7XHJcbiAgICAvLyBUaGUgcm9vdCBlbnRyeSBvYmplY3QgKGVmZmVjdGl2ZWx5IGEgdHJ5IHN0YXRlbWVudCB3aXRob3V0IGEgY2F0Y2hcclxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cclxuICAgIC8vIGxvY2F0aW9ucyB3aGVyZSB0aGVyZSBpcyBubyBlbmNsb3NpbmcgdHJ5IHN0YXRlbWVudC5cclxuICAgIHRoaXMudHJ5RW50cmllcyA9IFt7IHRyeUxvYzogXCJyb290XCIgfV07XHJcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XHJcbiAgICB0aGlzLnJlc2V0KHRydWUpO1xyXG4gIH1cclxuXHJcbiAgcnVudGltZS5rZXlzID0gZnVuY3Rpb24ob2JqZWN0KSB7XHJcbiAgICB2YXIga2V5cyA9IFtdO1xyXG4gICAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xyXG4gICAgICBrZXlzLnB1c2goa2V5KTtcclxuICAgIH1cclxuICAgIGtleXMucmV2ZXJzZSgpO1xyXG5cclxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXHJcbiAgICAvLyB0aGluZ3Mgc2ltcGxlIGFuZCByZXR1cm4gdGhlIG5leHQgZnVuY3Rpb24gaXRzZWxmLlxyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBrZXkgPSBrZXlzLnBvcCgpO1xyXG4gICAgICAgIGlmIChrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xyXG4gICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XHJcbiAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxyXG4gICAgICAvLyBhbmQgLmRvbmUgcHJvcGVydGllcyBvZmYgdGhlIG5leHQgZnVuY3Rpb24gb2JqZWN0IGl0c2VsZi4gVGhpc1xyXG4gICAgICAvLyBhbHNvIGVuc3VyZXMgdGhhdCB0aGUgbWluaWZpZXIgd2lsbCBub3QgYW5vbnltaXplIHRoZSBmdW5jdGlvbi5cclxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcclxuICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICB9O1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIHZhbHVlcyhpdGVyYWJsZSkge1xyXG4gICAgaWYgKGl0ZXJhYmxlKSB7XHJcbiAgICAgIHZhciBpdGVyYXRvck1ldGhvZCA9IGl0ZXJhYmxlW2l0ZXJhdG9yU3ltYm9sXTtcclxuICAgICAgaWYgKGl0ZXJhdG9yTWV0aG9kKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgIHJldHVybiBpdGVyYWJsZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKCFpc05hTihpdGVyYWJsZS5sZW5ndGgpKSB7XHJcbiAgICAgICAgdmFyIGkgPSAtMSwgbmV4dCA9IGZ1bmN0aW9uIG5leHQoKSB7XHJcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChoYXNPd24uY2FsbChpdGVyYWJsZSwgaSkpIHtcclxuICAgICAgICAgICAgICBuZXh0LnZhbHVlID0gaXRlcmFibGVbaV07XHJcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBuZXh0LnZhbHVlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gbmV4dC5uZXh0ID0gbmV4dDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cclxuICAgIHJldHVybiB7IG5leHQ6IGRvbmVSZXN1bHQgfTtcclxuICB9XHJcbiAgcnVudGltZS52YWx1ZXMgPSB2YWx1ZXM7XHJcblxyXG4gIGZ1bmN0aW9uIGRvbmVSZXN1bHQoKSB7XHJcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XHJcbiAgfVxyXG5cclxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcclxuICAgIGNvbnN0cnVjdG9yOiBDb250ZXh0LFxyXG5cclxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XHJcbiAgICAgIHRoaXMucHJldiA9IDA7XHJcbiAgICAgIHRoaXMubmV4dCA9IDA7XHJcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXHJcbiAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXHJcbiAgICAgIHRoaXMuc2VudCA9IHRoaXMuX3NlbnQgPSB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xyXG4gICAgICB0aGlzLmRlbGVnYXRlID0gbnVsbDtcclxuXHJcbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XHJcbiAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XHJcblxyXG4gICAgICBpZiAoIXNraXBUZW1wUmVzZXQpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcclxuICAgICAgICAgIC8vIE5vdCBzdXJlIGFib3V0IHRoZSBvcHRpbWFsIG9yZGVyIG9mIHRoZXNlIGNvbmRpdGlvbnM6XHJcbiAgICAgICAgICBpZiAobmFtZS5jaGFyQXQoMCkgPT09IFwidFwiICYmXHJcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcclxuICAgICAgICAgICAgICAhaXNOYU4oK25hbWUuc2xpY2UoMSkpKSB7XHJcbiAgICAgICAgICAgIHRoaXNbbmFtZV0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIHN0b3A6IGZ1bmN0aW9uKCkge1xyXG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xyXG5cclxuICAgICAgdmFyIHJvb3RFbnRyeSA9IHRoaXMudHJ5RW50cmllc1swXTtcclxuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcclxuICAgICAgaWYgKHJvb3RSZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgdGhyb3cgcm9vdFJlY29yZC5hcmc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLnJ2YWw7XHJcbiAgICB9LFxyXG5cclxuICAgIGRpc3BhdGNoRXhjZXB0aW9uOiBmdW5jdGlvbihleGNlcHRpb24pIHtcclxuICAgICAgaWYgKHRoaXMuZG9uZSkge1xyXG4gICAgICAgIHRocm93IGV4Y2VwdGlvbjtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIGNvbnRleHQgPSB0aGlzO1xyXG4gICAgICBmdW5jdGlvbiBoYW5kbGUobG9jLCBjYXVnaHQpIHtcclxuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcclxuICAgICAgICByZWNvcmQuYXJnID0gZXhjZXB0aW9uO1xyXG4gICAgICAgIGNvbnRleHQubmV4dCA9IGxvYztcclxuXHJcbiAgICAgICAgaWYgKGNhdWdodCkge1xyXG4gICAgICAgICAgLy8gSWYgdGhlIGRpc3BhdGNoZWQgZXhjZXB0aW9uIHdhcyBjYXVnaHQgYnkgYSBjYXRjaCBibG9jayxcclxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXHJcbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xyXG4gICAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gISEgY2F1Z2h0O1xyXG4gICAgICB9XHJcblxyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xyXG4gICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xyXG5cclxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xyXG4gICAgICAgICAgLy8gRXhjZXB0aW9uIHRocm93biBvdXRzaWRlIG9mIGFueSB0cnkgYmxvY2sgdGhhdCBjb3VsZCBoYW5kbGVcclxuICAgICAgICAgIC8vIGl0LCBzbyBzZXQgdGhlIGNvbXBsZXRpb24gdmFsdWUgb2YgdGhlIGVudGlyZSBmdW5jdGlvbiB0b1xyXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cclxuICAgICAgICAgIHJldHVybiBoYW5kbGUoXCJlbmRcIik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jIDw9IHRoaXMucHJldikge1xyXG4gICAgICAgICAgdmFyIGhhc0NhdGNoID0gaGFzT3duLmNhbGwoZW50cnksIFwiY2F0Y2hMb2NcIik7XHJcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XHJcblxyXG4gICAgICAgICAgaWYgKGhhc0NhdGNoICYmIGhhc0ZpbmFsbHkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5jYXRjaExvYykge1xyXG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfSBlbHNlIGlmIChoYXNGaW5hbGx5KSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XCIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhYnJ1cHQ6IGZ1bmN0aW9uKHR5cGUsIGFyZykge1xyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xyXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2ICYmXHJcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcclxuICAgICAgICAgICAgdGhpcy5wcmV2IDwgZW50cnkuZmluYWxseUxvYykge1xyXG4gICAgICAgICAgdmFyIGZpbmFsbHlFbnRyeSA9IGVudHJ5O1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoZmluYWxseUVudHJ5ICYmXHJcbiAgICAgICAgICAodHlwZSA9PT0gXCJicmVha1wiIHx8XHJcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxyXG4gICAgICAgICAgZmluYWxseUVudHJ5LnRyeUxvYyA8PSBhcmcgJiZcclxuICAgICAgICAgIGFyZyA8PSBmaW5hbGx5RW50cnkuZmluYWxseUxvYykge1xyXG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcclxuICAgICAgICAvLyBsb2NhdGlvbiBvdXRzaWRlIHRoZSB0cnkvY2F0Y2ggYmxvY2suXHJcbiAgICAgICAgZmluYWxseUVudHJ5ID0gbnVsbDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdmFyIHJlY29yZCA9IGZpbmFsbHlFbnRyeSA/IGZpbmFsbHlFbnRyeS5jb21wbGV0aW9uIDoge307XHJcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcclxuICAgICAgcmVjb3JkLmFyZyA9IGFyZztcclxuXHJcbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcclxuICAgICAgICB0aGlzLm1ldGhvZCA9IFwibmV4dFwiO1xyXG4gICAgICAgIHRoaXMubmV4dCA9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jO1xyXG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xyXG4gICAgfSxcclxuXHJcbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xyXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgIHRocm93IHJlY29yZC5hcmc7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJicmVha1wiIHx8XHJcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gcmVjb3JkLmFyZztcclxuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJyZXR1cm5cIikge1xyXG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcclxuICAgICAgICB0aGlzLm1ldGhvZCA9IFwicmV0dXJuXCI7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gXCJlbmRcIjtcclxuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xyXG4gICAgICAgIHRoaXMubmV4dCA9IGFmdGVyTG9jO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcclxuICAgIH0sXHJcblxyXG4gICAgZmluaXNoOiBmdW5jdGlvbihmaW5hbGx5TG9jKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XHJcbiAgICAgICAgaWYgKGVudHJ5LmZpbmFsbHlMb2MgPT09IGZpbmFsbHlMb2MpIHtcclxuICAgICAgICAgIHRoaXMuY29tcGxldGUoZW50cnkuY29tcGxldGlvbiwgZW50cnkuYWZ0ZXJMb2MpO1xyXG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XHJcbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcclxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcclxuICAgICAgICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uO1xyXG4gICAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcclxuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XHJcbiAgICAgICAgICAgIHJlc2V0VHJ5RW50cnkoZW50cnkpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIFRoZSBjb250ZXh0LmNhdGNoIG1ldGhvZCBtdXN0IG9ubHkgYmUgY2FsbGVkIHdpdGggYSBsb2NhdGlvblxyXG4gICAgICAvLyBhcmd1bWVudCB0aGF0IGNvcnJlc3BvbmRzIHRvIGEga25vd24gY2F0Y2ggYmxvY2suXHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcclxuICAgIH0sXHJcblxyXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcclxuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IHtcclxuICAgICAgICBpdGVyYXRvcjogdmFsdWVzKGl0ZXJhYmxlKSxcclxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxyXG4gICAgICAgIG5leHRMb2M6IG5leHRMb2NcclxuICAgICAgfTtcclxuXHJcbiAgICAgIGlmICh0aGlzLm1ldGhvZCA9PT0gXCJuZXh0XCIpIHtcclxuICAgICAgICAvLyBEZWxpYmVyYXRlbHkgZm9yZ2V0IHRoZSBsYXN0IHNlbnQgdmFsdWUgc28gdGhhdCB3ZSBkb24ndFxyXG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cclxuICAgICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICB9XHJcbiAgfTtcclxufSkoXHJcbiAgLy8gQW1vbmcgdGhlIHZhcmlvdXMgdHJpY2tzIGZvciBvYnRhaW5pbmcgYSByZWZlcmVuY2UgdG8gdGhlIGdsb2JhbFxyXG4gIC8vIG9iamVjdCwgdGhpcyBzZWVtcyB0byBiZSB0aGUgbW9zdCByZWxpYWJsZSB0ZWNobmlxdWUgdGhhdCBkb2VzIG5vdFxyXG4gIC8vIHVzZSBpbmRpcmVjdCBldmFsICh3aGljaCB2aW9sYXRlcyBDb250ZW50IFNlY3VyaXR5IFBvbGljeSkuXHJcbiAgdHlwZW9mIGdsb2JhbCA9PT0gXCJvYmplY3RcIiA/IGdsb2JhbCA6XHJcbiAgdHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIiA/IHdpbmRvdyA6XHJcbiAgdHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIgPyBzZWxmIDogdGhpc1xyXG4pO1xyXG4iLCJyZXF1aXJlKCcuLi8uLi9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4uLy4uL21vZHVsZXMvX2NvcmUnKS5SZWdFeHAuZXNjYXBlO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vYmVuamFtaW5nci9SZXhFeHAuZXNjYXBlXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkcmUgPSByZXF1aXJlKCcuL19yZXBsYWNlcicpKC9bXFxcXF4kKis/LigpfFtcXF17fV0vZywgJ1xcXFwkJicpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWdFeHAnLCB7IGVzY2FwZTogZnVuY3Rpb24gZXNjYXBlKGl0KSB7IHJldHVybiAkcmUoaXQpOyB9IH0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChyZWdFeHAsIHJlcGxhY2UpIHtcclxuICB2YXIgcmVwbGFjZXIgPSByZXBsYWNlID09PSBPYmplY3QocmVwbGFjZSkgPyBmdW5jdGlvbiAocGFydCkge1xyXG4gICAgcmV0dXJuIHJlcGxhY2VbcGFydF07XHJcbiAgfSA6IHJlcGxhY2U7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xyXG4gICAgcmV0dXJuIFN0cmluZyhpdCkucmVwbGFjZShyZWdFeHAsIHJlcGxhY2VyKTtcclxuICB9O1xyXG59O1xyXG4iLCIvKipcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiDkuJrliqHnm7jlhbPlrZfmrrVcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuXHJcbndpbmRvdy5idXNpbmVzcyA9IHtcclxuICAgIC8vIOW4g+WwlC3mlbDlgLxcclxuICAgIGJvb2xfaW50OiB7XHJcbiAgICAgICAgMDogJ+WQpicgLFxyXG4gICAgICAgIDE6ICfmmK8nXHJcbiAgICB9ICxcclxuICAgIC8vIOW4g+WwlC3lrZfnrKbkuLJcclxuICAgIGJvb2xfc3RyOiB7XHJcbiAgICAgICAgJ24nOiAn5ZCmJyAsXHJcbiAgICAgICAgJ3knOiAn5pivJ1xyXG4gICAgfSAsXHJcbiAgICAvLyDlhazlkYot5L2N572uXHJcbiAgICBwb3M6IHtcclxuICAgICAgICBhbm5vdW5jZW1lbnQ6IHtcclxuICAgICAgICAgICAgYXBwOiAnYXBw5YWs5ZGKJ1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIGltYWdlOiB7XHJcbiAgICAgICAgICAgIGhvbWU6ICfpppbpobUt6L2u5pKt5Zu+JyAsXHJcbiAgICAgICAgfVxyXG4gICAgfSAsXHJcbiAgICAvLyDor7fmsYLmlrnms5VcclxuICAgIHJvdXRlOiB7XHJcbiAgICAgICAgbWV0aG9kOiBbJ0dFVCcgLCAnUE9TVCcgLCAnUFVUJyAsICdQQVRDSCcgLCAnREVMRVRFJyAsICdOT05FJ10gLFxyXG4gICAgICAgIHR5cGU6IFsndmlldycgLCAnYXBpJ10gLFxyXG4gICAgfSAsXHJcbiAgICAvLyDovabovobnm7jlhbNcclxuICAgIGNhcjoge1xyXG4gICAgICAgIGdlYXJib3g6IFsn5omL5YqoJyAsICfoh6rliqgnICwgJ+aJi+iHquS4gOS9kycgLCAn5peg57qn5Y+Y6YCfJyAsICflj4znprvlkIgnICwgJ+acuuaisOiHquWKqOWPmOmAn+eusScgLCAn55u06amxJ10gLFxyXG4gICAgICAgIHNhbGVQb2ludDoge1xyXG4gICAgICAgICAgICBhZmZvcmRhYmxlOiAn57uP5rWO5a6e5oOgJyAsXHJcbiAgICAgICAgICAgIG5ldzogJ+WHhuaWsOi9picgLFxyXG4gICAgICAgICAgICBsdXh1cnk6ICfosarljY7ovaYnICxcclxuICAgICAgICAgICAgbm9uZTogJ+aXoCcgLFxyXG4gICAgICAgIH1cclxuICAgIH0gLFxyXG4gICAgLy8g5qOA5rWL6aG5XHJcbiAgICBkZXRlY3Rpb246IHtcclxuICAgICAgICBub3JtYWw6ICfmraPluLgnICxcclxuICAgICAgICBleGNlcHRpb246ICflvILluLgnICxcclxuICAgIH0gLFxyXG59O1xyXG4iLCJcclxuLy8g5by65Yi26YCA5Ye6XHJcbmZ1bmN0aW9uIGZvcmNlTG9nb3V0ICgpIHtcclxuICAgIEcucy5kZWwoJ3Rva2VuJyk7XHJcbiAgICByb3V0ZXIucHVzaCh7bmFtZTogJ2xvZ2luJ30pO1xyXG59XHJcblxyXG4vLyDmo4Dmn6XnlKjmiLfnmbvlvZXnirbmgIFcclxuZnVuY3Rpb24gaXNMb2dpbiAoKSB7XHJcbiAgICByZXR1cm4gRy5zLmV4aXN0cygndG9rZW4nKTtcclxufVxyXG5cclxuLy8g5oyH5a6aIGlkIOa7muWKqOWIsOaMh+WumuS9jee9rlxyXG4vLyDms6jmhI/ov5nmmK/nibnmhI/kuLrlvZPliY3pobnnm67ogIzlhpnnmoTvvIFcclxuLy8g5aaC5p6c5o2i6L+H5LiA5Liq5a655Zmo5YWD57Sg5bCx5Lya5Ye6546w6ZSZ6K+v77yBXHJcbi8vIOivt+S7heWcqOW9k+WJjemhueebruS9v+eUqFxyXG5mdW5jdGlvbiB2U2Nyb2xsIChpZCAsIGZuKSB7XHJcbiAgICBsZXQgZG9tID0gRygnIycgKyBpZCk7XHJcbiAgICBsZXQgY29udGFpbmVyID0gRyh3aW5kb3cpO1xyXG4gICAgbGV0IHZhbCA9IGRvbS5nZXREb2NPZmZzZXRWYWwoJ3RvcCcpO1xyXG4gICAgbGV0IGV4dHJhID0gODAgKyA1ICsgNjA7XHJcbiAgICB2YWwgLT0gZXh0cmE7XHJcbiAgICBHLnNjcm9sbFRvKHRvcENvbnRleHQuYW5pbWF0ZUR1cmF0aW9uLCAneScsIDAsIHZhbCwgZm4pO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRDbGFzcyAodikge1xyXG4gICAgcmV0dXJuIHYgPyAnZXJyb3InIDogJyc7XHJcbn1cclxuXHJcbmZ1bmN0aW9uICRzdWNjZXNzIChtc2cgLCBvcHRpb24gPSB7fSkge1xyXG4gICAgb3B0aW9uLmljb24gPSAxO1xyXG4gICAgbGF5ZXIuYWxlcnQobXNnICwgb3B0aW9uKTtcclxufVxyXG5cclxuLy8g6ZSZ6K+v5o+Q56S6XHJcbmZ1bmN0aW9uICRlcnJvciAobXNnICwgb3B0aW9uID0ge30pIHtcclxuICAgIG9wdGlvbi5pY29uID0gMjtcclxuICAgIGxheWVyLmFsZXJ0KG1zZyAsIG9wdGlvbik7XHJcbn1cclxuXHJcbi8vIOa2iOaBr+aPkOmGklxyXG5mdW5jdGlvbiAkbXNnIChtc2cgLCBvcHRpb24gPSB7fSkge1xyXG4gICAgbGF5ZXIubXNnKG1zZyAsIG9wdGlvbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uICRpbmZvIChtc2cgLCBvcHRpb24gPSB7fSkge1xyXG4gICAgb3B0aW9uLmljb24gPSA3O1xyXG4gICAgbGF5ZXIuYWxlcnQobXNnICwgb3B0aW9uKTtcclxufVxyXG5cclxuLy8g5Y+R55Sf5LqG5pyq55+l6ZSZ6K+vXHJcbmZ1bmN0aW9uICR1bmtub3coKSB7XHJcbiAgICByZXR1cm4gJGVycm9yKCflj5HnlJ/kuobmnKrnn6XplJnor68nKTtcclxufVxyXG5cclxuLy8g6I635Y+W5ou86Z+z6aaW5a2X5q+NXHJcbmZ1bmN0aW9uIGZpcnN0TGV0dGVyKHN0cikge1xyXG4gICAgbGV0IHJlcyA9IHBpbnlpblV0aWwuZ2V0Rmlyc3RMZXR0ZXIoc3RyKTtcclxuICAgIHJldHVybiByZXMubGVuZ3RoID4gMCA/XHJcbiAgICAgICAgcmVzWzBdIDpcclxuICAgICAgICAnJztcclxufVxyXG5mdW5jdGlvbiAkdGlwKG1zZyAsIGRvbSkge1xyXG4gICAgcmV0dXJuIGxheWVyLnRpcHMobXNnICwgZG9tICwge1xyXG4gICAgICAgIHRpcHM6IFsxLCAnIzM1OTVDQyddLFxyXG4gICAgICAgIHRpbWU6IDQgKiAxMDAwXHJcbiAgICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gJGNsb3NlKGluZGV4KVxyXG57XHJcbiAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uICRjbG9zZUFsbCgpXHJcbntcclxuICAgIGxheWVyLmNsb3NlQWxsKCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRldGVybWluZShjb3VudCAsIHRvdGFsICwgY2FsbGJhY2spIHtcclxuICAgIGlmIChjb3VudCA9PSB0b3RhbCkge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbk9iamVjdC5hc3NpZ24od2luZG93ICwge1xyXG4gICAgZm9yY2VMb2dvdXQgLFxyXG4gICAgaXNMb2dpbiAsXHJcbiAgICB2U2Nyb2xsICxcclxuICAgIGdldENsYXNzICxcclxuICAgICRzdWNjZXNzICxcclxuICAgICRlcnJvciAsXHJcbiAgICAkbXNnICxcclxuICAgICRpbmZvICxcclxuICAgICR0aXAgLFxyXG4gICAgJHVua25vdyAsXHJcbiAgICBmaXJzdExldHRlciAsXHJcbiAgICBkZXRlcm1pbmUgLFxyXG59KTsiLCIvKipcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiB2dWUg5Yid5aeL5YyW5aSE55CGXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKipcclxuICovXHJcbi8vIOW8gOWPkeiAheaPkOekuuWFs+mXre+8gVxyXG5WdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTtcclxuLy8g5piv5ZCm5YWB6K64IHZ1ZSBkZXZ0b29sIOi/m+ihjCBkZWJ1Z1xyXG5WdWUuY29uZmlnLmRldnRvb2xzID0gdHJ1ZTtcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKipcclxuICog5a+56K+35rGC6L+b6KGM5oum5oiqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuXHJcbmxldCByZWZyZXNoVG9rZW4gPSAocmVzb2x2ZSkgPT4ge1xyXG4gICAgaWYgKCFHLnMuZXhpc3RzKCd0b2tlbicpKSB7XHJcbiAgICAgICAgLy8g5rKh5pyJ55m75b2V5L+h5oGv77yM6YCA5Ye655m75b2VXHJcbiAgICAgICAgZm9yY2VMb2dvdXQoKTtcclxuICAgICAgICByZXR1cm4gO1xyXG4gICAgfVxyXG4gICAgbGV0IHRva2VuID0gRy5zLmpzb24oJ3Rva2VuJyk7XHJcbiAgICBhZG1pbkFwaS5yZWZyZXNoVG9rZW4oe1xyXG4gICAgICAgIHJlZnJlc2hfdG9rZW46IHRva2VuLnJlZnJlc2hfdG9rZW5cclxuICAgIH0gLCAocmVzICwgY29kZSkgPT4ge1xyXG4gICAgICAgIGlmIChjb2RlICE9IDIwMCkge1xyXG4gICAgICAgICAgICAkaW5mbygn55m75b2V54q25oCB5bey6L+H5pyf77yB6K+354K55Ye7IDxiPuehruWumjwvYj4g5oyJ6ZKu6YCA5Ye65Yiw55m75b2V6aG16Z2iIScgLCB7XHJcbiAgICAgICAgICAgICAgICBjbG9zZUJ0bjogZmFsc2UgLFxyXG4gICAgICAgICAgICAgICAgYnRuOiBbJ+ehruWumiddICxcclxuICAgICAgICAgICAgICAgIGJ0bjEgKGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY2xvc2UoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcmNlTG9nb3V0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDmm7TmlrAgdG9rZW5cclxuICAgICAgICBHLnMuanNvbigndG9rZW4nICwgcmVzKTtcclxuICAgICAgICByZXNvbHZlKCk7XHJcbiAgICB9KTtcclxufTtcclxuXHJcbkcuYWpheC5vcGVuZWQgPSBmdW5jdGlvbigpe1xyXG4gICAgaWYgKCFpc0xvZ2luKCkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIGxldCB0b2tlbiA9IEcucy5qc29uKCd0b2tlbicpO1xyXG4gICAgLy8g6K6+572uIEF1dGhvcml6YXRpb24g5aS06YOoXHJcbiAgICB0aGlzLm5hdGl2ZSgnc2V0UmVxdWVzdEhlYWRlcicgLCAnQXV0aG9yaXphdGlvbicgLCB0b2tlbi50b2tlbik7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuXHJcbmxldCBjb3VudCA9IDA7XHJcbi8vIOaLpuaIqiDnvZHnu5wv55m75b2V54q25oCBIOWPmOabtFxyXG5HLmFqYXgucmVzcG9uZGVkID0gZnVuY3Rpb24ocmVzICwgY29kZSl7XHJcbiAgICBpZiAoY29kZSA9PSAwKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ+ivt+axguiiq+e7iOatou+8jOWPr+iDveaYr+e9kee7nOaWreW8gOWvvOiHtO+8jOS5n+WPr+iDveaYr+eUqOaIt+aJi+WKqOe7iOatou+8geivt+eojeWQjuWGjeivlScpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChjb2RlID09IDQwMSkge1xyXG4gICAgICAgIC8vIHRva2VuIOiupOivgeWksei0pe+8jOWIt+aWsCB0b2tlblxyXG4gICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlICwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgIGlmICgrK2NvdW50ID4gMTApIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfliLfmlrAgdG9rZW4g5ZCO77yM5bCd6K+V6K+35rGC55So5oi35LmL5YmN6KKr5oum5oiq55qE6K+35rGC5qyh5pWw6L+H5aSa77yB56iL5bqP6Zeu6aKY77yB6K+35qOA5p+lJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlZnJlc2hUb2tlbihyZXNvbHZlKTtcclxuICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgLy8g5pu05paw5oiQ5Yqf5L6/6YeN5paw5byA5aeL5LmL5YmN55So5oi355qE6K+35rGCXHJcbiAgICAgICAgICAgIHRoaXMucmVzdGFydCgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIGlmIChjb2RlID09IDUwMCkge1xyXG4gICAgICAgICRlcnJvcign5pyN5Yqh5Zmo5Y+R55Sf5YaF6YOo6ZSZ6K+v77yM6K+356iN5ZCO5YaN6K+VJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0cnVlO1xyXG59OyIsImxldCBrZXkgPSAnX192ZXJzaW9uX3RpcF9jb3VudF9fMyc7XHJcbmxldCBjb3VudCA9IEcucy5nZXQoa2V5KTtcclxuaWYgKEcuaXNOdWxsKGNvdW50KSkge1xyXG4gICAgY291bnQgPSAxO1xyXG59XHJcbmNvdW50ID0gcGFyc2VJbnQoY291bnQpO1xyXG5pZiAoaXNMb2dpbigpKSB7XHJcbiAgICBpZiAoZmFsc2UpIHtcclxuICAgICAgICAvLyDmj5DnpLrniYjmnKzmm7TmlrBcclxuICAgICAgICBsYXllci5hbGVydChgXHJcbiAgICAgICAgPGg0IHN0eWxlPSdmb250LXdlaWdodDpib2xkOyB0ZXh0LWFsaWduOiBjZW50ZXI7bWFyZ2luLWJvdHRvbTogNXB4Oyc+54mI5pys5Y2H57qnIDEuMC4zIC0+IDEuMC40PC9oND5cclxuICAgICAgICA8b2wgc3R5bGU9J21hcmdpbi1ib3R0b206IDVweDsnPlxyXG4gICAgICAgICAgICA8bGk+MS4g5LyY5YyW6aG16Z2i5L2T6aqMPC9saT5cclxuICAgICAgICAgICAgPGxpPjIuIOS8mOWMluWKoOi9veWxgjwvbGk+XHJcbiAgICAgICAgPC9vbD5cclxuICAgICAgICA8cCBzdHlsZT0nZm9udC1zaXplOiAxMnB4O2NvbG9yOiAjNTU1Oyc+6K+l5o+Q56S65Lya5Zyo55So5oi354K55Ye7Jm5ic3A7PGIgc3R5bGU9J2NvbG9yOiBibGFjazsnPuWFs+mXreaMiemSrjwvYj4mbmJzcDvkuKTmrKHlkI7oh6rliqjlhbPpl63jgII8L3A+XHJcbiAgICBgICwge1xyXG4gICAgICAgICAgICBidG46IFsn5YWz6ZetJ10gLFxyXG4gICAgICAgICAgICBidG4xIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgIEcucy5zZXQoa2V5ICwgY291bnQpO1xyXG4gICAgICAgICAgICAgICAgbGF5ZXIuY2xvc2UoaW5kZXgpO1xyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgY2xvc2VCdG46IGZhbHNlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbG9hZGluZzoge1xyXG4gICAgICAgIG1vdW50ZWQgKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcgPSBuZXcgTG9hZGluZyh0aGlzLiRyZWZzLmxvYWRpbmcuJGVsICwge1xyXG4gICAgICAgICAgICAgICAgc3RhdHVzOiAnaGlkZScgLFxyXG4gICAgICAgICAgICAgICAgdHlwZTogJ2xpbmUtc2NhbGUnICxcclxuICAgICAgICAgICAgICAgIGNsb3NlIChhamF4ICwga2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Lit5pat6K+35rGCXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuYWpheFthamF4XSBpbnN0YW5jZW9mIEcuYWpheCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmFqYXhbYWpheF0ubmF0aXZlKCdhYm9ydCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnBlbmRpbmdba2V5XSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICxcclxuICAgIH0gLFxyXG4gICAgc3RhdGU6IHtcclxuICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgIC8vIOWIneWni+eKtuaAgVxyXG4gICAgICAgICAgICBpbml0aWFsU3RhdGUgKGxvYWRpbmcgLCBhamF4ICwgcGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgLy8g5Lit5pat6K+35rGCXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5hamF4W2FqYXhdIGluc3RhbmNlb2YgRy5hamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4W2FqYXhdLm5hdGl2ZSgnYWJvcnQnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOe7iOatouivt+axgueKtuaAgVxyXG4gICAgICAgICAgICAgICAgaWYgKEcuaXNTdHJpbmcocGVuZGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdbcGVuZGluZ10gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vIOS4reaWreWKoOi9veWxglxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zW2xvYWRpbmddIGluc3RhbmNlb2YgTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zW2xvYWRpbmddLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAvLyDor7fmsYLnirbmgIFcclxuICAgICAgICAgICAgcGVuZGluZ1N0YXRlIChsb2FkaW5nICwgcGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zW2xvYWRpbmddIGluc3RhbmNlb2YgTG9hZGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zW2xvYWRpbmddLnNob3coKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChHLmlzU3RyaW5nKHBlbmRpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nW3BlbmRpbmddID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgfVxyXG4gICAgfSAsXHJcbiAgICBsaXN0OiB7XHJcbiAgICAgICAgLy8g6K+l5pWw5o2u6L+R55So5LqO5aSN5Yi257KY6LS05L2/55So77yM5peg5YW25LuW5L2c55SoXHJcbiAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICBwYWdlOiB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbDogMCAsXHJcbiAgICAgICAgICAgICAgICBwYWdlOiAwICxcclxuICAgICAgICAgICAgICAgIHBlcl9wYWdlOiAwICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIGZvcm06IHtcclxuICAgICAgICAgICAgICAgIHBhZ2U6IDFcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIGFwaTogbnVsbCAsXHJcbiAgICAgICAgICAgIGRvbTogbnVsbCAsXHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgcGFnZToge1xyXG4gICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAvLyDliIbpobXkuovku7ZcclxuICAgICAgICAgICAgICAgIHBhZ2VFdmVudCAocGFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS5wYWdlID0gcGFnZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICB9ICxcclxuICAgICAgICBmaWx0ZXI6IHtcclxuICAgICAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICAgICAgLy8g55So5oi35o+Q5LqkXHJcbiAgICAgICAgICAgICAgICBzdWJtaXQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybS5wYWdlID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOmHjee9rlxyXG4gICAgICAgICAgICAgICAgcmVzZXQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGsgaW4gdGhpcy5mb3JtKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHYgPSB0aGlzLmZvcm1ba107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVtrXSA9IEcuaXNTdHJpbmcodikgPyAnJyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHLmlzTnVtYmVyKHYpID8gMCA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRy5pc0FycmF5KHYpID8gW10gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHLmlzT2JqZWN0KHYpID8ge30gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICAvLyDmjpLluo9cclxuICAgICAgICAgICAgICAgIG9yZGVyIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhciA9IEcoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgb3JkZXIgPSB0YXIuZGF0YSgnb3JkZXInKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaXRlbXMgPSB0YXIucGFyZW50KCkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB0YXIuaGlnaGxpZ2h0KCdmb2N1cycgLCBpdGVtcy5nZXQoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtLm9yZGVyID0gb3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJtaXQoKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgZ2V0OiB7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPluaVsOaNru+8jOWxgue6p+aVsOaNrlxyXG4gICAgICAgICAgICBmbG9vcjoge1xyXG4gICAgICAgICAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOiOt+WPluaVsOaNrlxyXG4gICAgICAgICAgICAgICAgICAgIGdldERhdGEgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLnNob3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4Lmxpc3QgPSB0aGlzLmFwaS5saXN0KHRoaXMuZm9ybSAsIChyZXMgLCBjb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb2RlICE9IDIwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVycm9yKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2V0QXJncyh0aGlzLmFqYXgubGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAvLyDojrflj5bmlbDmja7vvIzpnZ7lsYLnuqfmlbDmja5cclxuICAgICAgICAgICAgbm9ybWFsOiB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6I635Y+W5pWw5o2uXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YSAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgZGF0YUFjdCA9IHRoaXMuZGF0YUFjdCA/IHRoaXMuZGF0YUFjdCA6ICdsaXN0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4W2RhdGFBY3RdID0gdGhpcy5hcGlbZGF0YUFjdF0odGhpcy5mb3JtICwgKHJlcyAsIGNvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZXJyb3IocmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gcmVzLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgcmVzLmRhdGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhZ2UgPSByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLnNldEFyZ3ModGhpcy5hamF4W2RhdGFBY3RdKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIGRlbDoge1xyXG4gICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAvLyDliKDpmaTpgInkuK3poblcclxuICAgICAgICAgICAgICAgIGRlbCAoaWRMaXN0ICwgZm4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nLmRlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5hbGVydCgn6K+35rGC5LitLi4u6K+36ICQ5b+D562J5b6FJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWpheC5kZWwgPSB0aGlzLmFwaVtHLmlzU3RyaW5nKHRoaXMuZGVsQWN0aW9uKSA/IHRoaXMuZGVsQWN0aW9uIDogJ2RlbCddKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWRfbGlzdDogRy5qc29uRW5jb2RlKGlkTGlzdClcclxuICAgICAgICAgICAgICAgICAgICB9ICwgKHJlcyAsIGNvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nLmRlbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlcnJvcihyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdWNjZXNzKCfliKDpmaTmiJDlip8nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHLmlzRnVuY3Rpb24oZm4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zZXRBcmdzKHRoaXMuYWpheC5kZWwgLCAnZGVsJyk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDliKDpmaTpgInkuK3poblcclxuICAgICAgICAgICAgICAgIGRlbFRhcmdldCAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSAsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDmj5DnpLpcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW5mbygn5L2g56Gu5a6a6KaB5Yig6Zmk5ZCX77yfJyAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjogWyfnoa7lrponICwgJ+WPlua2iCddICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjE6IHJlc29sdmUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4yOiByZWplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY2xvc2UoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbChbaWRdICwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxJZChpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gLCAoaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY2xvc2UoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5Yig6Zmk6YCJ5Lit6aG5XHJcbiAgICAgICAgICAgICAgICBkZWxTZWxlY3RlZCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUgLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWRMaXN0Lmxlbmd0aCA8IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGluZm8oJ+ivt+mAieaLqeimgeWIoOmZpOeahOmhuScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSAsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW5mbygn5L2g56Gu5a6a6KaB5om56YeP5Yig6Zmk5ZCX77yfJyAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG46IFsn56Gu5a6aJyAsICflj5bmtognXSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuMTogcmVzb2x2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4yOiByZWplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsKHRoaXMuaWRMaXN0ICwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pZExpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAsIChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDpgInmi6nkuovku7ZcclxuICAgICAgICAgICAgICAgIHNlbGVjdEV2ZW50IChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhciA9IEcoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSB0YXIuZGF0YSgnaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGFyLmhhc0NsYXNzKCdmb2N1cycpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZWxlY3RlZExpbmUoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5lKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDpgInkuK3miYDmnIlcclxuICAgICAgICAgICAgICAgIHNlbGVjdEFsbEV2ZW50IChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhciA9IEcoZS5jdXJyZW50VGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgY2hlY2tlZCA9IHRhci5uYXRpdmUoJ2NoZWNrZWQnKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJzID0gdGhpcy5kb20udGJvZHkuY2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICB0cnMuZWFjaCgoZG9tKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbSA9IEcoZG9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gZG9tLmRhdGEoJ2lkJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkTGluZShpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuc2VsZWN0ZWRMaW5lKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6YCJ5Lit6KGMXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZExpbmUgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRycyA9IHRoaXMuZG9tLnRib2R5LmNoaWxkcmVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ3RyJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ciA9IHRycy5qdW1wKGkgLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5kYXRhKCdpZCcpID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXIuYWRkQ2xhc3MoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2JveCA9IEcoJy5jLWJveCcgLCBjdXIuZ2V0KDApKS5uYXRpdmUoJ2NoZWNrZWQnICwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZElkKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWPlua2iOmAieS4rVxyXG4gICAgICAgICAgICAgICAgdW5zZWxlY3RlZExpbmUgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRycyA9IHRoaXMuZG9tLnRib2R5LmNoaWxkcmVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnTmFtZTogJ3RyJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdHJzLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGN1ciA9IHRycy5qdW1wKGkgLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1ci5kYXRhKCdpZCcpID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXIucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2JveCA9IEcoJy5jLWJveCcgLCBjdXIuZ2V0KDApKS5uYXRpdmUoJ2NoZWNrZWQnICwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxJZChpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmt7vliqBcclxuICAgICAgICAgICAgICAgIGFkZElkIChpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkTGlzdC5pbmRleE9mKGlkKSAhPSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlkTGlzdC5wdXNoKGlkKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWIoOmZpFxyXG4gICAgICAgICAgICAgICAgZGVsSWQgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChpbmRleCA9IHRoaXMuaWRMaXN0LmluZGV4T2YoaWQpKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlkTGlzdC5zcGxpY2UoaW5kZXggLCAxKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyBmb3JtIOihqOWNlVxyXG4gICAgZm9ybToge1xyXG4gICAgICAgIGdldDoge1xyXG4gICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICBnZXREYXRhIChjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmFtLm1vZGUgIT0gJ2VkaXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWpheC5nZXREYXRhID0gdGhpcy5hcGkuZGV0YWlsKHRoaXMucGFyYW0uaWQgLCAocmVzICwgY29kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlcnJvcihyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0gPSByZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChHLmlzRnVuY3Rpb24oY2FsbGJhY2spKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zZXRBcmdzKHRoaXMuYWpheC5nZXREYXRhKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgLy8g6YCC55So5LqO5Y2V5byg5Zu+54mH5LiK5Lyg55qE5pe25YCZXHJcbiAgICAgICAgaW1hZ2U6IHtcclxuICAgICAgICAgICAgbW91bnRlZCAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAvLyDlsI/lm77kuIrkvKBcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLmltYWdlID0gbmV3IFVwbG9hZEltYWdlKHRoaXMuJHJlZnNbJ2ltYWdlLWNvbnRhaW5lciddICwge1xyXG4gICAgICAgICAgICAgICAgICAgIHBsdWdpblVybDogdG9wQ29udGV4dC5wbHVnaW4gKyAnVXBsb2FkSW1hZ2UvJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZTogJ292ZXJyaWRlJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiAgdG9wQ29udGV4dC5pbWFnZUFwaSAsXHJcbiAgICAgICAgICAgICAgICAgICAgZmllbGQ6ICdpbWFnZScgLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3MgKHJlcyAsIGNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEcuaXNGdW5jdGlvbihzZWxmLmNhbGxiYWNrLmltYWdlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jYWxsYmFjay5pbWFnZShyZXMgLCBjb2RlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICB9ICxcclxuICAgICAgICBjb25maXJtOiB7XHJcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgIGNvbmZpcm0gKG5hbWUgLCByb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYWN0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0aGlzLnBhcmFtLm1vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlZGl0JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICfnvJbovpEnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2FkZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAn5re75YqgJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZXBvcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ+e8lui+kSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICfmk43kvZwnO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyDmj5DnpLrmiJDlip9cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRzdWNjZXNzKCfmk43kvZzmiJDlip8nICwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG46IFsn57un57utJyArIGFjdGlvbiAsIG5hbWVdICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnRuMSAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmNsb3NlKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWxmLnBhcmFtLm1vZGUgPT0gJ2VkaXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2VsZi5yZWxvYWQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjIgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5sb2NhdGlvbihyb3V0ZSAsIG51bGwgLCAnX3NlbGYnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgbWVudVN3aXRjaDoge1xyXG4gICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICBpbml0TWVudVN3aXRjaCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOiPnOWNleWIh+aNolxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLm1lbnVTd2l0Y2ggPSBuZXcgTWVudVN3aXRjaCh0aGlzLiRyZWZzWydtZW51LXN3aXRjaCddLiRlbCAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6buY6K6k5bGV56S655qE55WM6Z2iXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0aGlzLm1lbnUgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDoj5zljZXlsZXnpLrpo47moLxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6aG554K55Ye75ZCO5Zue6LCDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsaWNrIChpZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOWIh+aNouWQjuWbnuiwg1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnN3aXRjaE1lbnUoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1lbnUgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20ub3B0aW9uU2V0LmVhY2goKGRvbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkb20gPSBHKGRvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkb20uZGF0YSgnaWQnKSA9PSBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9tLnJlbW92ZUNsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb20uYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgIH0gLFxyXG59OyIsImltcG9ydCBtaXhpbnMgZnJvbSAnLi9taXhpbk9wdGlvbi5qcyc7XHJcblxyXG5jb25zdCBob3N0ID0gJy8nO1xyXG5jb25zdCBwbHVnaW4gPSBgJHtob3N0fXBsdWdpbi9gO1xyXG5jb25zdCBhcGkgPSBgJHtob3N0fWFwaS9hZG1pbi9gO1xyXG5jb25zdCBpbWFnZUFwaUZvcndhbmdFZGl0b3IgPSBgJHthcGl9ZmlsZS9pbWFnZUZvcldhbmdFZGl0b3JgO1xyXG5jb25zdCBpbWFnZUFwaSA9IGAke2FwaX1maWxlL2ltYWdlYDtcclxuY29uc3QgZmlsZUFwaSA9IGAke2FwaX1maWxlL2ZpbGVgO1xyXG5jb25zdCB3ZWJzb2NrZXQgPSAnd3M6Ly80Ny4yNTIuODAuMzY6OTMwMCc7XHJcbmNvbnN0IHdlYnNvY2tldEhvc3QgPSAnaHR0cDovLzQ3LjI1Mi44MC4zNjo5MzAxJztcclxuY29uc3Qgd2Vic29ja2V0SWRlbnRpZmllciA9ICcwaEdGUFB5ZjdCbnUzZ25GJztcclxuXHJcbk9iamVjdC5hc3NpZ24od2luZG93ICwge1xyXG4gICAgbWl4aW5zICxcclxuICAgIC8vIOWFseS6q+WPmOmHj1xyXG4gICAgdG9wQ29udGV4dDoge1xyXG4gICAgICAgIGhvc3QgLFxyXG4gICAgICAgIHBsdWdpbiAsXHJcbiAgICAgICAgYXBpICxcclxuICAgICAgICBpbnM6IHt9ICxcclxuICAgICAgICAvLyDliqjnlLvml7bpl7RcclxuICAgICAgICBhbmltYXRlRHVyYXRpb246IDMwMCAsXHJcbiAgICAgICAgaW1hZ2VBcGlGb3J3YW5nRWRpdG9yICxcclxuICAgICAgICBpbWFnZUFwaSAsXHJcbiAgICAgICAgZmlsZUFwaSAsXHJcbiAgICAgICAgd2Vic29ja2V0ICxcclxuICAgICAgICB3ZWJzb2NrZXRIb3N0ICxcclxuICAgICAgICB3ZWJzb2NrZXRJZGVudGlmaWVyICxcclxuICAgIH0gLFxyXG59KTtcclxuIiwiaW1wb3J0IHJvdXRlcyBmcm9tICcuL3JvdXRlcy5qcyc7XHJcblxyXG5jb25zdCByb3V0ZXIgPSBuZXcgVnVlUm91dGVyKHtcclxuICAgIHJvdXRlc1xyXG59KTtcclxuXHJcblxyXG4vKipcclxuICogKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIOeZu+W9leiupOivgSArIOadg+mZkOiupOivge+8iOWmguaenOmHh+WPlueahOaWueW8j+aYryB2dWUtcm91dGVyIOi3s+i9rO+8geWkmuagh+etvuaWueW8j+S4jemcgOimge+8ge+8iVxyXG4gKiAqKioqKioqKioqKioqKioqKioqKipcclxuICovXHJcbnJvdXRlci5iZWZvcmVFYWNoKCh0byAsIGZyb20gLCBuZXh0KSA9PiB7XHJcbiAgICBsZXQgY2hlY2sgPSBbJy9sb2dpbiddO1xyXG4gICAgLy8g5qOA5p+l55So5oi354q25oCBXHJcbiAgICAvLyDlpoLmnpzmnKrnmbvlvZXvvIzpgqPkuYjot7Povazlm57mma7pgJrpobXpnaJcclxuICAgIGlmIChpc0xvZ2luKCkpIHtcclxuICAgICAgICAvLyDlt7Lnu4/nmbvlvZXvvIzot7Povazlm57pppbpobVcclxuICAgICAgICBpZiAoY2hlY2suaW5jbHVkZXModG8ucGF0aCkpIHtcclxuICAgICAgICAgICAgbmV4dCh7bmFtZTogJ2hvbWUnfSk7XHJcbiAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIWNoZWNrLmluY2x1ZGVzKHRvLnBhdGgpKSB7XHJcbiAgICAgICAgICAgIG5leHQoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIG5leHQoKTtcclxufSk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCByb3V0ZXI7IiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5Zyo5YWD57Sg5YaF5a655Lmf6IO95L2/55So55qE5Y+Y6YePXHJcbiAgICB0b3BDb250ZXh0ICxcclxuICAgIC8vIOS4muWKoeWtl+WFuFxyXG4gICAgYnVzaW5lc3MgLFxyXG4gICAgLy8g5b2T5YmN55m75b2V55So5oi355qE5p2D6ZmQXHJcbiAgICBwcml2OiBbXSAsXHJcbiAgICAvLyDot6/nlLHliJfooahcclxuICAgIHJvdXRlOiBbXSAsXHJcbiAgICAvLyDoj5zljZXmlbDmja5cclxuICAgIG1lbnU6IFtdICxcclxuICAgIC8vIOeUqOaIt1xyXG4gICAgdXNlcjoge30gLFxyXG4gICAgb3M6IHtcclxuICAgICAgICBkZXZlbG9wZXI6IHt9ICxcclxuICAgICAgICBzeXN0ZW06IHt9ICxcclxuICAgIH0gLFxyXG59OyIsImltcG9ydCBzdGF0ZSBmcm9tICcuL3N0YXRlLmpzJztcclxuaW1wb3J0IGdldHRlcnMgZnJvbSAnLi9nZXR0ZXIuanMnO1xyXG5pbXBvcnQgbXV0YXRpb25zIGZyb20gJy4vbXV0YXRpb24uanMnO1xyXG5pbXBvcnQgYWN0aW9ucyBmcm9tICcuL2FjdGlvbi5qcyc7XHJcblxyXG4vLyDlpoLmnpzkvb/nlKjkuoYgbW9kdWxl77yM6K+35LiN55So5Zyo5L2/55SoXHJcbmNvbnN0IHN0b3JlID0gbmV3IFZ1ZXguU3RvcmUoe1xyXG4gICAgc3RhdGUgLFxyXG4gICAgZ2V0dGVycyAsXHJcbiAgICBtdXRhdGlvbnMgLFxyXG4gICAgYWN0aW9uc1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHN0b3JlOyIsImV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbn07IiwiZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5pu05paw54q25oCBXHJcbiAgICBwcml2IChzdGF0ZSAsIGRhdGEpIHtcclxuICAgICAgICBzdGF0ZS5wcml2ID0gZGF0YTtcclxuICAgIH0gLFxyXG5cclxuICAgIHJvdXRlIChzdGF0ZSAsIGRhdGEpIHtcclxuICAgICAgICBzdGF0ZS5yb3V0ZSA9IGRhdGE7XHJcbiAgICB9ICxcclxuXHJcbiAgICBtZW51IChzdGF0ZSAsIGRhdGEpIHtcclxuICAgICAgICBzdGF0ZS5tZW51ID0gZGF0YTtcclxuICAgIH0gLFxyXG5cclxuICAgIHVzZXIgKHN0YXRlICwgZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLnVzZXIgPSBkYXRhO1xyXG4gICAgfSAsXHJcblxyXG4gICAgb3MgKHN0YXRlICwgZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLm9zID0gZGF0YTtcclxuICAgIH0gLFxyXG59OyIsImV4cG9ydCBkZWZhdWx0IHtcclxuXHJcbn07IiwiaW1wb3J0IHJvdXRlciBmcm9tICcuLi8uLi92dWUvcm91dGVyJztcclxuaW1wb3J0IHN0b3JlIGZyb20gJy4uLy4uL3Z1ZS9zdG9yZSc7XHJcblxyXG5PYmplY3QuYXNzaWduKHdpbmRvdyAsIHtcclxuICAgIHJvdXRlciAsXHJcbiAgICBzdG9yZSAsXHJcbn0pOyIsImNvbnN0IGxvZ2luaW5nID0gYCR7dG9wQ29udGV4dC5hcGl9YWRtaW4vbG9naW5pbmdgO1xyXG5jb25zdCBpbmZvID0gYCR7dG9wQ29udGV4dC5hcGl9YWRtaW4vaW5mb2A7XHJcbmNvbnN0IHJlZnJlc2hUb2tlbiA9IGAke3RvcENvbnRleHQuYXBpfW9hdXRoL3Rva2VuYDtcclxuY29uc3QgYWRtaW4gPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pbi91c2VyYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9YWRtaW4vdXNlci8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pbi9pbWFnZWA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDnlKjmiLfnmbvlvZVcclxuICAgIGxvZ2luIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbG9naW5pbmcgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOazqOmUgFxyXG4gICAgbG9nb3V0IChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBsb2dpbmluZyAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOiOt+WPluW9k+WJjeeZu+W9leeUqOaIt+ebuOWFs+S/oeaBr1xyXG4gICAgaW5mbyAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW5mbyAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3IgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6I635Y+W5pyA5paw55qEIHRva2VuXHJcbiAgICByZWZyZXNoVG9rZW4gKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByZWZyZXNoVG9rZW4gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDojrflj5bnlKjmiLfliJfooahcclxuICAgIC8vIOiOt+WPluacgOaWsOeahCB0b2tlblxyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFkbWluICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhZG1pbiAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFkbWluICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDojrflj5bnlKjmiLfliJfooahcclxuICAgIC8vIOiOt+WPluacgOaWsOeahCB0b2tlblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwdXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiXHJcbmNvbnN0IHVzZXIgPSBgJHt0b3BDb250ZXh0LmFwaX11c2VyL3VzZXJgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHVzZXIgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWFydGljbGVUeXBlL2FydGljbGVUeXBlYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9YXJ0aWNsZVR5cGUvYXJ0aWNsZVR5cGUvP2A7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5Yig6ZmkXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1hcnRpY2xlL2FydGljbGVgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1hcnRpY2xlL2FydGljbGUvP2A7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9YXJ0aWNsZS9pbWFnZWA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5Yig6ZmkXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbWFnZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1zaG93SW1hZ2UvaW1hZ2VgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1zaG93SW1hZ2UvaW1hZ2UvP2A7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgdmVyaWZ5Q29kZSA9IGAke3RvcENvbnRleHQuYXBpfW1pc2MvdmVyaWZ5Q29kZWA7XHJcbmNvbnN0IHRyYW5zbGF0aW9uID0gYCR7dG9wQ29udGV4dC5hcGl9dHJhbnNsYXRpb24vdHJhbnNsYXRpb25gO1xyXG5cclxubGV0IHhockZvckNvZGUgPSBudWxsO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDojrflj5bpqozor4HnoIFcclxuICAgIHZlcmlmeUNvZGUgIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICBpZiAoeGhyRm9yQ29kZSBpbnN0YW5jZW9mIEcuYWpheCkge1xyXG4gICAgICAgICAgICB4aHJGb3JDb2RlLm5hdGl2ZSgnYWJvcnQnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHhockZvckNvZGUgPSBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHZlcmlmeUNvZGUgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDnv7vor5FcclxuICAgIHRyYW5zbGF0ZSAgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHRyYW5zbGF0aW9uICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxufTsiLCJjb25zdCByb3V0ZSA9IGAke3RvcENvbnRleHQuYXBpfXJvdXRlL3JvdXRlYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9cm91dGUvcm91dGUvP2A7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9cm91dGUvaW1hZ2VgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5paH56ug5YiG57G75YiX6KGoXHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm91dGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm91dGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDmt7vliqBcclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvdXRlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvdXRlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgLy8g5pu05pawXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IHJvbGUgPSBgJHt0b3BDb250ZXh0LmFwaX1yb2xlL3JvbGVgO1xyXG5jb25zdCBpbmZvID0gYCR7dG9wQ29udGV4dC5hcGl9cm9sZS9pbmZvLz9gO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1yb2xlL3JvbGUvP2A7XHJcbmNvbnN0IGF1dGggPSBgJHt0b3BDb250ZXh0LmFwaX1yb2xlL2F1dGhgO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1yb2xlL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDmlofnq6DliIbnsbvliJfooahcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByb2xlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOivpuaDhVxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS/ruaUuVxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvbGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDmt7vliqBcclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvbGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOWIoOmZpFxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm9sZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDop5LoibLmnYPpmZBcclxuICAgIGluZm8gKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW5mby5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGF1dGggKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhdXRoICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IGJyYW5kID0gYCR7dG9wQ29udGV4dC5hcGl9YnJhbmQvYnJhbmRgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1icmFuZC9icmFuZC8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1icmFuZC9pbWFnZWA7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWJyYW5kL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYnJhbmQgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYnJhbmQgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDmt7vliqBcclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGJyYW5kICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGJyYW5kICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbWFnZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwdXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkuIrkvKDlpLTlg49cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgY2FyU2VyaWVzR3JvdXAgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJTZXJpZXNHcm91cC9ncm91cGA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhclNlcmllc0dyb3VwL2dyb3VwLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJTZXJpZXNHcm91cC9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGNhclNlcmllc0dyb3VwICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzR3JvdXAgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBjYXJTZXJpZXNHcm91cCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzR3JvdXAgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgY2FyU2VyaWVzID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyU2VyaWVzL3Nlcmllc2A7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhclNlcmllcy9zZXJpZXMvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhclNlcmllcy9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGNhclNlcmllcyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGNhclNlcmllcyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGNhclNlcmllcyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb25Hcm91cC9ncm91cGA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb25Hcm91cC9ncm91cC8/YDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyQ29uZmlndXJhdGlvbkdyb3VwL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJDb25maWd1cmF0aW9uL2NhckNvbmZpZ3VyYXRpb25gO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJDb25maWd1cmF0aW9uL2NhckNvbmZpZ3VyYXRpb24vP2A7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyQ29uZmlndXJhdGlvbi9pbWFnZWA7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb24vYWxsYDtcclxuY29uc3QgZ3JvdXAgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJDb25maWd1cmF0aW9uL2dyb3VwYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOaWh+eroOWIhuexu+WIl+ihqFxyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5Yig6ZmkXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbWFnZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwdXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkuIrkvKDlpLTlg49cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5YiG57uE5pWw5o2uXHJcbiAgICBncm91cCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZ3JvdXAgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyVHlwZS9jYXJUeXBlYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyVHlwZS9jYXJUeXBlLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJUeXBlL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJNb2RlbC9jYXJNb2RlbGA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhck1vZGVsL2Nhck1vZGVsLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJNb2RlbC9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Nb2R1bGUvbW9kdWxlYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uTW9kdWxlL21vZHVsZS8/YDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uTW9kdWxlL2FsbGA7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uTW9kdWxlL2ltYWdlYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Hcm91cC9ncm91cGA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvbkdyb3VwL2dyb3VwLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Hcm91cC9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uUG9zL3Bvc2A7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvblBvcy9wb3MvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvblBvcy9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uSXRlbS9pdGVtYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uSXRlbS9pdGVtLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25JdGVtL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1zZXJ2aWNlL3NlcnZpY2VgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1zZXJ2aWNlL3NlcnZpY2UvP2A7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9c2VydmljZS9pbWFnZWA7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfXNlcnZpY2UvYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOaWh+eroOWIhuexu+WIl+ihqFxyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5Yig6ZmkXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbWFnZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwdXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkuIrkvKDlpLTlg49cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWNhci9jYXJgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXIvY2FyLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXIvYWxsYDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXIvaW1hZ2VgO1xyXG5jb25zdCB0aHVtYiA9IGAke3RvcENvbnRleHQuYXBpfWNhci90aHVtYmA7XHJcbmNvbnN0IHJ1bGUgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXIvcnVsZWA7XHJcbmNvbnN0IHJlcG9ydCA9IGAke3RvcENvbnRleHQuYXBpfWNhci9yZXBvcnRgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICB0aHVtYiAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHRodW1iICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWxJbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3IgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgcnVsZSAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcnVsZSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3IgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZ2V0UmVwb3J0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcmVwb3J0ICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3IgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgcmVwb3J0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcmVwb3J0ICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yICxcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1wbGF0Zm9ybS9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXNhbGVBcHBsaWNhdGlvbi9zYWxlQXBwbGljYXRpb25gO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIHVwZGF0ZVN0YXR1cyAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9cmVjb21tZW5kYXRpb25BcHBsaWNhdGlvbi9yZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uYDtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbiAgICB1cGRhdGVTdGF0dXMgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXN0YWdpbmdCdXlBcHBsaWNhdGlvbi9zdGFnaW5nQnV5QXBwbGljYXRpb25gO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIHVwZGF0ZVN0YXR1cyAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9cmVzZXJ2YXRpb24vcmVzZXJ2YXRpb25gO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIHVwZGF0ZVN0YXR1cyAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBpbmZvID0gYCR7dG9wQ29udGV4dC5hcGl9cGFubmVsL2luZm9gO1xyXG5jb25zdCBtb250aCA9IGAke3RvcENvbnRleHQuYXBpfXBhbm5lbC9tb250aGA7XHJcbmNvbnN0IHF1YXJ0ZXIgPSBgJHt0b3BDb250ZXh0LmFwaX1wYW5uZWwvcXVhcnRlcmA7XHJcbmNvbnN0IHllYXIgPSBgJHt0b3BDb250ZXh0LmFwaX1wYW5uZWwveWVhcmA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDnlKjmiLfnmbvlvZVcclxuICAgIGluZm8gKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGluZm8gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBtb250aCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1vbnRoICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIHF1YXJ0ZXIgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBxdWFydGVyICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIHllYXIgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiB5ZWFyICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1zdG9yeS9zdG9yeWA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfXN0b3J5L3N0b3J5Lz9gO1xyXG5jb25zdCBpbWFnZSA9IGAke3RvcENvbnRleHQuYXBpfXN0b3J5L2ltYWdlYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOivpuaDhVxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS/ruaUuVxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5re75YqgXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IHB1c2ggPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pblB1c2gvcHVzaGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcHVzaCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBwdXNoICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCIvKipcclxuICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICogYXBpIOiuvue9rlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuaW1wb3J0IGFkbWluQXBpIGZyb20gJy4uLy4uL2FwaS9hZG1pbi5qcyc7XHJcbmltcG9ydCB1c2VyQXBpIGZyb20gJy4uLy4uL2FwaS91c2VyLmpzJztcclxuaW1wb3J0IGFydGljbGVUeXBlQXBpIGZyb20gJy4uLy4uL2FwaS9hcnRpY2xlVHlwZS5qcyc7XHJcbmltcG9ydCBhcnRpY2xlQXBpIGZyb20gJy4uLy4uL2FwaS9hcnRpY2xlLmpzJztcclxuaW1wb3J0IHNob3dJbWFnZUFwaSBmcm9tICcuLi8uLi9hcGkvc2hvd0ltYWdlLmpzJztcclxuaW1wb3J0IG1pc2NBcGkgZnJvbSAnLi4vLi4vYXBpL21pc2MuanMnO1xyXG5pbXBvcnQgcm91dGVBcGkgZnJvbSAnLi4vLi4vYXBpL3JvdXRlLmpzJztcclxuaW1wb3J0IHJvbGVBcGkgZnJvbSAnLi4vLi4vYXBpL3JvbGUuanMnO1xyXG5pbXBvcnQgYnJhbmRBcGkgZnJvbSAnLi4vLi4vYXBpL0JyYW5kLmpzJztcclxuaW1wb3J0IGNhclNlcmllc0dyb3VwQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJTZXJpZXNHcm91cC5qcyc7XHJcbmltcG9ydCBjYXJTZXJpZXNBcGkgZnJvbSAnLi4vLi4vYXBpL2NhclNlcmllcy5qcyc7XHJcbmltcG9ydCBjYXJDb25maWd1cmF0aW9uR3JvdXBBcGkgZnJvbSAnLi4vLi4vYXBpL2NhckNvbmZpZ3VyYXRpb25Hcm91cC5qcyc7XHJcbmltcG9ydCBjYXJDb25maWd1cmF0aW9uQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJDb25maWd1cmF0aW9uLmpzJztcclxuaW1wb3J0IGNhclR5cGVBcGkgZnJvbSAnLi4vLi4vYXBpL2NhclR5cGUuanMnO1xyXG5pbXBvcnQgY2FyTW9kZWxBcGkgZnJvbSAnLi4vLi4vYXBpL2Nhck1vZGVsLmpzJztcclxuaW1wb3J0IGRldGVjdGlvbk1vZHVsZUFwaSBmcm9tICcuLi8uLi9hcGkvZGV0ZWN0aW9uTW9kdWxlLmpzJztcclxuaW1wb3J0IGRldGVjdGlvbkdyb3VwQXBpIGZyb20gJy4uLy4uL2FwaS9kZXRlY3Rpb25Hcm91cC5qcyc7XHJcbmltcG9ydCBkZXRlY3Rpb25Qb3NBcGkgZnJvbSAnLi4vLi4vYXBpL2RldGVjdGlvblBvcy5qcyc7XHJcbmltcG9ydCBkZXRlY3Rpb25JdGVtQXBpIGZyb20gJy4uLy4uL2FwaS9kZXRlY3Rpb25JdGVtLmpzJztcclxuaW1wb3J0IHNlcnZpY2VBcGkgZnJvbSAnLi4vLi4vYXBpL3NlcnZpY2UuanMnO1xyXG5pbXBvcnQgY2FyQXBpIGZyb20gJy4uLy4uL2FwaS9jYXIuanMnO1xyXG5pbXBvcnQgcGxhdGZvcm1BcGkgZnJvbSAnLi4vLi4vYXBpL3BsYXRmb3JtLmpzJztcclxuaW1wb3J0IHNhbGVBcHBsaWNhdGlvbkFwaSBmcm9tICcuLi8uLi9hcGkvc2FsZUFwcGxpY2F0aW9uLmpzJztcclxuaW1wb3J0IHJlY29tbWVuZGF0aW9uQXBwbGljYXRpb25BcGkgZnJvbSAnLi4vLi4vYXBpL3JlY29tbWVuZGF0aW9uQXBwbGljYXRpb24uanMnO1xyXG5pbXBvcnQgc3RhZ2luZ0J1eUFwcGxpY2F0aW9uQXBpIGZyb20gJy4uLy4uL2FwaS9zdGFnaW5nQnV5QXBwbGljYXRpb24uanMnO1xyXG5pbXBvcnQgcmVzZXJ2YXRpb25BcGkgZnJvbSAnLi4vLi4vYXBpL3Jlc2VydmF0aW9uLmpzJztcclxuaW1wb3J0IHBhbm5lbEFwaSBmcm9tICcuLi8uLi9hcGkvcGFubmVsLmpzJztcclxuaW1wb3J0IHN0b3J5QXBpIGZyb20gJy4uLy4uL2FwaS9zdG9yeS5qcyc7XHJcbmltcG9ydCBwdXNoQXBpIGZyb20gJy4uLy4uL2FwaS9wdXNoLmpzJztcclxuXHJcbk9iamVjdC5hc3NpZ24od2luZG93ICwge1xyXG4gICAgYWRtaW5BcGkgLFxyXG4gICAgYXJ0aWNsZVR5cGVBcGkgLFxyXG4gICAgYXJ0aWNsZUFwaSAsXHJcbiAgICBzaG93SW1hZ2VBcGkgLFxyXG4gICAgbWlzY0FwaSAsXHJcbiAgICByb3V0ZUFwaSAsXHJcbiAgICByb2xlQXBpICxcclxuICAgIGJyYW5kQXBpICxcclxuICAgIGNhclNlcmllc0dyb3VwQXBpICxcclxuICAgIGNhclNlcmllc0FwaSAsXHJcbiAgICBjYXJDb25maWd1cmF0aW9uR3JvdXBBcGkgLFxyXG4gICAgY2FyQ29uZmlndXJhdGlvbkFwaSAsXHJcbiAgICBjYXJUeXBlQXBpICxcclxuICAgIGNhck1vZGVsQXBpICxcclxuICAgIGRldGVjdGlvbk1vZHVsZUFwaSAsXHJcbiAgICBkZXRlY3Rpb25Hcm91cEFwaSAsXHJcbiAgICBkZXRlY3Rpb25Qb3NBcGkgLFxyXG4gICAgZGV0ZWN0aW9uSXRlbUFwaSAsXHJcbiAgICBzZXJ2aWNlQXBpICxcclxuICAgIGNhckFwaSAsXHJcbiAgICBwbGF0Zm9ybUFwaSAsXHJcbiAgICBzYWxlQXBwbGljYXRpb25BcGkgLFxyXG4gICAgcmVjb21tZW5kYXRpb25BcHBsaWNhdGlvbkFwaSAsXHJcbiAgICBzdGFnaW5nQnV5QXBwbGljYXRpb25BcGkgLFxyXG4gICAgcmVzZXJ2YXRpb25BcGkgLFxyXG4gICAgdXNlckFwaSAsXHJcbiAgICBwYW5uZWxBcGkgLFxyXG4gICAgc3RvcnlBcGkgLFxyXG4gICAgcHVzaEFwaSAsXHJcbn0pOyIsImV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHN0b3JlICxcclxuICAgIHJvdXRlciAsXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgZm9yY2VMb2dvdXQgLFxyXG4gICAgICAgIGlzTG9naW4gLFxyXG4gICAgICAgIHZTY3JvbGwgLFxyXG4gICAgICAgIGdldENsYXNzICxcclxuICAgICAgICAkc3VjY2VzcyAsXHJcbiAgICAgICAgJGVycm9yICxcclxuICAgICAgICAkbXNnICxcclxuICAgICAgICAkaW5mbyAsXHJcbiAgICAgICAgJHRpcCAsXHJcbiAgICAgICAgJHVua25vdyAsXHJcbiAgICAgICAgZmlyc3RMZXR0ZXIgLFxyXG4gICAgICAgIGRldGVybWluZSAsXHJcbiAgICAgICAgLy8g6YCa55+lXHJcbiAgICAgICAgbm90aWNlICh0eXBlICwgdGl0bGUgLCBkZXNjID0gJycgLCBkdXJhdGlvbiAsIG9uQ2xvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy4kTm90aWNlW3R5cGVdKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlICxcclxuICAgICAgICAgICAgICAgIGRlc2MgLFxyXG4gICAgICAgICAgICAgICAgZHVyYXRpb24gLCBcclxuICAgICAgICAgICAgICAgIG9uQ2xvc2UgLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBzTm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJyAsIGR1cmF0aW9uICwgY2xvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpY2UoJ3N1Y2Nlc3MnICwgdGl0bGUgLCBkZXNjICwgZHVyYXRpb24gLCBjbG9zZSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIHdOb3RpY2UgKHRpdGxlICwgZGVzYyA9ICcnICwgZHVyYXRpb24gLCBjbG9zZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGljZSgnd2FybmluZycgLCB0aXRsZSAsIGRlc2MgLCBkdXJhdGlvbiAsIGNsb3NlKTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgaU5vdGljZSAodGl0bGUgLCBkZXNjID0gJycgLCBkdXJhdGlvbiAsIGNsb3NlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm90aWNlKCdpbmZvJyAsIHRpdGxlICwgZGVzYyAsIGR1cmF0aW9uICwgY2xvc2UpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBlTm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJyAsIGR1cmF0aW9uICwgY2xvc2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpY2UoJ2Vycm9yJyAsIHRpdGxlICwgZGVzYyAsIGR1cmF0aW9uICwgY2xvc2UpO1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIHRvTGluayAodXJsKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5vcGVuKHVybCAsICdfYmxhbmsnKTtcclxuICAgICAgICB9ICxcclxuICAgIH0gLFxyXG4gICAgY29tcG9uZW50czoge1xyXG5cclxuICAgIH1cclxufTsiLCIvKipcclxuICogKioqKioqKioqKioqKioqKioqXHJcbiAqIOWFqOWxgOa3t+WFpVxyXG4gKiAqKioqKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCBtaXhpbiBmcm9tICcuLi8uLi92dWUvbWl4aW4nO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqXHJcbiAqIOWIneWni+WMluS7o+eggVxyXG4gKiAqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuVnVlLm1peGluKG1peGluKTsiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyBzdGF0aWNDbGFzczogXCJhcHBcIiB9LFxuICAgIFtfYyhcInJvdXRlci12aWV3XCIpLCBfdm0uX3YoXCIgXCIpLCBfYyhcInYtbG9hZGluZ1wiLCB7IHJlZjogXCJsb2FkaW5nXCIgfSldLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJhcHBcIj5cclxuICAgICAgICA8cm91dGVyLXZpZXc+PC9yb3V0ZXItdmlldz5cclxuICAgICAgICA8di1sb2FkaW5nIHJlZj1cImxvYWRpbmdcIj48L3YtbG9hZGluZz5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6ICd2LWFwcCcgLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaW5zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9hZGluZzogbnVsbCAsXHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIGRvbToge30gLFxyXG4gICAgICAgICAgICAgICAgYWpheDoge30gLFxyXG4gICAgICAgICAgICAgICAgcGVuZGluZzoge30gLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHt9ICxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBtaXhpbnM6IFtcclxuICAgICAgICAgICAgbWl4aW5zLmxvYWRpbmcgLFxyXG4gICAgICAgIF0gLFxyXG4gICAgICAgIG1vdW50ZWQgKCkge1xyXG5cclxuICAgICAgICB9ICxcclxuICAgIH07XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMzQyZjM1NiZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIyMzQyZjM1NlwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXHdvcmtcXFxcY29kZVxcXFxjYXJcXFxccHVibGljXFxcXG1vZHVsZVxcXFxhZG1pblxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjM0MmYzNTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjM0MmYzNTYnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjM0MmYzNTYmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMjM0MmYzNTYnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9BcHAudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfdm0uX20oMClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiTG9hZGluZ1wiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJiZ1wiIH0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImNvbnNcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0ZXh0XCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0sIFtfdm0uX3YoXCLkuIrkvKDln7rmnKzkv6Hmga/lvIDlp4tcIildKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhbmltYXRlXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpdGVtIGNlbnRlciBsaW5lLXNjYWxlIGhpZGVcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIpLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIpLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpdGVtIGNlbnRlciBiYWxsLXB1bHNlIGhpZGVcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIpLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaXRlbSByb2xsLWxvYWRlciBoaWRlXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvYWRlclwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvYWRlci1vdXR0ZXJcIiB9KSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibG9hZGVyLWlubmVyXCIgfSlcbiAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgIF0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnRuc1wiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ0biBjbG9zZVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicG9zaXRpdmVcIiB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm5lZ2F0aXZlXCIgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDwhLS0g5Yqg6L295bGCIC0tPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8IS0tIOWKoOi9veWFg+e0oCAtLT5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiTG9hZGluZ1wiPlxyXG4gICAgICAgICAgICA8IS0tIOiDjOaZr+minOiJsiAtLT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz0nYmcnPjwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY29uc1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIOi/m+W6puS/oeaBr++8muS7heWcqOW8gOWPkeaXtuS/neeVmSAtLT5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cImxpbmVcIj7kuIrkvKDln7rmnKzkv6Hmga/lvIDlp4s8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwhLS0g5Yqg6L295Yqo55S7IC0tPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImFuaW1hdGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIGxpbmUtc2NhbGUgLS0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0gY2VudGVyIGxpbmUtc2NhbGUgaGlkZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gYmFsbC1wdXJsc2UgLS0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0gY2VudGVyIGJhbGwtcHVsc2UgaGlkZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2PjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwhLS0gbG9hZGVyIC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtIHJvbGwtbG9hZGVyIGhpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvYWRlci1vdXR0ZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkZXItaW5uZXJcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwhLS0g5YWz6Zet5oyJ6ZKuIC0tPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiYnRuc1wiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0biBjbG9zZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3NpdGl2ZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJuZWdhdGl2ZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1sb2FkaW5nXCIgLFxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcblxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbG9hZGluZy52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MDE5MjJmZDEmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vbG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIwMTkyMmZkMVwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXHdvcmtcXFxcY29kZVxcXFxjYXJcXFxccHVibGljXFxcXG1vZHVsZVxcXFxhZG1pblxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMDE5MjJmZDEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMDE5MjJmZDEnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL2xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTAxOTIyZmQxJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzAxOTIyZmQxJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzb3VyY2UvdnVlL3ZpZXcvcHVibGljL2xvYWRpbmcudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImktc2VsZWN0XCIsXG4gICAge1xuICAgICAgc3R5bGU6IFwid2lkdGg6XCIgKyBfdm0ud2lkdGggKyBcInB4XCIsXG4gICAgICBtb2RlbDoge1xuICAgICAgICB2YWx1ZTogX3ZtLmNWYWx1ZSxcbiAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikge1xuICAgICAgICAgIF92bS5jVmFsdWUgPSAkJHZcbiAgICAgICAgfSxcbiAgICAgICAgZXhwcmVzc2lvbjogXCJjVmFsdWVcIlxuICAgICAgfVxuICAgIH0sXG4gICAgW1xuICAgICAgX3ZtLmhhc1xuICAgICAgICA/IF9jKFwiaS1vcHRpb25cIiwgeyBhdHRyczogeyB2YWx1ZTogX3ZtLnRvcC5rZXkgfSB9LCBbXG4gICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS50b3AudmFsdWUpKVxuICAgICAgICAgIF0pXG4gICAgICAgIDogX3ZtLl9lKCksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl9sKF92bS5kYXRhLCBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICBcImktb3B0aW9uXCIsXG4gICAgICAgICAgeyBrZXk6IHZbX3ZtLmF0dHIuaWRdLCBhdHRyczogeyB2YWx1ZTogdltfdm0uYXR0ci5pZF0gfSB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF92bS5fdihcbiAgICAgICAgICAgICAgX3ZtLl9zKFxuICAgICAgICAgICAgICAgIHZbX3ZtLmF0dHIuZmxvb3JdID4gMVxuICAgICAgICAgICAgICAgICAgPyBcInxcIiArIFwiX1wiLnJlcGVhdCgodltfdm0uYXR0ci5mbG9vcl0gLSAxKSAqIDQpXG4gICAgICAgICAgICAgICAgICA6IFwiXCJcbiAgICAgICAgICAgICAgKSArIF92bS5fcyh2W192bS5hdHRyLm5hbWVdKVxuICAgICAgICAgICAgKVxuICAgICAgICAgIF1cbiAgICAgICAgKVxuICAgICAgfSlcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxpLXNlbGVjdCB2LW1vZGVsPVwiY1ZhbHVlXCIgOnN0eWxlPVwiJ3dpZHRoOicgKyB3aWR0aCArICdweCdcIj5cclxuICAgICAgICA8aS1vcHRpb24gdi1pZj1cImhhc1wiIDp2YWx1ZT1cInRvcC5rZXlcIj57eyB0b3AudmFsdWUgfX08L2ktb3B0aW9uPlxyXG4gICAgICAgIDxpLW9wdGlvbiB2LWZvcj1cInYgaW4gZGF0YVwiIDp2YWx1ZT1cInZbYXR0ci5pZF1cIiA6a2V5PVwidlthdHRyLmlkXVwiPnt7IHZbYXR0ci5mbG9vcl0gPiAxID8gJ3wnICsgJ18nLnJlcGVhdCgodlthdHRyLmZsb29yXSAtIDEpICogNCkgOiAnJyB9fXt7IHZbYXR0ci5uYW1lXSB9fTwvaS1vcHRpb24+XHJcbiAgICA8L2ktc2VsZWN0PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcInYtc2VsZWN0XCIgLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgY1ZhbHVlOiAwICxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogW1N0cmluZyAsIE51bWJlcl0gLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBBcnJheSAsXHJcbiAgICAgICAgICAgICAgICByZXF1aXJlZDogdHJ1ZSAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB3aWR0aDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogTnVtYmVyICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IDIwMCAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAvLyDmmK/lkKbpnIDopoHpobbnuqfpoblcclxuICAgICAgICAgICAgaGFzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHRydWUgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgdG9wOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBPYmplY3QgLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiAwICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICfpobbnuqfliIbnsbsnICxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICBhdHRyOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBPYmplY3QgLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdpZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZsb29yOiAnZmxvb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbmFtZScsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgd2F0Y2g6IHtcclxuICAgICAgICAgICAgY1ZhbHVlIChudikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kZW1pdCgnaW5wdXQnICwgbnYpO1xyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZSAsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyIChudikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY1ZhbHVlID0gbnY7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWxlY3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zZWxlY3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9zZWxlY3QudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIxZGJiYmY3JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL3NlbGVjdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL3NlbGVjdC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjIxZGJiYmY3XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcyMWRiYmJmNycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcyMWRiYmJmNycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vc2VsZWN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMWRiYmJmNyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcyMWRiYmJmNycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic291cmNlL3Z1ZS92aWV3L3B1YmxpYy9zZWxlY3QudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJicmFuZC1jb250YWluZXJcIiB9LCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxlZnRcIiB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJsZXR0ZXJcIiB9LFxuICAgICAgICAgIFtcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImN1clwiLCBhdHRyczogeyBcImRhdGEtdHlwZVwiOiBcImFsbFwiIH0gfSwgW1xuICAgICAgICAgICAgICBfdm0uX3YoXCLmiYDmnInlk4HniYxcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IGF0dHJzOiB7IFwiZGF0YS10eXBlXCI6IFwiaG90XCIgfSB9LCBbX3ZtLl92KFwi54Ot6Zeo5ZOB54mMXCIpXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX3ZtLl9sKF92bS5sZXR0ZXIsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIF9jKFwic3BhblwiLCB7IGtleTogdiwgYXR0cnM6IHsgXCJkYXRhLWxldHRlclwiOiB2IH0gfSwgW1xuICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3ModikpXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIF0sXG4gICAgICAgICAgMlxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiYnJhbmRcIiB9LFxuICAgICAgICAgIF92bS5fbChfdm0uYnJhbmQsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIml0ZW1cIixcbiAgICAgICAgICAgICAgICBhdHRyczoge1xuICAgICAgICAgICAgICAgICAgXCJkYXRhLWlkXCI6IHYuaWQsXG4gICAgICAgICAgICAgICAgICBcImRhdGEtaG90XCI6IHYuaG90LFxuICAgICAgICAgICAgICAgICAgXCJkYXRhLWxldHRlclwiOiB2LmxldHRlcixcbiAgICAgICAgICAgICAgICAgIFwiZGF0YS1uYW1lXCI6IHYubmFtZVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibG9nbyBmdWxsXCIgfSwgW1xuICAgICAgICAgICAgICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgICAgICBhdHRyczogeyBzcmM6IHYubG9nb19leHBsYWluIH1cbiAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm5hbWUgZnVsbFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF92bS5fdihfdm0uX3Modi5uYW1lKSlcbiAgICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgIF92bS5fbSgwLCB0cnVlKVxuICAgICAgICAgICAgICBdXG4gICAgICAgICAgICApXG4gICAgICAgICAgfSksXG4gICAgICAgICAgMFxuICAgICAgICApLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMSksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF92bS5fbSgyKVxuICAgICAgXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX3ZtLl9tKDMpXG4gICAgXSlcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwic3RhdHVzIGhpZGVcIiB9LCBbXG4gICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImltYWdlXCIsXG4gICAgICAgIGF0dHJzOiB7IHNyYzogXCIvcGx1Z2luL0JyYW5kL2ltYWdlL3NlbGVjdGVkLnBuZ1wiIH1cbiAgICAgIH0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJzZWxlY3RlZFwiIH0sIFtcbiAgICAgIF9jKFwiaDRcIiwgeyBzdGF0aWNDbGFzczogXCJoZWFkZXIgd2VpZ2h0XCIgfSwgW192bS5fdihcIuW3sumAieaLqeeahOWTgeeJjO+8mlwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwicFwiLCB7IHN0YXRpY0NsYXNzOiBcImJyYW5kXCIgfSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZ1bmN0aW9uIGhpZGVcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIGNvbmZpcm1cIixcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIuehruWumlwiKV1cbiAgICAgICksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJydW4tYnV0dG9uIHJ1bi1idXR0b24tb3JhbmdlIGNhbmNlbFwiLFxuICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfVxuICAgICAgICB9LFxuICAgICAgICBbX3ZtLl92KFwi5Y+W5raIXCIpXVxuICAgICAgKVxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwicmlnaHRcIiB9LCBbXG4gICAgICBfYyhcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIGN0cmxcIixcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIivlsZXlvIBcIildXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwicnVuLWJ1dHRvbiBydW4tYnV0dG9uLWJsdWUgbW9kZVwiLFxuICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfVxuICAgICAgICB9LFxuICAgICAgICBbX3ZtLl92KFwi5aSa6YCJXCIpXVxuICAgICAgKVxuICAgIF0pXG4gIH1cbl1cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiYnJhbmQtY29udGFpbmVyXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGV0dGVyXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9J2N1cicgZGF0YS10eXBlPVwiYWxsXCI+5omA5pyJ5ZOB54mMPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGRhdGEtdHlwZT1cImhvdFwiPueDremXqOWTgeeJjDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiB2LWZvcj1cInYgaW4gbGV0dGVyXCIgOmtleT1cInZcIiA6ZGF0YS1sZXR0ZXI9XCJ2XCI+e3sgdiB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJyYW5kXCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtXCIgdi1mb3I9XCJ2IGluIGJyYW5kXCIgOmRhdGEtaWQ9XCJ2LmlkXCIgOmRhdGEtaG90PVwidi5ob3RcIiA6ZGF0YS1sZXR0ZXI9XCJ2LmxldHRlclwiIDpkYXRhLW5hbWU9XCJ2Lm5hbWVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxvZ28gZnVsbFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZyA6c3JjPVwidi5sb2dvX2V4cGxhaW5cIiBjbGFzcz1cImltYWdlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmFtZSBmdWxsXCI+e3sgdi5uYW1lIH19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzdGF0dXMgaGlkZVwiPjxpbWcgc3JjPVwiL3BsdWdpbi9CcmFuZC9pbWFnZS9zZWxlY3RlZC5wbmdcIiBjbGFzcz1cImltYWdlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic2VsZWN0ZWRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8aDQgY2xhc3M9XCJoZWFkZXIgd2VpZ2h0XCI+5bey6YCJ5oup55qE5ZOB54mM77yaPC9oND5cclxuICAgICAgICAgICAgICAgICAgICA8cCBjbGFzcz1cImJyYW5kXCI+PC9wPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZnVuY3Rpb24gaGlkZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicnVuLWJ1dHRvbiBydW4tYnV0dG9uLWJsdWUgY29uZmlybVwiPuehruWumjwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwicnVuLWJ1dHRvbiBydW4tYnV0dG9uLW9yYW5nZSBjYW5jZWxcIj7lj5bmtog8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInJpZ2h0XCI+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIGN0cmxcIj4r5bGV5byAPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIG1vZGVcIj7lpJrpgIk8L2J1dHRvbj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJ2LWJyYW5kXCIgLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGJyYW5kOiB7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0ICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogMSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3Q6ICd5JyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXR0ZXI6ICdBJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAn5aWl6L+qJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2dvOiAnJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgZGF0YSAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBsZXR0ZXI6IFtdICxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9ICxcclxuICAgICAgICB3YXRjaDoge1xyXG4gICAgICAgICAgICBicmFuZDoge1xyXG4gICAgICAgICAgICAgICAgaW1tZWRpYXRlOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIGhhbmRsZXIgKG52KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGxldHRlciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIG52LmZvckVhY2goKHYpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxldHRlci5pbmRleE9mKHYubGV0dGVyKSA9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVyLnB1c2godi5sZXR0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0dGVyLnNvcnQoKGEgLCBiKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhID4gYiA/IDEgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxldHRlciA9IGxldHRlcjtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG48c3R5bGUgc2NvcGVkPjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYnJhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9icmFuZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2JyYW5kLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0zMDFmZDdkYyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9icmFuZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2JyYW5kLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMzAxZmQ3ZGNcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFx3b3JrXFxcXGNvZGVcXFxcY2FyXFxcXHB1YmxpY1xcXFxtb2R1bGVcXFxcYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzMwMWZkN2RjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzMwMWZkN2RjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9icmFuZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzAxZmQ3ZGMmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMzAxZmQ3ZGMnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJtZW51LXN3aXRjaFwiIH0sXG4gICAgICBfdm0uX2woX3ZtLmRhdGEsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmV0dXJuIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJpdGVtIGN1clwiLCBhdHRyczogeyBcImRhdGEtaWRcIjogdi5pZCB9IH0sXG4gICAgICAgICAgW192bS5fdihfdm0uX3Modi5uYW1lKSldXG4gICAgICAgIClcbiAgICAgIH0pLFxuICAgICAgMFxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2PlxyXG4gICAgICAgIDxkaXYgY2xhc3M9J21lbnUtc3dpdGNoJz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz0naXRlbSBjdXInIHYtZm9yPVwidiBpbiBkYXRhXCIgOmRhdGEtaWQ9XCJ2LmlkXCI+e3sgdi5uYW1lIH19PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJ2LW1lbnUtc3dpdGNoXCIgLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgaW5zOiB7fSAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQXJyYXkgLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICdvbmUnICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICfpgInpobkxJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6ICd0d28nICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICfpgInpobkyJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgfSAsXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vTWVudVN3aXRjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01lbnVTd2l0Y2gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9NZW51U3dpdGNoLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD02NjhiNjhlNCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9NZW51U3dpdGNoLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vTWVudVN3aXRjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjY2OGI2OGU0XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCc2NjhiNjhlNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCc2NjhiNjhlNCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vTWVudVN3aXRjaC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjY4YjY4ZTQmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNjY4YjY4ZTQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9wdWJsaWMvTWVudVN3aXRjaC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiYnV0dG9uXCIsXG4gICAge1xuICAgICAgc3RhdGljQ2xhc3M6IFwicnVuLWJ1dHRvblwiLFxuICAgICAgY2xhc3M6IFwicnVuLWJ1dHRvbi1cIiArIF92bS5jb2xvcixcbiAgICAgIGF0dHJzOiB7IHR5cGU6IF92bS50eXBlIH0sXG4gICAgICBvbjoge1xuICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7XG4gICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXG4gICAgICAgICAgcmV0dXJuIF92bS4kZW1pdChcImNsaWNrXCIpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF92bS5oYXNcbiAgICAgICAgPyBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJydW4taWNvbmZvbnRcIiwgY2xhc3M6IFwicnVuLVwiICsgX3ZtLmljbyB9KVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl90KFwiZGVmYXVsdFwiKVxuICAgIF0sXG4gICAgMlxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGJ1dHRvbiA6dHlwZT1cInR5cGVcIiBjbGFzcz1cInJ1bi1idXR0b25cIiA6Y2xhc3M9XCJgcnVuLWJ1dHRvbi0ke2NvbG9yfWBcIiBAY2xpY2suc3RvcD1cIiRlbWl0KCdjbGljaycpXCI+PGkgY2xhc3M9XCJydW4taWNvbmZvbnRcIiA6Y2xhc3M9XCJgcnVuLSR7aWNvfWBcIiB2LWlmPVwiaGFzXCI+PC9pPjxzbG90Pjwvc2xvdD48L2J1dHRvbj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJ2LWJ1dHRvblwiICxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBjb2xvcjoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdibHVlJyAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICBoYXM6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IEJvb2xlYW4gLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogZmFsc2UgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgaWNvOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcgLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJ2VkaXQnICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIHR5cGU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyAsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnYnV0dG9uJ1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcblxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2J1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2J1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2J1dHRvbi52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9Y2MyMmI5YTYmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vYnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vYnV0dG9uLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiY2MyMmI5YTZcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFx3b3JrXFxcXGNvZGVcXFxcY2FyXFxcXHB1YmxpY1xcXFxtb2R1bGVcXFxcYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJ2NjMjJiOWE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJ2NjMjJiOWE2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9idXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNjMjJiOWE2JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJ2NjMjJiOWE2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzb3VyY2UvdnVlL3ZpZXcvcHVibGljL2J1dHRvbi52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCIvKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKipcclxuICog57uE5Lu25rOo5YaMXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuaW1wb3J0IGFwcCBmcm9tICcuLi8uLi92dWUvdmlldy9BcHAudnVlJztcclxuaW1wb3J0IGxvYWRpbmcgZnJvbSAnLi4vLi4vdnVlL3ZpZXcvcHVibGljL2xvYWRpbmcudnVlJztcclxuaW1wb3J0IHNlbGVjdCBmcm9tICcuLi8uLi92dWUvdmlldy9wdWJsaWMvc2VsZWN0LnZ1ZSc7XHJcbmltcG9ydCBicmFuZCBmcm9tICcuLi8uLi92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlJztcclxuaW1wb3J0IG1lbnVTd2l0Y2ggZnJvbSAnLi4vLi4vdnVlL3ZpZXcvcHVibGljL01lbnVTd2l0Y2gudnVlJztcclxuaW1wb3J0IGJ1dHRvbiBmcm9tICcuLi8uLi92dWUvdmlldy9wdWJsaWMvYnV0dG9uLnZ1ZSc7XHJcblxyXG5cclxuLy8g5rOo5YaM5YWo5bGA57uE5bu6XHJcblZ1ZS5jb21wb25lbnQoJ3YtYXBwJyAsIGFwcCk7XHJcblZ1ZS5jb21wb25lbnQoJ3YtbG9hZGluZycgLCBsb2FkaW5nKTtcclxuVnVlLmNvbXBvbmVudCgndi1zZWxlY3QnICwgc2VsZWN0KTtcclxuVnVlLmNvbXBvbmVudCgndi1icmFuZCcgLCBicmFuZCk7XHJcblZ1ZS5jb21wb25lbnQoJ3YtbWVudS1zd2l0Y2gnICwgbWVudVN3aXRjaCk7XHJcblZ1ZS5jb21wb25lbnQoJ3YtYnV0dG9uJyAsIGJ1dHRvbik7XHJcblxyXG5cclxuIiwiLyoqXHJcbiAqIOWvvOWFpSBjc3Mg5qC35byPXHJcbiAqL1xyXG4vLyBpbXBvcnQgJ2l2aWV3LmNzcyc7XHJcbmltcG9ydCAnLi9hc3NldC9jc3MvaXZpZXdSZXNldC5jc3MnO1xyXG5pbXBvcnQgJy4vYXNzZXQvY3NzL3B1YmxpYy5jc3MnO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIOi+heWKqSBqc1xyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuaW1wb3J0ICcuL2Fzc2V0L2pzL2J1c2luZXNzLmpzJztcclxuXHJcbi8qKlxyXG4gKiDliJ3lp4vljJYganNcclxuICovXHJcbmltcG9ydCAnLi9hc3NldC9qcy9nbG9iYWwuanMnO1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvc3ViR2xvYmFsLmpzJztcclxuaW1wb3J0ICcuL2Fzc2V0L2pzL2N1cnJlbmN5LmpzJztcclxuaW1wb3J0ICcuL2Fzc2V0L2pzL2luaXRpYWxpemUuanMnO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqXHJcbiAqIGh0dHAg6K+35rGCXHJcbiAqICoqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvYXBpLmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqXHJcbiAqIOWFqOWxgOa3t+WFpVxyXG4gKiAqKioqKioqKioqKioqXHJcbiAqL1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvbWl4aW4uanMnO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKipcclxuICog5rOo5YaM57uE5Lu2XHJcbiAqICoqKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCAnLi9hc3NldC9qcy9jb21wb25lbnQuanMnO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKlxyXG4gKiBpdmlldyB1aSDmoYbmnrZcclxuICogKioqKioqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG4vLyBpbXBvcnQgJ2l2aWV3LmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKlxyXG4gKiDniYjmnKzmm7TmlrDmj5DnpLpcclxuICogKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCAnLi9hc3NldC9qcy92ZXJzaW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKlxyXG4gKiDliJ3lp4vljJbku6PnoIFcclxuICogKioqKioqKioqKioqKipcclxuICovXHJcbm5ldyBWdWUoe1xyXG4gICAgZWw6ICcjYXBwJyAsXHJcbiAgICB0ZW1wbGF0ZTogJzx2LWFwcD48L3YtYXBwPidcclxufSk7XHJcblxyXG4vLyDnmbvlvZXpobUg5ZKMIOWQjuWPsOmmlumhteeahOWIh1xyXG4iXSwic291cmNlUm9vdCI6IiJ9