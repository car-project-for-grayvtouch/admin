(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{342:function(t,i,s){"use strict";s.r(i);var e=function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",{staticClass:"container"},[e("v-loading",{ref:"loading"}),t._v(" "),e("div",{ref:"left",staticClass:"left"},[e("div",{staticClass:"in"},[e("div",{ref:"left-top",staticClass:"top"},[e("div",{staticClass:"logo"},[e("div",{staticClass:"left"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.os.system.logo}})]),t._v(" "),e("div",{staticClass:"right"},[t._v(t._s(t.$store.state.os.system.name))])]),t._v(" "),e("div",{ref:"user",staticClass:"user"},[e("div",{staticClass:"top"},[e("div",{staticClass:"image-container"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.user.avatar_explain}})])]),t._v(" "),e("div",{staticClass:"btm"},[t._v(t._s(t.$store.state.user.username))])]),t._v(" "),e("div",{ref:"block",staticClass:"block"},[e("div",{ref:"horizontal",staticClass:"horizontal",on:{click:t.vertical}},[t._m(0)]),t._v(" "),e("div",{ref:"vertical",staticClass:"vertical hide",on:{click:t.horizontal}},[t._m(1)])])]),t._v(" "),e("div",{ref:"infinite-classification",staticClass:"mid"},[e("v-menu")],1),t._v(" "),e("div",{ref:"left-btm",staticClass:"btm"},[t._v(t._s(t.$store.state.os.system.name))])])]),t._v(" "),e("div",{ref:"right",staticClass:"right"},[e("div",{ref:"right-top",staticClass:"top"},[e("div",{staticClass:"c-top"},[e("div",{staticClass:"left"},[e("div",{staticClass:"translate",attrs:{title:"这是用来生成常用中英文对照字典，加快前端展示的功能，请再更新数据后不定时调用此功能，以保证前端中英文流畅切换"},on:{click:t.translate}},[e("img",{staticClass:"image",attrs:{src:s(538)}})])]),t._v(" "),e("div",{staticClass:"right"},[e("div",{staticClass:"notification",on:{click:t.showSlidebar}},[e("div",{staticClass:"in"},[t._m(2),t._v(" "),e("div",{staticClass:"text"},[t._v(t._s(t.unread))])])]),t._v(" "),e("div",{staticClass:"user",on:{mouseenter:t.showUserCtrl,mouseleave:t.hideUserCtrl}},[e("div",{staticClass:"ctrl"},[e("div",{staticClass:"avatar"},[e("div",{staticClass:"image-container"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.user.avatar_explain}})])]),t._v(" "),e("div",{staticClass:"username"},[t._v(t._s(t.$store.state.user.username))])]),t._v(" "),e("div",{ref:"functions-for-user",staticClass:"functions hide"},[e("div",{staticClass:"function",on:{click:t.logout}},[t._m(3),t._v(" "),e("div",{staticClass:"right"},[t._v("注销")])])])])])]),t._v(" "),e("div",{ref:"multiple-tab",staticClass:"c-btm"},[t._m(4)])]),t._v(" "),e("div",{staticClass:"btm"},[e("div",{staticClass:"dynamic"},[e("div",{ref:"con",staticClass:"in"})])])]),t._v(" "),e("div",{ref:"slidebar",staticClass:"slidebar-container"},[e("div",{staticClass:"slidebar hide"},[e("div",{staticClass:"mask"}),t._v(" "),e("div",{staticClass:"con"},[e("div",{ref:"push",staticClass:"in"},[e("div",{staticClass:"lines"},t._l(t.push,function(i){return e("div",{key:i.id,staticClass:"line",on:{click:function(s){return t.$info(i.data)}}},[e("div",{staticClass:"left"},[e("div",{staticClass:"ico"},["system"==i.type?e("img",{staticClass:"image",attrs:{src:s(539)}}):t._e()]),t._v(" "),e("div",{staticClass:"text"},[t._v(t._s(i.data))])]),t._v(" "),e("div",{staticClass:"right"},[t._v(t._s(i.format_time))])])}),0),t._v(" "),t.pending.push?e("div",{staticClass:"loading"},[t._v("加载中...")]):t._e(),t._v(" "),t.value.loadedPush?e("div",{staticClass:"no-more"},[t._v("已经到底了")]):t._e()])])])]),t._v(" "),e("v-communication",{ref:"communication"})],1)},n=[function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"in"},[i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"in"},[i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"image-container"},[i("img",{staticClass:"image",attrs:{src:s(540)}})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"left"},[i("img",{staticClass:"image",attrs:{src:s(541)}})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"multiple-tab"},[i("div",{staticClass:"tabs"})])}];e._withStripped=!0;var a=s(397),o=s.n(a),r=function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"infinite-classification"},[i("div",{staticClass:"list"},this._l(this.$store.state.menu,function(t){return i("v-item",{key:t.id,attrs:{data:t}})}),1)])};r._withStripped=!0;var c=function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("div",{staticClass:"item",attrs:{"data-id":t.data.id}},[s("div",{staticClass:"function"},[s("div",{staticClass:"icon"},[t.data.floor>1?s("span",{staticClass:"text"}):t._e(),t._v(" "),s("img",{staticClass:"image",attrs:{src:t.data.s_ico_explain}})]),t._v(" "),s("div",{staticClass:"explain"},[s("div",{staticClass:"in"},[t._m(0),t._v(" "),s("div",{staticClass:"text"},[t._v(t._s(t.data.name))])])]),t._v(" "),t._m(1)]),t._v(" "),s("div",{staticClass:"child"},[s("div",{staticClass:"list"},t._l(t.data.children,function(t){return s("v-item",{key:t.id,attrs:{data:t}})}),1)])])};c._withStripped=!0;var l={name:"v-item",props:{data:{type:Object,required:!0,default:{}}}},u=s(14),h=Object(u.a)(l,c,[function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"ico"},[i("img",{staticClass:"image",attrs:{src:"/plugin/InfiniteClassification/image/default/ring.png"}})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"flag hide"},[i("div",{staticClass:"new"},[this._v("新的")]),this._v(" "),i("div",{staticClass:"number"},[this._v("10")]),this._v(" "),i("div",{staticClass:"switch"},[i("img",{staticClass:"image",attrs:{src:"/plugin/InfiniteClassification/image/default/spread.png"}})])])}],!1,null,"fa034964",null);h.options.__file="source/vue/view/public/item.vue";var d={name:"v-menu",data:function(){return{}},created:function(){},mounted:function(){},components:{"v-item":h.exports}},m=Object(u.a)(d,r,[],!1,null,"18d1ef9a",null);m.options.__file="source/vue/view/public/menu.vue";var v=m.exports,f=function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("div",{ref:"module-nav",staticClass:"module-nav"},[s("div",{staticClass:"placeholder",class:t.fixed?"":"hide"}),t._v(" "),s("div",{ref:"nav",staticClass:"nav",class:t.fixed?"fixed-nav":""},[s("div",{staticClass:"left"},[s("img",{staticClass:"image",attrs:{src:t.topRoute.b_ico_explain}}),t._v(" "),s("span",{staticClass:"cn"},[t._v(t._s(t.topRoute.name))]),t._v(" "),s("span",{staticClass:"delimiter"},[t._v("/")]),t._v(" "),s("span",{staticClass:"en"},[t._v(t._s(t.topRoute.en))]),t._v("\n              \n            "),s("button",{staticClass:"run-button run-button-blue",on:{click:function(i){return i.preventDefault(),t.$parent.reload()}}},[s("i",{staticClass:"run-iconfont run-reset"}),t._v("标签页刷新\n            ")])]),t._v(" "),s("div",{staticClass:"right"},[t._l(t.pos,function(i,e){return[s("span",{staticClass:"text",on:{click:function(s){""!=i.route&&i.route!=t.$parent.route.route&&t.$parent.location(i.route)}}},[t._v(t._s(i.name))]),t._v(" "),e!=t.pos.length-1?s("span",{staticClass:"delimiter"},[t._v("/")]):t._e()]})],2)])])};f._withStripped=!0;var p={name:"v-module-nav",data:function(){return{dom:{},ins:{},fixed:!1,value:{}}},props:{topRoute:{type:Object,required:!0,default:{}},pos:{type:Array,required:!0,default:[]}},mounted:function(){this.initDom(),this.initInstance(),this.initialize()},methods:{initDom:function(){this.dom.nav=G(this.$refs.nav),this.dom.moduleNav=G(this.$refs["module-nav"]),this.dom.win=G(window)},initInstance:function(){},initialize:function(){this.value.navH=this.dom.nav.height("content-box"),this.fixNav(),this.dom.win.on("scroll",this.fixNav.bind(this),!0,!1)},fixNav:function(){var t=window.pageYOffset;0<=t&&t<=this.value.navH?this.fixed=!1:this.fixed=!0}}},g=(s(542),Object(u.a)(p,f,[],!1,null,"0e2540ec",null));g.options.__file="source/vue/view/public/moduleNav.vue";var _=g.exports,C=function(){var t=this,i=t.$createElement,s=t._self._c||i;return s("div",{staticClass:"real-time-communication"},[s("div",{ref:"real-time-communication-minimum",staticClass:"real-time-communication-minimum"},[s("div",{staticClass:"left"},[s("div",{staticClass:"avatar"},[s("div",{staticClass:"image-container"},[s("img",{staticClass:"image",attrs:{src:t.user.avatar}})])]),t._v(" "),s("div",[t._v(t._s(t.user.nickname))])]),t._v(" "),s("div",{staticClass:"right"},[s("div",{staticClass:"unread"},[t._v(t._s(t.unread))])])]),t._v(" "),s("div",{ref:"real-time-communication-maximum",staticClass:"real-time-communication-maximum hide",class:"user"==t.user.role?"real-time-communication-maximum-for-user":""},[s("div",{ref:"close",staticClass:"close"},[s("img",{staticClass:"image",attrs:{src:t.host+"/static/image/minimum.png"}})]),t._v(" "),s("div",{ref:"user",staticClass:"user hide"},[s("div",{ref:"user-outer",staticClass:"outer"},[s("div",{ref:"user-in",staticClass:"in"},[s("div",{staticClass:"top avatar"},[s("div",{staticClass:"image-container"},[s("img",{staticClass:"image",attrs:{src:t.user.avatar}})])]),t._v(" "),s("div",{staticClass:"btm"},[s("div",{staticClass:"username"},[t._v(t._s(t.user.nickname))])])])]),t._v(" "),s("div",{ref:"mask",staticClass:"mask"})]),t._v(" "),s("div",{staticClass:"content"},[s("div",{staticClass:"left"},[s("div",{ref:"left-top",staticClass:"top"},[s("div",{staticClass:"left"},[s("div",{ref:"avatar",staticClass:"avatar"},[s("div",{staticClass:"image-container"},[s("img",{staticClass:"image",attrs:{src:t.user.avatar}})])]),t._v(" "),s("div",{staticClass:"username"},[t._v(t._s(t.user.nickname))])]),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("div",{ref:"left-mid",staticClass:"mid"},[s("div",{staticClass:"item cur"},[s("img",{staticClass:"image",attrs:{src:t.host+"/static/image/message.png"}})])]),t._v(" "),s("div",{ref:"left-btm",staticClass:"btm session"},t._l(t.session,function(i){return s("div",{key:i.session_id,staticClass:"item",class:i.session_id==t.current.session_id?"cur":"",on:{click:function(s){return t.switchSession(i.session_id)}}},[s("div",{staticClass:"left"},[s("div",{staticClass:"image-container"},["group"==i.type?s("img",{staticClass:"image",attrs:{src:i.group?i.group.image_explain:""}}):t._e()])]),t._v(" "),s("div",{staticClass:"right"},[s("div",{staticClass:"in"},[s("div",{staticClass:"left"},[s("div",{staticClass:"top"},["group"==i.type?[t._v(t._s(i.group?i.group.name:""))]:t._e()],2),t._v(" "),s("div",{staticClass:"btm"},[i.recent_message?["text"==i.recent_message.type?[t._v(t._s(i.recent_message.message))]:t._e()]:t._e()],2)]),t._v(" "),s("div",{staticClass:"right"},[s("div",{staticClass:"top"},[t._v(t._s(i.recent_message?i.recent_message.create_time:""))]),t._v(" "),s("div",{staticClass:"btm"},[s("span",{staticClass:"unread"},[t._v(t._s(i.unread))])])])])])])}),0)]),t._v(" "),s("div",{staticClass:"right"},[s("div",{staticClass:"window"},[s("div",{staticClass:"top"},[s("div",{staticClass:"left"},["group"==t.current.type?[t._v(t._s(t.current.group?t.current.group.name:""))]:t._e()],2),t._v(" "),s("div",{staticClass:"right"})]),t._v(" "),s("div",{ref:"history",staticClass:"mid"},[s("div",{staticClass:"loading"},[!t.history.all&&t.history.loading?s("span",[t._v("加载中...")]):s("span",{staticClass:"gray"},[t._v("已经到底了")])]),t._v(" "),s("div",{ref:"message",staticClass:"history"},[t._l(t.history.history,function(i){return[s("div",{staticClass:"message",class:i.myself?"myself":"other",attrs:{"data-id":i.id}},[s("div",{staticClass:"in"},[s("div",{staticClass:"left"},[s("div",{staticClass:"image-container"},[s("img",{staticClass:"image",attrs:{src:i.user?i.user.avatar:""}})])]),t._v(" "),s("div",{staticClass:"right"},[s("div",{staticClass:"top"},[s("div",{staticClass:"in"},[t._v(t._s(i.user?i.user.nickname?i.user.nickname:i.user.username:"")+" "+t._s(i.create_time))])]),t._v(" "),s("div",{staticClass:"mid"},[s("div",{staticClass:"in"},[s("div",{staticClass:"text"},[t._v(t._s(i.message))]),t._v(" "),s("div",{staticClass:"loading"},[s("img",{staticClass:"image image-for-loading",class:i.loading?"":"hide",attrs:{src:t.host+"/static/image/loading.png"}}),t._v(" "),s("img",{staticClass:"image ",class:i.error?"":"hide",attrs:{src:t.host+"/static/image/fail.png"}})])])]),t._v(" "),s("div",{staticClass:"btm"},[s("div",{staticClass:"in red",class:i.error?"":"hide"},[t._v("发送失败："+t._s(i.error))])])])])])]})],2)]),t._v(" "),s("div",{staticClass:"btm"},[s("div",{staticClass:"top hide"}),t._v(" "),s("div",{ref:"input",staticClass:"mid"},[s("textarea",{directives:[{name:"model",rawName:"v-model",value:t.message,expression:"message"}],ref:"textarea",staticClass:"input",attrs:{autofocus:"autofocus",placeholder:"请输入..."},domProps:{value:t.message},on:{keyup:t.contentKeyUpEvent,input:function(i){i.target.composing||(t.message=i.target.value)}}})]),t._v(" "),s("div",{staticClass:"btm"},[s("button",{ref:"send",staticClass:"send",attrs:{type:"button",title:"ENTER"},on:{click:t.sendEvent}},[t._v("发送（ENTER）")])])])]),t._v(" "),s("div",{staticClass:"empty",class:t.once?"":"hide"},[s("div",{staticClass:"in"},[t._v("请选择会话")])])])])])])};C._withStripped=!0;var x={name:"v-communication",data:function(){return{identifier:topContext.websocketIdentifier,unique_code:"",platform:"pc",websocket:topContext.websocket,host:topContext.websocketHost,session:[],conn:null,user:{},dom:{},current:{},histories:{},history:{loading:!1,all:!1,history:[]},value:{},sessionTempValue:{},message:"",once:!0,loading:{},duration:200,islogged:!1,unread:0,isOnceInit:!0}},mounted:function(){},methods:{run:function(){this.unique_code=this.$store.state.user.unique_code,this.initDom(),this.initStatic(),this.initDynamic(),this.initSocket(),this.defineEvent()},initDom:function(){this.dom.container=G(this.$el),this.dom.close=G(this.$refs.close),this.dom.leftTop=G(this.$refs["left-top"]),this.dom.leftMid=G(this.$refs["left-mid"]),this.dom.leftBtm=G(this.$refs["left-btm"]),this.dom.history=G(this.$refs.history),this.dom.input=G(this.$refs.input),this.dom.textarea=G(this.$refs.textarea),this.dom.message=G(this.$refs.message),this.dom.send=G(this.$refs.send),this.dom.user=G(this.$refs.user),this.dom.userOuter=G(this.$refs["user-outer"]),this.dom.userIn=G(this.$refs["user-in"]),this.dom.mask=G(this.$refs.mask),this.dom.avatar=G(this.$refs.avatar),this.dom.realTimeCommunicationMinimum=G(this.$refs["real-time-communication-minimum"]),this.dom.realTimeCommunicationMaximum=G(this.$refs["real-time-communication-maximum"])},initStatic:function(){this.dom.realTimeCommunicationMaximum.removeClass("hide"),this.dom.user.removeClass("hide"),this.value.realTimeCommunicationMaximumW=this.dom.realTimeCommunicationMaximum.width("content-box"),this.value.realTimeCommunicationMaximumH=this.dom.realTimeCommunicationMaximum.height("content-box"),this.value.minW=0,this.value.minH=0,this.value.userW=this.dom.user.width("content-box"),this.value.userH=this.dom.user.height("content-box"),this.value.endUserW=.6*this.value.userW,this.value.endUserH=.6*this.value.userH,this.value.endLeft=(this.value.userW-this.value.endUserW)/2,this.value.endTop=(this.value.userH-this.value.endUserH)/2,this.value.endOpacity=.6,this.value.time=300,this.value.short=150,this.value.extra=20,this.dom.realTimeCommunicationMaximum.addClass("hide"),this.dom.user.addClass("hide")},initDynamic:function(){this.value.maxLeft=document.documentElement.clientWidth,this.value.maxTop=document.documentElement.clientHeight,this.value.leftVal=this.value.maxLeft-this.value.realTimeCommunicationMaximumW-this.value.extra,this.value.leftVal=Math.max(0,this.value.leftVal),this.value.topVal=this.value.maxTop-this.value.realTimeCommunicationMaximumH-this.value.extra,this.value.topVal=Math.max(0,this.value.topVal),this.isOnceInit&&(this.isOnceInit=!1,this.dom.realTimeCommunicationMaximum.css({left:this.value.maxLeft+"px",top:this.value.maxTop+"px",width:this.value.minW+"px",height:this.value.minH+"px",right:"auto",opacity:0}),this.dom.userOuter.css({opacity:this.value.endOpacity,width:this.value.endUserW+"px",height:this.value.endUserH+"px",left:this.value.endLeft+"px",top:this.value.endTop+"px"}),this.dom.userIn.css({left:-this.value.endLeft+"px",top:-this.value.endTop+"px"}),this.dom.realTimeCommunicationMaximum.move(document.body,!0),this.dom.realTimeCommunicationMinimum.move(document.body,!0))},showMaximum:function(){var t=this;this.dom.realTimeCommunicationMaximum.removeClass("hide"),this.dom.realTimeCommunicationMaximum.animate({opacity:1,left:this.value.leftVal+"px",top:this.value.topVal+"px",width:this.value.realTimeCommunicationMaximumW+"px",height:this.value.realTimeCommunicationMaximumH+"px"},function(){t.scrollBottom()},this.value.time)},hideMaximum:function(){var t=this;this.dom.realTimeCommunicationMaximum.animate({opacity:0,left:this.value.maxLeft+"px",top:this.value.maxTop+"px",width:"0px",height:"0px"},function(){t.dom.realTimeCommunicationMaximum.addClass("hide")},this.value.time)},showMinimum:function(){this.dom.realTimeCommunicationMinimum.removeClass("hide")},hideMinimum:function(){this.dom.realTimeCommunicationMinimum.addClass("hide")},initSocket:function(){var t=this,i=this.unique_code;i=G.isValid(i)?i:G.s.exists("unique_code")?G.s.get("unique_code"):"",this.conn=new Socket({identifier:this.identifier,unique_code:i,platform:this.platform,websocket:this.websocket,login:function(){t.islogged=!0,this.getUser(t.response.bind(t,function(i){t.user=i,t.conn.getSession(t.response.bind(t,function(i){t.session=i,"user"==t.user.role&&(t.value.realTimeCommunicationMaximumW=500,G.isValid(this.value.repeatInit)||(t.value.realTimeCommunicationMaximumLeftVal+=301,t.value.repeatInit=!0),t.switchSession(t.sessionIdForAdvoise()))},null))},null)),t.refreshUnreadMessage()}}),this.conn.on("group_message",function(i){if(t.refreshSession(),t.current.session_id==i.session_id){t.handleForMessage(i,!1,""),t.conn.resetGroupUnread(t.current.group_id),t.refreshUnreadMessage();var s=t.dom.history.scrollTop();t.getHistory(i.session_id).history.push(i),t.$nextTick(function(){this.dom.history.scrollTop(s),this.scrollBottom()})}else t.play()}),this.conn.on("refresh_session",function(){t.refreshSession()}),this.conn.on("unique_code",function(t){G.s.set("unique_code",t)}),this.conn.on("refresh_unread_message",function(){t.refreshUnreadMessage()})},refreshUnreadMessage:function(){var t=this;this.conn.unreadCountForCommunication(this.response.bind(this,function(i){t.unread=i,G.isFunction(t.unread)&&t.unreadListener(i)},null))},unreadListener:function(){},play:function(){var t=new Audio;t.src=this.host+"/static/media/new_msg.wav",t.play()},sessionIdForAdvoise:function(){for(var t=0,i=null;t<this.session.length;++t)if("y"==(i=this.session[t]).group.is_service)return i.session_id;return""},response:function(t,i,s){if(200!=s.code)return 400==s.code?this.formError(s.data):this.msg(s.data),void(G.isFunction(i)&&i.call(this,s.data));s=s.data,G.isFunction(t)&&t.call(this,s)},switchSession:function(t){var i=this;this.once||this.setSessionTempValue(this.current.session_id,this.message);var s=this.current=this.sessionBySessionId(t);this.once=!1,"group"==s.type&&(this.conn.groupRecent(s.group_id,this.response.bind(this,function(s){s.forEach(function(t){i.handleForMessage(t,!1,"")});var e={loading:!1,history:s,all:!1};i.setHistory(t,e),i.history=e,i.$nextTick(function(){this.scrollBottom()})},null)),this.message=this.getSessionTempValue(t),this.conn.resetGroupUnread(s.group_id),this.refreshUnreadMessage(),this.$nextTick(function(){this.dom.textarea.trigger("focus")}))},send:function(t){if("group"==this.current.type&&"y"==this.current.group.is_service)switch(t){case"text":this.advoiseWithText(this.current.session_id)}},key:function(){for(var t=0,i="";t<arguments.length;++t)i+=arguments[t]+"_";return i=i.replace(/_$/,"")},advoiseWithText:function(t){if(0!=this.message.length){var i=this,s=this.sessionBySessionId(t),e={group_id:s.group_id,type:"text",message:this.message,extra:""},n=this.unique();this.conn.group_text_advoise(e.group_id,e.type,e.message,e.extra,this.response.bind(this,function(e){i.handleForMessage(e,!1,"");var a=i.getHistory(t),o=i.messageIndexByTempId(t,n);a.history.splice(o,1,e),i.refreshSession();var r=i.dom.history.scrollTop();i.$nextTick(function(){this.dom.history.scrollTop(r),this.scrollBottom()}),i.conn.resetGroupUnread(s.group_id)},function(s){var e=i.messageByTempId(t,n);if(0!=e){i.handleForMessage(e,!1,s);var a=i.dom.history.scrollTop();i.$nextTick(function(){this.dom.history.scrollTop(a),this.scrollBottom()})}})),e.message_type="group",e.user=this.user,e.user_id=this.user.id,this.handleForMessage(e,!0,""),e.temp_id=n,this.getHistory(t).history.push(e),this.message="",this.dom.textarea.html(this.message),this.setSessionTempValue(t,this.message);var a=this.dom.history.scrollTop();this.$nextTick(function(){this.dom.history.scrollTop(a),this.scrollBottom()})}else layer.tips("请输入内容",this.dom.textarea.get(0),{tips:[1,"#78BA32"]})},scrollBottom:function(){var t=this.dom.history.height("content-box"),i=this.dom.history.scrollHeight()-t;this.dom.history.vScroll(this.duration,i)},refreshSession:function(){if(this.islogged){var t=this;this.conn.getSession(this.response.bind(this,function(i){t.session=i},null))}},contentKeyUpEvent:function(t){13==t.keyCode&&(this.message=this.message.replace(/\n|\r/g,""),this.dom.textarea.html(this.message),this.send("text"))},sendEvent:function(){this.send("text")},messageByTempId:function(t,i){var s=this.getHistory(t);s=s.history;for(var e=0,n=null;e<s.length;++e)if((n=s[e]).temp_id==i)return n;return!1},messageIndexByTempId:function(t,i){var s=this.getHistory(t);s=s.history;for(var e=0;e<s.length;++e)if(s[e].temp_id==i)return e;throw new Error("未找到 temp_id = "+i+"对应记录")},sessionBySessionId:function(t){for(var i=0,s=null;i<this.session.length;++i)if((s=this.session[i]).session_id==t)return s;throw new Error("未找到会话：session_id = "+t)},getHistory:function(t){return this.histories[t]},setHistory:function(t,i){this.histories[t]=i},setSessionTempValue:function(t,i){this.sessionTempValue[t]=i},getSessionTempValue:function(t){var i=this.sessionTempValue[t];return G.isString(i)?i:""},unique:function(){return G.randomArr(16,"mixed",!0)},formError:function(t){var i=G.firstKey(t),s=i+" "+t[i];this.msg(s)},success:function(t,i){(i=G.isObject(i)?i:{}).icon=1,layer.alert(t,i)},error:function(t,i){(i=G.isObject(i)?i:{}).icon=2,layer.alert(t,i)},info:function(t,i){(i=G.isObject(i)?i:{}).icon=7,layer.alert(t,i)},msg:function(t,i){layer.msg(t,i)},handleForMessage:function(t,i,s){t.loading=!!G.isBoolean(i)&&i,t.myself=t.user_id==this.user.id,t.error=G.isString(s)?s:""},getMessage:function(t){for(var i=G(".message",this.dom.message.get(0)),s=null,e=0;e<i.length;++e)if((s=i.jump(e,!0)).data("id")==t)return s.get(0)},findMessageById:function(t){for(var i=G(".message",this.dom.message.get(0)),s=0,e=null;s<i.length;++s)if((e=i.jump(s,!0)).data("id")==t)return e.get(0);throw new Error("未找到 id = "+t+"的dom元素")},scrollEvent:function(t){if(G(t.currentTarget).isTop()){var i=G.copyObj(this.current,!0),s=this.getHistory(i.session_id);if(!s.loading&&!s.all&&0!=s.history.length){var e=this;if(s.loading=!0,"group"==this.current.type){var n=s.history[0];this.conn.groupHistory(i.group_id,n.id,this.response.bind(this,function(t){t.forEach(function(t){e.handleForMessage(t,!1,"")}),s.history=t.concat(s.history),s.loading=!1,0==t.length&&(s.all=!0),e.current.session_id==i.session_id&&(e.history=s,e.$nextTick(function(){var t=G(this.findMessageById(n.id)).getDocOffsetVal("top",e.dom.history.get(0));e.dom.history.scrollTop(t)}))},function(){s.loading=!1}))}}}},closeClickEvent:function(t){G.stop(t),this.hideMaximum(),this.showMinimum()},userClickEvent:function(t){G.stop(t)},showUser:function(){this.dom.user.removeClass("hide"),this.dom.userOuter.animate({opacity:1,width:this.value.userW+"px",height:this.value.userH+"px",left:"0px",top:"0px"},null,this.value.short),this.dom.userIn.animate({left:"0px",top:"0px"},null,this.value.short)},hideUser:function(){var t=this;this.dom.userOuter.animate({opacity:this.value.endOpacity,width:this.value.endUserW+"px",height:this.value.endUserH+"px",left:this.value.endLeft+"px",top:this.value.endTop+"px"},function(){t.dom.user.addClass("hide")},this.value.short),this.dom.userIn.animate({left:-this.value.endLeft+"px",top:-this.value.endTop+"px"},null,this.value.short)},avatarClickEvent:function(t){var i=t.clientX,s=t.clientY;this.dom.user.css({left:i+15+"px",top:s+15+"px"}),this.showUser()},realTimeCommunicationMinimumClickEvent:function(){this.showMaximum(),this.hideMinimum()},defineEvent:function(){var t=this,i=G(window);this.dom.history.on("scroll",this.scrollEvent.bind(this),!0,!1),this.dom.close.on("click",this.closeClickEvent.bind(this),!0,!1),this.dom.user.on("click",this.userClickEvent.bind(this),!0,!1),this.dom.avatar.on("click",this.avatarClickEvent.bind(this),!0,!1),this.dom.mask.on("click",this.hideUser.bind(this),!0,!1),this.dom.realTimeCommunicationMinimum.on("click",this.realTimeCommunicationMinimumClickEvent.bind(this),!0,!1),this.dom.avatar.on(G.mousedown,G.stop,!0,!1),this.dom.user.on(G.mousedown,G.stop,!0,!1),this.dom.leftMid.on(G.mousedown,G.stop,!0,!1),this.dom.leftBtm.on(G.mousedown,G.stop,!0,!1),this.dom.input.on(G.mousedown,G.stop,!0,!1),this.dom.history.on(G.mousedown,G.stop,!0,!1),i.on("resize",function(){t.initDynamic()},!0,!1)}},watch:{}},b=Object(u.a)(x,C,[],!1,null,"7a5de0aa",null);b.options.__file="source/vue/view/public/communication.vue";var y=b.exports,w=s(131),T={name:"v-index",data:function(){return{dom:{},ins:{loading:null},field:{id:"id",p_id:"p_id"},ajax:{logout:null,push:null},pending:{logout:!1,push:!1},render:"",value:{leftMinW:50,loadedPush:!1},push:[],socket:null,unread:0,isLogged:!1}},mixins:[mixins.loading,mixins.state],mounted:function(){this.initDom(),this.initValue(),this.initInstance(),this.getData()},components:{"v-menu":v,"v-communication":y},methods:{initDom:function(){this.dom.container=G(this.$el),this.dom.functions=G(this.$refs["functions-for-user"]),this.dom.con=G(this.$refs.con),this.dom.left=G(this.$refs.left),this.dom.right=G(this.$refs.right),this.dom.leftTop=G(this.$refs["left-top"]),this.dom.leftMid=G(this.$refs["infinite-classification"]),this.dom.leftBtm=G(this.$refs["left-btm"]),this.dom.multipleTab=G(this.$refs["multiple-tab"]),this.dom.win=G(window),this.dom.horizontal=G(this.$refs.horizontal),this.dom.vertical=G(this.$refs.vertical),this.dom.user=G(this.$refs.user),this.dom.block=G(this.$refs.block),this.dom.rightTop=G(this.$refs["right-top"]),this.dom.slidebar=G(this.$refs.slidebar),this.dom.push=G(this.$refs.push)},initInstance:function(){this.ins.communication=this.$refs.communication},getData:function(){var t=this;new Promise(function(i,s){t.info(i,s)}).then(function(){t.$nextTick(function(){t.initialize()})})},initialize:function(){this.initValue(),this.initSlidebar(),this.initTab(),this.initMenu(),this.initStyle(),this.initLeftSlidebar(),this.defineEvent(),this.ins.communication.run(),this.initSocket()},initSocket:function(){var t=this;this.socket=new Socket({identifier:topContext.websocketIdentifier,unique_code:this.$store.state.user.unique_code,platform:"pc",websocket:topContext.websocket,login:function(){t.isLogged=!0,t.getUnreadCount()}}),this.socket.on("system",function(i){t.getUnreadCount()})},getUnreadCount:function(){var t=this;this.isLogged&&this.socket.unreadCountForPush(function(i){200==i.code?(i=i.data,t.unread=i,i>0&&t.socket.unreadForPush(function(i){if(200==i.code){i=i.data;!function s(){if(0!=i.length){var e=i.pop();t.iNotice("系统通知",e.data?e.data:""),pushApi.add({type:e.type,data:e.data},function(i,n){200!=n&&t.eNotice(i),t.socket.readStatusForPush(e.id,"y",function(i){200!=i.code&&t.eNotice(i.data),s()})})}else t.getUnreadCount()}()}else t.$error(i.data)})):t.$error(i.data)})},initValue:function(){this.value.leftW=this.dom.left.width("border-box"),this.value.userW=this.dom.user.width("border-box"),this.value.userH=this.dom.user.height("border-box")},initStyle:function(){this.initLeftMidH(),this.dom.win.on("resize",this.initLeftMidH.bind(this),!0,!1)},initLeftSlidebar:function(){var t=G.s.get("slidebar");G.isNull(t)||"horizontal"!=t&&this.vertical()},defineEvent:function(){var t=this;this.dom.push.on("scroll",function(i){var s=t.dom.push.clientHeight(),e=t.dom.push.scrollHeight()-s;t.dom.push.scrollTop()==e&&t.loadPush()})},loadPush:function(t){var i=this;if(t)this.ajax.push instanceof G.ajax&&this.ajax.push.native("abort"),this.value.loadedPush=!1,this.push=[];else{if(this.value.loadedPush)return;if(this.pending.push)return void this.$msg("加载中...请耐心等待")}var s=0;this.push.length>0&&(s=this.push[this.push.length-1].id),this.pending.push=!0,this.ajax.push=pushApi.list({admin_push_id:s},function(t,s){i.pending.push=!1,200==s?(0==t.length&&(i.value.loadedPush=!0),i.push=i.push.concat(t)):i.error(t)})},initSlidebar:function(){var t=this;this.ins.slidebar=new Slidebar(this.dom.slidebar.get(0),{time:300,width:"450px",opacity:.3,backgroundColor:"",status:"hide",dir:"right",enableDrag:!1,open:function(){t.loadPush(!0)}})},showSlidebar:function(){this.ins.slidebar.show()},initLeftMidH:function(){var t=this.dom.left.height("content-box"),i=this.dom.leftTop.height("border-box"),s=this.dom.leftBtm.height("border-box"),e=parseInt(this.dom.leftMid.css("minHeight")),n=t-i-s;n=Math.max(e,n),this.dom.leftMid.css({height:n+"px"})},initTab:function(){var t=this;this.ins.tab=new MultipleTab(this.dom.multipleTab.get(0),{time:200,ico:"/plugin/MultipleTab/image/icon.ico",created:function(i){var s=this.attr(i,"param");s=G.isValid(s)?G.jsonDecode(s):{},t.create(this,i,s)},deleted:function(i){t.delete(i)},click:function(i){t.switch(i)}})},initMenu:function(){var t=this;this.ins.ic=new InfiniteClassification(this.dom.leftMid.get(0),{time:200,icon:"switch",id:[1],status:"shrink",amount:12,exclution:!1,menuFocus:!0,focus:!1,topFocus:!1,child:function(i){var s=t.topRoute(i),e=t.findRouteById(i),n=t.genTabName(s,e);t.open(n,{route:e.route})}})},horizontal:function(){var t=this;this.dom.user.removeClass("hide"),this.dom.horizontal.highlight("hide",this.dom.block.children().get(),!0),this.dom.left.animate({width:this.value.leftW+"px"},function(){t.ins.ic.icon("none")}),this.dom.user.animate({width:this.value.userW+"px",height:this.value.userH+"px"},function(){t.initLeftMidH()}),this.dom.right.animate({paddingLeft:this.value.leftW+"px"}),this.dom.rightTop.animate({paddingLeft:this.value.leftW+"px"}),G.s.set("slidebar","horizontal")},vertical:function(){var t=this;this.dom.vertical.highlight("hide",this.dom.block.children().get(),!0),this.dom.left.animate({width:this.value.leftMinW+"px"},function(){t.ins.ic.icon("text")}),this.dom.user.animate({width:"0px",height:"0px"},function(){t.dom.user.addClass("hide"),t.initLeftMidH()}),this.dom.right.animate({paddingLeft:this.value.leftMinW+"px"}),this.dom.rightTop.animate({paddingLeft:this.value.leftMinW+"px"}),G.s.set("slidebar","vertical")},showUserCtrl:function(){this.dom.functions.removeClass("hide"),this.dom.functions.animate({opacity:1,bottom:"0px"})},hideUserCtrl:function(){var t=this;this.dom.functions.animate({opacity:0,bottom:"-10px"},function(){t.dom.functions.addClass("hide")})},open:function(t,i){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.ins.tab.create({ico:s,text:t,attr:i})},create:function(t,i,s){var e=t.attr(i,"route"),n=document.createElement("div");(n=G(n)).data("id",i);var a=document.createElement("div");n.append(a),this.dom.con.append(n.get(0)),this.mount(a,i,e,s),n.highlight("hide",n.parent().children().get(),!0)},delete:function(t){this.dom.con.remove(this.item(t))},item:function(t){for(var i=this.dom.con.children(),s=0;s<i.length;++s){var e=i.jump(s,!0);if(e.data("id")==t)return e.get(0)}throw new Error("未找到给定节点")},switch:function(t){G(this.item(t)).highlight("hide",this.dom.con.children().get(),!0)},component:function(t){for(var i=0;i<w.a.length;++i){var s=w.a[i];if(s.path==t)return s.component}throw new Error("未找到 route："+t+"对应的路由")},mount:function(t,i,s,e){var n=this;this.component(s)().then(function(a){(new(n.newComponent(a.default,s,e,i))).$mount(t)})},genTabName:function(t,i){return"".concat(t.name,"-").concat(i.name)},reRender:function(t,i,s){var e=this.findRouteByRoute(i),n=this.topRoute(e.id),a=this.genTabName(n,e);this.ins.tab.title(t,a);var o=this.item(t);o=G(o);var r=document.createElement("div");this.mount(r,t,i,s),o.html(""),o.append(r)},createTab:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},s=this.findRouteByRoute(t),e=this.topRoute(s.id),n=this.genTabName(e,s);this.open(n,{route:s.route,param:G.jsonEncode(i)})},newComponent:function(t,i,s,e){var n=this;i=this.findRouteByRoute(i);var a=this.topRoute(i.id);t.mixins=t.mixins?t.mixins:[];var r={data:function(){return{id:e,param:s,route:i,topRoute:a,pos:[]}},created:function(){this.pos=n.curPos(i.id)},methods:{location:function(t,i){var s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"_self";return"_self"==s?n.reRender(e,t,i):"_blank"==s?n.createTab(t,i):void 0},reload:function(){this.location(this.route.route,this.param)},prev:function(){},next:function(){}},components:{"module-nav":_}};return t.mixins.push(r),Vue.extend(o()({},t))},getMenuData:function(t){var i=[],s=0;return function t(i,e){if(s>1e3)console.log("死循环");else{s++;for(var n=0;n<i.length;++n){var a=i[n];if("y"==a.menu){var r=o()({},a);e.push(r),a.children.length>0&&(r.children=[],t(a.children,r.children))}}}}(t,i),i},info:function(t,i){var s=this;adminApi.info(function(e,n){if(200!=n)return s.$error(e),void i();var a=s.getMenuData(e.user.role.priv);s.$store.commit("menu",a),s.$store.commit("user",e.user),s.$store.commit("priv",e.user.role.priv),s.$store.commit("route",e.route),s.$store.commit("os",e.os),t()})},findRouteById:function(t){var i=this.$store.state.route,s=G.t.current(t,i,this.field);if(G.isNull(s))throw new Error("未找到当前 id："+t+" 对应路由！");return s},findRouteByRoute:function(t){for(var i=this.$store.state.route,s=0;s<i.length;++s){var e=i[s];if(e.route==t)return e}throw new Error("未找到给定路由："+t+"！")},topRoute:function(t){var i=this.$store.state.route;return G.t.parents(t,i,this.field,!0,!0)},curPos:function(t){var i=this.$store.state.route;return G.t.parents(t,i,this.field,!0,!1)},logout:function(){var t=this;this.pending.logout?$info("请求中...请耐心等待"):(this.pending.logout=!0,this.ins.loading.show(),this.ajax.logout=adminApi.logout(function(i,s){t.pending.logout=!1,t.ins.loading.hide(),200==s?t.forceLogout():t.$error(i)}),this.ins.loading.setArgs(this.ins.loading,"logout"))},translate:function(){var t=this;new Promise(function(i){t.pending.translate?t.$info("正在生成生成字典...请耐心等待"):(t.pendingState("loading","translate"),t.ajax.translate=miscApi.translate(function(s,e){200!=e&&(t.eNotice(s),i(!1)),i(!0)}),t.ins.loading.setArgs("translate","translate"))}).then(function(i){i&&t.$success("成功生成常用中英文对照翻译字典",{btn:["确定"],closeBtn:!1})}).finally(function(){t.initialState("loading","translate","translate")})}}},$=(s(543),Object(u.a)(T,e,n,!1,null,"189b68ac",null));$.options.__file="source/vue/view/index/index.vue";i.default=$.exports},396:function(t,i){t.exports=function(t,i,s){return i in t?Object.defineProperty(t,i,{value:s,enumerable:!0,configurable:!0,writable:!0}):t[i]=s,t}},397:function(t,i,s){var e=s(396);t.exports=function(t){for(var i=1;i<arguments.length;i++){var s=null!=arguments[i]?arguments[i]:{},n=Object.keys(s);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(s).filter(function(t){return Object.getOwnPropertyDescriptor(s,t).enumerable}))),n.forEach(function(i){e(t,i,s[i])})}return t}},398:function(t,i,s){},399:function(t,i,s){},538:function(t,i,s){t.exports=s.p+"assets/image/translate.png"},539:function(t,i,s){t.exports=s.p+"assets/image/system.png"},540:function(t,i,s){t.exports=s.p+"assets/image/notification.png"},541:function(t,i,s){t.exports=s.p+"assets/image/logout.png"},542:function(t,i,s){"use strict";var e=s(398);s.n(e).a},543:function(t,i,s){"use strict";var e=s(399);s.n(e).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,