!function(t){function n(n){for(var e,r,i=n[0],a=n[1],u=0,c=[];u<i.length;u++)r=i[u],o[r]&&c.push(o[r][0]),o[r]=0;for(e in a)Object.prototype.hasOwnProperty.call(a,e)&&(t[e]=a[e]);for(s&&s(n);c.length;)c.shift()()}var e={},r={0:0},o={0:0};function i(n){if(e[n])return e[n].exports;var r=e[n]={i:n,l:!1,exports:{}};return t[n].call(r.exports,r,r.exports,i),r.l=!0,r.exports}i.e=function(t){var n=[];r[t]?n.push(r[t]):0!==r[t]&&{1:1,2:1,3:1,4:1,5:1,6:1,7:1,8:1,9:1,10:1,11:1,12:1,13:1,14:1,15:1,16:1,17:1,18:1,19:1,20:1,21:1,22:1,23:1,24:1,25:1,26:1,27:1,28:1,29:1,30:1,31:1,32:1,33:1,34:1,35:1,36:1,37:1,38:1,39:1,40:1,41:1,42:1,43:1,44:1,45:1,46:1,47:1,48:1,49:1,50:1}[t]&&n.push(r[t]=new Promise(function(n,e){for(var o=t+".css",a=i.p+o,u=document.getElementsByTagName("link"),c=0;c<u.length;c++){var s=(l=u[c]).getAttribute("data-href")||l.getAttribute("href");if("stylesheet"===l.rel&&(s===o||s===a))return n()}var f=document.getElementsByTagName("style");for(c=0;c<f.length;c++){var l;if((s=(l=f[c]).getAttribute("data-href"))===o||s===a)return n()}var h=document.createElement("link");h.rel="stylesheet",h.type="text/css",h.onload=n,h.onerror=function(n){var o=n&&n.target&&n.target.src||a,i=new Error("Loading CSS chunk "+t+" failed.\n("+o+")");i.request=o,delete r[t],h.parentNode.removeChild(h),e(i)},h.href=a,document.getElementsByTagName("head")[0].appendChild(h)}).then(function(){r[t]=0}));var e=o[t];if(0!==e)if(e)n.push(e[2]);else{var a=new Promise(function(n,r){e=o[t]=[n,r]});n.push(e[2]=a);var u,c=document.createElement("script");c.charset="utf-8",c.timeout=120,i.nc&&c.setAttribute("nonce",i.nc),c.src=function(t){return i.p+"js/"+({}[t]||t)+".js"}(t),u=function(n){c.onerror=c.onload=null,clearTimeout(s);var e=o[t];if(0!==e){if(e){var r=n&&("load"===n.type?"missing":n.type),i=n&&n.target&&n.target.src,a=new Error("Loading chunk "+t+" failed.\n("+r+": "+i+")");a.type=r,a.request=i,e[1](a)}o[t]=void 0}};var s=setTimeout(function(){u({type:"timeout",target:c})},12e4);c.onerror=c.onload=u,document.head.appendChild(c)}return Promise.all(n)},i.m=t,i.c=e,i.d=function(t,n,e){i.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:e})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,n){if(1&n&&(t=i(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var e=Object.create(null);if(i.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var r in t)i.d(e,r,function(n){return t[n]}.bind(null,r));return e},i.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(n,"a",n),n},i.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},i.p="",i.oe=function(t){throw console.error(t),t};var a=window.webpackJsonp=window.webpackJsonp||[],u=a.push.bind(a);a.push=n,a=a.slice();for(var c=0;c<a.length;c++)n(a[c]);var s=u;i(i.s=132)}([function(t,n,e){var r=e(2),o=e(19),i=e(11),a=e(12),u=e(20),c=function(t,n,e){var s,f,l,h,p=t&c.F,d=t&c.G,v=t&c.S,g=t&c.P,m=t&c.B,y=d?r:v?r[n]||(r[n]={}):(r[n]||{}).prototype,x=d?o:o[n]||(o[n]={}),b=x.prototype||(x.prototype={});for(s in d&&(e=n),e)l=((f=!p&&y&&void 0!==y[s])?y:e)[s],h=m&&f?u(l,r):g&&"function"==typeof l?u(Function.call,l):l,y&&a(y,s,l,t&c.U),x[s]!=l&&i(x,s,h),g&&b[s]!=l&&(b[s]=l)};r.core=o,c.F=1,c.G=2,c.S=4,c.P=8,c.B=16,c.W=32,c.U=64,c.R=128,t.exports=c},function(t,n,e){var r=e(4);t.exports=function(t){if(!r(t))throw TypeError(t+" is not an object!");return t}},function(t,n){var e=t.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=e)},function(t,n){t.exports=function(t){try{return!!t()}catch(t){return!0}}},function(t,n){t.exports=function(t){return"object"==typeof t?null!==t:"function"==typeof t}},function(t,n,e){var r=e(48)("wks"),o=e(34),i=e(2).Symbol,a="function"==typeof i;(t.exports=function(t){return r[t]||(r[t]=a&&i[t]||(a?i:o)("Symbol."+t))}).store=r},function(t,n,e){var r=e(22),o=Math.min;t.exports=function(t){return t>0?o(r(t),9007199254740991):0}},function(t,n,e){t.exports=!e(3)(function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a})},function(t,n,e){var r=e(1),o=e(95),i=e(24),a=Object.defineProperty;n.f=e(7)?Object.defineProperty:function(t,n,e){if(r(t),n=i(n,!0),r(e),o)try{return a(t,n,e)}catch(t){}if("get"in e||"set"in e)throw TypeError("Accessors not supported!");return"value"in e&&(t[n]=e.value),t}},function(t,n,e){var r=e(25);t.exports=function(t){return Object(r(t))}},function(t,n){t.exports=function(t){if("function"!=typeof t)throw TypeError(t+" is not a function!");return t}},function(t,n,e){var r=e(8),o=e(33);t.exports=e(7)?function(t,n,e){return r.f(t,n,o(1,e))}:function(t,n,e){return t[n]=e,t}},function(t,n,e){var r=e(2),o=e(11),i=e(15),a=e(34)("src"),u=e(136),c=(""+u).split("toString");e(19).inspectSource=function(t){return u.call(t)},(t.exports=function(t,n,e,u){var s="function"==typeof e;s&&(i(e,"name")||o(e,"name",n)),t[n]!==e&&(s&&(i(e,a)||o(e,a,t[n]?""+t[n]:c.join(String(n)))),t===r?t[n]=e:u?t[n]?t[n]=e:o(t,n,e):(delete t[n],o(t,n,e)))})(Function.prototype,"toString",function(){return"function"==typeof this&&this[a]||u.call(this)})},function(t,n,e){var r=e(0),o=e(3),i=e(25),a=/"/g,u=function(t,n,e,r){var o=String(i(t)),u="<"+n;return""!==e&&(u+=" "+e+'="'+String(r).replace(a,"&quot;")+'"'),u+">"+o+"</"+n+">"};t.exports=function(t,n){var e={};e[t]=n(u),r(r.P+r.F*o(function(){var n=""[t]('"');return n!==n.toLowerCase()||n.split('"').length>3}),"String",e)}},function(t,n,e){"use strict";function r(t,n,e,r,o,i,a,u){var c,s="function"==typeof t?t.options:t;if(n&&(s.render=n,s.staticRenderFns=e,s._compiled=!0),r&&(s.functional=!0),i&&(s._scopeId="data-v-"+i),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),o&&o.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(a)},s._ssrRegister=c):o&&(c=u?function(){o.call(this,this.$root.$options.shadowRoot)}:o),c)if(s.functional){s._injectStyles=c;var f=s.render;s.render=function(t,n){return c.call(n),f(t,n)}}else{var l=s.beforeCreate;s.beforeCreate=l?[].concat(l,c):[c]}return{exports:t,options:s}}e.d(n,"a",function(){return r})},function(t,n){var e={}.hasOwnProperty;t.exports=function(t,n){return e.call(t,n)}},function(t,n,e){var r=e(49),o=e(25);t.exports=function(t){return r(o(t))}},function(t,n,e){var r=e(50),o=e(33),i=e(16),a=e(24),u=e(15),c=e(95),s=Object.getOwnPropertyDescriptor;n.f=e(7)?s:function(t,n){if(t=i(t),n=a(n,!0),c)try{return s(t,n)}catch(t){}if(u(t,n))return o(!r.f.call(t,n),t[n])}},function(t,n,e){var r=e(15),o=e(9),i=e(69)("IE_PROTO"),a=Object.prototype;t.exports=Object.getPrototypeOf||function(t){return t=o(t),r(t,i)?t[i]:"function"==typeof t.constructor&&t instanceof t.constructor?t.constructor.prototype:t instanceof Object?a:null}},function(t,n){var e=t.exports={version:"2.6.5"};"number"==typeof __e&&(__e=e)},function(t,n,e){var r=e(10);t.exports=function(t,n,e){if(r(t),void 0===n)return t;switch(e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)}}return function(){return t.apply(n,arguments)}}},function(t,n){var e={}.toString;t.exports=function(t){return e.call(t).slice(8,-1)}},function(t,n){var e=Math.ceil,r=Math.floor;t.exports=function(t){return isNaN(t=+t)?0:(t>0?r:e)(t)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){return!!t&&r(function(){n?t.call(null,function(){},1):t.call(null)})}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t))return t;var e,o;if(n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;if("function"==typeof(e=t.valueOf)&&!r(o=e.call(t)))return o;if(!n&&"function"==typeof(e=t.toString)&&!r(o=e.call(t)))return o;throw TypeError("Can't convert object to primitive value")}},function(t,n){t.exports=function(t){if(null==t)throw TypeError("Can't call method on  "+t);return t}},function(t,n,e){var r=e(0),o=e(19),i=e(3);t.exports=function(t,n){var e=(o.Object||{})[t]||Object[t],a={};a[t]=n(e),r(r.S+r.F*i(function(){e(1)}),"Object",a)}},function(t,n,e){var r=e(20),o=e(49),i=e(9),a=e(6),u=e(85);t.exports=function(t,n){var e=1==t,c=2==t,s=3==t,f=4==t,l=6==t,h=5==t||l,p=n||u;return function(n,u,d){for(var v,g,m=i(n),y=o(m),x=r(u,d,3),b=a(y.length),_=0,w=e?p(n,b):c?p(n,0):void 0;b>_;_++)if((h||_ in y)&&(g=x(v=y[_],_,m),t))if(e)w[_]=g;else if(g)switch(t){case 3:return!0;case 5:return v;case 6:return _;case 2:w.push(v)}else if(f)return!1;return l?-1:s||f?f:w}}},function(t,n,e){"use strict";if(e(7)){var r=e(30),o=e(2),i=e(3),a=e(0),u=e(63),c=e(93),s=e(20),f=e(40),l=e(33),h=e(11),p=e(42),d=e(22),v=e(6),g=e(123),m=e(36),y=e(24),x=e(15),b=e(45),_=e(4),w=e(9),S=e(82),j=e(37),G=e(18),E=e(38).f,C=e(84),A=e(34),O=e(5),M=e(27),P=e(53),F=e(52),I=e(87),T=e(47),k=e(58),N=e(39),L=e(86),R=e(112),$=e(8),D=e(17),V=$.f,W=D.f,B=o.RangeError,U=o.TypeError,z=o.Uint8Array,q=Array.prototype,Y=c.ArrayBuffer,J=c.DataView,K=M(0),X=M(2),H=M(3),Z=M(4),Q=M(5),tt=M(6),nt=P(!0),et=P(!1),rt=I.values,ot=I.keys,it=I.entries,at=q.lastIndexOf,ut=q.reduce,ct=q.reduceRight,st=q.join,ft=q.sort,lt=q.slice,ht=q.toString,pt=q.toLocaleString,dt=O("iterator"),vt=O("toStringTag"),gt=A("typed_constructor"),mt=A("def_constructor"),yt=u.CONSTR,xt=u.TYPED,bt=u.VIEW,_t=M(1,function(t,n){return Et(F(t,t[mt]),n)}),wt=i(function(){return 1===new z(new Uint16Array([1]).buffer)[0]}),St=!!z&&!!z.prototype.set&&i(function(){new z(1).set({})}),jt=function(t,n){var e=d(t);if(e<0||e%n)throw B("Wrong offset!");return e},Gt=function(t){if(_(t)&&xt in t)return t;throw U(t+" is not a typed array!")},Et=function(t,n){if(!(_(t)&&gt in t))throw U("It is not a typed array constructor!");return new t(n)},Ct=function(t,n){return At(F(t,t[mt]),n)},At=function(t,n){for(var e=0,r=n.length,o=Et(t,r);r>e;)o[e]=n[e++];return o},Ot=function(t,n,e){V(t,n,{get:function(){return this._d[e]}})},Mt=function(t){var n,e,r,o,i,a,u=w(t),c=arguments.length,f=c>1?arguments[1]:void 0,l=void 0!==f,h=C(u);if(null!=h&&!S(h)){for(a=h.call(u),r=[],n=0;!(i=a.next()).done;n++)r.push(i.value);u=r}for(l&&c>2&&(f=s(f,arguments[2],2)),n=0,e=v(u.length),o=Et(this,e);e>n;n++)o[n]=l?f(u[n],n):u[n];return o},Pt=function(){for(var t=0,n=arguments.length,e=Et(this,n);n>t;)e[t]=arguments[t++];return e},Ft=!!z&&i(function(){pt.call(new z(1))}),It=function(){return pt.apply(Ft?lt.call(Gt(this)):Gt(this),arguments)},Tt={copyWithin:function(t,n){return R.call(Gt(this),t,n,arguments.length>2?arguments[2]:void 0)},every:function(t){return Z(Gt(this),t,arguments.length>1?arguments[1]:void 0)},fill:function(t){return L.apply(Gt(this),arguments)},filter:function(t){return Ct(this,X(Gt(this),t,arguments.length>1?arguments[1]:void 0))},find:function(t){return Q(Gt(this),t,arguments.length>1?arguments[1]:void 0)},findIndex:function(t){return tt(Gt(this),t,arguments.length>1?arguments[1]:void 0)},forEach:function(t){K(Gt(this),t,arguments.length>1?arguments[1]:void 0)},indexOf:function(t){return et(Gt(this),t,arguments.length>1?arguments[1]:void 0)},includes:function(t){return nt(Gt(this),t,arguments.length>1?arguments[1]:void 0)},join:function(t){return st.apply(Gt(this),arguments)},lastIndexOf:function(t){return at.apply(Gt(this),arguments)},map:function(t){return _t(Gt(this),t,arguments.length>1?arguments[1]:void 0)},reduce:function(t){return ut.apply(Gt(this),arguments)},reduceRight:function(t){return ct.apply(Gt(this),arguments)},reverse:function(){for(var t,n=Gt(this).length,e=Math.floor(n/2),r=0;r<e;)t=this[r],this[r++]=this[--n],this[n]=t;return this},some:function(t){return H(Gt(this),t,arguments.length>1?arguments[1]:void 0)},sort:function(t){return ft.call(Gt(this),t)},subarray:function(t,n){var e=Gt(this),r=e.length,o=m(t,r);return new(F(e,e[mt]))(e.buffer,e.byteOffset+o*e.BYTES_PER_ELEMENT,v((void 0===n?r:m(n,r))-o))}},kt=function(t,n){return Ct(this,lt.call(Gt(this),t,n))},Nt=function(t){Gt(this);var n=jt(arguments[1],1),e=this.length,r=w(t),o=v(r.length),i=0;if(o+n>e)throw B("Wrong length!");for(;i<o;)this[n+i]=r[i++]},Lt={entries:function(){return it.call(Gt(this))},keys:function(){return ot.call(Gt(this))},values:function(){return rt.call(Gt(this))}},Rt=function(t,n){return _(t)&&t[xt]&&"symbol"!=typeof n&&n in t&&String(+n)==String(n)},$t=function(t,n){return Rt(t,n=y(n,!0))?l(2,t[n]):W(t,n)},Dt=function(t,n,e){return!(Rt(t,n=y(n,!0))&&_(e)&&x(e,"value"))||x(e,"get")||x(e,"set")||e.configurable||x(e,"writable")&&!e.writable||x(e,"enumerable")&&!e.enumerable?V(t,n,e):(t[n]=e.value,t)};yt||(D.f=$t,$.f=Dt),a(a.S+a.F*!yt,"Object",{getOwnPropertyDescriptor:$t,defineProperty:Dt}),i(function(){ht.call({})})&&(ht=pt=function(){return st.call(this)});var Vt=p({},Tt);p(Vt,Lt),h(Vt,dt,Lt.values),p(Vt,{slice:kt,set:Nt,constructor:function(){},toString:ht,toLocaleString:It}),Ot(Vt,"buffer","b"),Ot(Vt,"byteOffset","o"),Ot(Vt,"byteLength","l"),Ot(Vt,"length","e"),V(Vt,vt,{get:function(){return this[xt]}}),t.exports=function(t,n,e,c){var s=t+((c=!!c)?"Clamped":"")+"Array",l="get"+t,p="set"+t,d=o[s],m=d||{},y=d&&G(d),x=!d||!u.ABV,w={},S=d&&d.prototype,C=function(t,e){V(t,e,{get:function(){return function(t,e){var r=t._d;return r.v[l](e*n+r.o,wt)}(this,e)},set:function(t){return function(t,e,r){var o=t._d;c&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),o.v[p](e*n+o.o,r,wt)}(this,e,t)},enumerable:!0})};x?(d=e(function(t,e,r,o){f(t,d,s,"_d");var i,a,u,c,l=0,p=0;if(_(e)){if(!(e instanceof Y||"ArrayBuffer"==(c=b(e))||"SharedArrayBuffer"==c))return xt in e?At(d,e):Mt.call(d,e);i=e,p=jt(r,n);var m=e.byteLength;if(void 0===o){if(m%n)throw B("Wrong length!");if((a=m-p)<0)throw B("Wrong length!")}else if((a=v(o)*n)+p>m)throw B("Wrong length!");u=a/n}else u=g(e),i=new Y(a=u*n);for(h(t,"_d",{b:i,o:p,l:a,e:u,v:new J(i)});l<u;)C(t,l++)}),S=d.prototype=j(Vt),h(S,"constructor",d)):i(function(){d(1)})&&i(function(){new d(-1)})&&k(function(t){new d,new d(null),new d(1.5),new d(t)},!0)||(d=e(function(t,e,r,o){var i;return f(t,d,s),_(e)?e instanceof Y||"ArrayBuffer"==(i=b(e))||"SharedArrayBuffer"==i?void 0!==o?new m(e,jt(r,n),o):void 0!==r?new m(e,jt(r,n)):new m(e):xt in e?At(d,e):Mt.call(d,e):new m(g(e))}),K(y!==Function.prototype?E(m).concat(E(y)):E(m),function(t){t in d||h(d,t,m[t])}),d.prototype=S,r||(S.constructor=d));var A=S[dt],O=!!A&&("values"==A.name||null==A.name),M=Lt.values;h(d,gt,!0),h(S,xt,s),h(S,bt,!0),h(S,mt,d),(c?new d(1)[vt]==s:vt in S)||V(S,vt,{get:function(){return s}}),w[s]=d,a(a.G+a.W+a.F*(d!=m),w),a(a.S,s,{BYTES_PER_ELEMENT:n}),a(a.S+a.F*i(function(){m.of.call(d,1)}),s,{from:Mt,of:Pt}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",n),a(a.P,s,Tt),N(s),a(a.P+a.F*St,s,{set:Nt}),a(a.P+a.F*!O,s,Lt),r||S.toString==ht||(S.toString=ht),a(a.P+a.F*i(function(){new d(1).slice()}),s,{slice:kt}),a(a.P+a.F*(i(function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()})||!i(function(){S.toLocaleString.call([1,2])})),s,{toLocaleString:It}),T[s]=O?A:M,r||O||h(S,dt,M)}}else t.exports=function(){}},function(t,n,e){var r=e(118),o=e(0),i=e(48)("metadata"),a=i.store||(i.store=new(e(121))),u=function(t,n,e){var o=a.get(t);if(!o){if(!e)return;a.set(t,o=new r)}var i=o.get(n);if(!i){if(!e)return;o.set(n,i=new r)}return i};t.exports={store:a,map:u,has:function(t,n,e){var r=u(n,e,!1);return void 0!==r&&r.has(t)},get:function(t,n,e){var r=u(n,e,!1);return void 0===r?void 0:r.get(t)},set:function(t,n,e,r){u(e,r,!0).set(t,n)},keys:function(t,n){var e=u(t,n,!1),r=[];return e&&e.forEach(function(t,n){r.push(n)}),r},key:function(t){return void 0===t||"symbol"==typeof t?t:String(t)},exp:function(t){o(o.S,"Reflect",t)}}},function(t,n){t.exports=!1},function(t,n,e){var r=e(34)("meta"),o=e(4),i=e(15),a=e(8).f,u=0,c=Object.isExtensible||function(){return!0},s=!e(3)(function(){return c(Object.preventExtensions({}))}),f=function(t){a(t,r,{value:{i:"O"+ ++u,w:{}}})},l=t.exports={KEY:r,NEED:!1,fastKey:function(t,n){if(!o(t))return"symbol"==typeof t?t:("string"==typeof t?"S":"P")+t;if(!i(t,r)){if(!c(t))return"F";if(!n)return"E";f(t)}return t[r].i},getWeak:function(t,n){if(!i(t,r)){if(!c(t))return!0;if(!n)return!1;f(t)}return t[r].w},onFreeze:function(t){return s&&l.NEED&&c(t)&&!i(t,r)&&f(t),t}}},function(t,n,e){var r=e(5)("unscopables"),o=Array.prototype;null==o[r]&&e(11)(o,r,{}),t.exports=function(t){o[r][t]=!0}},function(t,n){t.exports=function(t,n){return{enumerable:!(1&t),configurable:!(2&t),writable:!(4&t),value:n}}},function(t,n){var e=0,r=Math.random();t.exports=function(t){return"Symbol(".concat(void 0===t?"":t,")_",(++e+r).toString(36))}},function(t,n,e){var r=e(97),o=e(70);t.exports=Object.keys||function(t){return r(t,o)}},function(t,n,e){var r=e(22),o=Math.max,i=Math.min;t.exports=function(t,n){return(t=r(t))<0?o(t+n,0):i(t,n)}},function(t,n,e){var r=e(1),o=e(98),i=e(70),a=e(69)("IE_PROTO"),u=function(){},c=function(){var t,n=e(67)("iframe"),r=i.length;for(n.style.display="none",e(71).appendChild(n),n.src="javascript:",(t=n.contentWindow.document).open(),t.write("<script>document.F=Object<\/script>"),t.close(),c=t.F;r--;)delete c.prototype[i[r]];return c()};t.exports=Object.create||function(t,n){var e;return null!==t?(u.prototype=r(t),e=new u,u.prototype=null,e[a]=t):e=c(),void 0===n?e:o(e,n)}},function(t,n,e){var r=e(97),o=e(70).concat("length","prototype");n.f=Object.getOwnPropertyNames||function(t){return r(t,o)}},function(t,n,e){"use strict";var r=e(2),o=e(8),i=e(7),a=e(5)("species");t.exports=function(t){var n=r[t];i&&n&&!n[a]&&o.f(n,a,{configurable:!0,get:function(){return this}})}},function(t,n){t.exports=function(t,n,e,r){if(!(t instanceof n)||void 0!==r&&r in t)throw TypeError(e+": incorrect invocation!");return t}},function(t,n,e){var r=e(20),o=e(110),i=e(82),a=e(1),u=e(6),c=e(84),s={},f={};(n=t.exports=function(t,n,e,l,h){var p,d,v,g,m=h?function(){return t}:c(t),y=r(e,l,n?2:1),x=0;if("function"!=typeof m)throw TypeError(t+" is not iterable!");if(i(m)){for(p=u(t.length);p>x;x++)if((g=n?y(a(d=t[x])[0],d[1]):y(t[x]))===s||g===f)return g}else for(v=m.call(t);!(d=v.next()).done;)if((g=o(v,y,d.value,n))===s||g===f)return g}).BREAK=s,n.RETURN=f},function(t,n,e){var r=e(12);t.exports=function(t,n,e){for(var o in n)r(t,o,n[o],e);return t}},function(t,n,e){var r=e(4);t.exports=function(t,n){if(!r(t)||t._t!==n)throw TypeError("Incompatible receiver, "+n+" required!");return t}},function(t,n,e){var r=e(8).f,o=e(15),i=e(5)("toStringTag");t.exports=function(t,n,e){t&&!o(t=e?t:t.prototype,i)&&r(t,i,{configurable:!0,value:n})}},function(t,n,e){var r=e(21),o=e(5)("toStringTag"),i="Arguments"==r(function(){return arguments}());t.exports=function(t){var n,e,a;return void 0===t?"Undefined":null===t?"Null":"string"==typeof(e=function(t,n){try{return t[n]}catch(t){}}(n=Object(t),o))?e:i?r(n):"Object"==(a=r(n))&&"function"==typeof n.callee?"Arguments":a}},function(t,n,e){var r=e(0),o=e(25),i=e(3),a=e(73),u="["+a+"]",c=RegExp("^"+u+u+"*"),s=RegExp(u+u+"*$"),f=function(t,n,e){var o={},u=i(function(){return!!a[t]()||"​"!="​"[t]()}),c=o[t]=u?n(l):a[t];e&&(o[e]=c),r(r.P+r.F*u,"String",o)},l=f.trim=function(t,n){return t=String(o(t)),1&n&&(t=t.replace(c,"")),2&n&&(t=t.replace(s,"")),t};t.exports=f},function(t,n){t.exports={}},function(t,n,e){var r=e(19),o=e(2),i=o["__core-js_shared__"]||(o["__core-js_shared__"]={});(t.exports=function(t,n){return i[t]||(i[t]=void 0!==n?n:{})})("versions",[]).push({version:r.version,mode:e(30)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(t,n,e){var r=e(21);t.exports=Object("z").propertyIsEnumerable(0)?Object:function(t){return"String"==r(t)?t.split(""):Object(t)}},function(t,n){n.f={}.propertyIsEnumerable},function(t,n,e){"use strict";var r=e(1);t.exports=function(){var t=r(this),n="";return t.global&&(n+="g"),t.ignoreCase&&(n+="i"),t.multiline&&(n+="m"),t.unicode&&(n+="u"),t.sticky&&(n+="y"),n}},function(t,n,e){var r=e(1),o=e(10),i=e(5)("species");t.exports=function(t,n){var e,a=r(t).constructor;return void 0===a||null==(e=r(a)[i])?n:o(e)}},function(t,n,e){var r=e(16),o=e(6),i=e(36);t.exports=function(t){return function(n,e,a){var u,c=r(n),s=o(c.length),f=i(a,s);if(t&&e!=e){for(;s>f;)if((u=c[f++])!=u)return!0}else for(;s>f;f++)if((t||f in c)&&c[f]===e)return t||f||0;return!t&&-1}}},function(t,n){n.f=Object.getOwnPropertySymbols},function(t,n,e){var r=e(21);t.exports=Array.isArray||function(t){return"Array"==r(t)}},function(t,n,e){var r=e(22),o=e(25);t.exports=function(t){return function(n,e){var i,a,u=String(o(n)),c=r(e),s=u.length;return c<0||c>=s?t?"":void 0:(i=u.charCodeAt(c))<55296||i>56319||c+1===s||(a=u.charCodeAt(c+1))<56320||a>57343?t?u.charAt(c):i:t?u.slice(c,c+2):a-56320+(i-55296<<10)+65536}}},function(t,n,e){var r=e(4),o=e(21),i=e(5)("match");t.exports=function(t){var n;return r(t)&&(void 0!==(n=t[i])?!!n:"RegExp"==o(t))}},function(t,n,e){var r=e(5)("iterator"),o=!1;try{var i=[7][r]();i.return=function(){o=!0},Array.from(i,function(){throw 2})}catch(t){}t.exports=function(t,n){if(!n&&!o)return!1;var e=!1;try{var i=[7],a=i[r]();a.next=function(){return{done:e=!0}},i[r]=function(){return a},t(i)}catch(t){}return e}},function(t,n,e){"use strict";var r=e(45),o=RegExp.prototype.exec;t.exports=function(t,n){var e=t.exec;if("function"==typeof e){var i=e.call(t,n);if("object"!=typeof i)throw new TypeError("RegExp exec method returned something other than an Object or null");return i}if("RegExp"!==r(t))throw new TypeError("RegExp#exec called on incompatible receiver");return o.call(t,n)}},function(t,n,e){"use strict";e(114);var r=e(12),o=e(11),i=e(3),a=e(25),u=e(5),c=e(88),s=u("species"),f=!i(function(){var t=/./;return t.exec=function(){var t=[];return t.groups={a:"7"},t},"7"!=="".replace(t,"$<a>")}),l=function(){var t=/(?:)/,n=t.exec;t.exec=function(){return n.apply(this,arguments)};var e="ab".split(t);return 2===e.length&&"a"===e[0]&&"b"===e[1]}();t.exports=function(t,n,e){var h=u(t),p=!i(function(){var n={};return n[h]=function(){return 7},7!=""[t](n)}),d=p?!i(function(){var n=!1,e=/a/;return e.exec=function(){return n=!0,null},"split"===t&&(e.constructor={},e.constructor[s]=function(){return e}),e[h](""),!n}):void 0;if(!p||!d||"replace"===t&&!f||"split"===t&&!l){var v=/./[h],g=e(a,h,""[t],function(t,n,e,r,o){return n.exec===c?p&&!o?{done:!0,value:v.call(n,e,r)}:{done:!0,value:t.call(e,n,r)}:{done:!1}}),m=g[0],y=g[1];r(String.prototype,t,m),o(RegExp.prototype,h,2==n?function(t,n){return y.call(t,this,n)}:function(t){return y.call(t,this)})}}},function(t,n,e){var r=e(2).navigator;t.exports=r&&r.userAgent||""},function(t,n,e){"use strict";var r=e(2),o=e(0),i=e(12),a=e(42),u=e(31),c=e(41),s=e(40),f=e(4),l=e(3),h=e(58),p=e(44),d=e(74);t.exports=function(t,n,e,v,g,m){var y=r[t],x=y,b=g?"set":"add",_=x&&x.prototype,w={},S=function(t){var n=_[t];i(_,t,"delete"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"has"==t?function(t){return!(m&&!f(t))&&n.call(this,0===t?0:t)}:"get"==t?function(t){return m&&!f(t)?void 0:n.call(this,0===t?0:t)}:"add"==t?function(t){return n.call(this,0===t?0:t),this}:function(t,e){return n.call(this,0===t?0:t,e),this})};if("function"==typeof x&&(m||_.forEach&&!l(function(){(new x).entries().next()}))){var j=new x,G=j[b](m?{}:-0,1)!=j,E=l(function(){j.has(1)}),C=h(function(t){new x(t)}),A=!m&&l(function(){for(var t=new x,n=5;n--;)t[b](n,n);return!t.has(-0)});C||((x=n(function(n,e){s(n,x,t);var r=d(new y,n,x);return null!=e&&c(e,g,r[b],r),r})).prototype=_,_.constructor=x),(E||A)&&(S("delete"),S("has"),g&&S("get")),(A||G)&&S(b),m&&_.clear&&delete _.clear}else x=v.getConstructor(n,t,g,b),a(x.prototype,e),u.NEED=!0;return p(x,t),w[t]=x,o(o.G+o.W+o.F*(x!=y),w),m||v.setStrong(x,t,g),x}},function(t,n,e){for(var r,o=e(2),i=e(11),a=e(34),u=a("typed_array"),c=a("view"),s=!(!o.ArrayBuffer||!o.DataView),f=s,l=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");l<9;)(r=o[h[l++]])?(i(r.prototype,u,!0),i(r.prototype,c,!0)):f=!1;t.exports={ABV:s,CONSTR:f,TYPED:u,VIEW:c}},function(t,n,e){"use strict";t.exports=e(30)||!e(3)(function(){var t=Math.random();__defineSetter__.call(null,t,function(){}),delete e(2)[t]})},function(t,n,e){"use strict";var r=e(0);t.exports=function(t){r(r.S,t,{of:function(){for(var t=arguments.length,n=new Array(t);t--;)n[t]=arguments[t];return new this(n)}})}},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(20),a=e(41);t.exports=function(t){r(r.S,t,{from:function(t){var n,e,r,u,c=arguments[1];return o(this),(n=void 0!==c)&&o(c),null==t?new this:(e=[],n?(r=0,u=i(c,arguments[2],2),a(t,!1,function(t){e.push(u(t,r++))})):a(t,!1,e.push,e),new this(e))}})}},function(t,n,e){var r=e(4),o=e(2).document,i=r(o)&&r(o.createElement);t.exports=function(t){return i?o.createElement(t):{}}},function(t,n,e){var r=e(2),o=e(19),i=e(30),a=e(96),u=e(8).f;t.exports=function(t){var n=o.Symbol||(o.Symbol=i?{}:r.Symbol||{});"_"==t.charAt(0)||t in n||u(n,t,{value:a.f(t)})}},function(t,n,e){var r=e(48)("keys"),o=e(34);t.exports=function(t){return r[t]||(r[t]=o(t))}},function(t,n){t.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(t,n,e){var r=e(2).document;t.exports=r&&r.documentElement},function(t,n,e){var r=e(4),o=e(1),i=function(t,n){if(o(t),!r(n)&&null!==n)throw TypeError(n+": can't set as prototype!")};t.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(t,n,r){try{(r=e(20)(Function.call,e(17).f(Object.prototype,"__proto__").set,2))(t,[]),n=!(t instanceof Array)}catch(t){n=!0}return function(t,e){return i(t,e),n?t.__proto__=e:r(t,e),t}}({},!1):void 0),check:i}},function(t,n){t.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(t,n,e){var r=e(4),o=e(72).set;t.exports=function(t,n,e){var i,a=n.constructor;return a!==e&&"function"==typeof a&&(i=a.prototype)!==e.prototype&&r(i)&&o&&o(t,i),t}},function(t,n,e){"use strict";var r=e(22),o=e(25);t.exports=function(t){var n=String(o(this)),e="",i=r(t);if(i<0||i==1/0)throw RangeError("Count can't be negative");for(;i>0;(i>>>=1)&&(n+=n))1&i&&(e+=n);return e}},function(t,n){t.exports=Math.sign||function(t){return 0==(t=+t)||t!=t?t:t<0?-1:1}},function(t,n){var e=Math.expm1;t.exports=!e||e(10)>22025.465794806718||e(10)<22025.465794806718||-2e-17!=e(-2e-17)?function(t){return 0==(t=+t)?t:t>-1e-6&&t<1e-6?t+t*t/2:Math.exp(t)-1}:e},function(t,n,e){"use strict";var r=e(30),o=e(0),i=e(12),a=e(11),u=e(47),c=e(79),s=e(44),f=e(18),l=e(5)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};t.exports=function(t,n,e,d,v,g,m){c(e,n,d);var y,x,b,_=function(t){if(!h&&t in G)return G[t];switch(t){case"keys":case"values":return function(){return new e(this,t)}}return function(){return new e(this,t)}},w=n+" Iterator",S="values"==v,j=!1,G=t.prototype,E=G[l]||G["@@iterator"]||v&&G[v],C=E||_(v),A=v?S?_("entries"):C:void 0,O="Array"==n&&G.entries||E;if(O&&(b=f(O.call(new t)))!==Object.prototype&&b.next&&(s(b,w,!0),r||"function"==typeof b[l]||a(b,l,p)),S&&E&&"values"!==E.name&&(j=!0,C=function(){return E.call(this)}),r&&!m||!h&&!j&&G[l]||a(G,l,C),u[n]=C,u[w]=p,v)if(y={values:S?C:_("values"),keys:g?C:_("keys"),entries:A},m)for(x in y)x in G||i(G,x,y[x]);else o(o.P+o.F*(h||j),n,y);return y}},function(t,n,e){"use strict";var r=e(37),o=e(33),i=e(44),a={};e(11)(a,e(5)("iterator"),function(){return this}),t.exports=function(t,n,e){t.prototype=r(a,{next:o(1,e)}),i(t,n+" Iterator")}},function(t,n,e){var r=e(57),o=e(25);t.exports=function(t,n,e){if(r(n))throw TypeError("String#"+e+" doesn't accept regex!");return String(o(t))}},function(t,n,e){var r=e(5)("match");t.exports=function(t){var n=/./;try{"/./"[t](n)}catch(e){try{return n[r]=!1,!"/./"[t](n)}catch(t){}}return!0}},function(t,n,e){var r=e(47),o=e(5)("iterator"),i=Array.prototype;t.exports=function(t){return void 0!==t&&(r.Array===t||i[o]===t)}},function(t,n,e){"use strict";var r=e(8),o=e(33);t.exports=function(t,n,e){n in t?r.f(t,n,o(0,e)):t[n]=e}},function(t,n,e){var r=e(45),o=e(5)("iterator"),i=e(47);t.exports=e(19).getIteratorMethod=function(t){if(null!=t)return t[o]||t["@@iterator"]||i[r(t)]}},function(t,n,e){var r=e(225);t.exports=function(t,n){return new(r(t))(n)}},function(t,n,e){"use strict";var r=e(9),o=e(36),i=e(6);t.exports=function(t){for(var n=r(this),e=i(n.length),a=arguments.length,u=o(a>1?arguments[1]:void 0,e),c=a>2?arguments[2]:void 0,s=void 0===c?e:o(c,e);s>u;)n[u++]=t;return n}},function(t,n,e){"use strict";var r=e(32),o=e(113),i=e(47),a=e(16);t.exports=e(78)(Array,"Array",function(t,n){this._t=a(t),this._i=0,this._k=n},function(){var t=this._t,n=this._k,e=this._i++;return!t||e>=t.length?(this._t=void 0,o(1)):o(0,"keys"==n?e:"values"==n?t[e]:[e,t[e]])},"values"),i.Arguments=i.Array,r("keys"),r("values"),r("entries")},function(t,n,e){"use strict";var r,o,i=e(51),a=RegExp.prototype.exec,u=String.prototype.replace,c=a,s=(r=/a/,o=/b*/g,a.call(r,"a"),a.call(o,"a"),0!==r.lastIndex||0!==o.lastIndex),f=void 0!==/()??/.exec("")[1];(s||f)&&(c=function(t){var n,e,r,o,c=this;return f&&(e=new RegExp("^"+c.source+"$(?!\\s)",i.call(c))),s&&(n=c.lastIndex),r=a.call(c,t),s&&r&&(c.lastIndex=c.global?r.index+r[0].length:n),f&&r&&r.length>1&&u.call(r[0],e,function(){for(o=1;o<arguments.length-2;o++)void 0===arguments[o]&&(r[o]=void 0)}),r}),t.exports=c},function(t,n,e){"use strict";var r=e(56)(!0);t.exports=function(t,n,e){return n+(e?r(t,n).length:1)}},function(t,n,e){var r,o,i,a=e(20),u=e(103),c=e(71),s=e(67),f=e(2),l=f.process,h=f.setImmediate,p=f.clearImmediate,d=f.MessageChannel,v=f.Dispatch,g=0,m={},y=function(){var t=+this;if(m.hasOwnProperty(t)){var n=m[t];delete m[t],n()}},x=function(t){y.call(t.data)};h&&p||(h=function(t){for(var n=[],e=1;arguments.length>e;)n.push(arguments[e++]);return m[++g]=function(){u("function"==typeof t?t:Function(t),n)},r(g),g},p=function(t){delete m[t]},"process"==e(21)(l)?r=function(t){l.nextTick(a(y,t,1))}:v&&v.now?r=function(t){v.now(a(y,t,1))}:d?(i=(o=new d).port2,o.port1.onmessage=x,r=a(i.postMessage,i,1)):f.addEventListener&&"function"==typeof postMessage&&!f.importScripts?(r=function(t){f.postMessage(t+"","*")},f.addEventListener("message",x,!1)):r="onreadystatechange"in s("script")?function(t){c.appendChild(s("script")).onreadystatechange=function(){c.removeChild(this),y.call(t)}}:function(t){setTimeout(a(y,t,1),0)}),t.exports={set:h,clear:p}},function(t,n,e){var r=e(2),o=e(90).set,i=r.MutationObserver||r.WebKitMutationObserver,a=r.process,u=r.Promise,c="process"==e(21)(a);t.exports=function(){var t,n,e,s=function(){var r,o;for(c&&(r=a.domain)&&r.exit();t;){o=t.fn,t=t.next;try{o()}catch(r){throw t?e():n=void 0,r}}n=void 0,r&&r.enter()};if(c)e=function(){a.nextTick(s)};else if(!i||r.navigator&&r.navigator.standalone)if(u&&u.resolve){var f=u.resolve(void 0);e=function(){f.then(s)}}else e=function(){o.call(r,s)};else{var l=!0,h=document.createTextNode("");new i(s).observe(h,{characterData:!0}),e=function(){h.data=l=!l}}return function(r){var o={fn:r,next:void 0};n&&(n.next=o),t||(t=o,e()),n=o}}},function(t,n,e){"use strict";var r=e(10);function o(t){var n,e;this.promise=new t(function(t,r){if(void 0!==n||void 0!==e)throw TypeError("Bad Promise constructor");n=t,e=r}),this.resolve=r(n),this.reject=r(e)}t.exports.f=function(t){return new o(t)}},function(t,n,e){"use strict";var r=e(2),o=e(7),i=e(30),a=e(63),u=e(11),c=e(42),s=e(3),f=e(40),l=e(22),h=e(6),p=e(123),d=e(38).f,v=e(8).f,g=e(86),m=e(44),y="prototype",x="Wrong index!",b=r.ArrayBuffer,_=r.DataView,w=r.Math,S=r.RangeError,j=r.Infinity,G=b,E=w.abs,C=w.pow,A=w.floor,O=w.log,M=w.LN2,P=o?"_b":"buffer",F=o?"_l":"byteLength",I=o?"_o":"byteOffset";function T(t,n,e){var r,o,i,a=new Array(e),u=8*e-n-1,c=(1<<u)-1,s=c>>1,f=23===n?C(2,-24)-C(2,-77):0,l=0,h=t<0||0===t&&1/t<0?1:0;for((t=E(t))!=t||t===j?(o=t!=t?1:0,r=c):(r=A(O(t)/M),t*(i=C(2,-r))<1&&(r--,i*=2),(t+=r+s>=1?f/i:f*C(2,1-s))*i>=2&&(r++,i/=2),r+s>=c?(o=0,r=c):r+s>=1?(o=(t*i-1)*C(2,n),r+=s):(o=t*C(2,s-1)*C(2,n),r=0));n>=8;a[l++]=255&o,o/=256,n-=8);for(r=r<<n|o,u+=n;u>0;a[l++]=255&r,r/=256,u-=8);return a[--l]|=128*h,a}function k(t,n,e){var r,o=8*e-n-1,i=(1<<o)-1,a=i>>1,u=o-7,c=e-1,s=t[c--],f=127&s;for(s>>=7;u>0;f=256*f+t[c],c--,u-=8);for(r=f&(1<<-u)-1,f>>=-u,u+=n;u>0;r=256*r+t[c],c--,u-=8);if(0===f)f=1-a;else{if(f===i)return r?NaN:s?-j:j;r+=C(2,n),f-=a}return(s?-1:1)*r*C(2,f-n)}function N(t){return t[3]<<24|t[2]<<16|t[1]<<8|t[0]}function L(t){return[255&t]}function R(t){return[255&t,t>>8&255]}function $(t){return[255&t,t>>8&255,t>>16&255,t>>24&255]}function D(t){return T(t,52,8)}function V(t){return T(t,23,4)}function W(t,n,e){v(t[y],n,{get:function(){return this[e]}})}function B(t,n,e,r){var o=p(+e);if(o+n>t[F])throw S(x);var i=t[P]._b,a=o+t[I],u=i.slice(a,a+n);return r?u:u.reverse()}function U(t,n,e,r,o,i){var a=p(+e);if(a+n>t[F])throw S(x);for(var u=t[P]._b,c=a+t[I],s=r(+o),f=0;f<n;f++)u[c+f]=s[i?f:n-f-1]}if(a.ABV){if(!s(function(){b(1)})||!s(function(){new b(-1)})||s(function(){return new b,new b(1.5),new b(NaN),"ArrayBuffer"!=b.name})){for(var z,q=(b=function(t){return f(this,b),new G(p(t))})[y]=G[y],Y=d(G),J=0;Y.length>J;)(z=Y[J++])in b||u(b,z,G[z]);i||(q.constructor=b)}var K=new _(new b(2)),X=_[y].setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||c(_[y],{setInt8:function(t,n){X.call(this,t,n<<24>>24)},setUint8:function(t,n){X.call(this,t,n<<24>>24)}},!0)}else b=function(t){f(this,b,"ArrayBuffer");var n=p(t);this._b=g.call(new Array(n),0),this[F]=n},_=function(t,n,e){f(this,_,"DataView"),f(t,b,"DataView");var r=t[F],o=l(n);if(o<0||o>r)throw S("Wrong offset!");if(o+(e=void 0===e?r-o:h(e))>r)throw S("Wrong length!");this[P]=t,this[I]=o,this[F]=e},o&&(W(b,"byteLength","_l"),W(_,"buffer","_b"),W(_,"byteLength","_l"),W(_,"byteOffset","_o")),c(_[y],{getInt8:function(t){return B(this,1,t)[0]<<24>>24},getUint8:function(t){return B(this,1,t)[0]},getInt16:function(t){var n=B(this,2,t,arguments[1]);return(n[1]<<8|n[0])<<16>>16},getUint16:function(t){var n=B(this,2,t,arguments[1]);return n[1]<<8|n[0]},getInt32:function(t){return N(B(this,4,t,arguments[1]))},getUint32:function(t){return N(B(this,4,t,arguments[1]))>>>0},getFloat32:function(t){return k(B(this,4,t,arguments[1]),23,4)},getFloat64:function(t){return k(B(this,8,t,arguments[1]),52,8)},setInt8:function(t,n){U(this,1,t,L,n)},setUint8:function(t,n){U(this,1,t,L,n)},setInt16:function(t,n){U(this,2,t,R,n,arguments[2])},setUint16:function(t,n){U(this,2,t,R,n,arguments[2])},setInt32:function(t,n){U(this,4,t,$,n,arguments[2])},setUint32:function(t,n){U(this,4,t,$,n,arguments[2])},setFloat32:function(t,n){U(this,4,t,V,n,arguments[2])},setFloat64:function(t,n){U(this,8,t,D,n,arguments[2])}});m(b,"ArrayBuffer"),m(_,"DataView"),u(_[y],a.VIEW,!0),n.ArrayBuffer=b,n.DataView=_},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){t.exports=!e(7)&&!e(3)(function(){return 7!=Object.defineProperty(e(67)("div"),"a",{get:function(){return 7}}).a})},function(t,n,e){n.f=e(5)},function(t,n,e){var r=e(15),o=e(16),i=e(53)(!1),a=e(69)("IE_PROTO");t.exports=function(t,n){var e,u=o(t),c=0,s=[];for(e in u)e!=a&&r(u,e)&&s.push(e);for(;n.length>c;)r(u,e=n[c++])&&(~i(s,e)||s.push(e));return s}},function(t,n,e){var r=e(8),o=e(1),i=e(35);t.exports=e(7)?Object.defineProperties:function(t,n){o(t);for(var e,a=i(n),u=a.length,c=0;u>c;)r.f(t,e=a[c++],n[e]);return t}},function(t,n,e){var r=e(16),o=e(38).f,i={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];t.exports.f=function(t){return a&&"[object Window]"==i.call(t)?function(t){try{return o(t)}catch(t){return a.slice()}}(t):o(r(t))}},function(t,n,e){"use strict";var r=e(35),o=e(54),i=e(50),a=e(9),u=e(49),c=Object.assign;t.exports=!c||e(3)(function(){var t={},n={},e=Symbol(),r="abcdefghijklmnopqrst";return t[e]=7,r.split("").forEach(function(t){n[t]=t}),7!=c({},t)[e]||Object.keys(c({},n)).join("")!=r})?function(t,n){for(var e=a(t),c=arguments.length,s=1,f=o.f,l=i.f;c>s;)for(var h,p=u(arguments[s++]),d=f?r(p).concat(f(p)):r(p),v=d.length,g=0;v>g;)l.call(p,h=d[g++])&&(e[h]=p[h]);return e}:c},function(t,n){t.exports=Object.is||function(t,n){return t===n?0!==t||1/t==1/n:t!=t&&n!=n}},function(t,n,e){"use strict";var r=e(10),o=e(4),i=e(103),a=[].slice,u={};t.exports=Function.bind||function(t){var n=r(this),e=a.call(arguments,1),c=function(){var r=e.concat(a.call(arguments));return this instanceof c?function(t,n,e){if(!(n in u)){for(var r=[],o=0;o<n;o++)r[o]="a["+o+"]";u[n]=Function("F,a","return new F("+r.join(",")+")")}return u[n](t,e)}(n,r.length,r):i(n,r,t)};return o(n.prototype)&&(c.prototype=n.prototype),c}},function(t,n){t.exports=function(t,n,e){var r=void 0===e;switch(n.length){case 0:return r?t():t.call(e);case 1:return r?t(n[0]):t.call(e,n[0]);case 2:return r?t(n[0],n[1]):t.call(e,n[0],n[1]);case 3:return r?t(n[0],n[1],n[2]):t.call(e,n[0],n[1],n[2]);case 4:return r?t(n[0],n[1],n[2],n[3]):t.call(e,n[0],n[1],n[2],n[3])}return t.apply(e,n)}},function(t,n,e){var r=e(2).parseInt,o=e(46).trim,i=e(73),a=/^[-+]?0[xX]/;t.exports=8!==r(i+"08")||22!==r(i+"0x16")?function(t,n){var e=o(String(t),3);return r(e,n>>>0||(a.test(e)?16:10))}:r},function(t,n,e){var r=e(2).parseFloat,o=e(46).trim;t.exports=1/r(e(73)+"-0")!=-1/0?function(t){var n=o(String(t),3),e=r(n);return 0===e&&"-"==n.charAt(0)?-0:e}:r},function(t,n,e){var r=e(21);t.exports=function(t,n){if("number"!=typeof t&&"Number"!=r(t))throw TypeError(n);return+t}},function(t,n,e){var r=e(4),o=Math.floor;t.exports=function(t){return!r(t)&&isFinite(t)&&o(t)===t}},function(t,n){t.exports=Math.log1p||function(t){return(t=+t)>-1e-8&&t<1e-8?t-t*t/2:Math.log(1+t)}},function(t,n,e){var r=e(76),o=Math.pow,i=o(2,-52),a=o(2,-23),u=o(2,127)*(2-a),c=o(2,-126);t.exports=Math.fround||function(t){var n,e,o=Math.abs(t),s=r(t);return o<c?s*(o/c/a+1/i-1/i)*c*a:(e=(n=(1+a/i)*o)-(n-o))>u||e!=e?s*(1/0):s*e}},function(t,n,e){var r=e(1);t.exports=function(t,n,e,o){try{return o?n(r(e)[0],e[1]):n(e)}catch(n){var i=t.return;throw void 0!==i&&r(i.call(t)),n}}},function(t,n,e){var r=e(10),o=e(9),i=e(49),a=e(6);t.exports=function(t,n,e,u,c){r(n);var s=o(t),f=i(s),l=a(s.length),h=c?l-1:0,p=c?-1:1;if(e<2)for(;;){if(h in f){u=f[h],h+=p;break}if(h+=p,c?h<0:l<=h)throw TypeError("Reduce of empty array with no initial value")}for(;c?h>=0:l>h;h+=p)h in f&&(u=n(u,f[h],h,s));return u}},function(t,n,e){"use strict";var r=e(9),o=e(36),i=e(6);t.exports=[].copyWithin||function(t,n){var e=r(this),a=i(e.length),u=o(t,a),c=o(n,a),s=arguments.length>2?arguments[2]:void 0,f=Math.min((void 0===s?a:o(s,a))-c,a-u),l=1;for(c<u&&u<c+f&&(l=-1,c+=f-1,u+=f-1);f-- >0;)c in e?e[u]=e[c]:delete e[u],u+=l,c+=l;return e}},function(t,n){t.exports=function(t,n){return{value:n,done:!!t}}},function(t,n,e){"use strict";var r=e(88);e(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(t,n,e){e(7)&&"g"!=/./g.flags&&e(8).f(RegExp.prototype,"flags",{configurable:!0,get:e(51)})},function(t,n){t.exports=function(t){try{return{e:!1,v:t()}}catch(t){return{e:!0,v:t}}}},function(t,n,e){var r=e(1),o=e(4),i=e(92);t.exports=function(t,n){if(r(t),o(n)&&n.constructor===t)return n;var e=i.f(t);return(0,e.resolve)(n),e.promise}},function(t,n,e){"use strict";var r=e(119),o=e(43);t.exports=e(62)("Map",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{get:function(t){var n=r.getEntry(o(this,"Map"),t);return n&&n.v},set:function(t,n){return r.def(o(this,"Map"),0===t?0:t,n)}},r,!0)},function(t,n,e){"use strict";var r=e(8).f,o=e(37),i=e(42),a=e(20),u=e(40),c=e(41),s=e(78),f=e(113),l=e(39),h=e(7),p=e(31).fastKey,d=e(43),v=h?"_s":"size",g=function(t,n){var e,r=p(n);if("F"!==r)return t._i[r];for(e=t._f;e;e=e.n)if(e.k==n)return e};t.exports={getConstructor:function(t,n,e,s){var f=t(function(t,r){u(t,f,n,"_i"),t._t=n,t._i=o(null),t._f=void 0,t._l=void 0,t[v]=0,null!=r&&c(r,e,t[s],t)});return i(f.prototype,{clear:function(){for(var t=d(this,n),e=t._i,r=t._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete e[r.i];t._f=t._l=void 0,t[v]=0},delete:function(t){var e=d(this,n),r=g(e,t);if(r){var o=r.n,i=r.p;delete e._i[r.i],r.r=!0,i&&(i.n=o),o&&(o.p=i),e._f==r&&(e._f=o),e._l==r&&(e._l=i),e[v]--}return!!r},forEach:function(t){d(this,n);for(var e,r=a(t,arguments.length>1?arguments[1]:void 0,3);e=e?e.n:this._f;)for(r(e.v,e.k,this);e&&e.r;)e=e.p},has:function(t){return!!g(d(this,n),t)}}),h&&r(f.prototype,"size",{get:function(){return d(this,n)[v]}}),f},def:function(t,n,e){var r,o,i=g(t,n);return i?i.v=e:(t._l=i={i:o=p(n,!0),k:n,v:e,p:r=t._l,n:void 0,r:!1},t._f||(t._f=i),r&&(r.n=i),t[v]++,"F"!==o&&(t._i[o]=i)),t},getEntry:g,setStrong:function(t,n,e){s(t,n,function(t,e){this._t=d(t,n),this._k=e,this._l=void 0},function(){for(var t=this._k,n=this._l;n&&n.r;)n=n.p;return this._t&&(this._l=n=n?n.n:this._t._f)?f(0,"keys"==t?n.k:"values"==t?n.v:[n.k,n.v]):(this._t=void 0,f(1))},e?"entries":"values",!e,!0),l(n)}}},function(t,n,e){"use strict";var r=e(119),o=e(43);t.exports=e(62)("Set",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"Set"),t=0===t?0:t,t)}},r)},function(t,n,e){"use strict";var r,o=e(2),i=e(27)(0),a=e(12),u=e(31),c=e(100),s=e(122),f=e(4),l=e(43),h=e(43),p=!o.ActiveXObject&&"ActiveXObject"in o,d=u.getWeak,v=Object.isExtensible,g=s.ufstore,m=function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},y={get:function(t){if(f(t)){var n=d(t);return!0===n?g(l(this,"WeakMap")).get(t):n?n[this._i]:void 0}},set:function(t,n){return s.def(l(this,"WeakMap"),t,n)}},x=t.exports=e(62)("WeakMap",m,y,s,!0,!0);h&&p&&(c((r=s.getConstructor(m,"WeakMap")).prototype,y),u.NEED=!0,i(["delete","has","get","set"],function(t){var n=x.prototype,e=n[t];a(n,t,function(n,o){if(f(n)&&!v(n)){this._f||(this._f=new r);var i=this._f[t](n,o);return"set"==t?this:i}return e.call(this,n,o)})}))},function(t,n,e){"use strict";var r=e(42),o=e(31).getWeak,i=e(1),a=e(4),u=e(40),c=e(41),s=e(27),f=e(15),l=e(43),h=s(5),p=s(6),d=0,v=function(t){return t._l||(t._l=new g)},g=function(){this.a=[]},m=function(t,n){return h(t.a,function(t){return t[0]===n})};g.prototype={get:function(t){var n=m(this,t);if(n)return n[1]},has:function(t){return!!m(this,t)},set:function(t,n){var e=m(this,t);e?e[1]=n:this.a.push([t,n])},delete:function(t){var n=p(this.a,function(n){return n[0]===t});return~n&&this.a.splice(n,1),!!~n}},t.exports={getConstructor:function(t,n,e,i){var s=t(function(t,r){u(t,s,n,"_i"),t._t=n,t._i=d++,t._l=void 0,null!=r&&c(r,e,t[i],t)});return r(s.prototype,{delete:function(t){if(!a(t))return!1;var e=o(t);return!0===e?v(l(this,n)).delete(t):e&&f(e,this._i)&&delete e[this._i]},has:function(t){if(!a(t))return!1;var e=o(t);return!0===e?v(l(this,n)).has(t):e&&f(e,this._i)}}),s},def:function(t,n,e){var r=o(i(n),!0);return!0===r?v(t).set(n,e):r[t._i]=e,t},ufstore:v}},function(t,n,e){var r=e(22),o=e(6);t.exports=function(t){if(void 0===t)return 0;var n=r(t),e=o(n);if(n!==e)throw RangeError("Wrong length!");return e}},function(t,n,e){var r=e(38),o=e(54),i=e(1),a=e(2).Reflect;t.exports=a&&a.ownKeys||function(t){var n=r.f(i(t)),e=o.f;return e?n.concat(e(t)):n}},function(t,n,e){"use strict";var r=e(55),o=e(4),i=e(6),a=e(20),u=e(5)("isConcatSpreadable");t.exports=function t(n,e,c,s,f,l,h,p){for(var d,v,g=f,m=0,y=!!h&&a(h,p,3);m<s;){if(m in c){if(d=y?y(c[m],m,e):c[m],v=!1,o(d)&&(v=void 0!==(v=d[u])?!!v:r(d)),v&&l>0)g=t(n,e,d,i(d.length),g,l-1)-1;else{if(g>=9007199254740991)throw TypeError();n[g]=d}g++}m++}return g}},function(t,n,e){var r=e(6),o=e(75),i=e(25);t.exports=function(t,n,e,a){var u=String(i(t)),c=u.length,s=void 0===e?" ":String(e),f=r(n);if(f<=c||""==s)return u;var l=f-c,h=o.call(s,Math.ceil(l/s.length));return h.length>l&&(h=h.slice(0,l)),a?h+u:u+h}},function(t,n,e){var r=e(35),o=e(16),i=e(50).f;t.exports=function(t){return function(n){for(var e,a=o(n),u=r(a),c=u.length,s=0,f=[];c>s;)i.call(a,e=u[s++])&&f.push(t?[e,a[e]]:a[e]);return f}}},function(t,n,e){var r=e(45),o=e(129);t.exports=function(t){return function(){if(r(this)!=t)throw TypeError(t+"#toJSON isn't generic");return o(this)}}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=[];return r(t,!1,e.push,e,n),e}},function(t,n){t.exports=Math.scale||function(t,n,e,r,o){return 0===arguments.length||t!=t||n!=n||e!=e||r!=r||o!=o?NaN:t===1/0||t===-1/0?t:(t-n)*(o-r)/(e-n)+r}},function(t,n,e){"use strict";var r=function(){return e.e(44).then(e.bind(null,345))},o=function(){return e.e(45).then(e.bind(null,347))},i=function(){return e.e(32).then(e.bind(null,350))},a=function(){return e.e(35).then(e.bind(null,352))},u=function(){return e.e(38).then(e.bind(null,353))},c=function(){return e.e(39).then(e.bind(null,355))},s=function(){return e.e(36).then(e.bind(null,358))},f=function(){return e.e(37).then(e.bind(null,360))},l=function(){return e.e(40).then(e.bind(null,362))},h=function(){return e.e(2).then(e.bind(null,364))},p=function(){return e.e(41).then(e.bind(null,366))},d=function(){return e.e(29).then(e.bind(null,368))},v=function(){return e.e(31).then(e.bind(null,370))},g=function(){return e.e(30).then(e.bind(null,372))},m=function(){return e.e(43).then(e.bind(null,374))},y=function(){return e.e(4).then(e.bind(null,376))},x=function(){return e.e(49).then(e.bind(null,379))},b=function(){return e.e(28).then(e.bind(null,381))},_=function(){return e.e(48).then(e.bind(null,383))},w=function(){return e.e(42).then(e.bind(null,391))};n.a=[{name:"home",path:"/",component:function(){return e.e(27).then(e.bind(null,342))}},{name:"login",path:"/login",component:function(){return e.e(50).then(e.bind(null,343))}},{path:"/pannel",component:function(){return e.e(1).then(e.bind(null,389))}},{path:"/route/list",component:function(){return e.e(24).then(e.bind(null,344))}},{path:"/route/add",component:r},{path:"/route/edit",component:r},{path:"/role/list",component:function(){return e.e(18).then(e.bind(null,346))}},{path:"/role/add",component:o},{path:"/role/edit",component:o},{path:"/role/priv",component:function(){return e.e(47).then(e.bind(null,348))}},{path:"/admin/list",component:function(){return e.e(8).then(e.bind(null,349))}},{path:"/admin/edit",component:i},{path:"/admin/add",component:i},{path:"/user/list",component:function(){return e.e(23).then(e.bind(null,388))}},{path:"/brand/list",component:function(){return e.e(9).then(e.bind(null,351))}},{path:"/brand/edit",component:a},{path:"/brand/add",component:a},{path:"/carSeriesGroup/list",component:function(){return e.e(13).then(e.bind(null,356))}},{path:"/carSeriesGroup/edit",component:c},{path:"/carSeriesGroup/add",component:c},{path:"/carSeries/list",component:function(){return e.e(14).then(e.bind(null,354))}},{path:"/carSeries/edit",component:u},{path:"/carSeries/add",component:u},{path:"/carConfigurationGroup/list",component:function(){return e.e(10).then(e.bind(null,357))}},{path:"/carConfigurationGroup/edit",component:s},{path:"/carConfigurationGroup/add",component:s},{path:"/carConfiguration/list",component:function(){return e.e(11).then(e.bind(null,359))}},{path:"/carConfiguration/edit",component:f},{path:"/carConfiguration/add",component:f},{path:"/carType/list",component:function(){return e.e(15).then(e.bind(null,361))}},{path:"/carType/edit",component:l},{path:"/carType/add",component:l},{path:"/carModel/list",component:function(){return e.e(12).then(e.bind(null,363))}},{path:"/carModel/edit",component:h},{path:"/carModel/add",component:h},{path:"/detectionModule/list",component:function(){return e.e(17).then(e.bind(null,365))}},{path:"/detectionModule/edit",component:p},{path:"/detectionModule/add",component:p},{path:"/detectionGroup/list",component:function(){return e.e(5).then(e.bind(null,367))}},{path:"/detectionGroup/edit",component:d},{path:"/detectionGroup/add",component:d},{path:"/detectionPos/list",component:function(){return e.e(7).then(e.bind(null,369))}},{path:"/detectionPos/edit",component:v},{path:"/detectionPos/add",component:v},{path:"/detectionItem/list",component:function(){return e.e(6).then(e.bind(null,371))}},{path:"/detectionItem/edit",component:g},{path:"/detectionItem/add",component:g},{path:"/service/list",component:function(){return e.e(20).then(e.bind(null,373))}},{path:"/service/edit",component:m},{path:"/service/add",component:m},{path:"/car/list",component:function(){return e.e(16).then(e.bind(null,375))}},{path:"/car/edit",component:y},{path:"/car/add",component:y},{path:"/car/report",component:function(){return e.e(3).then(e.bind(null,377))}},{path:"/articleType/list",component:function(){return e.e(33).then(e.bind(null,378))}},{path:"/articleType/edit",component:x},{path:"/articleType/add",component:x},{path:"/article/list",component:function(){return e.e(34).then(e.bind(null,380))}},{path:"/article/edit",component:b},{path:"/article/add",component:b},{path:"/showImage/list",component:function(){return e.e(46).then(e.bind(null,382))}},{path:"/showImage/edit",component:_},{path:"/showImage/add",component:_},{path:"/saleApplication/list",component:function(){return e.e(19).then(e.bind(null,384))}},{path:"/recommendationApplication/list",component:function(){return e.e(22).then(e.bind(null,385))}},{path:"/stagingBuyApplication/list",component:function(){return e.e(26).then(e.bind(null,386))}},{path:"/reservation/list",component:function(){return e.e(21).then(e.bind(null,387))}},{path:"/story/list",component:function(){return e.e(25).then(e.bind(null,390))}},{path:"/story/edit",component:w},{path:"/story/add",component:w}]},function(t,n,e){e(133),t.exports=e(341)},function(t,n,e){"use strict";(function(t){if(e(134),e(331),e(332),t._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");t._babelPolyfill=!0;var n="defineProperty";function r(t,e,r){t[e]||Object[n](t,e,{writable:!0,configurable:!0,value:r})}r(String.prototype,"padLeft","".padStart),r(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach(function(t){[][t]&&r(Array,t,Function.call.bind([][t]))})}).call(this,e(94))},function(t,n,e){e(135),e(138),e(139),e(140),e(141),e(142),e(143),e(144),e(145),e(146),e(147),e(148),e(149),e(150),e(151),e(152),e(153),e(154),e(155),e(156),e(157),e(158),e(159),e(160),e(161),e(162),e(163),e(164),e(165),e(166),e(167),e(168),e(169),e(170),e(171),e(172),e(173),e(174),e(175),e(176),e(177),e(178),e(179),e(180),e(181),e(182),e(183),e(184),e(185),e(186),e(187),e(188),e(189),e(190),e(191),e(192),e(193),e(194),e(195),e(196),e(197),e(198),e(199),e(200),e(201),e(202),e(203),e(204),e(205),e(206),e(207),e(208),e(209),e(210),e(211),e(212),e(213),e(215),e(216),e(218),e(219),e(220),e(221),e(222),e(223),e(224),e(226),e(227),e(228),e(229),e(230),e(231),e(232),e(233),e(234),e(235),e(236),e(237),e(238),e(87),e(239),e(114),e(240),e(115),e(241),e(242),e(243),e(244),e(245),e(118),e(120),e(121),e(246),e(247),e(248),e(249),e(250),e(251),e(252),e(253),e(254),e(255),e(256),e(257),e(258),e(259),e(260),e(261),e(262),e(263),e(264),e(265),e(266),e(267),e(268),e(269),e(270),e(271),e(272),e(273),e(274),e(275),e(276),e(277),e(278),e(279),e(280),e(281),e(282),e(283),e(284),e(285),e(286),e(287),e(288),e(289),e(290),e(291),e(292),e(293),e(294),e(295),e(296),e(297),e(298),e(299),e(300),e(301),e(302),e(303),e(304),e(305),e(306),e(307),e(308),e(309),e(310),e(311),e(312),e(313),e(314),e(315),e(316),e(317),e(318),e(319),e(320),e(321),e(322),e(323),e(324),e(325),e(326),e(327),e(328),e(329),e(330),t.exports=e(19)},function(t,n,e){"use strict";var r=e(2),o=e(15),i=e(7),a=e(0),u=e(12),c=e(31).KEY,s=e(3),f=e(48),l=e(44),h=e(34),p=e(5),d=e(96),v=e(68),g=e(137),m=e(55),y=e(1),x=e(4),b=e(16),_=e(24),w=e(33),S=e(37),j=e(99),G=e(17),E=e(8),C=e(35),A=G.f,O=E.f,M=j.f,P=r.Symbol,F=r.JSON,I=F&&F.stringify,T=p("_hidden"),k=p("toPrimitive"),N={}.propertyIsEnumerable,L=f("symbol-registry"),R=f("symbols"),$=f("op-symbols"),D=Object.prototype,V="function"==typeof P,W=r.QObject,B=!W||!W.prototype||!W.prototype.findChild,U=i&&s(function(){return 7!=S(O({},"a",{get:function(){return O(this,"a",{value:7}).a}})).a})?function(t,n,e){var r=A(D,n);r&&delete D[n],O(t,n,e),r&&t!==D&&O(D,n,r)}:O,z=function(t){var n=R[t]=S(P.prototype);return n._k=t,n},q=V&&"symbol"==typeof P.iterator?function(t){return"symbol"==typeof t}:function(t){return t instanceof P},Y=function(t,n,e){return t===D&&Y($,n,e),y(t),n=_(n,!0),y(e),o(R,n)?(e.enumerable?(o(t,T)&&t[T][n]&&(t[T][n]=!1),e=S(e,{enumerable:w(0,!1)})):(o(t,T)||O(t,T,w(1,{})),t[T][n]=!0),U(t,n,e)):O(t,n,e)},J=function(t,n){y(t);for(var e,r=g(n=b(n)),o=0,i=r.length;i>o;)Y(t,e=r[o++],n[e]);return t},K=function(t){var n=N.call(this,t=_(t,!0));return!(this===D&&o(R,t)&&!o($,t))&&(!(n||!o(this,t)||!o(R,t)||o(this,T)&&this[T][t])||n)},X=function(t,n){if(t=b(t),n=_(n,!0),t!==D||!o(R,n)||o($,n)){var e=A(t,n);return!e||!o(R,n)||o(t,T)&&t[T][n]||(e.enumerable=!0),e}},H=function(t){for(var n,e=M(b(t)),r=[],i=0;e.length>i;)o(R,n=e[i++])||n==T||n==c||r.push(n);return r},Z=function(t){for(var n,e=t===D,r=M(e?$:b(t)),i=[],a=0;r.length>a;)!o(R,n=r[a++])||e&&!o(D,n)||i.push(R[n]);return i};V||(u((P=function(){if(this instanceof P)throw TypeError("Symbol is not a constructor!");var t=h(arguments.length>0?arguments[0]:void 0),n=function(e){this===D&&n.call($,e),o(this,T)&&o(this[T],t)&&(this[T][t]=!1),U(this,t,w(1,e))};return i&&B&&U(D,t,{configurable:!0,set:n}),z(t)}).prototype,"toString",function(){return this._k}),G.f=X,E.f=Y,e(38).f=j.f=H,e(50).f=K,e(54).f=Z,i&&!e(30)&&u(D,"propertyIsEnumerable",K,!0),d.f=function(t){return z(p(t))}),a(a.G+a.W+a.F*!V,{Symbol:P});for(var Q="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),tt=0;Q.length>tt;)p(Q[tt++]);for(var nt=C(p.store),et=0;nt.length>et;)v(nt[et++]);a(a.S+a.F*!V,"Symbol",{for:function(t){return o(L,t+="")?L[t]:L[t]=P(t)},keyFor:function(t){if(!q(t))throw TypeError(t+" is not a symbol!");for(var n in L)if(L[n]===t)return n},useSetter:function(){B=!0},useSimple:function(){B=!1}}),a(a.S+a.F*!V,"Object",{create:function(t,n){return void 0===n?S(t):J(S(t),n)},defineProperty:Y,defineProperties:J,getOwnPropertyDescriptor:X,getOwnPropertyNames:H,getOwnPropertySymbols:Z}),F&&a(a.S+a.F*(!V||s(function(){var t=P();return"[null]"!=I([t])||"{}"!=I({a:t})||"{}"!=I(Object(t))})),"JSON",{stringify:function(t){for(var n,e,r=[t],o=1;arguments.length>o;)r.push(arguments[o++]);if(e=n=r[1],(x(n)||void 0!==t)&&!q(t))return m(n)||(n=function(t,n){if("function"==typeof e&&(n=e.call(this,t,n)),!q(n))return n}),r[1]=n,I.apply(F,r)}}),P.prototype[k]||e(11)(P.prototype,k,P.prototype.valueOf),l(P,"Symbol"),l(Math,"Math",!0),l(r.JSON,"JSON",!0)},function(t,n,e){t.exports=e(48)("native-function-to-string",Function.toString)},function(t,n,e){var r=e(35),o=e(54),i=e(50);t.exports=function(t){var n=r(t),e=o.f;if(e)for(var a,u=e(t),c=i.f,s=0;u.length>s;)c.call(t,a=u[s++])&&n.push(a);return n}},function(t,n,e){var r=e(0);r(r.S,"Object",{create:e(37)})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperty:e(8).f})},function(t,n,e){var r=e(0);r(r.S+r.F*!e(7),"Object",{defineProperties:e(98)})},function(t,n,e){var r=e(16),o=e(17).f;e(26)("getOwnPropertyDescriptor",function(){return function(t,n){return o(r(t),n)}})},function(t,n,e){var r=e(9),o=e(18);e(26)("getPrototypeOf",function(){return function(t){return o(r(t))}})},function(t,n,e){var r=e(9),o=e(35);e(26)("keys",function(){return function(t){return o(r(t))}})},function(t,n,e){e(26)("getOwnPropertyNames",function(){return e(99).f})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("freeze",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("seal",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4),o=e(31).onFreeze;e(26)("preventExtensions",function(t){return function(n){return t&&r(n)?t(o(n)):n}})},function(t,n,e){var r=e(4);e(26)("isFrozen",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isSealed",function(t){return function(n){return!r(n)||!!t&&t(n)}})},function(t,n,e){var r=e(4);e(26)("isExtensible",function(t){return function(n){return!!r(n)&&(!t||t(n))}})},function(t,n,e){var r=e(0);r(r.S+r.F,"Object",{assign:e(100)})},function(t,n,e){var r=e(0);r(r.S,"Object",{is:e(101)})},function(t,n,e){var r=e(0);r(r.S,"Object",{setPrototypeOf:e(72).set})},function(t,n,e){"use strict";var r=e(45),o={};o[e(5)("toStringTag")]="z",o+""!="[object z]"&&e(12)(Object.prototype,"toString",function(){return"[object "+r(this)+"]"},!0)},function(t,n,e){var r=e(0);r(r.P,"Function",{bind:e(102)})},function(t,n,e){var r=e(8).f,o=Function.prototype,i=/^\s*function ([^ (]*)/;"name"in o||e(7)&&r(o,"name",{configurable:!0,get:function(){try{return(""+this).match(i)[1]}catch(t){return""}}})},function(t,n,e){"use strict";var r=e(4),o=e(18),i=e(5)("hasInstance"),a=Function.prototype;i in a||e(8).f(a,i,{value:function(t){if("function"!=typeof this||!r(t))return!1;if(!r(this.prototype))return t instanceof this;for(;t=o(t);)if(this.prototype===t)return!0;return!1}})},function(t,n,e){var r=e(0),o=e(104);r(r.G+r.F*(parseInt!=o),{parseInt:o})},function(t,n,e){var r=e(0),o=e(105);r(r.G+r.F*(parseFloat!=o),{parseFloat:o})},function(t,n,e){"use strict";var r=e(2),o=e(15),i=e(21),a=e(74),u=e(24),c=e(3),s=e(38).f,f=e(17).f,l=e(8).f,h=e(46).trim,p=r.Number,d=p,v=p.prototype,g="Number"==i(e(37)(v)),m="trim"in String.prototype,y=function(t){var n=u(t,!1);if("string"==typeof n&&n.length>2){var e,r,o,i=(n=m?n.trim():h(n,3)).charCodeAt(0);if(43===i||45===i){if(88===(e=n.charCodeAt(2))||120===e)return NaN}else if(48===i){switch(n.charCodeAt(1)){case 66:case 98:r=2,o=49;break;case 79:case 111:r=8,o=55;break;default:return+n}for(var a,c=n.slice(2),s=0,f=c.length;s<f;s++)if((a=c.charCodeAt(s))<48||a>o)return NaN;return parseInt(c,r)}}return+n};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(t){var n=arguments.length<1?0:t,e=this;return e instanceof p&&(g?c(function(){v.valueOf.call(e)}):"Number"!=i(e))?a(new d(y(n)),e,p):y(n)};for(var x,b=e(7)?s(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),_=0;b.length>_;_++)o(d,x=b[_])&&!o(p,x)&&l(p,x,f(d,x));p.prototype=v,v.constructor=p,e(12)(r,"Number",p)}},function(t,n,e){"use strict";var r=e(0),o=e(22),i=e(106),a=e(75),u=1..toFixed,c=Math.floor,s=[0,0,0,0,0,0],f="Number.toFixed: incorrect invocation!",l=function(t,n){for(var e=-1,r=n;++e<6;)r+=t*s[e],s[e]=r%1e7,r=c(r/1e7)},h=function(t){for(var n=6,e=0;--n>=0;)e+=s[n],s[n]=c(e/t),e=e%t*1e7},p=function(){for(var t=6,n="";--t>=0;)if(""!==n||0===t||0!==s[t]){var e=String(s[t]);n=""===n?e:n+a.call("0",7-e.length)+e}return n},d=function(t,n,e){return 0===n?e:n%2==1?d(t,n-1,e*t):d(t*t,n/2,e)};r(r.P+r.F*(!!u&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!e(3)(function(){u.call({})})),"Number",{toFixed:function(t){var n,e,r,u,c=i(this,f),s=o(t),v="",g="0";if(s<0||s>20)throw RangeError(f);if(c!=c)return"NaN";if(c<=-1e21||c>=1e21)return String(c);if(c<0&&(v="-",c=-c),c>1e-21)if(e=(n=function(t){for(var n=0,e=t;e>=4096;)n+=12,e/=4096;for(;e>=2;)n+=1,e/=2;return n}(c*d(2,69,1))-69)<0?c*d(2,-n,1):c/d(2,n,1),e*=4503599627370496,(n=52-n)>0){for(l(0,e),r=s;r>=7;)l(1e7,0),r-=7;for(l(d(10,r,1),0),r=n-1;r>=23;)h(1<<23),r-=23;h(1<<r),l(1,1),h(2),g=p()}else l(0,e),l(1<<-n,0),g=p()+a.call("0",s);return g=s>0?v+((u=g.length)<=s?"0."+a.call("0",s-u)+g:g.slice(0,u-s)+"."+g.slice(u-s)):v+g}})},function(t,n,e){"use strict";var r=e(0),o=e(3),i=e(106),a=1..toPrecision;r(r.P+r.F*(o(function(){return"1"!==a.call(1,void 0)})||!o(function(){a.call({})})),"Number",{toPrecision:function(t){var n=i(this,"Number#toPrecision: incorrect invocation!");return void 0===t?a.call(n):a.call(n,t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(t,n,e){var r=e(0),o=e(2).isFinite;r(r.S,"Number",{isFinite:function(t){return"number"==typeof t&&o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Number",{isInteger:e(107)})},function(t,n,e){var r=e(0);r(r.S,"Number",{isNaN:function(t){return t!=t}})},function(t,n,e){var r=e(0),o=e(107),i=Math.abs;r(r.S,"Number",{isSafeInteger:function(t){return o(t)&&i(t)<=9007199254740991}})},function(t,n,e){var r=e(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(t,n,e){var r=e(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(t,n,e){var r=e(0),o=e(105);r(r.S+r.F*(Number.parseFloat!=o),"Number",{parseFloat:o})},function(t,n,e){var r=e(0),o=e(104);r(r.S+r.F*(Number.parseInt!=o),"Number",{parseInt:o})},function(t,n,e){var r=e(0),o=e(108),i=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(t){return(t=+t)<1?NaN:t>94906265.62425156?Math.log(t)+Math.LN2:o(t-1+i(t-1)*i(t+1))}})},function(t,n,e){var r=e(0),o=Math.asinh;r(r.S+r.F*!(o&&1/o(0)>0),"Math",{asinh:function t(n){return isFinite(n=+n)&&0!=n?n<0?-t(-n):Math.log(n+Math.sqrt(n*n+1)):n}})},function(t,n,e){var r=e(0),o=Math.atanh;r(r.S+r.F*!(o&&1/o(-0)<0),"Math",{atanh:function(t){return 0==(t=+t)?t:Math.log((1+t)/(1-t))/2}})},function(t,n,e){var r=e(0),o=e(76);r(r.S,"Math",{cbrt:function(t){return o(t=+t)*Math.pow(Math.abs(t),1/3)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clz32:function(t){return(t>>>=0)?31-Math.floor(Math.log(t+.5)*Math.LOG2E):32}})},function(t,n,e){var r=e(0),o=Math.exp;r(r.S,"Math",{cosh:function(t){return(o(t=+t)+o(-t))/2}})},function(t,n,e){var r=e(0),o=e(77);r(r.S+r.F*(o!=Math.expm1),"Math",{expm1:o})},function(t,n,e){var r=e(0);r(r.S,"Math",{fround:e(109)})},function(t,n,e){var r=e(0),o=Math.abs;r(r.S,"Math",{hypot:function(t,n){for(var e,r,i=0,a=0,u=arguments.length,c=0;a<u;)c<(e=o(arguments[a++]))?(i=i*(r=c/e)*r+1,c=e):i+=e>0?(r=e/c)*r:e;return c===1/0?1/0:c*Math.sqrt(i)}})},function(t,n,e){var r=e(0),o=Math.imul;r(r.S+r.F*e(3)(function(){return-5!=o(4294967295,5)||2!=o.length}),"Math",{imul:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r;return 0|o*i+((65535&e>>>16)*i+o*(65535&r>>>16)<<16>>>0)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log10:function(t){return Math.log(t)*Math.LOG10E}})},function(t,n,e){var r=e(0);r(r.S,"Math",{log1p:e(108)})},function(t,n,e){var r=e(0);r(r.S,"Math",{log2:function(t){return Math.log(t)/Math.LN2}})},function(t,n,e){var r=e(0);r(r.S,"Math",{sign:e(76)})},function(t,n,e){var r=e(0),o=e(77),i=Math.exp;r(r.S+r.F*e(3)(function(){return-2e-17!=!Math.sinh(-2e-17)}),"Math",{sinh:function(t){return Math.abs(t=+t)<1?(o(t)-o(-t))/2:(i(t-1)-i(-t-1))*(Math.E/2)}})},function(t,n,e){var r=e(0),o=e(77),i=Math.exp;r(r.S,"Math",{tanh:function(t){var n=o(t=+t),e=o(-t);return n==1/0?1:e==1/0?-1:(n-e)/(i(t)+i(-t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{trunc:function(t){return(t>0?Math.floor:Math.ceil)(t)}})},function(t,n,e){var r=e(0),o=e(36),i=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(t){for(var n,e=[],r=arguments.length,a=0;r>a;){if(n=+arguments[a++],o(n,1114111)!==n)throw RangeError(n+" is not a valid code point");e.push(n<65536?i(n):i(55296+((n-=65536)>>10),n%1024+56320))}return e.join("")}})},function(t,n,e){var r=e(0),o=e(16),i=e(6);r(r.S,"String",{raw:function(t){for(var n=o(t.raw),e=i(n.length),r=arguments.length,a=[],u=0;e>u;)a.push(String(n[u++])),u<r&&a.push(String(arguments[u]));return a.join("")}})},function(t,n,e){"use strict";e(46)("trim",function(t){return function(){return t(this,3)}})},function(t,n,e){"use strict";var r=e(56)(!0);e(78)(String,"String",function(t){this._t=String(t),this._i=0},function(){var t,n=this._t,e=this._i;return e>=n.length?{value:void 0,done:!0}:(t=r(n,e),this._i+=t.length,{value:t,done:!1})})},function(t,n,e){"use strict";var r=e(0),o=e(56)(!1);r(r.P,"String",{codePointAt:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(80),a="".endsWith;r(r.P+r.F*e(81)("endsWith"),"String",{endsWith:function(t){var n=i(this,t,"endsWith"),e=arguments.length>1?arguments[1]:void 0,r=o(n.length),u=void 0===e?r:Math.min(o(e),r),c=String(t);return a?a.call(n,c,u):n.slice(u-c.length,u)===c}})},function(t,n,e){"use strict";var r=e(0),o=e(80);r(r.P+r.F*e(81)("includes"),"String",{includes:function(t){return!!~o(this,t,"includes").indexOf(t,arguments.length>1?arguments[1]:void 0)}})},function(t,n,e){var r=e(0);r(r.P,"String",{repeat:e(75)})},function(t,n,e){"use strict";var r=e(0),o=e(6),i=e(80),a="".startsWith;r(r.P+r.F*e(81)("startsWith"),"String",{startsWith:function(t){var n=i(this,t,"startsWith"),e=o(Math.min(arguments.length>1?arguments[1]:void 0,n.length)),r=String(t);return a?a.call(n,r,e):n.slice(e,e+r.length)===r}})},function(t,n,e){"use strict";e(13)("anchor",function(t){return function(n){return t(this,"a","name",n)}})},function(t,n,e){"use strict";e(13)("big",function(t){return function(){return t(this,"big","","")}})},function(t,n,e){"use strict";e(13)("blink",function(t){return function(){return t(this,"blink","","")}})},function(t,n,e){"use strict";e(13)("bold",function(t){return function(){return t(this,"b","","")}})},function(t,n,e){"use strict";e(13)("fixed",function(t){return function(){return t(this,"tt","","")}})},function(t,n,e){"use strict";e(13)("fontcolor",function(t){return function(n){return t(this,"font","color",n)}})},function(t,n,e){"use strict";e(13)("fontsize",function(t){return function(n){return t(this,"font","size",n)}})},function(t,n,e){"use strict";e(13)("italics",function(t){return function(){return t(this,"i","","")}})},function(t,n,e){"use strict";e(13)("link",function(t){return function(n){return t(this,"a","href",n)}})},function(t,n,e){"use strict";e(13)("small",function(t){return function(){return t(this,"small","","")}})},function(t,n,e){"use strict";e(13)("strike",function(t){return function(){return t(this,"strike","","")}})},function(t,n,e){"use strict";e(13)("sub",function(t){return function(){return t(this,"sub","","")}})},function(t,n,e){"use strict";e(13)("sup",function(t){return function(){return t(this,"sup","","")}})},function(t,n,e){var r=e(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24);r(r.P+r.F*e(3)(function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})}),"Date",{toJSON:function(t){var n=o(this),e=i(n);return"number"!=typeof e||isFinite(e)?n.toISOString():null}})},function(t,n,e){var r=e(0),o=e(214);r(r.P+r.F*(Date.prototype.toISOString!==o),"Date",{toISOString:o})},function(t,n,e){"use strict";var r=e(3),o=Date.prototype.getTime,i=Date.prototype.toISOString,a=function(t){return t>9?t:"0"+t};t.exports=r(function(){return"0385-07-25T07:06:39.999Z"!=i.call(new Date(-5e13-1))})||!r(function(){i.call(new Date(NaN))})?function(){if(!isFinite(o.call(this)))throw RangeError("Invalid time value");var t=this,n=t.getUTCFullYear(),e=t.getUTCMilliseconds(),r=n<0?"-":n>9999?"+":"";return r+("00000"+Math.abs(n)).slice(r?-6:-4)+"-"+a(t.getUTCMonth()+1)+"-"+a(t.getUTCDate())+"T"+a(t.getUTCHours())+":"+a(t.getUTCMinutes())+":"+a(t.getUTCSeconds())+"."+(e>99?e:"0"+a(e))+"Z"}:i},function(t,n,e){var r=Date.prototype,o=r.toString,i=r.getTime;new Date(NaN)+""!="Invalid Date"&&e(12)(r,"toString",function(){var t=i.call(this);return t==t?o.call(this):"Invalid Date"})},function(t,n,e){var r=e(5)("toPrimitive"),o=Date.prototype;r in o||e(11)(o,r,e(217))},function(t,n,e){"use strict";var r=e(1),o=e(24);t.exports=function(t){if("string"!==t&&"number"!==t&&"default"!==t)throw TypeError("Incorrect hint");return o(r(this),"number"!=t)}},function(t,n,e){var r=e(0);r(r.S,"Array",{isArray:e(55)})},function(t,n,e){"use strict";var r=e(20),o=e(0),i=e(9),a=e(110),u=e(82),c=e(6),s=e(83),f=e(84);o(o.S+o.F*!e(58)(function(t){Array.from(t)}),"Array",{from:function(t){var n,e,o,l,h=i(t),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,g=void 0!==v,m=0,y=f(h);if(g&&(v=r(v,d>2?arguments[2]:void 0,2)),null==y||p==Array&&u(y))for(e=new p(n=c(h.length));n>m;m++)s(e,m,g?v(h[m],m):h[m]);else for(l=y.call(h),e=new p;!(o=l.next()).done;m++)s(e,m,g?a(l,v,[o.value,m],!0):o.value);return e.length=m,e}})},function(t,n,e){"use strict";var r=e(0),o=e(83);r(r.S+r.F*e(3)(function(){function t(){}return!(Array.of.call(t)instanceof t)}),"Array",{of:function(){for(var t=0,n=arguments.length,e=new("function"==typeof this?this:Array)(n);n>t;)o(e,t,arguments[t++]);return e.length=n,e}})},function(t,n,e){"use strict";var r=e(0),o=e(16),i=[].join;r(r.P+r.F*(e(49)!=Object||!e(23)(i)),"Array",{join:function(t){return i.call(o(this),void 0===t?",":t)}})},function(t,n,e){"use strict";var r=e(0),o=e(71),i=e(21),a=e(36),u=e(6),c=[].slice;r(r.P+r.F*e(3)(function(){o&&c.call(o)}),"Array",{slice:function(t,n){var e=u(this.length),r=i(this);if(n=void 0===n?e:n,"Array"==r)return c.call(this,t,n);for(var o=a(t,e),s=a(n,e),f=u(s-o),l=new Array(f),h=0;h<f;h++)l[h]="String"==r?this.charAt(o+h):this[o+h];return l}})},function(t,n,e){"use strict";var r=e(0),o=e(10),i=e(9),a=e(3),u=[].sort,c=[1,2,3];r(r.P+r.F*(a(function(){c.sort(void 0)})||!a(function(){c.sort(null)})||!e(23)(u)),"Array",{sort:function(t){return void 0===t?u.call(i(this)):u.call(i(this),o(t))}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(0),i=e(23)([].forEach,!0);r(r.P+r.F*!i,"Array",{forEach:function(t){return o(this,t,arguments[1])}})},function(t,n,e){var r=e(4),o=e(55),i=e(5)("species");t.exports=function(t){var n;return o(t)&&("function"!=typeof(n=t.constructor)||n!==Array&&!o(n.prototype)||(n=void 0),r(n)&&null===(n=n[i])&&(n=void 0)),void 0===n?Array:n}},function(t,n,e){"use strict";var r=e(0),o=e(27)(1);r(r.P+r.F*!e(23)([].map,!0),"Array",{map:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(2);r(r.P+r.F*!e(23)([].filter,!0),"Array",{filter:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(3);r(r.P+r.F*!e(23)([].some,!0),"Array",{some:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(27)(4);r(r.P+r.F*!e(23)([].every,!0),"Array",{every:function(t){return o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(23)([].reduce,!0),"Array",{reduce:function(t){return o(this,t,arguments.length,arguments[1],!1)}})},function(t,n,e){"use strict";var r=e(0),o=e(111);r(r.P+r.F*!e(23)([].reduceRight,!0),"Array",{reduceRight:function(t){return o(this,t,arguments.length,arguments[1],!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!1),i=[].indexOf,a=!!i&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!e(23)(i)),"Array",{indexOf:function(t){return a?i.apply(this,arguments)||0:o(this,t,arguments[1])}})},function(t,n,e){"use strict";var r=e(0),o=e(16),i=e(22),a=e(6),u=[].lastIndexOf,c=!!u&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(c||!e(23)(u)),"Array",{lastIndexOf:function(t){if(c)return u.apply(this,arguments)||0;var n=o(this),e=a(n.length),r=e-1;for(arguments.length>1&&(r=Math.min(r,i(arguments[1]))),r<0&&(r=e+r);r>=0;r--)if(r in n&&n[r]===t)return r||0;return-1}})},function(t,n,e){var r=e(0);r(r.P,"Array",{copyWithin:e(112)}),e(32)("copyWithin")},function(t,n,e){var r=e(0);r(r.P,"Array",{fill:e(86)}),e(32)("fill")},function(t,n,e){"use strict";var r=e(0),o=e(27)(5),i=!0;"find"in[]&&Array(1).find(function(){i=!1}),r(r.P+r.F*i,"Array",{find:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("find")},function(t,n,e){"use strict";var r=e(0),o=e(27)(6),i="findIndex",a=!0;i in[]&&Array(1)[i](function(){a=!1}),r(r.P+r.F*a,"Array",{findIndex:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)(i)},function(t,n,e){e(39)("Array")},function(t,n,e){var r=e(2),o=e(74),i=e(8).f,a=e(38).f,u=e(57),c=e(51),s=r.RegExp,f=s,l=s.prototype,h=/a/g,p=/a/g,d=new s(h)!==h;if(e(7)&&(!d||e(3)(function(){return p[e(5)("match")]=!1,s(h)!=h||s(p)==p||"/a/i"!=s(h,"i")}))){s=function(t,n){var e=this instanceof s,r=u(t),i=void 0===n;return!e&&r&&t.constructor===s&&i?t:o(d?new f(r&&!i?t.source:t,n):f((r=t instanceof s)?t.source:t,r&&i?c.call(t):n),e?this:l,s)};for(var v=function(t){t in s||i(s,t,{configurable:!0,get:function(){return f[t]},set:function(n){f[t]=n}})},g=a(f),m=0;g.length>m;)v(g[m++]);l.constructor=s,s.prototype=l,e(12)(r,"RegExp",s)}e(39)("RegExp")},function(t,n,e){"use strict";e(115);var r=e(1),o=e(51),i=e(7),a=/./.toString,u=function(t){e(12)(RegExp.prototype,"toString",t,!0)};e(3)(function(){return"/a/b"!=a.call({source:"a",flags:"b"})})?u(function(){var t=r(this);return"/".concat(t.source,"/","flags"in t?t.flags:!i&&t instanceof RegExp?o.call(t):void 0)}):"toString"!=a.name&&u(function(){return a.call(this)})},function(t,n,e){"use strict";var r=e(1),o=e(6),i=e(89),a=e(59);e(60)("match",1,function(t,n,e,u){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=u(e,t,this);if(n.done)return n.value;var c=r(t),s=String(this);if(!c.global)return a(c,s);var f=c.unicode;c.lastIndex=0;for(var l,h=[],p=0;null!==(l=a(c,s));){var d=String(l[0]);h[p]=d,""===d&&(c.lastIndex=i(s,o(c.lastIndex),f)),p++}return 0===p?null:h}]})},function(t,n,e){"use strict";var r=e(1),o=e(9),i=e(6),a=e(22),u=e(89),c=e(59),s=Math.max,f=Math.min,l=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;e(60)("replace",2,function(t,n,e,d){return[function(r,o){var i=t(this),a=null==r?void 0:r[n];return void 0!==a?a.call(r,i,o):e.call(String(i),r,o)},function(t,n){var o=d(e,t,this,n);if(o.done)return o.value;var l=r(t),h=String(this),p="function"==typeof n;p||(n=String(n));var g=l.global;if(g){var m=l.unicode;l.lastIndex=0}for(var y=[];;){var x=c(l,h);if(null===x)break;if(y.push(x),!g)break;""===String(x[0])&&(l.lastIndex=u(h,i(l.lastIndex),m))}for(var b,_="",w=0,S=0;S<y.length;S++){x=y[S];for(var j=String(x[0]),G=s(f(a(x.index),h.length),0),E=[],C=1;C<x.length;C++)E.push(void 0===(b=x[C])?b:String(b));var A=x.groups;if(p){var O=[j].concat(E,G,h);void 0!==A&&O.push(A);var M=String(n.apply(void 0,O))}else M=v(j,h,G,E,A,n);G>=w&&(_+=h.slice(w,G)+M,w=G+j.length)}return _+h.slice(w)}];function v(t,n,r,i,a,u){var c=r+t.length,s=i.length,f=p;return void 0!==a&&(a=o(a),f=h),e.call(u,f,function(e,o){var u;switch(o.charAt(0)){case"$":return"$";case"&":return t;case"`":return n.slice(0,r);case"'":return n.slice(c);case"<":u=a[o.slice(1,-1)];break;default:var f=+o;if(0===f)return e;if(f>s){var h=l(f/10);return 0===h?e:h<=s?void 0===i[h-1]?o.charAt(1):i[h-1]+o.charAt(1):e}u=i[f-1]}return void 0===u?"":u})}})},function(t,n,e){"use strict";var r=e(1),o=e(101),i=e(59);e(60)("search",1,function(t,n,e,a){return[function(e){var r=t(this),o=null==e?void 0:e[n];return void 0!==o?o.call(e,r):new RegExp(e)[n](String(r))},function(t){var n=a(e,t,this);if(n.done)return n.value;var u=r(t),c=String(this),s=u.lastIndex;o(s,0)||(u.lastIndex=0);var f=i(u,c);return o(u.lastIndex,s)||(u.lastIndex=s),null===f?-1:f.index}]})},function(t,n,e){"use strict";var r=e(57),o=e(1),i=e(52),a=e(89),u=e(6),c=e(59),s=e(88),f=e(3),l=Math.min,h=[].push,p=!f(function(){RegExp(4294967295,"y")});e(60)("split",2,function(t,n,e,f){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(t,n){var o=String(this);if(void 0===t&&0===n)return[];if(!r(t))return e.call(o,t,n);for(var i,a,u,c=[],f=(t.ignoreCase?"i":"")+(t.multiline?"m":"")+(t.unicode?"u":"")+(t.sticky?"y":""),l=0,p=void 0===n?4294967295:n>>>0,d=new RegExp(t.source,f+"g");(i=s.call(d,o))&&!((a=d.lastIndex)>l&&(c.push(o.slice(l,i.index)),i.length>1&&i.index<o.length&&h.apply(c,i.slice(1)),u=i[0].length,l=a,c.length>=p));)d.lastIndex===i.index&&d.lastIndex++;return l===o.length?!u&&d.test("")||c.push(""):c.push(o.slice(l)),c.length>p?c.slice(0,p):c}:"0".split(void 0,0).length?function(t,n){return void 0===t&&0===n?[]:e.call(this,t,n)}:e,[function(e,r){var o=t(this),i=null==e?void 0:e[n];return void 0!==i?i.call(e,o,r):d.call(String(o),e,r)},function(t,n){var r=f(d,t,this,n,d!==e);if(r.done)return r.value;var s=o(t),h=String(this),v=i(s,RegExp),g=s.unicode,m=(s.ignoreCase?"i":"")+(s.multiline?"m":"")+(s.unicode?"u":"")+(p?"y":"g"),y=new v(p?s:"^(?:"+s.source+")",m),x=void 0===n?4294967295:n>>>0;if(0===x)return[];if(0===h.length)return null===c(y,h)?[h]:[];for(var b=0,_=0,w=[];_<h.length;){y.lastIndex=p?_:0;var S,j=c(y,p?h:h.slice(_));if(null===j||(S=l(u(y.lastIndex+(p?0:_)),h.length))===b)_=a(h,_,g);else{if(w.push(h.slice(b,_)),w.length===x)return w;for(var G=1;G<=j.length-1;G++)if(w.push(j[G]),w.length===x)return w;_=b=S}}return w.push(h.slice(b)),w}]})},function(t,n,e){"use strict";var r,o,i,a,u=e(30),c=e(2),s=e(20),f=e(45),l=e(0),h=e(4),p=e(10),d=e(40),v=e(41),g=e(52),m=e(90).set,y=e(91)(),x=e(92),b=e(116),_=e(61),w=e(117),S=c.TypeError,j=c.process,G=j&&j.versions,E=G&&G.v8||"",C=c.Promise,A="process"==f(j),O=function(){},M=o=x.f,P=!!function(){try{var t=C.resolve(1),n=(t.constructor={})[e(5)("species")]=function(t){t(O,O)};return(A||"function"==typeof PromiseRejectionEvent)&&t.then(O)instanceof n&&0!==E.indexOf("6.6")&&-1===_.indexOf("Chrome/66")}catch(t){}}(),F=function(t){var n;return!(!h(t)||"function"!=typeof(n=t.then))&&n},I=function(t,n){if(!t._n){t._n=!0;var e=t._c;y(function(){for(var r=t._v,o=1==t._s,i=0,a=function(n){var e,i,a,u=o?n.ok:n.fail,c=n.resolve,s=n.reject,f=n.domain;try{u?(o||(2==t._h&&N(t),t._h=1),!0===u?e=r:(f&&f.enter(),e=u(r),f&&(f.exit(),a=!0)),e===n.promise?s(S("Promise-chain cycle")):(i=F(e))?i.call(e,c,s):c(e)):s(r)}catch(t){f&&!a&&f.exit(),s(t)}};e.length>i;)a(e[i++]);t._c=[],t._n=!1,n&&!t._h&&T(t)})}},T=function(t){m.call(c,function(){var n,e,r,o=t._v,i=k(t);if(i&&(n=b(function(){A?j.emit("unhandledRejection",o,t):(e=c.onunhandledrejection)?e({promise:t,reason:o}):(r=c.console)&&r.error&&r.error("Unhandled promise rejection",o)}),t._h=A||k(t)?2:1),t._a=void 0,i&&n.e)throw n.v})},k=function(t){return 1!==t._h&&0===(t._a||t._c).length},N=function(t){m.call(c,function(){var n;A?j.emit("rejectionHandled",t):(n=c.onrejectionhandled)&&n({promise:t,reason:t._v})})},L=function(t){var n=this;n._d||(n._d=!0,(n=n._w||n)._v=t,n._s=2,n._a||(n._a=n._c.slice()),I(n,!0))},R=function(t){var n,e=this;if(!e._d){e._d=!0,e=e._w||e;try{if(e===t)throw S("Promise can't be resolved itself");(n=F(t))?y(function(){var r={_w:e,_d:!1};try{n.call(t,s(R,r,1),s(L,r,1))}catch(t){L.call(r,t)}}):(e._v=t,e._s=1,I(e,!1))}catch(t){L.call({_w:e,_d:!1},t)}}};P||(C=function(t){d(this,C,"Promise","_h"),p(t),r.call(this);try{t(s(R,this,1),s(L,this,1))}catch(t){L.call(this,t)}},(r=function(t){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=e(42)(C.prototype,{then:function(t,n){var e=M(g(this,C));return e.ok="function"!=typeof t||t,e.fail="function"==typeof n&&n,e.domain=A?j.domain:void 0,this._c.push(e),this._a&&this._a.push(e),this._s&&I(this,!1),e.promise},catch:function(t){return this.then(void 0,t)}}),i=function(){var t=new r;this.promise=t,this.resolve=s(R,t,1),this.reject=s(L,t,1)},x.f=M=function(t){return t===C||t===a?new i(t):o(t)}),l(l.G+l.W+l.F*!P,{Promise:C}),e(44)(C,"Promise"),e(39)("Promise"),a=e(19).Promise,l(l.S+l.F*!P,"Promise",{reject:function(t){var n=M(this);return(0,n.reject)(t),n.promise}}),l(l.S+l.F*(u||!P),"Promise",{resolve:function(t){return w(u&&this===a?C:this,t)}}),l(l.S+l.F*!(P&&e(58)(function(t){C.all(t).catch(O)})),"Promise",{all:function(t){var n=this,e=M(n),r=e.resolve,o=e.reject,i=b(function(){var e=[],i=0,a=1;v(t,!1,function(t){var u=i++,c=!1;e.push(void 0),a++,n.resolve(t).then(function(t){c||(c=!0,e[u]=t,--a||r(e))},o)}),--a||r(e)});return i.e&&o(i.v),e.promise},race:function(t){var n=this,e=M(n),r=e.reject,o=b(function(){v(t,!1,function(t){n.resolve(t).then(e.resolve,r)})});return o.e&&r(o.v),e.promise}})},function(t,n,e){"use strict";var r=e(122),o=e(43);e(62)("WeakSet",function(t){return function(){return t(this,arguments.length>0?arguments[0]:void 0)}},{add:function(t){return r.def(o(this,"WeakSet"),t,!0)}},r,!1,!0)},function(t,n,e){"use strict";var r=e(0),o=e(63),i=e(93),a=e(1),u=e(36),c=e(6),s=e(4),f=e(2).ArrayBuffer,l=e(52),h=i.ArrayBuffer,p=i.DataView,d=o.ABV&&f.isView,v=h.prototype.slice,g=o.VIEW;r(r.G+r.W+r.F*(f!==h),{ArrayBuffer:h}),r(r.S+r.F*!o.CONSTR,"ArrayBuffer",{isView:function(t){return d&&d(t)||s(t)&&g in t}}),r(r.P+r.U+r.F*e(3)(function(){return!new h(2).slice(1,void 0).byteLength}),"ArrayBuffer",{slice:function(t,n){if(void 0!==v&&void 0===n)return v.call(a(this),t);for(var e=a(this).byteLength,r=u(t,e),o=u(void 0===n?e:n,e),i=new(l(this,h))(c(o-r)),s=new p(this),f=new p(i),d=0;r<o;)f.setUint8(d++,s.getUint8(r++));return i}}),e(39)("ArrayBuffer")},function(t,n,e){var r=e(0);r(r.G+r.W+r.F*!e(63).ABV,{DataView:e(93).DataView})},function(t,n,e){e(28)("Int8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint8",1,function(t){return function(n,e,r){return t(this,n,e,r)}},!0)},function(t,n,e){e(28)("Int16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint16",2,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Int32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Uint32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float32",4,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){e(28)("Float64",8,function(t){return function(n,e,r){return t(this,n,e,r)}})},function(t,n,e){var r=e(0),o=e(10),i=e(1),a=(e(2).Reflect||{}).apply,u=Function.apply;r(r.S+r.F*!e(3)(function(){a(function(){})}),"Reflect",{apply:function(t,n,e){var r=o(t),c=i(e);return a?a(r,n,c):u.call(r,n,c)}})},function(t,n,e){var r=e(0),o=e(37),i=e(10),a=e(1),u=e(4),c=e(3),s=e(102),f=(e(2).Reflect||{}).construct,l=c(function(){function t(){}return!(f(function(){},[],t)instanceof t)}),h=!c(function(){f(function(){})});r(r.S+r.F*(l||h),"Reflect",{construct:function(t,n){i(t),a(n);var e=arguments.length<3?t:i(arguments[2]);if(h&&!l)return f(t,n,e);if(t==e){switch(n.length){case 0:return new t;case 1:return new t(n[0]);case 2:return new t(n[0],n[1]);case 3:return new t(n[0],n[1],n[2]);case 4:return new t(n[0],n[1],n[2],n[3])}var r=[null];return r.push.apply(r,n),new(s.apply(t,r))}var c=e.prototype,p=o(u(c)?c:Object.prototype),d=Function.apply.call(t,p,n);return u(d)?d:p}})},function(t,n,e){var r=e(8),o=e(0),i=e(1),a=e(24);o(o.S+o.F*e(3)(function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})}),"Reflect",{defineProperty:function(t,n,e){i(t),n=a(n,!0),i(e);try{return r.f(t,n,e),!0}catch(t){return!1}}})},function(t,n,e){var r=e(0),o=e(17).f,i=e(1);r(r.S,"Reflect",{deleteProperty:function(t,n){var e=o(i(t),n);return!(e&&!e.configurable)&&delete t[n]}})},function(t,n,e){"use strict";var r=e(0),o=e(1),i=function(t){this._t=o(t),this._i=0;var n,e=this._k=[];for(n in t)e.push(n)};e(79)(i,"Object",function(){var t,n=this._k;do{if(this._i>=n.length)return{value:void 0,done:!0}}while(!((t=n[this._i++])in this._t));return{value:t,done:!1}}),r(r.S,"Reflect",{enumerate:function(t){return new i(t)}})},function(t,n,e){var r=e(17),o=e(18),i=e(15),a=e(0),u=e(4),c=e(1);a(a.S,"Reflect",{get:function t(n,e){var a,s,f=arguments.length<3?n:arguments[2];return c(n)===f?n[e]:(a=r.f(n,e))?i(a,"value")?a.value:void 0!==a.get?a.get.call(f):void 0:u(s=o(n))?t(s,e,f):void 0}})},function(t,n,e){var r=e(17),o=e(0),i=e(1);o(o.S,"Reflect",{getOwnPropertyDescriptor:function(t,n){return r.f(i(t),n)}})},function(t,n,e){var r=e(0),o=e(18),i=e(1);r(r.S,"Reflect",{getPrototypeOf:function(t){return o(i(t))}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{has:function(t,n){return n in t}})},function(t,n,e){var r=e(0),o=e(1),i=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(t){return o(t),!i||i(t)}})},function(t,n,e){var r=e(0);r(r.S,"Reflect",{ownKeys:e(124)})},function(t,n,e){var r=e(0),o=e(1),i=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(t){o(t);try{return i&&i(t),!0}catch(t){return!1}}})},function(t,n,e){var r=e(8),o=e(17),i=e(18),a=e(15),u=e(0),c=e(33),s=e(1),f=e(4);u(u.S,"Reflect",{set:function t(n,e,u){var l,h,p=arguments.length<4?n:arguments[3],d=o.f(s(n),e);if(!d){if(f(h=i(n)))return t(h,e,u,p);d=c(0)}if(a(d,"value")){if(!1===d.writable||!f(p))return!1;if(l=o.f(p,e)){if(l.get||l.set||!1===l.writable)return!1;l.value=u,r.f(p,e,l)}else r.f(p,e,c(0,u));return!0}return void 0!==d.set&&(d.set.call(p,u),!0)}})},function(t,n,e){var r=e(0),o=e(72);o&&r(r.S,"Reflect",{setPrototypeOf:function(t,n){o.check(t,n);try{return o.set(t,n),!0}catch(t){return!1}}})},function(t,n,e){"use strict";var r=e(0),o=e(53)(!0);r(r.P,"Array",{includes:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0)}}),e(32)("includes")},function(t,n,e){"use strict";var r=e(0),o=e(125),i=e(9),a=e(6),u=e(10),c=e(85);r(r.P,"Array",{flatMap:function(t){var n,e,r=i(this);return u(t),n=a(r.length),e=c(r,0),o(e,r,r,n,0,1,t,arguments[1]),e}}),e(32)("flatMap")},function(t,n,e){"use strict";var r=e(0),o=e(125),i=e(9),a=e(6),u=e(22),c=e(85);r(r.P,"Array",{flatten:function(){var t=arguments[0],n=i(this),e=a(n.length),r=c(n,0);return o(r,n,n,e,0,void 0===t?1:u(t)),r}}),e(32)("flatten")},function(t,n,e){"use strict";var r=e(0),o=e(56)(!0);r(r.P,"String",{at:function(t){return o(this,t)}})},function(t,n,e){"use strict";var r=e(0),o=e(126),i=e(61),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padStart:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!0)}})},function(t,n,e){"use strict";var r=e(0),o=e(126),i=e(61),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(i);r(r.P+r.F*a,"String",{padEnd:function(t){return o(this,t,arguments.length>1?arguments[1]:void 0,!1)}})},function(t,n,e){"use strict";e(46)("trimLeft",function(t){return function(){return t(this,1)}},"trimStart")},function(t,n,e){"use strict";e(46)("trimRight",function(t){return function(){return t(this,2)}},"trimEnd")},function(t,n,e){"use strict";var r=e(0),o=e(25),i=e(6),a=e(57),u=e(51),c=RegExp.prototype,s=function(t,n){this._r=t,this._s=n};e(79)(s,"RegExp String",function(){var t=this._r.exec(this._s);return{value:t,done:null===t}}),r(r.P,"String",{matchAll:function(t){if(o(this),!a(t))throw TypeError(t+" is not a regexp!");var n=String(this),e="flags"in c?String(t.flags):u.call(t),r=new RegExp(t.source,~e.indexOf("g")?e:"g"+e);return r.lastIndex=i(t.lastIndex),new s(r,n)}})},function(t,n,e){e(68)("asyncIterator")},function(t,n,e){e(68)("observable")},function(t,n,e){var r=e(0),o=e(124),i=e(16),a=e(17),u=e(83);r(r.S,"Object",{getOwnPropertyDescriptors:function(t){for(var n,e,r=i(t),c=a.f,s=o(r),f={},l=0;s.length>l;)void 0!==(e=c(r,n=s[l++]))&&u(f,n,e);return f}})},function(t,n,e){var r=e(0),o=e(127)(!1);r(r.S,"Object",{values:function(t){return o(t)}})},function(t,n,e){var r=e(0),o=e(127)(!0);r(r.S,"Object",{entries:function(t){return o(t)}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(10),a=e(8);e(7)&&r(r.P+e(64),"Object",{__defineGetter__:function(t,n){a.f(o(this),t,{get:i(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(10),a=e(8);e(7)&&r(r.P+e(64),"Object",{__defineSetter__:function(t,n){a.f(o(this),t,{set:i(n),enumerable:!0,configurable:!0})}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24),a=e(18),u=e(17).f;e(7)&&r(r.P+e(64),"Object",{__lookupGetter__:function(t){var n,e=o(this),r=i(t,!0);do{if(n=u(e,r))return n.get}while(e=a(e))}})},function(t,n,e){"use strict";var r=e(0),o=e(9),i=e(24),a=e(18),u=e(17).f;e(7)&&r(r.P+e(64),"Object",{__lookupSetter__:function(t){var n,e=o(this),r=i(t,!0);do{if(n=u(e,r))return n.set}while(e=a(e))}})},function(t,n,e){var r=e(0);r(r.P+r.R,"Map",{toJSON:e(128)("Map")})},function(t,n,e){var r=e(0);r(r.P+r.R,"Set",{toJSON:e(128)("Set")})},function(t,n,e){e(65)("Map")},function(t,n,e){e(65)("Set")},function(t,n,e){e(65)("WeakMap")},function(t,n,e){e(65)("WeakSet")},function(t,n,e){e(66)("Map")},function(t,n,e){e(66)("Set")},function(t,n,e){e(66)("WeakMap")},function(t,n,e){e(66)("WeakSet")},function(t,n,e){var r=e(0);r(r.G,{global:e(2)})},function(t,n,e){var r=e(0);r(r.S,"System",{global:e(2)})},function(t,n,e){var r=e(0),o=e(21);r(r.S,"Error",{isError:function(t){return"Error"===o(t)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{clamp:function(t,n,e){return Math.min(e,Math.max(n,t))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(t,n,e){var r=e(0),o=180/Math.PI;r(r.S,"Math",{degrees:function(t){return t*o}})},function(t,n,e){var r=e(0),o=e(130),i=e(109);r(r.S,"Math",{fscale:function(t,n,e,r,a){return i(o(t,n,e,r,a))}})},function(t,n,e){var r=e(0);r(r.S,"Math",{iaddh:function(t,n,e,r){var o=t>>>0,i=e>>>0;return(n>>>0)+(r>>>0)+((o&i|(o|i)&~(o+i>>>0))>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{isubh:function(t,n,e,r){var o=t>>>0,i=e>>>0;return(n>>>0)-(r>>>0)-((~o&i|~(o^i)&o-i>>>0)>>>31)|0}})},function(t,n,e){var r=e(0);r(r.S,"Math",{imulh:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r,a=e>>16,u=r>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>16)+((o*u>>>0)+(65535&c)>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(t,n,e){var r=e(0),o=Math.PI/180;r(r.S,"Math",{radians:function(t){return t*o}})},function(t,n,e){var r=e(0);r(r.S,"Math",{scale:e(130)})},function(t,n,e){var r=e(0);r(r.S,"Math",{umulh:function(t,n){var e=+t,r=+n,o=65535&e,i=65535&r,a=e>>>16,u=r>>>16,c=(a*i>>>0)+(o*i>>>16);return a*u+(c>>>16)+((o*u>>>0)+(65535&c)>>>16)}})},function(t,n,e){var r=e(0);r(r.S,"Math",{signbit:function(t){return(t=+t)!=t?t:0==t?1/t==1/0:t>0}})},function(t,n,e){"use strict";var r=e(0),o=e(19),i=e(2),a=e(52),u=e(117);r(r.P+r.R,"Promise",{finally:function(t){var n=a(this,o.Promise||i.Promise),e="function"==typeof t;return this.then(e?function(e){return u(n,t()).then(function(){return e})}:t,e?function(e){return u(n,t()).then(function(){throw e})}:t)}})},function(t,n,e){"use strict";var r=e(0),o=e(92),i=e(116);r(r.S,"Promise",{try:function(t){var n=o.f(this),e=i(t);return(e.e?n.reject:n.resolve)(e.v),n.promise}})},function(t,n,e){var r=e(29),o=e(1),i=r.key,a=r.set;r.exp({defineMetadata:function(t,n,e,r){a(t,n,o(e),i(r))}})},function(t,n,e){var r=e(29),o=e(1),i=r.key,a=r.map,u=r.store;r.exp({deleteMetadata:function(t,n){var e=arguments.length<3?void 0:i(arguments[2]),r=a(o(n),e,!1);if(void 0===r||!r.delete(t))return!1;if(r.size)return!0;var c=u.get(n);return c.delete(e),!!c.size||u.delete(n)}})},function(t,n,e){var r=e(29),o=e(1),i=e(18),a=r.has,u=r.get,c=r.key,s=function(t,n,e){if(a(t,n,e))return u(t,n,e);var r=i(n);return null!==r?s(t,r,e):void 0};r.exp({getMetadata:function(t,n){return s(t,o(n),arguments.length<3?void 0:c(arguments[2]))}})},function(t,n,e){var r=e(120),o=e(129),i=e(29),a=e(1),u=e(18),c=i.keys,s=i.key,f=function(t,n){var e=c(t,n),i=u(t);if(null===i)return e;var a=f(i,n);return a.length?e.length?o(new r(e.concat(a))):a:e};i.exp({getMetadataKeys:function(t){return f(a(t),arguments.length<2?void 0:s(arguments[1]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.get,a=r.key;r.exp({getOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(t){return i(o(t),arguments.length<2?void 0:a(arguments[1]))}})},function(t,n,e){var r=e(29),o=e(1),i=e(18),a=r.has,u=r.key,c=function(t,n,e){if(a(t,n,e))return!0;var r=i(n);return null!==r&&c(t,r,e)};r.exp({hasMetadata:function(t,n){return c(t,o(n),arguments.length<3?void 0:u(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=r.has,a=r.key;r.exp({hasOwnMetadata:function(t,n){return i(t,o(n),arguments.length<3?void 0:a(arguments[2]))}})},function(t,n,e){var r=e(29),o=e(1),i=e(10),a=r.key,u=r.set;r.exp({metadata:function(t,n){return function(e,r){u(t,n,(void 0!==r?o:i)(e),a(r))}}})},function(t,n,e){var r=e(0),o=e(91)(),i=e(2).process,a="process"==e(21)(i);r(r.G,{asap:function(t){var n=a&&i.domain;o(n?n.bind(t):t)}})},function(t,n,e){"use strict";var r=e(0),o=e(2),i=e(19),a=e(91)(),u=e(5)("observable"),c=e(10),s=e(1),f=e(40),l=e(42),h=e(11),p=e(41),d=p.RETURN,v=function(t){return null==t?void 0:c(t)},g=function(t){var n=t._c;n&&(t._c=void 0,n())},m=function(t){return void 0===t._o},y=function(t){m(t)||(t._o=void 0,g(t))},x=function(t,n){s(t),this._c=void 0,this._o=t,t=new b(this);try{var e=n(t),r=e;null!=e&&("function"==typeof e.unsubscribe?e=function(){r.unsubscribe()}:c(e),this._c=e)}catch(n){return void t.error(n)}m(this)&&g(this)};x.prototype=l({},{unsubscribe:function(){y(this)}});var b=function(t){this._s=t};b.prototype=l({},{next:function(t){var n=this._s;if(!m(n)){var e=n._o;try{var r=v(e.next);if(r)return r.call(e,t)}catch(t){try{y(n)}finally{throw t}}}},error:function(t){var n=this._s;if(m(n))throw t;var e=n._o;n._o=void 0;try{var r=v(e.error);if(!r)throw t;t=r.call(e,t)}catch(t){try{g(n)}finally{throw t}}return g(n),t},complete:function(t){var n=this._s;if(!m(n)){var e=n._o;n._o=void 0;try{var r=v(e.complete);t=r?r.call(e,t):void 0}catch(t){try{g(n)}finally{throw t}}return g(n),t}}});var _=function(t){f(this,_,"Observable","_f")._f=c(t)};l(_.prototype,{subscribe:function(t){return new x(t,this._f)},forEach:function(t){var n=this;return new(i.Promise||o.Promise)(function(e,r){c(t);var o=n.subscribe({next:function(n){try{return t(n)}catch(t){r(t),o.unsubscribe()}},error:r,complete:e})})}}),l(_,{from:function(t){var n="function"==typeof this?this:_,e=v(s(t)[u]);if(e){var r=s(e.call(t));return r.constructor===n?r:new n(function(t){return r.subscribe(t)})}return new n(function(n){var e=!1;return a(function(){if(!e){try{if(p(t,!1,function(t){if(n.next(t),e)return d})===d)return}catch(t){if(e)throw t;return void n.error(t)}n.complete()}}),function(){e=!0}})},of:function(){for(var t=0,n=arguments.length,e=new Array(n);t<n;)e[t]=arguments[t++];return new("function"==typeof this?this:_)(function(t){var n=!1;return a(function(){if(!n){for(var r=0;r<e.length;++r)if(t.next(e[r]),n)return;t.complete()}}),function(){n=!0}})}}),h(_.prototype,u,function(){return this}),r(r.G,{Observable:_}),e(39)("Observable")},function(t,n,e){var r=e(2),o=e(0),i=e(61),a=[].slice,u=/MSIE .\./.test(i),c=function(t){return function(n,e){var r=arguments.length>2,o=!!r&&a.call(arguments,2);return t(r?function(){("function"==typeof n?n:Function(n)).apply(this,o)}:n,e)}};o(o.G+o.B+o.F*u,{setTimeout:c(r.setTimeout),setInterval:c(r.setInterval)})},function(t,n,e){var r=e(0),o=e(90);r(r.G+r.B,{setImmediate:o.set,clearImmediate:o.clear})},function(t,n,e){for(var r=e(87),o=e(35),i=e(12),a=e(2),u=e(11),c=e(47),s=e(5),f=s("iterator"),l=s("toStringTag"),h=c.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=o(p),v=0;v<d.length;v++){var g,m=d[v],y=p[m],x=a[m],b=x&&x.prototype;if(b&&(b[f]||u(b,f,h),b[l]||u(b,l,m),c[m]=h,y))for(g in r)b[g]||i(b,g,r[g],!0)}},function(t,n,e){(function(n){!function(n){"use strict";var e,r=Object.prototype,o=r.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},a=i.iterator||"@@iterator",u=i.asyncIterator||"@@asyncIterator",c=i.toStringTag||"@@toStringTag",s="object"==typeof t,f=n.regeneratorRuntime;if(f)s&&(t.exports=f);else{(f=n.regeneratorRuntime=s?t.exports:{}).wrap=b;var l="suspendedStart",h="suspendedYield",p="executing",d="completed",v={},g={};g[a]=function(){return this};var m=Object.getPrototypeOf,y=m&&m(m(P([])));y&&y!==r&&o.call(y,a)&&(g=y);var x=j.prototype=w.prototype=Object.create(g);S.prototype=x.constructor=j,j.constructor=S,j[c]=S.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var n="function"==typeof t&&t.constructor;return!!n&&(n===S||"GeneratorFunction"===(n.displayName||n.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,j):(t.__proto__=j,c in t||(t[c]="GeneratorFunction")),t.prototype=Object.create(x),t},f.awrap=function(t){return{__await:t}},G(E.prototype),E.prototype[u]=function(){return this},f.AsyncIterator=E,f.async=function(t,n,e,r){var o=new E(b(t,n,e,r));return f.isGeneratorFunction(n)?o:o.next().then(function(t){return t.done?t.value:o.next()})},G(x),x[c]="Generator",x[a]=function(){return this},x.toString=function(){return"[object Generator]"},f.keys=function(t){var n=[];for(var e in t)n.push(e);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},f.values=P,M.prototype={constructor:M,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=e,this.done=!1,this.delegate=null,this.method="next",this.arg=e,this.tryEntries.forEach(O),!t)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=e)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var n=this;function r(r,o){return u.type="throw",u.arg=t,n.next=r,o&&(n.method="next",n.arg=e),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],u=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var c=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(c&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(c){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(t,n){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=n&&n<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=n,i?(this.method="next",this.next=i.finallyLoc,v):this.complete(a)},complete:function(t,n){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&n&&(this.next=n),v},finish:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.finallyLoc===t)return this.complete(e.completion,e.afterLoc),O(e),v}},catch:function(t){for(var n=this.tryEntries.length-1;n>=0;--n){var e=this.tryEntries[n];if(e.tryLoc===t){var r=e.completion;if("throw"===r.type){var o=r.arg;O(e)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,n,r){return this.delegate={iterator:P(t),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=e),v}}}function b(t,n,e,r){var o=n&&n.prototype instanceof w?n:w,i=Object.create(o.prototype),a=new M(r||[]);return i._invoke=function(t,n,e){var r=l;return function(o,i){if(r===p)throw new Error("Generator is already running");if(r===d){if("throw"===o)throw i;return F()}for(e.method=o,e.arg=i;;){var a=e.delegate;if(a){var u=C(a,e);if(u){if(u===v)continue;return u}}if("next"===e.method)e.sent=e._sent=e.arg;else if("throw"===e.method){if(r===l)throw r=d,e.arg;e.dispatchException(e.arg)}else"return"===e.method&&e.abrupt("return",e.arg);r=p;var c=_(t,n,e);if("normal"===c.type){if(r=e.done?d:h,c.arg===v)continue;return{value:c.arg,done:e.done}}"throw"===c.type&&(r=d,e.method="throw",e.arg=c.arg)}}}(t,e,a),i}function _(t,n,e){try{return{type:"normal",arg:t.call(n,e)}}catch(t){return{type:"throw",arg:t}}}function w(){}function S(){}function j(){}function G(t){["next","throw","return"].forEach(function(n){t[n]=function(t){return this._invoke(n,t)}})}function E(t){function e(n,r,i,a){var u=_(t[n],t,r);if("throw"!==u.type){var c=u.arg,s=c.value;return s&&"object"==typeof s&&o.call(s,"__await")?Promise.resolve(s.__await).then(function(t){e("next",t,i,a)},function(t){e("throw",t,i,a)}):Promise.resolve(s).then(function(t){c.value=t,i(c)},a)}a(u.arg)}var r;"object"==typeof n.process&&n.process.domain&&(e=n.process.domain.bind(e)),this._invoke=function(t,n){function o(){return new Promise(function(r,o){e(t,n,r,o)})}return r=r?r.then(o,o):o()}}function C(t,n){var r=t.iterator[n.method];if(r===e){if(n.delegate=null,"throw"===n.method){if(t.iterator.return&&(n.method="return",n.arg=e,C(t,n),"throw"===n.method))return v;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return v}var o=_(r,t.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,v;var i=o.arg;return i?i.done?(n[t.resultName]=i.value,n.next=t.nextLoc,"return"!==n.method&&(n.method="next",n.arg=e),n.delegate=null,v):i:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,v)}function A(t){var n={tryLoc:t[0]};1 in t&&(n.catchLoc=t[1]),2 in t&&(n.finallyLoc=t[2],n.afterLoc=t[3]),this.tryEntries.push(n)}function O(t){var n=t.completion||{};n.type="normal",delete n.arg,t.completion=n}function M(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(A,this),this.reset(!0)}function P(t){if(t){var n=t[a];if(n)return n.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var r=-1,i=function n(){for(;++r<t.length;)if(o.call(t,r))return n.value=t[r],n.done=!1,n;return n.value=e,n.done=!0,n};return i.next=i}}return{next:F}}function F(){return{value:e,done:!0}}}("object"==typeof n?n:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,e(94))},function(t,n,e){e(333),t.exports=e(19).RegExp.escape},function(t,n,e){var r=e(0),o=e(334)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(t){return o(t)}})},function(t,n){t.exports=function(t,n){var e=n===Object(n)?function(t){return n[t]}:n;return function(n){return String(n).replace(t,e)}}},function(t,n,e){},function(t,n,e){},function(t,n){window.business={bool_int:{0:"否",1:"是"},bool_str:{n:"否",y:"是"},pos:{announcement:{app:"app公告"},image:{home:"首页-轮播图"}},route:{method:["GET","POST","PUT","PATCH","DELETE","NONE"],type:["view","api"]},car:{gearbox:["手动","自动","手自一体","无级变速","双离合","机械自动变速箱","直驱"],salePoint:{affordable:"经济实惠",new:"准新车",luxury:"豪华车",none:"无"}},detection:{normal:"正常",exception:"异常"}}},function(t,n){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=2,layer.alert(t,n)}Object.assign(window,{forceLogout:function(){G.s.del("token"),router.push({name:"login"})},isLogin:function(){return G.s.exists("token")},vScroll:function(t,n){var e=G("#"+t),r=(G(window),e.getDocOffsetVal("top"));r-=145,G.scrollTo(topContext.animateDuration,"y",0,r,n)},getClass:function(t){return t?"error":""},$success:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=1,layer.alert(t,n)},$error:e,$msg:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};layer.msg(t,n)},$info:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};n.icon=7,layer.alert(t,n)},$tip:function(t,n){return layer.tips(t,n,{tips:[1,"#3595CC"],time:4e3})},$unknow:function(){return e("发生了未知错误")},firstLetter:function(t){var n=pinyinUtil.getFirstLetter(t);return n.length>0?n[0]:""},determine:function(t,n,e){t==n&&e()}})},function(t,n){Vue.config.productionTip=!1,Vue.config.devtools=!0;G.ajax.opened=function(){if(!isLogin())return!0;var t=G.s.json("token");return this.native("setRequestHeader","Authorization",t.token),!0};var e=0;G.ajax.responded=function(t,n){var r=this;return 0==n?(console.log("请求被终止，可能是网络断开导致，也可能是用户手动终止！请稍后再试"),!1):401==n?(new Promise(function(t,n){++e>10?console.log("刷新 token 后，尝试请求用户之前被拦截的请求次数过多！程序问题！请检查"):function(t){if(G.s.exists("token")){var n=G.s.json("token");adminApi.refreshToken({refresh_token:n.refresh_token},function(n,e){200==e?(G.s.json("token",n),t()):$info("登录状态已过期！请点击 <b>确定</b> 按钮退出到登录页面!",{closeBtn:!1,btn:["确定"],btn1:function(t){layer.close(t),forceLogout()}})})}else forceLogout()}(t)}).then(function(){r.restart()}),!1):500!=n||($error("服务器发生内部错误，请稍后再试"),!1)}},function(t,n,e){var r=G.s.get("__version_tip_count__3");G.isNull(r)&&(r=1),r=parseInt(r),isLogin()},function(t,n,e){"use strict";e.r(n);e(335),e(336),e(337);var r={loading:{mounted:function(){var t=this;this.ins.loading=new Loading(this.$refs.loading.$el,{status:"hide",type:"line-scale",close:function(n,e){t.ajax[n]instanceof G.ajax&&t.ajax[n].native("abort"),t.pending[e]=!1}})}},state:{methods:{initialState:function(t,n,e){this.ajax[n]instanceof G.ajax&&this.ajax[n].native("abort"),G.isString(e)&&(this.pending[e]=!1),this.ins[t]instanceof Loading&&this.ins[t].hide()},pendingState:function(t,n){this.ins[t]instanceof Loading&&this.ins[t].show(),G.isString(n)&&(this.pending[n]=!0)}}},list:{data:{page:{total:0,page:0,per_page:0},form:{page:1},api:null,dom:null},page:{methods:{pageEvent:function(t){this.form.page=t,this.getData()}}},filter:{methods:{submit:function(){this.form.page=1,this.getData()},reset:function(){for(var t in this.form){var n=this.form[t];this.form[t]=G.isString(n)?"":G.isNumber(n)?0:G.isArray(n)?[]:G.isObject(n)?{}:null}this.submit()},order:function(t){var n=G(t.currentTarget),e=n.data("order"),r=n.parent().children();n.highlight("focus",r.get()),this.form.order=e,this.submit()}}},get:{floor:{methods:{getData:function(){var t=this;this.ins.loading.show(),this.ajax.list=this.api.list(this.form,function(n,e){t.ins.loading.hide(),200==e?t.data=n:t.$error(n)}),this.ins.loading.setArgs(this.ajax.list)}}},normal:{methods:{getData:function(){var t=this;this.ins.loading.show();var n=this.dataAct?this.dataAct:"list";this.ajax[n]=this.api[n](this.form,function(n,e){t.ins.loading.hide(),200==e?(t.data=n.data,delete n.data,t.page=n):t.$error(n)}),this.ins.loading.setArgs(this.ajax[n])}}}},del:{methods:{del:function(t,n){var e=this;this.pending.del?layer.alert("请求中...请耐心等待"):(this.ins.loading.show(),this.ajax.del=this.api[G.isString(this.delAction)?this.delAction:"del"]({id_list:G.jsonEncode(t)},function(t,r){e.pending.del=!1,e.ins.loading.hide(),200==r?(e.$success("删除成功"),e.getData(),G.isFunction(n)&&n()):e.$error(t)}),this.ins.loading.setArgs(this.ajax.del,"del"))},delTarget:function(t){var n=this;new Promise(function(t,e){n.$info("你确定要删除吗？",{btn:["确定","取消"],btn1:t,btn2:e})}).then(function(e){layer.close(e),n.del([t],function(){n.delId(t)})},function(t){layer.close(t)})},delSelected:function(){var t=this;new Promise(function(n,e){t.idList.length<1?t.$info("请选择要删除的项"):n()}).then(function(){return new Promise(function(n,e){t.$info("你确定要批量删除吗？",{btn:["确定","取消"],btn1:n,btn2:e})})}).then(function(n){layer.close(n),t.del(t.idList,function(){t.idList=[]})},function(t){layer.close(t)})},selectEvent:function(t){var n=G(t.currentTarget),e=n.data("id");n.hasClass("focus")?this.unselectedLine(e):this.selectedLine(e)},selectAllEvent:function(t){var n=this,e=G(t.currentTarget).native("checked");this.dom.tbody.children().each(function(t){var r=(t=G(t)).data("id");e?n.selectedLine(r):n.unselectedLine(r)})},selectedLine:function(t){for(var n=this.dom.tbody.children({tagName:"tr"}),e=0;e<n.length;++e){var r=n.jump(e,!0);if(r.data("id")==t){r.addClass("focus");G(".c-box",r.get(0)).native("checked",!0);this.addId(t)}}},unselectedLine:function(t){for(var n=this.dom.tbody.children({tagName:"tr"}),e=0;e<n.length;++e){var r=n.jump(e,!0);if(r.data("id")==t){r.removeClass("focus");G(".c-box",r.get(0)).native("checked",!1);this.delId(t)}}},addId:function(t){-1==this.idList.indexOf(t)&&this.idList.push(t)},delId:function(t){var n;-1!=(n=this.idList.indexOf(t))&&this.idList.splice(n,1)}}}},form:{get:{methods:{getData:function(t){var n=this;"edit"==this.param.mode?(this.ins.loading.show(),this.ajax.getData=this.api.detail(this.param.id,function(e,r){n.ins.loading.hide(),200==r?(n.form=e,G.isFunction(t)&&t()):n.$error(e)}),this.ins.loading.setArgs(this.ajax.getData)):G.isFunction(t)&&t()}}},image:{mounted:function(){var t=this;this.ins.image=new UploadImage(this.$refs["image-container"],{pluginUrl:topContext.plugin+"UploadImage/",mode:"override",url:topContext.imageApi,field:"image",success:function(n,e){G.isFunction(t.callback.image)&&t.callback.image(n,e)}})}},confirm:{methods:{confirm:function(t,n){var e=this,r="";switch(this.param.mode){case"edit":r="编辑";break;case"add":r="添加";break;case"report":r="编辑";break;default:r="操作"}this.$success("操作成功",{btn:["继续"+r,t],btn1:function(t){layer.close(t),e.param.mode},btn2:function(){e.location(n,null,"_self")}})}}},menuSwitch:{methods:{initMenuSwitch:function(){var t=this;this.ins.menuSwitch=new MenuSwitch(this.$refs["menu-switch"].$el,{id:this.menu,type:this.type,click:function(t){},switch:function(n){t.switchMenu(n)}})},switchMenu:function(t){this.dom.optionSet.each(function(n){(n=G(n)).data("id")==t?n.removeClass("hide"):n.addClass("hide")})}}}}},o="".concat("/","plugin/"),i="".concat("/","api/admin/"),a="".concat(i,"file/imageForWangEditor"),u="".concat(i,"file/image"),c="".concat(i,"file/file");Object.assign(window,{mixins:r,topContext:{host:"/",plugin:o,api:i,ins:{},animateDuration:300,imageApiForwangEditor:a,imageApi:u,fileApi:c}});var s=e(131),f=new VueRouter({routes:s.a});f.beforeEach(function(t,n,e){var r=["/login"];if(isLogin()){if(r.includes(t.path))return void e({name:"home"})}else if(!r.includes(t.path))return void e("/login");e()});var l=f,h={topContext:topContext,business:business,priv:[],route:[],menu:[],user:{},os:{developer:{},system:{}}},p=new Vuex.Store({state:h,getters:{},mutations:{priv:function(t,n){t.priv=n},route:function(t,n){t.route=n},menu:function(t,n){t.menu=n},user:function(t,n){t.user=n},os:function(t,n){t.os=n}},actions:{}});Object.assign(window,{router:l,store:p});e(338),e(339);var d="".concat(topContext.api,"admin/logining"),v="".concat(topContext.api,"admin/info"),g="".concat(topContext.api,"oauth/token"),m="".concat(topContext.api,"admin/user"),y="".concat(topContext.api,"admin/user/?"),x="".concat(topContext.api,"admin/image"),b={login:function(t,n,e){return G.ajax({url:d,method:"post",data:t,success:n,error:e})},logout:function(t,n){return G.ajax({url:d,method:"delete",success:t,error:n})},info:function(t,n){return G.ajax({url:v,method:"get",success:t,error:n})},refreshToken:function(t,n,e){return G.ajax({url:g,method:"patch",data:t,success:n,error:e})},list:function(t,n,e){return G.ajax({url:m,method:"get",data:t,success:n,error:e})},edit:function(t,n,e){return G.ajax({url:m,method:"patch",data:t,success:n,error:e})},add:function(t,n,e){return G.ajax({url:m,method:"post",data:t,success:n,error:e})},detail:function(t,n,e){return G.ajax({url:y.replace("?",t),method:"get",success:n,error:e})},image:function(t,n,e){return G.ajax({url:x,method:"put",data:t,success:n,error:e})}},_="".concat(topContext.api,"user/user"),w={list:function(t,n,e){return G.ajax({url:_,method:"get",data:t,success:n,error:e})}},S="".concat(topContext.api,"articleType/articleType"),j="".concat(topContext.api,"articleType/articleType/?"),E={list:function(t,n,e){return G.ajax({url:S,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:j.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:S,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:S,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:S,data:t,method:"delete",success:n,error:e})}},C="".concat(topContext.api,"article/article"),A="".concat(topContext.api,"article/article/?"),O="".concat(topContext.api,"article/image"),M={list:function(t,n,e){return G.ajax({url:C,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:A.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:C,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:C,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:C,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:O,data:t,method:"patch",success:n,error:e})}},P="".concat(topContext.api,"showImage/image"),F="".concat(topContext.api,"showImage/image/?"),I={list:function(t,n,e){return G.ajax({url:P,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:F.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:P,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:P,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:P,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:P,data:t,method:"patch",success:n,error:e})}},T="".concat(topContext.api,"misc/verifyCode"),k="".concat(topContext.api,"translation/translation"),N=null,L={verifyCode:function(t,n){return N instanceof G.ajax&&N.native("abort"),N=G.ajax({url:T,method:"get",success:t,error:n})},translate:function(t,n){return G.ajax({url:k,method:"post",success:t,error:n})}},R="".concat(topContext.api,"route/route"),$="".concat(topContext.api,"route/route/?"),D="".concat(topContext.api,"route/image"),V={list:function(t,n,e){return G.ajax({url:R,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:$.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:R,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:R,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:R,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:D,data:t,method:"put",success:n,error:e})}},W="".concat(topContext.api,"role/role"),B="".concat(topContext.api,"role/info/?"),U="".concat(topContext.api,"role/role/?"),z="".concat(topContext.api,"role/auth"),q="".concat(topContext.api,"role/all"),Y={list:function(t,n,e){return G.ajax({url:W,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:U.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:W,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:W,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:W,data:t,method:"delete",success:n,error:e})},info:function(t,n,e){return G.ajax({url:B.replace("?",t),method:"get",success:n,error:e})},auth:function(t,n,e){return G.ajax({url:z,method:"post",data:t,success:n,error:e})},all:function(t,n){return G.ajax({url:q,method:"get",success:t,error:n})}},J="".concat(topContext.api,"brand/brand"),K="".concat(topContext.api,"brand/brand/?"),X="".concat(topContext.api,"brand/image"),H="".concat(topContext.api,"brand/all"),Z={list:function(t,n,e){return G.ajax({url:J,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:K.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:J,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:J,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:J,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:X,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:H,method:"get",success:t,error:n})}},Q="".concat(topContext.api,"carSeriesGroup/group"),tt="".concat(topContext.api,"carSeriesGroup/group/?"),nt="".concat(topContext.api,"carSeriesGroup/all"),et={list:function(t,n,e){return G.ajax({url:Q,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:tt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Q,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Q,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Q,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:nt,method:"get",success:t,error:n})}},rt="".concat(topContext.api,"carSeries/series"),ot="".concat(topContext.api,"carSeries/series/?"),it="".concat(topContext.api,"carSeries/all"),at={list:function(t,n,e){return G.ajax({url:rt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ot.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:rt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:rt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:rt,data:t,method:"delete",success:n,error:e})},all:function(t,n,e){return G.ajax({url:it,data:t,method:"get",success:n,error:e})}},ut="".concat(topContext.api,"carConfigurationGroup/group"),ct="".concat(topContext.api,"carConfigurationGroup/group/?"),st="".concat(topContext.api,"carConfigurationGroup/all"),ft={list:function(t,n,e){return G.ajax({url:ut,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ct.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:ut,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:ut,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:ut,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:st,method:"get",success:t,error:n})}},lt="".concat(topContext.api,"carConfiguration/carConfiguration"),ht="".concat(topContext.api,"carConfiguration/carConfiguration/?"),pt="".concat(topContext.api,"carConfiguration/image"),dt="".concat(topContext.api,"carConfiguration/all"),vt="".concat(topContext.api,"carConfiguration/group"),gt={list:function(t,n,e){return G.ajax({url:lt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:ht.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:lt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:lt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:lt,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:pt,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:dt,method:"get",success:t,error:n})},group:function(t,n){return G.ajax({url:vt,method:"get",success:t,error:n})}},mt="".concat(topContext.api,"carType/carType"),yt="".concat(topContext.api,"carType/carType/?"),xt="".concat(topContext.api,"carType/all"),bt={list:function(t,n,e){return G.ajax({url:mt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:yt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:mt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:mt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:mt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:xt,method:"get",success:t,error:n})}},_t="".concat(topContext.api,"carModel/carModel"),wt="".concat(topContext.api,"carModel/carModel/?"),St="".concat(topContext.api,"carModel/all"),jt={list:function(t,n,e){return G.ajax({url:_t,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:wt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:_t,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:_t,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:_t,data:t,method:"delete",success:n,error:e})},all:function(t,n,e){return G.ajax({url:St,method:"get",data:t,success:n,error:e})}},Gt="".concat(topContext.api,"detectionModule/module"),Et="".concat(topContext.api,"detectionModule/module/?"),Ct="".concat(topContext.api,"detectionModule/all"),At="".concat(topContext.api,"detectionModule/image"),Ot={list:function(t,n,e){return G.ajax({url:Gt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Et.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Gt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Gt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Gt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Ct,method:"get",success:t,error:n})},image:function(t,n,e){return G.ajax({url:At,method:"patch",data:t,success:n,error:e})}},Mt="".concat(topContext.api,"detectionGroup/group"),Pt="".concat(topContext.api,"detectionGroup/group/?"),Ft="".concat(topContext.api,"detectionGroup/all"),It={list:function(t,n,e){return G.ajax({url:Mt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Pt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Mt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Mt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Mt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Ft,method:"get",success:t,error:n})}},Tt="".concat(topContext.api,"detectionPos/pos"),kt="".concat(topContext.api,"detectionPos/pos/?"),Nt="".concat(topContext.api,"detectionPos/all"),Lt={list:function(t,n,e){return G.ajax({url:Tt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:kt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Tt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Tt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Tt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Nt,method:"get",success:t,error:n})}},Rt="".concat(topContext.api,"detectionItem/item"),$t="".concat(topContext.api,"detectionItem/item/?"),Dt="".concat(topContext.api,"detectionItem/all"),Vt={list:function(t,n,e){return G.ajax({url:Rt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:$t.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Rt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Rt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Rt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Dt,method:"get",success:t,error:n})}},Wt="".concat(topContext.api,"service/service"),Bt="".concat(topContext.api,"service/service/?"),Ut="".concat(topContext.api,"service/image"),zt="".concat(topContext.api,"service/all"),qt={list:function(t,n,e){return G.ajax({url:Wt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Bt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Wt,data:t,method:"patch",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Wt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Wt,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:Ut,data:t,method:"put",success:n,error:e})},all:function(t,n){return G.ajax({url:zt,method:"get",success:t,error:n})}},Yt="".concat(topContext.api,"car/car"),Jt="".concat(topContext.api,"car/car/?"),Kt="".concat(topContext.api,"car/all"),Xt="".concat(topContext.api,"car/image"),Ht="".concat(topContext.api,"car/thumb"),Zt="".concat(topContext.api,"car/rule"),Qt="".concat(topContext.api,"car/report"),tn={list:function(t,n,e){return G.ajax({url:Yt,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:Jt.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:Yt,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:Yt,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:Yt,data:t,method:"delete",success:n,error:e})},all:function(t,n){return G.ajax({url:Kt,method:"get",success:t,error:n})},thumb:function(t,n,e){return G.ajax({url:Ht,method:"patch",data:t,success:n,error:e})},image:function(t,n,e){return G.ajax({url:Xt,method:"patch",data:t,success:n,error:e})},delImage:function(t,n,e){return G.ajax({url:Xt,method:"delete",data:t,success:n,error:e})},rule:function(t,n){return G.ajax({url:Zt,method:"get",success:t,error:n})},getReport:function(t,n,e){return G.ajax({url:Qt,method:"get",data:t,success:n,error:e})},report:function(t,n,e){return G.ajax({url:Qt,method:"post",data:t,success:n,error:e})}},nn="".concat(topContext.api,"platform/all"),en={all:function(t,n){return G.ajax({url:nn,method:"get",success:t,error:n})}},rn="".concat(topContext.api,"saleApplication/saleApplication"),on={list:function(t,n,e){return G.ajax({url:rn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:rn,data:t,method:"patch",success:n,error:e})}},an="".concat(topContext.api,"recommendationApplication/recommendationApplication"),un={list:function(t,n,e){return G.ajax({url:an,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:an,data:t,method:"patch",success:n,error:e})}},cn="".concat(topContext.api,"stagingBuyApplication/stagingBuyApplication"),sn={list:function(t,n,e){return G.ajax({url:cn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:cn,data:t,method:"patch",success:n,error:e})}},fn="".concat(topContext.api,"reservation/reservation"),ln={list:function(t,n,e){return G.ajax({url:fn,data:t,method:"get",success:n,error:e})},updateStatus:function(t,n,e){return G.ajax({url:fn,data:t,method:"patch",success:n,error:e})}},hn="".concat(topContext.api,"pannel/info"),pn="".concat(topContext.api,"pannel/month"),dn="".concat(topContext.api,"pannel/quarter"),vn="".concat(topContext.api,"pannel/year"),gn={info:function(t,n){return G.ajax({url:hn,method:"get",success:t,error:n})},month:function(t,n,e){return G.ajax({url:pn,method:"get",data:t,success:n,error:e})},quarter:function(t,n,e){return G.ajax({url:dn,method:"get",data:t,success:n,error:e})},year:function(t,n,e){return G.ajax({url:vn,method:"get",data:t,success:n,error:e})}},mn="".concat(topContext.api,"story/story"),yn="".concat(topContext.api,"story/story/?"),xn="".concat(topContext.api,"story/image"),bn={list:function(t,n,e){return G.ajax({url:mn,data:t,method:"get",success:n,error:e})},detail:function(t,n,e){return G.ajax({url:yn.replace("?",t),method:"get",success:n,error:e})},edit:function(t,n,e){return G.ajax({url:mn,data:t,method:"put",success:n,error:e})},add:function(t,n,e){return G.ajax({url:mn,data:t,method:"post",success:n,error:e})},del:function(t,n,e){return G.ajax({url:mn,data:t,method:"delete",success:n,error:e})},image:function(t,n,e){return G.ajax({url:xn,data:t,method:"patch",success:n,error:e})},all:function(t){function n(n,e){return t.apply(this,arguments)}return n.toString=function(){return t.toString()},n}(function(t,n){return G.ajax({url:all,method:"get",success:t,error:n})})};Object.assign(window,{adminApi:b,articleTypeApi:E,articleApi:M,showImageApi:I,miscApi:L,routeApi:V,roleApi:Y,brandApi:Z,carSeriesGroupApi:et,carSeriesApi:at,carConfigurationGroupApi:ft,carConfigurationApi:gt,carTypeApi:bt,carModelApi:jt,detectionModuleApi:Ot,detectionGroupApi:It,detectionPosApi:Lt,detectionItemApi:Vt,serviceApi:qt,carApi:tn,platformApi:en,saleApplicationApi:on,recommendationApplicationApi:un,stagingBuyApplicationApi:sn,reservationApi:ln,userApi:w,pannelApi:gn,storyApi:bn});var _n={store:store,router:router,methods:{forceLogout:forceLogout,isLogin:isLogin,vScroll:vScroll,getClass:getClass,$success:$success,$error:$error,$msg:$msg,$info:$info,$tip:$tip,$unknow:$unknow,firstLetter:firstLetter,determine:determine,notice:function(t,n){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"";this.$Notice[t]({title:n,desc:e})},sNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";this.notice("success",t,n)},wNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";this.notice("warning",t,n)},iNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";this.notice("info",t,n)},eNotice:function(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";this.notice("error",t,n)},toLink:function(t){window.open(t,"_blank")}},components:{}};Vue.mixin(_n);var wn=function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"app"},[n("router-view"),this._v(" "),n("v-loading",{ref:"loading"})],1)};wn._withStripped=!0;var Sn={name:"v-app",data:function(){return{ins:{loading:null},dom:{},ajax:{},pending:{},value:{}}},mixins:[mixins.loading],mounted:function(){}},jn=e(14),Gn=Object(jn.a)(Sn,wn,[],!1,null,"2342f356",null);Gn.options.__file="source/vue/view/App.vue";var En=Gn.exports,Cn=function(){var t=this.$createElement;this._self._c;return this._m(0)};Cn._withStripped=!0;var An={name:"v-loading"},On=Object(jn.a)(An,Cn,[function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"Loading"},[e("div",{staticClass:"bg"}),t._v(" "),e("div",{staticClass:"cons"},[e("div",{staticClass:"text"},[e("span",{staticClass:"line"},[t._v("上传基本信息开始")])]),t._v(" "),e("div",{staticClass:"animate"},[e("div",{staticClass:"item center line-scale hide"},[e("div"),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("div"),t._v(" "),e("div")]),t._v(" "),e("div",{staticClass:"item center ball-pulse hide"},[e("div"),t._v(" "),e("div"),t._v(" "),e("div")]),t._v(" "),e("div",{staticClass:"item roll-loader hide"},[e("div",{staticClass:"loader"},[e("div",{staticClass:"loader-outter"}),t._v(" "),e("div",{staticClass:"loader-inner"})])])])]),t._v(" "),e("div",{staticClass:"btns"},[e("div",{staticClass:"btn close"},[e("div",{staticClass:"positive"}),t._v(" "),e("div",{staticClass:"negative"})])])])])}],!1,null,"01922fd1",null);On.options.__file="source/vue/view/public/loading.vue";var Mn=On.exports,Pn=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("i-select",{style:"width:"+t.width+"px",model:{value:t.cValue,callback:function(n){t.cValue=n},expression:"cValue"}},[t.has?e("i-option",{attrs:{value:t.top.key}},[t._v(t._s(t.top.value))]):t._e(),t._v(" "),t._l(t.data,function(n){return e("i-option",{key:n[t.attr.id],attrs:{value:n[t.attr.id]}},[t._v(t._s(n[t.attr.floor]>1?"|"+"_".repeat(4*(n[t.attr.floor]-1)):"")+t._s(n[t.attr.name]))])})],2)};Pn._withStripped=!0;var Fn={name:"v-select",data:function(){return{cValue:0}},props:{value:{type:[String,Number],required:!0},data:{type:Array,required:!0},width:{type:Number,default:200},has:{type:Boolean,default:!0},top:{type:Object,default:function(){return{key:0,value:"顶级分类"}}},attr:{type:Object,default:function(){return{id:"id",floor:"floor",name:"name"}}}},watch:{cValue:function(t){this.$emit("input",t)},value:{immediate:!0,handler:function(t){this.cValue=t}}}},In=Object(jn.a)(Fn,Pn,[],!1,null,"21dbbbf7",null);In.options.__file="source/vue/view/public/select.vue";var Tn=In.exports,kn=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"brand-container"},[e("div",{staticClass:"left"},[e("div",{staticClass:"letter"},[e("span",{staticClass:"cur",attrs:{"data-type":"all"}},[t._v("所有品牌")]),t._v(" "),e("span",{attrs:{"data-type":"hot"}},[t._v("热门品牌")]),t._v(" "),t._l(t.letter,function(n){return e("span",{key:n,attrs:{"data-letter":n}},[t._v(t._s(n))])})],2),t._v(" "),e("div",{staticClass:"brand"},t._l(t.brand,function(n){return e("div",{staticClass:"item",attrs:{"data-id":n.id,"data-hot":n.hot,"data-letter":n.letter,"data-name":n.name}},[e("div",{staticClass:"logo full"},[e("img",{staticClass:"image",attrs:{src:n.logo_explain}})]),t._v(" "),e("div",{staticClass:"name full"},[t._v(t._s(n.name))]),t._v(" "),t._m(0,!0)])}),0),t._v(" "),t._m(1),t._v(" "),t._m(2)]),t._v(" "),t._m(3)])])};kn._withStripped=!0;var Nn={name:"v-brand",props:{brand:{default:function(){return[{id:1,hot:"y",letter:"A",name:"奥迪",logo:""}]}}},data:function(){return{letter:[]}},watch:{brand:{immediate:!0,handler:function(t){var n=[];t.forEach(function(t){-1==n.indexOf(t.letter)&&n.push(t.letter)}),n.sort(function(t,n){return t>n?1:-1}),this.letter=n}}}},Ln=Object(jn.a)(Nn,kn,[function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"status hide"},[n("img",{staticClass:"image",attrs:{src:"/plugin/Brand/image/selected.png"}})])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"selected"},[n("h4",{staticClass:"header weight"},[this._v("已选择的品牌：")]),this._v(" "),n("p",{staticClass:"brand"})])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"function hide"},[n("button",{staticClass:"run-button run-button-blue confirm",attrs:{type:"button"}},[this._v("确定")]),this._v(" "),n("button",{staticClass:"run-button run-button-orange cancel",attrs:{type:"button"}},[this._v("取消")])])},function(){var t=this.$createElement,n=this._self._c||t;return n("div",{staticClass:"right"},[n("button",{staticClass:"run-button run-button-blue ctrl",attrs:{type:"button"}},[this._v("+展开")]),this._v(" "),n("button",{staticClass:"run-button run-button-blue mode",attrs:{type:"button"}},[this._v("多选")])])}],!1,null,"301fd7dc",null);Ln.options.__file="source/vue/view/public/brand.vue";var Rn=Ln.exports,$n=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("div",[e("div",{staticClass:"menu-switch"},t._l(t.data,function(n){return e("div",{staticClass:"item cur",attrs:{"data-id":n.id}},[t._v(t._s(n.name))])}),0)])};$n._withStripped=!0;var Dn={name:"v-menu-switch",data:function(){return{ins:{}}},props:{data:{type:Array,default:function(){return[{id:"one",name:"选项1"},{id:"two",name:"选项2"}]}}}},Vn=Object(jn.a)(Dn,$n,[],!1,null,"668b68e4",null);Vn.options.__file="source/vue/view/public/MenuSwitch.vue";var Wn=Vn.exports,Bn=function(){var t=this,n=t.$createElement,e=t._self._c||n;return e("button",{staticClass:"run-button",class:"run-button-"+t.color,attrs:{type:t.type},on:{click:function(n){return n.stopPropagation(),t.$emit("click")}}},[t.has?e("i",{staticClass:"run-iconfont",class:"run-"+t.ico}):t._e(),t._t("default")],2)};Bn._withStripped=!0;var Un={name:"v-button",props:{color:{type:String,default:"blue"},has:{type:Boolean,default:!1},ico:{type:String,default:"edit"},type:{type:String,default:"button"}}},zn=Object(jn.a)(Un,Bn,[],!1,null,"cc22b9a6",null);zn.options.__file="source/vue/view/public/button.vue";var qn=zn.exports;Vue.component("v-app",En),Vue.component("v-loading",Mn),Vue.component("v-select",Tn),Vue.component("v-brand",Rn),Vue.component("v-menu-switch",Wn),Vue.component("v-button",qn);e(340);new Vue({el:"#app",template:"<v-app></v-app>"})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FuLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWRwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hLWZ1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2hpZGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19oYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8taW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ3BvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3R4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmljdC1tZXRob2QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tcHJpbWl0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RlZmluZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXNhcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1tZXRob2RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3R5cGVkLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21ldGFkYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2xpYnJhcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hZGQtdG8tdW5zY29wYWJsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcHJvcGVydHktZGVzYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtZ29wbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zZXQtc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hbi1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mb3Itb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVkZWZpbmUtYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3ZhbGlkYXRlLWNvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXRvLXN0cmluZy10YWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY2xhc3NvZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zdHJpbmctdHJpbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lvYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LXBpZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1nb3BzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pcy1yZWdleHAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZXRlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZml4LXJlLXdrcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL191c2VyLWFnZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdHlwZWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWZvcmNlZC1wYW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LWNvbGxlY3Rpb24tZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kb20tY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3drcy1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2hhcmVkLWtleS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2V0LXByb3RvLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy13cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pbmhlcml0LWlmLXJlcXVpcmVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3N0cmluZy1yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZXhwbTEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1kZWZpbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLWNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZmFpbHMtaXMtcmVnZXhwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2lzLWFycmF5LWl0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY3JlYXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LXNwZWNpZXMtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZpbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcmVnZXhwLWV4ZWMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYWR2YW5jZS1zdHJpbmctaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fdGFzay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19taWNyb3Rhc2suanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbmV3LXByb21pc2UtY2FwYWJpbGl0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190eXBlZC1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL193a3MtZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1rZXlzLWludGVybmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1kcHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fb2JqZWN0LWdvcG4tZXh0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX29iamVjdC1hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc2FtZS12YWx1ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19iaW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2ludm9rZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fcGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYS1udW1iZXItdmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXMtaW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19tYXRoLWxvZzFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX21hdGgtZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2l0ZXItY2FsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fYXJyYXktY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9faXRlci1zdGVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19wZXJmb3JtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX3Byb21pc2UtcmVzb2x2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi1zdHJvbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LndlYWstbWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2NvbGxlY3Rpb24td2Vhay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL190by1pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mbGF0dGVuLWludG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fc3RyaW5nLXBhZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19vYmplY3QtdG8tYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fY29sbGVjdGlvbi10by1qc29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2FycmF5LWZyb20taXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fbWF0aC1zY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3JvdXRlci9yb3V0ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9zaGltLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19mdW5jdGlvbi10by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9fZW51bS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5jcmVhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuZnJlZXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5wcmV2ZW50LWV4dGVuc2lvbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLWZyb3plbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1leHRlbnNpYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5hc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYub2JqZWN0LmlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC5zZXQtcHJvdG90eXBlLW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm9iamVjdC50by1zdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5mdW5jdGlvbi5uYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmZ1bmN0aW9uLmhhcy1pbnN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5wYXJzZS1pbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucGFyc2UtZmxvYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIudG8tcHJlY2lzaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5lcHNpbG9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLWludGVnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubnVtYmVyLmlzLW5hbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5tYXgtc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5taW4tc2FmZS1pbnRlZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5udW1iZXIucGFyc2UtaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguYWNvc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5hc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmF0YW5oLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY2JydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmNsejMyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguY29zaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmV4cG0xLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguaHlwb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5pbXVsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5sb2cxcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLmxvZzIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC5zaWduLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2Lm1hdGguc2luaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5tYXRoLnRhbmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYubWF0aC50cnVuYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuZnJvbS1jb2RlLXBvaW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5jb2RlLXBvaW50LWF0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5yZXBlYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5hbmNob3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJpZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmJvbGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZpeGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLmZvbnRzaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5pdGFsaWNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5saW5rLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zbWFsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5zdHJpbmcuc3RyaWtlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnN0cmluZy5zdWIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuc3RyaW5nLnN1cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLm5vdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuZGF0ZS50by1pc28tc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvX2RhdGUtdG8taXNvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5kYXRlLnRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19kYXRlLXRvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5pcy1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmpvaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29ydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5mb3ItZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19hcnJheS1zcGVjaWVzLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lm1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc29tZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5ldmVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkucmVkdWNlLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmluZGV4LW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuY29weS13aXRoaW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5hcnJheS5maW5kLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LmFycmF5LmZpbmQtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYuYXJyYXkuc3BlY2llcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAubWF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnJlcGxhY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWdleHAuc3BsaXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucHJvbWlzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi53ZWFrLXNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5hcnJheS1idWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC5pbnQxNi1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi50eXBlZC51aW50MTYtYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQudWludDMyLWFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnR5cGVkLmZsb2F0MzItYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmFwcGx5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuY29uc3RydWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVsZXRlLXByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZW51bWVyYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0Lmhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LmlzLWV4dGVuc2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczYucmVmbGVjdC5vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNi5yZWZsZWN0LnNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdC1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuYXJyYXkuZmxhdHRlbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcuYXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1zdGFydC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLWVuZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy50cmltLXJpZ2h0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN0cmluZy5tYXRjaC1hbGwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5bWJvbC5vYnNlcnZhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmVudHJpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1nZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcub2JqZWN0Lmxvb2t1cC1zZXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuc2V0LnRvLWpzb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWFwLm9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLXNldC5vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXAuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5zZXQuZnJvbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy53ZWFrLW1hcC5mcm9tLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnN5c3RlbS5nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5jbGFtcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmRlZy1wZXItcmFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmZzY2FsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLmlhZGRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGguaXN1YmguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5pbXVsaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnJhZC1wZXItZGVnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5tYXRoLnNjYWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm1hdGgudW11bGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcubWF0aC5zaWduYml0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnByb21pc2UuZmluYWxseS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5wcm9taXNlLnRyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlbGV0ZS1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3LnJlZmxlY3QuZ2V0LW93bi1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1vd24tbWV0YWRhdGEta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1vd24tbWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy9lczcucmVmbGVjdC5tZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzNy5hc2FwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXM3Lm9ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvbW9kdWxlcy93ZWIudGltZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmltbWVkaWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20uaXRlcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2JhYmVsLXBvbHlmaWxsL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvZm4vcmVnZXhwL2VzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2NvcmUucmVnZXhwLmVzY2FwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL19yZXBsYWNlci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvYnVzaW5lc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2Fzc2V0L2pzL2N1cnJlbmN5LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9pbml0aWFsaXplLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy92ZXJzaW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9taXhpbk9wdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvcm91dGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvc3RvcmUvc3RhdGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS9zdG9yZS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3N0b3JlL2dldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3N0b3JlL211dGF0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvc3RvcmUvYWN0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9zdWJHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9hZG1pbi5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL3VzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9hcnRpY2xlVHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2FydGljbGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zaG93SW1hZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9taXNjLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9yb2xlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvQnJhbmQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9jYXJTZXJpZXNHcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhclNlcmllcy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhckNvbmZpZ3VyYXRpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2NhckNvbmZpZ3VyYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9jYXJUeXBlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvY2FyTW9kZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9kZXRlY3Rpb25Nb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9kZXRlY3Rpb25Hcm91cC5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2RldGVjdGlvblBvcy5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXBpL2RldGVjdGlvbkl0ZW0uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvY2FyLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcGxhdGZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zYWxlQXBwbGljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9yZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvc3RhZ2luZ0J1eUFwcGxpY2F0aW9uLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS9hcGkvcmVzZXJ2YXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9wYW5uZWwuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwaS9zdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvYXNzZXQvanMvYXBpLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvbWl4aW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2Fzc2V0L2pzL21peGluLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9BcHAudnVlPzE5ZjgiLCJ3ZWJwYWNrOi8vL3NvdXJjZS92dWUvdmlldy9BcHAudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9BcHAudnVlPzQ5NGIiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L0FwcC52dWUiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9sb2FkaW5nLnZ1ZT8xODgzIiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2xvYWRpbmcudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvbG9hZGluZy52dWU/ZTYxNiIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2xvYWRpbmcudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvc2VsZWN0LnZ1ZT8yMzc5Iiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL3NlbGVjdC52dWUiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9zZWxlY3QudnVlPzFjZmIiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9zZWxlY3QudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlPzhjMjQiLCJ3ZWJwYWNrOi8vL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnJhbmQudnVlPzZjYTciLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9icmFuZC52dWUiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9NZW51U3dpdGNoLnZ1ZT9jNjllIiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL01lbnVTd2l0Y2gudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvTWVudVN3aXRjaC52dWU/YTBmMCIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL01lbnVTd2l0Y2gudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvYnV0dG9uLnZ1ZT8xYWJiIiwid2VicGFjazovLy9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2J1dHRvbi52dWUiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9idXR0b24udnVlPzMxYjciLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9idXR0b24udnVlIiwid2VicGFjazovLy8uL3NvdXJjZS9hc3NldC9qcy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL2FwcC5qcyJdLCJuYW1lcyI6WyJ3ZWJwYWNrSnNvbnBDYWxsYmFjayIsImRhdGEiLCJtb2R1bGVJZCIsImNodW5rSWQiLCJjaHVua0lkcyIsIm1vcmVNb2R1bGVzIiwiaSIsInJlc29sdmVzIiwibGVuZ3RoIiwiaW5zdGFsbGVkQ2h1bmtzIiwicHVzaCIsIk9iamVjdCIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIm1vZHVsZXMiLCJwYXJlbnRKc29ucEZ1bmN0aW9uIiwic2hpZnQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaW5zdGFsbGVkQ3NzQ2h1bmtzIiwiMCIsIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwibW9kdWxlIiwibCIsImUiLCJwcm9taXNlcyIsIjEiLCIyIiwiMyIsIjQiLCI1IiwiNiIsIjciLCI4IiwiOSIsIjEwIiwiMTEiLCIxMiIsIjEzIiwiMTQiLCIxNSIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyMSIsIjIyIiwiMjMiLCIyNCIsIjI1IiwiMjYiLCIyNyIsIjI4IiwiMjkiLCIzMCIsIjMxIiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDEiLCI0MiIsIjQzIiwiNDQiLCI0NSIsIjQ2IiwiNDciLCI0OCIsIjQ5IiwiNTAiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhyZWYiLCJmdWxsaHJlZiIsInAiLCJleGlzdGluZ0xpbmtUYWdzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImRhdGFIcmVmIiwidGFnIiwiZ2V0QXR0cmlidXRlIiwicmVsIiwiZXhpc3RpbmdTdHlsZVRhZ3MiLCJsaW5rVGFnIiwiY3JlYXRlRWxlbWVudCIsInR5cGUiLCJvbmxvYWQiLCJvbmVycm9yIiwiZXZlbnQiLCJyZXF1ZXN0IiwidGFyZ2V0Iiwic3JjIiwiZXJyIiwiRXJyb3IiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsInRoZW4iLCJpbnN0YWxsZWRDaHVua0RhdGEiLCJwcm9taXNlIiwib25TY3JpcHRDb21wbGV0ZSIsInNjcmlwdCIsImNoYXJzZXQiLCJ0aW1lb3V0IiwibmMiLCJzZXRBdHRyaWJ1dGUiLCJqc29ucFNjcmlwdFNyYyIsImNsZWFyVGltZW91dCIsImNodW5rIiwiZXJyb3JUeXBlIiwicmVhbFNyYyIsImVycm9yIiwidW5kZWZpbmVkIiwic2V0VGltZW91dCIsImhlYWQiLCJhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5Iiwib2UiLCJjb25zb2xlIiwianNvbnBBcnJheSIsIndpbmRvdyIsIm9sZEpzb25wRnVuY3Rpb24iLCJzbGljZSIsInMiLCJnbG9iYWwiLCJjb3JlIiwiaGlkZSIsInJlZGVmaW5lIiwiY3R4IiwiJGV4cG9ydCIsInNvdXJjZSIsIm93biIsIm91dCIsImV4cCIsIklTX0ZPUkNFRCIsIkYiLCJJU19HTE9CQUwiLCJHIiwiSVNfU1RBVElDIiwiUyIsIklTX1BST1RPIiwiUCIsIklTX0JJTkQiLCJCIiwiZXhwUHJvdG8iLCJGdW5jdGlvbiIsIlUiLCJXIiwiUiIsImlzT2JqZWN0IiwiaXQiLCJUeXBlRXJyb3IiLCJNYXRoIiwic2VsZiIsIl9fZyIsImV4ZWMiLCJzdG9yZSIsInVpZCIsIlVTRV9TWU1CT0wiLCJ0b0ludGVnZXIiLCJtaW4iLCJhIiwiYW5PYmplY3QiLCJJRThfRE9NX0RFRklORSIsInRvUHJpbWl0aXZlIiwiZFAiLCJmIiwiTyIsIkF0dHJpYnV0ZXMiLCJkZWZpbmVkIiwiY3JlYXRlRGVzYyIsImhhcyIsIlNSQyIsIiR0b1N0cmluZyIsIlRQTCIsInNwbGl0IiwiaW5zcGVjdFNvdXJjZSIsInZhbCIsInNhZmUiLCJpc0Z1bmN0aW9uIiwiam9pbiIsIlN0cmluZyIsInRoaXMiLCJmYWlscyIsInF1b3QiLCJjcmVhdGVIVE1MIiwic3RyaW5nIiwiYXR0cmlidXRlIiwicDEiLCJyZXBsYWNlIiwiTkFNRSIsInRlc3QiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZUNvbXBvbmVudCIsInNjcmlwdEV4cG9ydHMiLCJyZW5kZXIiLCJzdGF0aWNSZW5kZXJGbnMiLCJmdW5jdGlvbmFsVGVtcGxhdGUiLCJpbmplY3RTdHlsZXMiLCJzY29wZUlkIiwibW9kdWxlSWRlbnRpZmllciIsInNoYWRvd01vZGUiLCJob29rIiwib3B0aW9ucyIsIl9jb21waWxlZCIsImZ1bmN0aW9uYWwiLCJfc2NvcGVJZCIsImNvbnRleHQiLCIkdm5vZGUiLCJzc3JDb250ZXh0IiwicGFyZW50IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsImFkZCIsIl9zc3JSZWdpc3RlciIsIiRyb290IiwiJG9wdGlvbnMiLCJzaGFkb3dSb290IiwiX2luamVjdFN0eWxlcyIsIm9yaWdpbmFsUmVuZGVyIiwiaCIsImV4aXN0aW5nIiwiYmVmb3JlQ3JlYXRlIiwiY29uY2F0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsIklPYmplY3QiLCJwSUUiLCJ0b0lPYmplY3QiLCJnT1BEIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidG9PYmplY3QiLCJJRV9QUk9UTyIsIk9iamVjdFByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJjb25zdHJ1Y3RvciIsInZlcnNpb24iLCJfX2UiLCJhRnVuY3Rpb24iLCJmbiIsInRoYXQiLCJiIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJ0b1N0cmluZyIsImNlaWwiLCJmbG9vciIsImlzTmFOIiwibWV0aG9kIiwiYXJnIiwidmFsdWVPZiIsIktFWSIsInRvTGVuZ3RoIiwiYXNjIiwiVFlQRSIsIiRjcmVhdGUiLCJJU19NQVAiLCJJU19GSUxURVIiLCJJU19TT01FIiwiSVNfRVZFUlkiLCJJU19GSU5EX0lOREVYIiwiTk9fSE9MRVMiLCIkdGhpcyIsImNhbGxiYWNrZm4iLCJyZXMiLCJpbmRleCIsInJlc3VsdCIsIkxJQlJBUlkiLCIkdHlwZWQiLCIkYnVmZmVyIiwiYW5JbnN0YW5jZSIsInByb3BlcnR5RGVzYyIsInJlZGVmaW5lQWxsIiwidG9JbmRleCIsInRvQWJzb2x1dGVJbmRleCIsImNsYXNzb2YiLCJpc0FycmF5SXRlciIsImdPUE4iLCJnZXRJdGVyRm4iLCJ3a3MiLCJjcmVhdGVBcnJheU1ldGhvZCIsImNyZWF0ZUFycmF5SW5jbHVkZXMiLCJzcGVjaWVzQ29uc3RydWN0b3IiLCJBcnJheUl0ZXJhdG9ycyIsIkl0ZXJhdG9ycyIsIiRpdGVyRGV0ZWN0Iiwic2V0U3BlY2llcyIsImFycmF5RmlsbCIsImFycmF5Q29weVdpdGhpbiIsIiREUCIsIiRHT1BEIiwiUmFuZ2VFcnJvciIsIlVpbnQ4QXJyYXkiLCJBcnJheVByb3RvIiwiQXJyYXkiLCIkQXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsIiREYXRhVmlldyIsIkRhdGFWaWV3IiwiYXJyYXlGb3JFYWNoIiwiYXJyYXlGaWx0ZXIiLCJhcnJheVNvbWUiLCJhcnJheUV2ZXJ5IiwiYXJyYXlGaW5kIiwiYXJyYXlGaW5kSW5kZXgiLCJhcnJheUluY2x1ZGVzIiwiYXJyYXlJbmRleE9mIiwiYXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJhcnJheUtleXMiLCJrZXlzIiwiYXJyYXlFbnRyaWVzIiwiZW50cmllcyIsImFycmF5TGFzdEluZGV4T2YiLCJsYXN0SW5kZXhPZiIsImFycmF5UmVkdWNlIiwicmVkdWNlIiwiYXJyYXlSZWR1Y2VSaWdodCIsInJlZHVjZVJpZ2h0IiwiYXJyYXlKb2luIiwiYXJyYXlTb3J0Iiwic29ydCIsImFycmF5U2xpY2UiLCJhcnJheVRvU3RyaW5nIiwiYXJyYXlUb0xvY2FsZVN0cmluZyIsInRvTG9jYWxlU3RyaW5nIiwiSVRFUkFUT1IiLCJUQUciLCJUWVBFRF9DT05TVFJVQ1RPUiIsIkRFRl9DT05TVFJVQ1RPUiIsIkFMTF9DT05TVFJVQ1RPUlMiLCJDT05TVFIiLCJUWVBFRF9BUlJBWSIsIlRZUEVEIiwiVklFVyIsIiRtYXAiLCJhbGxvY2F0ZSIsIkxJVFRMRV9FTkRJQU4iLCJVaW50MTZBcnJheSIsImJ1ZmZlciIsIkZPUkNFRF9TRVQiLCJzZXQiLCJ0b09mZnNldCIsIkJZVEVTIiwib2Zmc2V0IiwidmFsaWRhdGUiLCJDIiwic3BlY2llc0Zyb21MaXN0IiwibGlzdCIsImZyb21MaXN0IiwiYWRkR2V0dGVyIiwiaW50ZXJuYWwiLCJfZCIsIiRmcm9tIiwic3RlcCIsIml0ZXJhdG9yIiwiYUxlbiIsIm1hcGZuIiwibWFwcGluZyIsIml0ZXJGbiIsIm5leHQiLCJkb25lIiwiJG9mIiwiVE9fTE9DQUxFX0JVRyIsIiR0b0xvY2FsZVN0cmluZyIsInByb3RvIiwiY29weVdpdGhpbiIsInN0YXJ0IiwiZXZlcnkiLCJmaWxsIiwiZmlsdGVyIiwiZmluZCIsInByZWRpY2F0ZSIsImZpbmRJbmRleCIsImZvckVhY2giLCJpbmRleE9mIiwic2VhcmNoRWxlbWVudCIsImluY2x1ZGVzIiwic2VwYXJhdG9yIiwibWFwIiwicmV2ZXJzZSIsIm1pZGRsZSIsInNvbWUiLCJjb21wYXJlZm4iLCJzdWJhcnJheSIsImJlZ2luIiwiZW5kIiwiJGJlZ2luIiwiYnl0ZU9mZnNldCIsIkJZVEVTX1BFUl9FTEVNRU5UIiwiJHNsaWNlIiwiJHNldCIsImFycmF5TGlrZSIsImxlbiIsIiRpdGVyYXRvcnMiLCJpc1RBSW5kZXgiLCIkZ2V0RGVzYyIsIiRzZXREZXNjIiwiZGVzYyIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiJFR5cGVkQXJyYXlQcm90b3R5cGUkIiwid3JhcHBlciIsIkNMQU1QRUQiLCJHRVRURVIiLCJTRVRURVIiLCJUeXBlZEFycmF5IiwiQmFzZSIsIlRBQyIsIkZPUkNFRCIsIkFCViIsIlR5cGVkQXJyYXlQcm90b3R5cGUiLCJhZGRFbGVtZW50IiwidiIsInJvdW5kIiwic2V0dGVyIiwiJG9mZnNldCIsIiRsZW5ndGgiLCJieXRlTGVuZ3RoIiwia2xhc3MiLCIkbGVuIiwiaXRlciIsIiRuYXRpdmVJdGVyYXRvciIsIkNPUlJFQ1RfSVRFUl9OQU1FIiwiJGl0ZXJhdG9yIiwib2YiLCJmcm9tIiwiTWFwIiwic2hhcmVkIiwiZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCIsInRhcmdldEtleSIsInRhcmdldE1ldGFkYXRhIiwia2V5TWV0YWRhdGEiLCJNZXRhZGF0YUtleSIsIm1ldGFkYXRhTWFwIiwiTWV0YWRhdGFWYWx1ZSIsIl8iLCJNRVRBIiwic2V0RGVzYyIsImlkIiwiaXNFeHRlbnNpYmxlIiwiRlJFRVpFIiwicHJldmVudEV4dGVuc2lvbnMiLCJzZXRNZXRhIiwidyIsIm1ldGEiLCJORUVEIiwiZmFzdEtleSIsImdldFdlYWsiLCJvbkZyZWV6ZSIsIlVOU0NPUEFCTEVTIiwiYml0bWFwIiwicHgiLCJyYW5kb20iLCIka2V5cyIsImVudW1CdWdLZXlzIiwibWF4IiwiZFBzIiwiRW1wdHkiLCJjcmVhdGVEaWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJzdHlsZSIsImRpc3BsYXkiLCJjb250ZW50V2luZG93Iiwib3BlbiIsIndyaXRlIiwibHQiLCJjbG9zZSIsIlByb3BlcnRpZXMiLCJoaWRkZW5LZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsIkRFU0NSSVBUT1JTIiwiU1BFQ0lFUyIsIkNvbnN0cnVjdG9yIiwiZm9yYmlkZGVuRmllbGQiLCJCUkVBSyIsIlJFVFVSTiIsIml0ZXJhYmxlIiwiX3QiLCJkZWYiLCJzdGF0IiwiY29mIiwiQVJHIiwiVCIsInRyeUdldCIsImNhbGxlZSIsInNwYWNlcyIsInNwYWNlIiwibHRyaW0iLCJSZWdFeHAiLCJydHJpbSIsImV4cG9ydGVyIiwiQUxJQVMiLCJGT1JDRSIsInRyaW0iLCJjb3B5cmlnaHQiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJ1bmljb2RlIiwic3RpY2t5IiwiRCIsIklTX0lOQ0xVREVTIiwiZWwiLCJmcm9tSW5kZXgiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJpc0FycmF5IiwiVE9fU1RSSU5HIiwicG9zIiwiY2hhckNvZGVBdCIsImNoYXJBdCIsIk1BVENIIiwiaXNSZWdFeHAiLCJTQUZFX0NMT1NJTkciLCJyaXRlciIsInNraXBDbG9zaW5nIiwiYXJyIiwiYnVpbHRpbkV4ZWMiLCJyZWdleHBFeGVjIiwiUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMiLCJyZSIsImdyb3VwcyIsIlNQTElUX1dPUktTX1dJVEhfT1ZFUldSSVRURU5fRVhFQyIsIm9yaWdpbmFsRXhlYyIsIlNZTUJPTCIsIkRFTEVHQVRFU19UT19TWU1CT0wiLCJERUxFR0FURVNfVE9fRVhFQyIsImV4ZWNDYWxsZWQiLCJuYXRpdmVSZWdFeHBNZXRob2QiLCJmbnMiLCJuYXRpdmVNZXRob2QiLCJyZWdleHAiLCJzdHIiLCJhcmcyIiwiZm9yY2VTdHJpbmdNZXRob2QiLCJzdHJmbiIsInJ4Zm4iLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJmb3JPZiIsInNldFRvU3RyaW5nVGFnIiwiaW5oZXJpdElmUmVxdWlyZWQiLCJtZXRob2RzIiwiY29tbW9uIiwiSVNfV0VBSyIsIkFEREVSIiwiZml4TWV0aG9kIiwiaW5zdGFuY2UiLCJIQVNOVF9DSEFJTklORyIsIlRIUk9XU19PTl9QUklNSVRJVkVTIiwiQUNDRVBUX0lURVJBQkxFUyIsIkJVR0dZX1pFUk8iLCIkaW5zdGFuY2UiLCJjbGVhciIsImdldENvbnN0cnVjdG9yIiwic2V0U3Ryb25nIiwiVHlwZWQiLCJUeXBlZEFycmF5Q29uc3RydWN0b3JzIiwiSyIsIl9fZGVmaW5lU2V0dGVyX18iLCJDT0xMRUNUSU9OIiwiQSIsImNiIiwibWFwRm4iLCJuZXh0SXRlbSIsImlzIiwid2tzRXh0IiwiJFN5bWJvbCIsImRvY3VtZW50RWxlbWVudCIsImNoZWNrIiwic2V0UHJvdG90eXBlT2YiLCJidWdneSIsIl9fcHJvdG9fXyIsImNvdW50IiwiSW5maW5pdHkiLCJzaWduIiwieCIsIiRleHBtMSIsImV4cG0xIiwiJGl0ZXJDcmVhdGUiLCJCVUdHWSIsInJldHVyblRoaXMiLCJERUZBVUxUIiwiSVNfU0VUIiwiSXRlcmF0b3JQcm90b3R5cGUiLCJnZXRNZXRob2QiLCJraW5kIiwiREVGX1ZBTFVFUyIsIlZBTFVFU19CVUciLCIkbmF0aXZlIiwiJGRlZmF1bHQiLCIkZW50cmllcyIsIiRhbnlOYXRpdmUiLCJkZXNjcmlwdG9yIiwic2VhcmNoU3RyaW5nIiwiJGRlZmluZVByb3BlcnR5IiwiZ2V0SXRlcmF0b3JNZXRob2QiLCJvcmlnaW5hbCIsImVuZFBvcyIsImFkZFRvVW5zY29wYWJsZXMiLCJpdGVyYXRlZCIsIl9pIiwiX2siLCJBcmd1bWVudHMiLCJyZTEiLCJyZTIiLCJyZWdleHBGbGFncyIsIm5hdGl2ZUV4ZWMiLCJuYXRpdmVSZXBsYWNlIiwicGF0Y2hlZEV4ZWMiLCJVUERBVEVTX0xBU1RfSU5ERVhfV1JPTkciLCJOUENHX0lOQ0xVREVEIiwibGFzdEluZGV4IiwicmVDb3B5IiwibWF0Y2giLCJhdCIsImRlZmVyIiwiY2hhbm5lbCIsInBvcnQiLCJpbnZva2UiLCJodG1sIiwiY2VsIiwicHJvY2VzcyIsInNldFRhc2siLCJzZXRJbW1lZGlhdGUiLCJjbGVhclRhc2siLCJjbGVhckltbWVkaWF0ZSIsIk1lc3NhZ2VDaGFubmVsIiwiRGlzcGF0Y2giLCJjb3VudGVyIiwicXVldWUiLCJydW4iLCJsaXN0ZW5lciIsImFyZ3MiLCJuZXh0VGljayIsIm5vdyIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsImFkZEV2ZW50TGlzdGVuZXIiLCJpbXBvcnRTY3JpcHRzIiwibWFjcm90YXNrIiwiT2JzZXJ2ZXIiLCJNdXRhdGlvbk9ic2VydmVyIiwiV2ViS2l0TXV0YXRpb25PYnNlcnZlciIsImlzTm9kZSIsImxhc3QiLCJub3RpZnkiLCJmbHVzaCIsImRvbWFpbiIsImV4aXQiLCJlbnRlciIsInN0YW5kYWxvbmUiLCJ0b2dnbGUiLCJub2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJvYnNlcnZlIiwiY2hhcmFjdGVyRGF0YSIsInRhc2siLCJQcm9taXNlQ2FwYWJpbGl0eSIsIiQkcmVzb2x2ZSIsIiQkcmVqZWN0IiwiUFJPVE9UWVBFIiwiV1JPTkdfSU5ERVgiLCJCYXNlQnVmZmVyIiwiYWJzIiwicG93IiwibG9nIiwiTE4yIiwiJEJVRkZFUiIsIiRMRU5HVEgiLCIkT0ZGU0VUIiwicGFja0lFRUU3NTQiLCJtTGVuIiwibkJ5dGVzIiwiZUxlbiIsImVNYXgiLCJlQmlhcyIsInJ0IiwidW5wYWNrSUVFRTc1NCIsIm5CaXRzIiwiTmFOIiwidW5wYWNrSTMyIiwiYnl0ZXMiLCJwYWNrSTgiLCJwYWNrSTE2IiwicGFja0kzMiIsInBhY2tGNjQiLCJwYWNrRjMyIiwidmlldyIsImlzTGl0dGxlRW5kaWFuIiwiaW50SW5kZXgiLCJfYiIsInBhY2siLCJjb252ZXJzaW9uIiwiQXJyYXlCdWZmZXJQcm90byIsImoiLCIkc2V0SW50OCIsInNldEludDgiLCJnZXRJbnQ4Iiwic2V0VWludDgiLCJidWZmZXJMZW5ndGgiLCJnZXRVaW50OCIsImdldEludDE2IiwiZ2V0VWludDE2IiwiZ2V0SW50MzIiLCJnZXRVaW50MzIiLCJnZXRGbG9hdDMyIiwiZ2V0RmxvYXQ2NCIsInNldEludDE2Iiwic2V0VWludDE2Iiwic2V0SW50MzIiLCJzZXRVaW50MzIiLCJzZXRGbG9hdDMyIiwic2V0RmxvYXQ2NCIsImciLCJuYW1lcyIsImdldEtleXMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwid2luZG93TmFtZXMiLCJnZXRXaW5kb3dOYW1lcyIsImdPUFMiLCIkYXNzaWduIiwiYXNzaWduIiwiayIsImdldFN5bWJvbHMiLCJpc0VudW0iLCJ5IiwiZmFjdG9yaWVzIiwicGFydEFyZ3MiLCJib3VuZCIsImNvbnN0cnVjdCIsInVuIiwiJHBhcnNlSW50IiwicGFyc2VJbnQiLCIkdHJpbSIsIndzIiwiaGV4IiwicmFkaXgiLCIkcGFyc2VGbG9hdCIsInBhcnNlRmxvYXQiLCJtc2ciLCJpc0Zpbml0ZSIsImxvZzFwIiwiRVBTSUxPTiIsIkVQU0lMT04zMiIsIk1BWDMyIiwiTUlOMzIiLCJmcm91bmQiLCIkYWJzIiwiJHNpZ24iLCJyZXQiLCJtZW1vIiwiaXNSaWdodCIsInRvIiwiaW5jIiwiZm9yY2VkIiwiZmxhZ3MiLCJuZXdQcm9taXNlQ2FwYWJpbGl0eSIsInByb21pc2VDYXBhYmlsaXR5Iiwic3Ryb25nIiwiZW50cnkiLCJnZXRFbnRyeSIsIiRpdGVyRGVmaW5lIiwiU0laRSIsIl9mIiwiX2wiLCJkZWxldGUiLCJwcmV2IiwiSW50ZXJuYWxNYXAiLCJlYWNoIiwid2VhayIsIk5BVElWRV9XRUFLX01BUCIsIklTX0lFMTEiLCJBY3RpdmVYT2JqZWN0IiwidW5jYXVnaHRGcm96ZW5TdG9yZSIsInVmc3RvcmUiLCIkV2Vha01hcCIsIiRoYXMiLCJVbmNhdWdodEZyb3plblN0b3JlIiwiZmluZFVuY2F1Z2h0RnJvemVuIiwic3BsaWNlIiwibnVtYmVyIiwiUmVmbGVjdCIsIm93bktleXMiLCJJU19DT05DQVRfU1BSRUFEQUJMRSIsImZsYXR0ZW5JbnRvQXJyYXkiLCJzb3VyY2VMZW4iLCJkZXB0aCIsIm1hcHBlciIsInRoaXNBcmciLCJlbGVtZW50Iiwic3ByZWFkYWJsZSIsInRhcmdldEluZGV4Iiwic291cmNlSW5kZXgiLCJyZXBlYXQiLCJtYXhMZW5ndGgiLCJmaWxsU3RyaW5nIiwibGVmdCIsInN0cmluZ0xlbmd0aCIsImZpbGxTdHIiLCJpbnRNYXhMZW5ndGgiLCJmaWxsTGVuIiwic3RyaW5nRmlsbGVyIiwiaXNFbnRyaWVzIiwic2NhbGUiLCJpbkxvdyIsImluSGlnaCIsIm91dExvdyIsIm91dEhpZ2giLCJyb3V0ZSIsInJvbGUiLCJhZG1pbiIsImJyYW5kIiwiY2FyU2VyaWVzIiwiY2FyU2VyaWVzR3JvdXAiLCJ0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb25Hcm91cCIsInRoaW5nRm9yQ2FyQ29uZmlndXJhdGlvbiIsInRoaW5nRm9yQ2FyVHlwZSIsInRoaW5nRm9yQ2FyTW9kZWwiLCJ0aGluZ0ZvckRlY3Rpb25Nb2R1bGUiLCJ0aGluZ0ZvckRlY3Rpb25Hcm91cCIsInRoaW5nRm9yRGVjdGlvblBvcyIsInRoaW5nRm9yRGVjdGlvbkl0ZW0iLCJ0aGluZ0ZvclNlcnZpY2UiLCJ0aGluZ0ZvckNhciIsInRoaW5nRm9yQXJ0aWNsZVR5cGUiLCJ0aGluZ0ZvckFydGljbGUiLCJ0aGluZ0ZvclNob3dJbWFnZSIsInRoaW5nRm9yU3RvcnkiLCJwYXRoIiwiY29tcG9uZW50IiwiX2JhYmVsUG9seWZpbGwiLCJERUZJTkVfUFJPUEVSVFkiLCJkZWZpbmUiLCJwYWRTdGFydCIsInBhZEVuZCIsIiRmYWlscyIsIndrc0RlZmluZSIsImVudW1LZXlzIiwiX2NyZWF0ZSIsImdPUE5FeHQiLCIkSlNPTiIsIkpTT04iLCJfc3RyaW5naWZ5Iiwic3RyaW5naWZ5IiwiSElEREVOIiwiVE9fUFJJTUlUSVZFIiwiU3ltYm9sUmVnaXN0cnkiLCJBbGxTeW1ib2xzIiwiT1BTeW1ib2xzIiwiVVNFX05BVElWRSIsIlFPYmplY3QiLCJmaW5kQ2hpbGQiLCJzZXRTeW1ib2xEZXNjIiwicHJvdG9EZXNjIiwid3JhcCIsInN5bSIsImlzU3ltYm9sIiwiJGRlZmluZVByb3BlcnRpZXMiLCIkcHJvcGVydHlJc0VudW1lcmFibGUiLCJFIiwiJGdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIiRnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiJGdldE93blByb3BlcnR5U3ltYm9scyIsIklTX09QIiwiZXM2U3ltYm9scyIsIndlbGxLbm93blN5bWJvbHMiLCJmb3IiLCJrZXlGb3IiLCJ1c2VTZXR0ZXIiLCJ1c2VTaW1wbGUiLCJyZXBsYWNlciIsIiRyZXBsYWNlciIsInN5bWJvbHMiLCIkZ2V0UHJvdG90eXBlT2YiLCIkZnJlZXplIiwiJHNlYWwiLCIkcHJldmVudEV4dGVuc2lvbnMiLCIkaXNGcm96ZW4iLCIkaXNTZWFsZWQiLCIkaXNFeHRlbnNpYmxlIiwiRlByb3RvIiwibmFtZVJFIiwiSEFTX0lOU1RBTkNFIiwiRnVuY3Rpb25Qcm90byIsIiROdW1iZXIiLCJCUk9LRU5fQ09GIiwiVFJJTSIsInRvTnVtYmVyIiwiYXJndW1lbnQiLCJ0aGlyZCIsIm1heENvZGUiLCJmaXJzdCIsImNvZGUiLCJkaWdpdHMiLCJhTnVtYmVyVmFsdWUiLCIkdG9GaXhlZCIsInRvRml4ZWQiLCJFUlJPUiIsIm11bHRpcGx5IiwiYzIiLCJkaXZpZGUiLCJudW1Ub1N0cmluZyIsImFjYyIsImZyYWN0aW9uRGlnaXRzIiwieiIsIngyIiwiJHRvUHJlY2lzaW9uIiwidG9QcmVjaXNpb24iLCJwcmVjaXNpb24iLCJfaXNGaW5pdGUiLCJpc0ludGVnZXIiLCJpc1NhZmVJbnRlZ2VyIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJOdW1iZXIiLCJzcXJ0IiwiJGFjb3NoIiwiYWNvc2giLCJNQVhfVkFMVUUiLCIkYXNpbmgiLCJhc2luaCIsIiRhdGFuaCIsImF0YW5oIiwiY2JydCIsImNsejMyIiwiTE9HMkUiLCJjb3NoIiwiaHlwb3QiLCJ2YWx1ZTEiLCJ2YWx1ZTIiLCJkaXYiLCJzdW0iLCJsYXJnIiwiJGltdWwiLCJpbXVsIiwieG4iLCJ5biIsInhsIiwieWwiLCJsb2cxMCIsIkxPRzEwRSIsImxvZzIiLCJzaW5oIiwidGFuaCIsInRydW5jIiwiZnJvbUNoYXJDb2RlIiwiJGZyb21Db2RlUG9pbnQiLCJmcm9tQ29kZVBvaW50IiwicmF3IiwiY2FsbFNpdGUiLCJ0cGwiLCIkYXQiLCJwb2ludCIsImNvZGVQb2ludEF0IiwiJGVuZHNXaXRoIiwiZW5kc1dpdGgiLCJlbmRQb3NpdGlvbiIsInNlYXJjaCIsIiRzdGFydHNXaXRoIiwic3RhcnRzV2l0aCIsImNvbG9yIiwic2l6ZSIsInVybCIsIkRhdGUiLCJnZXRUaW1lIiwidG9KU09OIiwidG9JU09TdHJpbmciLCJwdiIsIiR0b0lTT1N0cmluZyIsImx6IiwibnVtIiwiZ2V0VVRDRnVsbFllYXIiLCJnZXRVVENNaWxsaXNlY29uZHMiLCJnZXRVVENNb250aCIsImdldFVUQ0RhdGUiLCJnZXRVVENIb3VycyIsImdldFVUQ01pbnV0ZXMiLCJnZXRVVENTZWNvbmRzIiwiRGF0ZVByb3RvIiwiaGludCIsImNyZWF0ZVByb3BlcnR5IiwidXBUbyIsImNsb25lZCIsIiRzb3J0IiwiJGZvckVhY2giLCJTVFJJQ1QiLCIkZmlsdGVyIiwiJHNvbWUiLCIkZXZlcnkiLCIkcmVkdWNlIiwiJGluZGV4T2YiLCJORUdBVElWRV9aRVJPIiwiJGZpbmQiLCIkZmxhZ3MiLCIkUmVnRXhwIiwiQ09SUkVDVF9ORVciLCJ0aVJFIiwicGlSRSIsImZpVSIsInByb3h5IiwiYWR2YW5jZVN0cmluZ0luZGV4IiwicmVnRXhwRXhlYyIsIiRtYXRjaCIsIm1heWJlQ2FsbE5hdGl2ZSIsInJ4IiwiZnVsbFVuaWNvZGUiLCJtYXRjaFN0ciIsIlNVQlNUSVRVVElPTl9TWU1CT0xTIiwiU1VCU1RJVFVUSU9OX1NZTUJPTFNfTk9fTkFNRUQiLCJSRVBMQUNFIiwiJHJlcGxhY2UiLCJzZWFyY2hWYWx1ZSIsInJlcGxhY2VWYWx1ZSIsImZ1bmN0aW9uYWxSZXBsYWNlIiwicmVzdWx0cyIsImFjY3VtdWxhdGVkUmVzdWx0IiwibmV4dFNvdXJjZVBvc2l0aW9uIiwibWF0Y2hlZCIsInBvc2l0aW9uIiwiY2FwdHVyZXMiLCJuYW1lZENhcHR1cmVzIiwicmVwbGFjZXJBcmdzIiwicmVwbGFjZW1lbnQiLCJnZXRTdWJzdGl0dXRpb24iLCJ0YWlsUG9zIiwiY2giLCJjYXB0dXJlIiwic2FtZVZhbHVlIiwiU0VBUkNIIiwiJHNlYXJjaCIsInByZXZpb3VzTGFzdEluZGV4IiwiY2FsbFJlZ0V4cEV4ZWMiLCIkbWluIiwiJHB1c2giLCJTVVBQT1JUU19ZIiwiU1BMSVQiLCIkc3BsaXQiLCJpbnRlcm5hbFNwbGl0IiwibGltaXQiLCJsYXN0TGVuZ3RoIiwib3V0cHV0IiwibGFzdExhc3RJbmRleCIsInNwbGl0TGltaXQiLCJzZXBhcmF0b3JDb3B5Iiwic3BsaXR0ZXIiLCJ1bmljb2RlTWF0Y2hpbmciLCJsaW0iLCJxIiwiSW50ZXJuYWwiLCJuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkiLCJPd25Qcm9taXNlQ2FwYWJpbGl0eSIsIldyYXBwZXIiLCJtaWNyb3Rhc2siLCJuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZSIsInBlcmZvcm0iLCJwcm9taXNlUmVzb2x2ZSIsInZlcnNpb25zIiwidjgiLCIkUHJvbWlzZSIsImVtcHR5IiwiRmFrZVByb21pc2UiLCJQcm9taXNlUmVqZWN0aW9uRXZlbnQiLCJpc1RoZW5hYmxlIiwiaXNSZWplY3QiLCJfbiIsImNoYWluIiwiX2MiLCJfdiIsIm9rIiwiX3MiLCJyZWFjdGlvbiIsImV4aXRlZCIsImhhbmRsZXIiLCJmYWlsIiwiX2giLCJvbkhhbmRsZVVuaGFuZGxlZCIsIm9uVW5oYW5kbGVkIiwidW5oYW5kbGVkIiwiaXNVbmhhbmRsZWQiLCJlbWl0Iiwib251bmhhbmRsZWRyZWplY3Rpb24iLCJyZWFzb24iLCJfYSIsIm9ucmVqZWN0aW9uaGFuZGxlZCIsIiRyZWplY3QiLCJfdyIsIiRyZXNvbHZlIiwiZXhlY3V0b3IiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJjYXRjaCIsImNhcGFiaWxpdHkiLCJyZW1haW5pbmciLCIkaW5kZXgiLCJhbHJlYWR5Q2FsbGVkIiwicmFjZSIsIiRpc1ZpZXciLCJpc1ZpZXciLCJmaW4iLCJ2aWV3UyIsInZpZXdUIiwiaW5pdCIsInJBcHBseSIsImZBcHBseSIsInRoaXNBcmd1bWVudCIsImFyZ3VtZW50c0xpc3QiLCJMIiwickNvbnN0cnVjdCIsIk5FV19UQVJHRVRfQlVHIiwiQVJHU19CVUciLCJUYXJnZXQiLCJuZXdUYXJnZXQiLCIkYXJncyIsInByb3BlcnR5S2V5IiwiYXR0cmlidXRlcyIsImRlbGV0ZVByb3BlcnR5IiwiRW51bWVyYXRlIiwiZW51bWVyYXRlIiwicmVjZWl2ZXIiLCJnZXRQcm90byIsIlYiLCJleGlzdGluZ0Rlc2NyaXB0b3IiLCJvd25EZXNjIiwic2V0UHJvdG8iLCIkaW5jbHVkZXMiLCJhcnJheVNwZWNpZXNDcmVhdGUiLCJmbGF0TWFwIiwiZmxhdHRlbiIsImRlcHRoQXJnIiwiJHBhZCIsIldFQktJVF9CVUciLCJnZXRGbGFncyIsIlJlZ0V4cFByb3RvIiwiJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yIiwiX3IiLCJtYXRjaEFsbCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJnZXREZXNjIiwiJHZhbHVlcyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsImlzRXJyb3IiLCJjbGFtcCIsImxvd2VyIiwidXBwZXIiLCJERUdfUEVSX1JBRCIsIlBJIiwiUkFEX1BFUl9ERUciLCJkZWdyZWVzIiwicmFkaWFucyIsImZzY2FsZSIsImlhZGRoIiwieDAiLCJ4MSIsInkwIiwieTEiLCIkeDAiLCIkeTAiLCJpc3ViaCIsImltdWxoIiwidSIsIiR1IiwiJHYiLCJ1MCIsInYwIiwidTEiLCJ2MSIsInVtdWxoIiwic2lnbmJpdCIsImZpbmFsbHkiLCJvbkZpbmFsbHkiLCJ0cnkiLCJtZXRhZGF0YSIsInRvTWV0YUtleSIsIm9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEiLCJkZWZpbmVNZXRhZGF0YSIsIm1ldGFkYXRhS2V5IiwibWV0YWRhdGFWYWx1ZSIsImRlbGV0ZU1ldGFkYXRhIiwib3JkaW5hcnlIYXNPd25NZXRhZGF0YSIsIm9yZGluYXJ5R2V0T3duTWV0YWRhdGEiLCJvcmRpbmFyeUdldE1ldGFkYXRhIiwiZ2V0TWV0YWRhdGEiLCJTZXQiLCJvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyIsIm9yZGluYXJ5TWV0YWRhdGFLZXlzIiwib0tleXMiLCJwS2V5cyIsImdldE1ldGFkYXRhS2V5cyIsImdldE93bk1ldGFkYXRhIiwiZ2V0T3duTWV0YWRhdGFLZXlzIiwib3JkaW5hcnlIYXNNZXRhZGF0YSIsImhhc01ldGFkYXRhIiwiaGFzT3duTWV0YWRhdGEiLCIkbWV0YWRhdGEiLCJhc2FwIiwiT0JTRVJWQUJMRSIsImNsZWFudXBTdWJzY3JpcHRpb24iLCJzdWJzY3JpcHRpb24iLCJjbGVhbnVwIiwic3Vic2NyaXB0aW9uQ2xvc2VkIiwiX28iLCJjbG9zZVN1YnNjcmlwdGlvbiIsIlN1YnNjcmlwdGlvbiIsIm9ic2VydmVyIiwic3Vic2NyaWJlciIsIlN1YnNjcmlwdGlvbk9ic2VydmVyIiwidW5zdWJzY3JpYmUiLCJjb21wbGV0ZSIsIiRPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwib2JzZXJ2YWJsZSIsIml0ZW1zIiwiT2JzZXJ2YWJsZSIsIk1TSUUiLCJ0aW1lIiwiYm91bmRBcmdzIiwic2V0SW50ZXJ2YWwiLCIkdGFzayIsIlRPX1NUUklOR19UQUciLCJBcnJheVZhbHVlcyIsIkRPTUl0ZXJhYmxlcyIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiY29sbGVjdGlvbnMiLCJleHBsaWNpdCIsIkNvbGxlY3Rpb24iLCJPcCIsImhhc093biIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsImluTW9kdWxlIiwicnVudGltZSIsInJlZ2VuZXJhdG9yUnVudGltZSIsIkdlblN0YXRlU3VzcGVuZGVkU3RhcnQiLCJHZW5TdGF0ZVN1c3BlbmRlZFlpZWxkIiwiR2VuU3RhdGVFeGVjdXRpbmciLCJHZW5TdGF0ZUNvbXBsZXRlZCIsIkNvbnRpbnVlU2VudGluZWwiLCJOYXRpdmVJdGVyYXRvclByb3RvdHlwZSIsIkdwIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJHZW5lcmF0b3IiLCJHZW5lcmF0b3JGdW5jdGlvbiIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImdlbkZ1biIsImN0b3IiLCJtYXJrIiwiYXdyYXAiLCJfX2F3YWl0IiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiQXN5bmNJdGVyYXRvciIsImFzeW5jIiwiaW5uZXJGbiIsIm91dGVyRm4iLCJ0cnlMb2NzTGlzdCIsInBvcCIsIkNvbnRleHQiLCJyZXNldCIsInNraXBUZW1wUmVzZXQiLCJzZW50IiwiX3NlbnQiLCJkZWxlZ2F0ZSIsInRyeUVudHJpZXMiLCJyZXNldFRyeUVudHJ5Iiwic3RvcCIsInJvb3RSZWNvcmQiLCJjb21wbGV0aW9uIiwicnZhbCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiZXhjZXB0aW9uIiwiaGFuZGxlIiwibG9jIiwiY2F1Z2h0IiwicmVjb3JkIiwidHJ5TG9jIiwiaGFzQ2F0Y2giLCJoYXNGaW5hbGx5IiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWJydXB0IiwiZmluYWxseUVudHJ5IiwiYWZ0ZXJMb2MiLCJmaW5pc2giLCJ0aHJvd24iLCJkZWxlZ2F0ZVlpZWxkIiwicmVzdWx0TmFtZSIsIm5leHRMb2MiLCJwcm90b0dlbmVyYXRvciIsImdlbmVyYXRvciIsIl9pbnZva2UiLCJzdGF0ZSIsImRvbmVSZXN1bHQiLCJkZWxlZ2F0ZVJlc3VsdCIsIm1heWJlSW52b2tlRGVsZWdhdGUiLCJ0cnlDYXRjaCIsIm1ha2VJbnZva2VNZXRob2QiLCJvYmoiLCJ1bndyYXBwZWQiLCJwcmV2aW91c1Byb21pc2UiLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsInJldHVybiIsImluZm8iLCJwdXNoVHJ5RW50cnkiLCJsb2NzIiwiaXRlcmF0b3JNZXRob2QiLCJlc2NhcGUiLCIkcmUiLCJyZWdFeHAiLCJwYXJ0IiwiYnVzaW5lc3MiLCJib29sX2ludCIsImJvb2xfc3RyIiwiYW5ub3VuY2VtZW50IiwiYXBwIiwiaW1hZ2UiLCJob21lIiwiY2FyIiwiZ2VhcmJveCIsInNhbGVQb2ludCIsImFmZm9yZGFibGUiLCJuZXciLCJsdXh1cnkiLCJub25lIiwiZGV0ZWN0aW9uIiwibm9ybWFsIiwiJGVycm9yIiwib3B0aW9uIiwiaWNvbiIsImxheWVyIiwiYWxlcnQiLCJmb3JjZUxvZ291dCIsImRlbCIsInJvdXRlciIsImlzTG9naW4iLCJleGlzdHMiLCJ2U2Nyb2xsIiwiZG9tIiwiZ2V0RG9jT2Zmc2V0VmFsIiwic2Nyb2xsVG8iLCJ0b3BDb250ZXh0IiwiYW5pbWF0ZUR1cmF0aW9uIiwiZ2V0Q2xhc3MiLCIkc3VjY2VzcyIsIiRtc2ciLCIkaW5mbyIsIiR0aXAiLCJ0aXBzIiwiJHVua25vdyIsImZpcnN0TGV0dGVyIiwicGlueWluVXRpbCIsImdldEZpcnN0TGV0dGVyIiwiZGV0ZXJtaW5lIiwidG90YWwiLCJjYWxsYmFjayIsIlZ1ZSIsImNvbmZpZyIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsImFqYXgiLCJvcGVuZWQiLCJ0b2tlbiIsImpzb24iLCJuYXRpdmUiLCJyZXNwb25kZWQiLCJfdGhpcyIsImFkbWluQXBpIiwicmVmcmVzaFRva2VuIiwicmVmcmVzaF90b2tlbiIsImNsb3NlQnRuIiwiYnRuIiwiYnRuMSIsInJlc3RhcnQiLCJpc051bGwiLCJtaXhpbk9wdGlvbiIsImxvYWRpbmciLCJtb3VudGVkIiwiaW5zIiwiTG9hZGluZyIsIiRyZWZzIiwiJGVsIiwic3RhdHVzIiwicGVuZGluZyIsImluaXRpYWxTdGF0ZSIsImlzU3RyaW5nIiwicGVuZGluZ1N0YXRlIiwic2hvdyIsInBhZ2UiLCJwZXJfcGFnZSIsImZvcm0iLCJhcGkiLCJwYWdlRXZlbnQiLCJnZXREYXRhIiwic3VibWl0IiwiaXNOdW1iZXIiLCJvcmRlciIsInRhciIsImN1cnJlbnRUYXJnZXQiLCJjaGlsZHJlbiIsImhpZ2hsaWdodCIsInNldEFyZ3MiLCJfdGhpczIiLCJkYXRhQWN0IiwiaWRMaXN0IiwiX3RoaXMzIiwiZGVsQWN0aW9uIiwiaWRfbGlzdCIsImpzb25FbmNvZGUiLCJkZWxUYXJnZXQiLCJfdGhpczQiLCJidG4yIiwiZGVsSWQiLCJkZWxTZWxlY3RlZCIsIl90aGlzNSIsInNlbGVjdEV2ZW50IiwiaGFzQ2xhc3MiLCJ1bnNlbGVjdGVkTGluZSIsInNlbGVjdGVkTGluZSIsInNlbGVjdEFsbEV2ZW50IiwiX3RoaXM2IiwiY2hlY2tlZCIsInRib2R5IiwidHJzIiwidGFnTmFtZSIsImN1ciIsImp1bXAiLCJhZGRDbGFzcyIsImFkZElkIiwicmVtb3ZlQ2xhc3MiLCJfdGhpczciLCJwYXJhbSIsImRldGFpbCIsIlVwbG9hZEltYWdlIiwicGx1Z2luVXJsIiwicGx1Z2luIiwiaW1hZ2VBcGkiLCJmaWVsZCIsInN1Y2Nlc3MiLCJjb25maXJtIiwiYWN0aW9uIiwibG9jYXRpb24iLCJtZW51U3dpdGNoIiwiaW5pdE1lbnVTd2l0Y2giLCJNZW51U3dpdGNoIiwibWVudSIsImNsaWNrIiwic3dpdGNoIiwic3dpdGNoTWVudSIsIm9wdGlvblNldCIsImltYWdlQXBpRm9yd2FuZ0VkaXRvciIsImZpbGVBcGkiLCJtaXhpbnMiLCJob3N0IiwiVnVlUm91dGVyIiwicm91dGVzIiwiYmVmb3JlRWFjaCIsInByaXYiLCJ1c2VyIiwib3MiLCJkZXZlbG9wZXIiLCJzeXN0ZW0iLCJWdWV4IiwiU3RvcmUiLCJnZXR0ZXJzIiwibXV0YXRpb25zIiwiYWN0aW9ucyIsImxvZ2luaW5nIiwiYXBpX2FkbWluIiwibG9naW4iLCJsb2dvdXQiLCJlZGl0IiwiYXBpX3VzZXIiLCJtYWluIiwiYXJ0aWNsZVR5cGUiLCJhcnRpY2xlIiwic2hvd0ltYWdlIiwidmVyaWZ5Q29kZSIsInRyYW5zbGF0aW9uIiwieGhyRm9yQ29kZSIsIm1pc2MiLCJ0cmFuc2xhdGUiLCJhcGlfcm91dGUiLCJhdXRoIiwiYXBpX3JvbGUiLCJCcmFuZCIsImFwaV9jYXJTZXJpZXNHcm91cCIsImFwaV9jYXJTZXJpZXMiLCJjYXJDb25maWd1cmF0aW9uR3JvdXAiLCJncm91cCIsImNhckNvbmZpZ3VyYXRpb24iLCJjYXJUeXBlIiwiY2FyTW9kZWwiLCJkZXRlY3Rpb25Nb2R1bGUiLCJkZXRlY3Rpb25Hcm91cCIsImRldGVjdGlvblBvcyIsImRldGVjdGlvbkl0ZW0iLCJzZXJ2aWNlIiwidGh1bWIiLCJydWxlIiwicmVwb3J0IiwiZGVsSW1hZ2UiLCJnZXRSZXBvcnQiLCJwbGF0Zm9ybSIsInNhbGVBcHBsaWNhdGlvbiIsInVwZGF0ZVN0YXR1cyIsInJlY29tbWVuZGF0aW9uQXBwbGljYXRpb24iLCJzdGFnaW5nQnV5QXBwbGljYXRpb24iLCJyZXNlcnZhdGlvbiIsIm1vbnRoIiwicXVhcnRlciIsInllYXIiLCJwYW5uZWwiLCJzdG9yeSIsIl9hbGwiLCJfeCIsIl94MiIsImFydGljbGVUeXBlQXBpIiwiYXJ0aWNsZUFwaSIsInNob3dJbWFnZUFwaSIsIm1pc2NBcGkiLCJyb3V0ZUFwaSIsInJvbGVBcGkiLCJicmFuZEFwaSIsImNhclNlcmllc0dyb3VwQXBpIiwiY2FyU2VyaWVzQXBpIiwiY2FyQ29uZmlndXJhdGlvbkdyb3VwQXBpIiwiY2FyQ29uZmlndXJhdGlvbkFwaSIsImNhclR5cGVBcGkiLCJjYXJNb2RlbEFwaSIsImRldGVjdGlvbk1vZHVsZUFwaSIsImRldGVjdGlvbkdyb3VwQXBpIiwiZGV0ZWN0aW9uUG9zQXBpIiwiZGV0ZWN0aW9uSXRlbUFwaSIsInNlcnZpY2VBcGkiLCJjYXJBcGkiLCJwbGF0Zm9ybUFwaSIsInNhbGVBcHBsaWNhdGlvbkFwaSIsInJlY29tbWVuZGF0aW9uQXBwbGljYXRpb25BcGkiLCJzdGFnaW5nQnV5QXBwbGljYXRpb25BcGkiLCJyZXNlcnZhdGlvbkFwaSIsInVzZXJBcGkiLCJwYW5uZWxBcGkiLCJzdG9yeUFwaSIsIm1peGluIiwibm90aWNlIiwidGl0bGUiLCIkTm90aWNlIiwic05vdGljZSIsIndOb3RpY2UiLCJpTm90aWNlIiwiZU5vdGljZSIsInRvTGluayIsImNvbXBvbmVudHMiLCIkY3JlYXRlRWxlbWVudCIsIl9zZWxmIiwic3RhdGljQ2xhc3MiLCJyZWYiLCJfd2l0aFN0cmlwcGVkIiwidmlld19BcHB2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJjb21wb25lbnROb3JtYWxpemVyIiwiX19maWxlIiwiQXBwIiwibG9hZGluZ3Z1ZV90eXBlX3RlbXBsYXRlX2lkXzAxOTIyZmQxX3Njb3BlZF90cnVlX3JlbmRlciIsIl9tIiwicHVibGljX2xvYWRpbmd2dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJsb2FkaW5nX2NvbXBvbmVudCIsIl92bSIsInNlbGVjdHZ1ZV90eXBlX3RlbXBsYXRlX2lkXzIxZGJiYmY3X3Njb3BlZF90cnVlX3JlbmRlciIsIndpZHRoIiwibW9kZWwiLCJjVmFsdWUiLCIkJHYiLCJleHByZXNzaW9uIiwiYXR0cnMiLCJ0b3AiLCJfZSIsImF0dHIiLCJwdWJsaWNfc2VsZWN0dnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwicHJvcHMiLCJyZXF1aXJlZCIsImRlZmF1bHQiLCJCb29sZWFuIiwid2F0Y2giLCJudiIsIiRlbWl0IiwiaW1tZWRpYXRlIiwic2VsZWN0X2NvbXBvbmVudCIsInB1YmxpY19zZWxlY3QiLCJicmFuZHZ1ZV90eXBlX3RlbXBsYXRlX2lkXzMwMWZkN2RjX3Njb3BlZF90cnVlX3JlbmRlciIsImRhdGEtdHlwZSIsImxldHRlciIsImRhdGEtbGV0dGVyIiwiZGF0YS1pZCIsImRhdGEtaG90IiwiaG90IiwiZGF0YS1uYW1lIiwibG9nb19leHBsYWluIiwicHVibGljX2JyYW5kdnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwibG9nbyIsImJyYW5kX2NvbXBvbmVudCIsInB1YmxpY19icmFuZCIsIk1lbnVTd2l0Y2h2dWVfdHlwZV90ZW1wbGF0ZV9pZF82NjhiNjhlNF9zY29wZWRfdHJ1ZV9yZW5kZXIiLCJwdWJsaWNfTWVudVN3aXRjaHZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsIk1lbnVTd2l0Y2hfY29tcG9uZW50IiwicHVibGljX01lbnVTd2l0Y2giLCJidXR0b252dWVfdHlwZV90ZW1wbGF0ZV9pZF9jYzIyYjlhNl9zY29wZWRfdHJ1ZV9yZW5kZXIiLCJjbGFzcyIsIm9uIiwiJGV2ZW50Iiwic3RvcFByb3BhZ2F0aW9uIiwiaWNvIiwicHVibGljX2J1dHRvbnZ1ZV90eXBlX3NjcmlwdF9sYW5nX2pzXyIsImJ1dHRvbl9jb21wb25lbnQiLCJwdWJsaWNfYnV0dG9uIiwic2VsZWN0IiwiYnV0dG9uIiwidGVtcGxhdGUiXSwibWFwcGluZ3MiOiJhQUNBLFNBQUFBLEVBQUFDLEdBUUEsSUFQQSxJQU1BQyxFQUFBQyxFQU5BQyxFQUFBSCxFQUFBLEdBQ0FJLEVBQUFKLEVBQUEsR0FLQUssRUFBQSxFQUFBQyxFQUFBLEdBQ1FELEVBQUFGLEVBQUFJLE9BQW9CRixJQUM1QkgsRUFBQUMsRUFBQUUsR0FDQUcsRUFBQU4sSUFDQUksRUFBQUcsS0FBQUQsRUFBQU4sR0FBQSxJQUVBTSxFQUFBTixHQUFBLEVBRUEsSUFBQUQsS0FBQUcsRUFDQU0sT0FBQUMsVUFBQUMsZUFBQUMsS0FBQVQsRUFBQUgsS0FDQWEsRUFBQWIsR0FBQUcsRUFBQUgsSUFLQSxJQUZBYyxLQUFBZixHQUVBTSxFQUFBQyxRQUNBRCxFQUFBVSxPQUFBVixHQU9BLElBQUFXLEVBQUEsR0FHQUMsRUFBQSxDQUNBQyxFQUFBLEdBTUFYLEVBQUEsQ0FD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S0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLElBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxFQUFRLEtBQ1JBLEVBQVEsS0FDUkEsRUFBUSxLQUNSQSxF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QVUsZ0JBQWtCcW9CLElBQ2hDdEYsSUFBSS9pQixVQUFVLFdBQWFtekIsV0MyQzNCLElBQUlwUSxJQUFJLENBQ0p4M0IsR0FBSSxPQUNKNm5DLFNBQVUiLCJmaWxlIjoianMvYXBwX3Y4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gaW5zdGFsbCBhIEpTT05QIGNhbGxiYWNrIGZvciBjaHVuayBsb2FkaW5nXG4gXHRmdW5jdGlvbiB3ZWJwYWNrSnNvbnBDYWxsYmFjayhkYXRhKSB7XG4gXHRcdHZhciBjaHVua0lkcyA9IGRhdGFbMF07XG4gXHRcdHZhciBtb3JlTW9kdWxlcyA9IGRhdGFbMV07XG5cblxuIFx0XHQvLyBhZGQgXCJtb3JlTW9kdWxlc1wiIHRvIHRoZSBtb2R1bGVzIG9iamVjdCxcbiBcdFx0Ly8gdGhlbiBmbGFnIGFsbCBcImNodW5rSWRzXCIgYXMgbG9hZGVkIGFuZCBmaXJlIGNhbGxiYWNrXG4gXHRcdHZhciBtb2R1bGVJZCwgY2h1bmtJZCwgaSA9IDAsIHJlc29sdmVzID0gW107XG4gXHRcdGZvcig7aSA8IGNodW5rSWRzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0Y2h1bmtJZCA9IGNodW5rSWRzW2ldO1xuIFx0XHRcdGlmKGluc3RhbGxlZENodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdFx0cmVzb2x2ZXMucHVzaChpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF1bMF0pO1xuIFx0XHRcdH1cbiBcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSAwO1xuIFx0XHR9XG4gXHRcdGZvcihtb2R1bGVJZCBpbiBtb3JlTW9kdWxlcykge1xuIFx0XHRcdGlmKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb3JlTW9kdWxlcywgbW9kdWxlSWQpKSB7XG4gXHRcdFx0XHRtb2R1bGVzW21vZHVsZUlkXSA9IG1vcmVNb2R1bGVzW21vZHVsZUlkXTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0aWYocGFyZW50SnNvbnBGdW5jdGlvbikgcGFyZW50SnNvbnBGdW5jdGlvbihkYXRhKTtcblxuIFx0XHR3aGlsZShyZXNvbHZlcy5sZW5ndGgpIHtcbiBcdFx0XHRyZXNvbHZlcy5zaGlmdCgpKCk7XG4gXHRcdH1cblxuIFx0fTtcblxuXG4gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBvYmplY3QgdG8gc3RvcmUgbG9hZGVkIENTUyBjaHVua3NcbiBcdHZhciBpbnN0YWxsZWRDc3NDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH1cblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDA6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJqcy9cIiArICh7fVtjaHVua0lkXXx8Y2h1bmtJZCkgKyBcIi5qc1wiXG4gXHR9XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuIFx0Ly8gVGhpcyBmaWxlIGNvbnRhaW5zIG9ubHkgdGhlIGVudHJ5IGNodW5rLlxuIFx0Ly8gVGhlIGNodW5rIGxvYWRpbmcgZnVuY3Rpb24gZm9yIGFkZGl0aW9uYWwgY2h1bmtzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmUgPSBmdW5jdGlvbiByZXF1aXJlRW5zdXJlKGNodW5rSWQpIHtcbiBcdFx0dmFyIHByb21pc2VzID0gW107XG5cblxuIFx0XHQvLyBtaW5pLWNzcy1leHRyYWN0LXBsdWdpbiBDU1MgbG9hZGluZ1xuIFx0XHR2YXIgY3NzQ2h1bmtzID0ge1wiMVwiOjEsXCIyXCI6MSxcIjNcIjoxLFwiNFwiOjEsXCI1XCI6MSxcIjZcIjoxLFwiN1wiOjEsXCI4XCI6MSxcIjlcIjoxLFwiMTBcIjoxLFwiMTFcIjoxLFwiMTJcIjoxLFwiMTNcIjoxLFwiMTRcIjoxLFwiMTVcIjoxLFwiMTZcIjoxLFwiMTdcIjoxLFwiMThcIjoxLFwiMTlcIjoxLFwiMjBcIjoxLFwiMjFcIjoxLFwiMjJcIjoxLFwiMjNcIjoxLFwiMjRcIjoxLFwiMjVcIjoxLFwiMjZcIjoxLFwiMjdcIjoxLFwiMjhcIjoxLFwiMjlcIjoxLFwiMzBcIjoxLFwiMzFcIjoxLFwiMzJcIjoxLFwiMzNcIjoxLFwiMzRcIjoxLFwiMzVcIjoxLFwiMzZcIjoxLFwiMzdcIjoxLFwiMzhcIjoxLFwiMzlcIjoxLFwiNDBcIjoxLFwiNDFcIjoxLFwiNDJcIjoxLFwiNDNcIjoxLFwiNDRcIjoxLFwiNDVcIjoxLFwiNDZcIjoxLFwiNDdcIjoxLFwiNDhcIjoxLFwiNDlcIjoxLFwiNTBcIjoxfTtcbiBcdFx0aWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdKSBwcm9taXNlcy5wdXNoKGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXSk7XG4gXHRcdGVsc2UgaWYoaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdICE9PSAwICYmIGNzc0NodW5rc1tjaHVua0lkXSkge1xuIFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHR2YXIgaHJlZiA9IFwiXCIgKyBjaHVua0lkICsgXCIuY3NzXCI7XG4gXHRcdFx0XHR2YXIgZnVsbGhyZWYgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLnAgKyBocmVmO1xuIFx0XHRcdFx0dmFyIGV4aXN0aW5nTGlua1RhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxpbmtcIik7XG4gXHRcdFx0XHRmb3IodmFyIGkgPSAwOyBpIDwgZXhpc3RpbmdMaW5rVGFncy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdFx0XHR2YXIgdGFnID0gZXhpc3RpbmdMaW5rVGFnc1tpXTtcbiBcdFx0XHRcdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSB8fCB0YWcuZ2V0QXR0cmlidXRlKFwiaHJlZlwiKTtcbiBcdFx0XHRcdFx0aWYodGFnLnJlbCA9PT0gXCJzdHlsZXNoZWV0XCIgJiYgKGRhdGFIcmVmID09PSBocmVmIHx8IGRhdGFIcmVmID09PSBmdWxsaHJlZikpIHJldHVybiByZXNvbHZlKCk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHR2YXIgZXhpc3RpbmdTdHlsZVRhZ3MgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0eWxlXCIpO1xuIFx0XHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IGV4aXN0aW5nU3R5bGVUYWdzLmxlbmd0aDsgaSsrKSB7XG4gXHRcdFx0XHRcdHZhciB0YWcgPSBleGlzdGluZ1N0eWxlVGFnc1tpXTtcbiBcdFx0XHRcdFx0dmFyIGRhdGFIcmVmID0gdGFnLmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKTtcbiBcdFx0XHRcdFx0aWYoZGF0YUhyZWYgPT09IGhyZWYgfHwgZGF0YUhyZWYgPT09IGZ1bGxocmVmKSByZXR1cm4gcmVzb2x2ZSgpO1xuIFx0XHRcdFx0fVxuIFx0XHRcdFx0dmFyIGxpbmtUYWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwibGlua1wiKTtcbiBcdFx0XHRcdGxpbmtUYWcucmVsID0gXCJzdHlsZXNoZWV0XCI7XG4gXHRcdFx0XHRsaW5rVGFnLnR5cGUgPSBcInRleHQvY3NzXCI7XG4gXHRcdFx0XHRsaW5rVGFnLm9ubG9hZCA9IHJlc29sdmU7XG4gXHRcdFx0XHRsaW5rVGFnLm9uZXJyb3IgPSBmdW5jdGlvbihldmVudCkge1xuIFx0XHRcdFx0XHR2YXIgcmVxdWVzdCA9IGV2ZW50ICYmIGV2ZW50LnRhcmdldCAmJiBldmVudC50YXJnZXQuc3JjIHx8IGZ1bGxocmVmO1xuIFx0XHRcdFx0XHR2YXIgZXJyID0gbmV3IEVycm9yKFwiTG9hZGluZyBDU1MgY2h1bmsgXCIgKyBjaHVua0lkICsgXCIgZmFpbGVkLlxcbihcIiArIHJlcXVlc3QgKyBcIilcIik7XG4gXHRcdFx0XHRcdGVyci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiBcdFx0XHRcdFx0ZGVsZXRlIGluc3RhbGxlZENzc0NodW5rc1tjaHVua0lkXVxuIFx0XHRcdFx0XHRsaW5rVGFnLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobGlua1RhZylcbiBcdFx0XHRcdFx0cmVqZWN0KGVycik7XG4gXHRcdFx0XHR9O1xuIFx0XHRcdFx0bGlua1RhZy5ocmVmID0gZnVsbGhyZWY7XG5cbiBcdFx0XHRcdHZhciBoZWFkID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJoZWFkXCIpWzBdO1xuIFx0XHRcdFx0aGVhZC5hcHBlbmRDaGlsZChsaW5rVGFnKTtcbiBcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCkge1xuIFx0XHRcdFx0aW5zdGFsbGVkQ3NzQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0XHR9KSk7XG4gXHRcdH1cblxuIFx0XHQvLyBKU09OUCBjaHVuayBsb2FkaW5nIGZvciBqYXZhc2NyaXB0XG5cbiBcdFx0dmFyIGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXTtcbiBcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhICE9PSAwKSB7IC8vIDAgbWVhbnMgXCJhbHJlYWR5IGluc3RhbGxlZFwiLlxuXG4gXHRcdFx0Ly8gYSBQcm9taXNlIG1lYW5zIFwiY3VycmVudGx5IGxvYWRpbmdcIi5cbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua0RhdGEpIHtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdKTtcbiBcdFx0XHR9IGVsc2Uge1xuIFx0XHRcdFx0Ly8gc2V0dXAgUHJvbWlzZSBpbiBjaHVuayBjYWNoZVxuIFx0XHRcdFx0dmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiBcdFx0XHRcdFx0aW5zdGFsbGVkQ2h1bmtEYXRhID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gW3Jlc29sdmUsIHJlamVjdF07XG4gXHRcdFx0XHR9KTtcbiBcdFx0XHRcdHByb21pc2VzLnB1c2goaW5zdGFsbGVkQ2h1bmtEYXRhWzJdID0gcHJvbWlzZSk7XG5cbiBcdFx0XHRcdC8vIHN0YXJ0IGNodW5rIGxvYWRpbmdcbiBcdFx0XHRcdHZhciBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiBcdFx0XHRcdHZhciBvblNjcmlwdENvbXBsZXRlO1xuXG4gXHRcdFx0XHRzY3JpcHQuY2hhcnNldCA9ICd1dGYtOCc7XG4gXHRcdFx0XHRzY3JpcHQudGltZW91dCA9IDEyMDtcbiBcdFx0XHRcdGlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKSB7XG4gXHRcdFx0XHRcdHNjcmlwdC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBfX3dlYnBhY2tfcmVxdWlyZV9fLm5jKTtcbiBcdFx0XHRcdH1cbiBcdFx0XHRcdHNjcmlwdC5zcmMgPSBqc29ucFNjcmlwdFNyYyhjaHVua0lkKTtcblxuIFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuIFx0XHRcdFx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG4gXHRcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHRcdFx0dmFyIGNodW5rID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRcdFx0XHRpZihjaHVuayAhPT0gMCkge1xuIFx0XHRcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuIFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcbiBcdFx0XHRcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcignTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKScpO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IudHlwZSA9IGVycm9yVHlwZTtcbiBcdFx0XHRcdFx0XHRcdGVycm9yLnJlcXVlc3QgPSByZWFsU3JjO1xuIFx0XHRcdFx0XHRcdFx0Y2h1bmtbMV0oZXJyb3IpO1xuIFx0XHRcdFx0XHRcdH1cbiBcdFx0XHRcdFx0XHRpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0gPSB1bmRlZmluZWQ7XG4gXHRcdFx0XHRcdH1cbiBcdFx0XHRcdH07XG4gXHRcdFx0XHR2YXIgdGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24oKXtcbiBcdFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSh7IHR5cGU6ICd0aW1lb3V0JywgdGFyZ2V0OiBzY3JpcHQgfSk7XG4gXHRcdFx0XHR9LCAxMjAwMDApO1xuIFx0XHRcdFx0c2NyaXB0Lm9uZXJyb3IgPSBzY3JpcHQub25sb2FkID0gb25TY3JpcHRDb21wbGV0ZTtcbiBcdFx0XHRcdGRvY3VtZW50LmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiBcdFx0XHR9XG4gXHRcdH1cbiBcdFx0cmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiBcdH07XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gb24gZXJyb3IgZnVuY3Rpb24gZm9yIGFzeW5jIGxvYWRpbmdcbiBcdF9fd2VicGFja19yZXF1aXJlX18ub2UgPSBmdW5jdGlvbihlcnIpIHsgY29uc29sZS5lcnJvcihlcnIpOyB0aHJvdyBlcnI7IH07XG5cbiBcdHZhciBqc29ucEFycmF5ID0gd2luZG93W1wid2VicGFja0pzb25wXCJdID0gd2luZG93W1wid2VicGFja0pzb25wXCJdIHx8IFtdO1xuIFx0dmFyIG9sZEpzb25wRnVuY3Rpb24gPSBqc29ucEFycmF5LnB1c2guYmluZChqc29ucEFycmF5KTtcbiBcdGpzb25wQXJyYXkucHVzaCA9IHdlYnBhY2tKc29ucENhbGxiYWNrO1xuIFx0anNvbnBBcnJheSA9IGpzb25wQXJyYXkuc2xpY2UoKTtcbiBcdGZvcih2YXIgaSA9IDA7IGkgPCBqc29ucEFycmF5Lmxlbmd0aDsgaSsrKSB3ZWJwYWNrSnNvbnBDYWxsYmFjayhqc29ucEFycmF5W2ldKTtcbiBcdHZhciBwYXJlbnRKc29ucEZ1bmN0aW9uID0gb2xkSnNvbnBGdW5jdGlvbjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEzMik7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xyXG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcclxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XHJcblxyXG52YXIgJGV4cG9ydCA9IGZ1bmN0aW9uICh0eXBlLCBuYW1lLCBzb3VyY2UpIHtcclxuICB2YXIgSVNfRk9SQ0VEID0gdHlwZSAmICRleHBvcnQuRjtcclxuICB2YXIgSVNfR0xPQkFMID0gdHlwZSAmICRleHBvcnQuRztcclxuICB2YXIgSVNfU1RBVElDID0gdHlwZSAmICRleHBvcnQuUztcclxuICB2YXIgSVNfUFJPVE8gPSB0eXBlICYgJGV4cG9ydC5QO1xyXG4gIHZhciBJU19CSU5EID0gdHlwZSAmICRleHBvcnQuQjtcclxuICB2YXIgdGFyZ2V0ID0gSVNfR0xPQkFMID8gZ2xvYmFsIDogSVNfU1RBVElDID8gZ2xvYmFsW25hbWVdIHx8IChnbG9iYWxbbmFtZV0gPSB7fSkgOiAoZ2xvYmFsW25hbWVdIHx8IHt9KVtQUk9UT1RZUEVdO1xyXG4gIHZhciBleHBvcnRzID0gSVNfR0xPQkFMID8gY29yZSA6IGNvcmVbbmFtZV0gfHwgKGNvcmVbbmFtZV0gPSB7fSk7XHJcbiAgdmFyIGV4cFByb3RvID0gZXhwb3J0c1tQUk9UT1RZUEVdIHx8IChleHBvcnRzW1BST1RPVFlQRV0gPSB7fSk7XHJcbiAgdmFyIGtleSwgb3duLCBvdXQsIGV4cDtcclxuICBpZiAoSVNfR0xPQkFMKSBzb3VyY2UgPSBuYW1lO1xyXG4gIGZvciAoa2V5IGluIHNvdXJjZSkge1xyXG4gICAgLy8gY29udGFpbnMgaW4gbmF0aXZlXHJcbiAgICBvd24gPSAhSVNfRk9SQ0VEICYmIHRhcmdldCAmJiB0YXJnZXRba2V5XSAhPT0gdW5kZWZpbmVkO1xyXG4gICAgLy8gZXhwb3J0IG5hdGl2ZSBvciBwYXNzZWRcclxuICAgIG91dCA9IChvd24gPyB0YXJnZXQgOiBzb3VyY2UpW2tleV07XHJcbiAgICAvLyBiaW5kIHRpbWVycyB0byBnbG9iYWwgZm9yIGNhbGwgZnJvbSBleHBvcnQgY29udGV4dFxyXG4gICAgZXhwID0gSVNfQklORCAmJiBvd24gPyBjdHgob3V0LCBnbG9iYWwpIDogSVNfUFJPVE8gJiYgdHlwZW9mIG91dCA9PSAnZnVuY3Rpb24nID8gY3R4KEZ1bmN0aW9uLmNhbGwsIG91dCkgOiBvdXQ7XHJcbiAgICAvLyBleHRlbmQgZ2xvYmFsXHJcbiAgICBpZiAodGFyZ2V0KSByZWRlZmluZSh0YXJnZXQsIGtleSwgb3V0LCB0eXBlICYgJGV4cG9ydC5VKTtcclxuICAgIC8vIGV4cG9ydFxyXG4gICAgaWYgKGV4cG9ydHNba2V5XSAhPSBvdXQpIGhpZGUoZXhwb3J0cywga2V5LCBleHApO1xyXG4gICAgaWYgKElTX1BST1RPICYmIGV4cFByb3RvW2tleV0gIT0gb3V0KSBleHBQcm90b1trZXldID0gb3V0O1xyXG4gIH1cclxufTtcclxuZ2xvYmFsLmNvcmUgPSBjb3JlO1xyXG4vLyB0eXBlIGJpdG1hcFxyXG4kZXhwb3J0LkYgPSAxOyAgIC8vIGZvcmNlZFxyXG4kZXhwb3J0LkcgPSAyOyAgIC8vIGdsb2JhbFxyXG4kZXhwb3J0LlMgPSA0OyAgIC8vIHN0YXRpY1xyXG4kZXhwb3J0LlAgPSA4OyAgIC8vIHByb3RvXHJcbiRleHBvcnQuQiA9IDE2OyAgLy8gYmluZFxyXG4kZXhwb3J0LlcgPSAzMjsgIC8vIHdyYXBcclxuJGV4cG9ydC5VID0gNjQ7ICAvLyBzYWZlXHJcbiRleHBvcnQuUiA9IDEyODsgLy8gcmVhbCBwcm90byBtZXRob2QgZm9yIGBsaWJyYXJ5YFxyXG5tb2R1bGUuZXhwb3J0cyA9ICRleHBvcnQ7XHJcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIGlmICghaXNPYmplY3QoaXQpKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhbiBvYmplY3QhJyk7XHJcbiAgcmV0dXJuIGl0O1xyXG59O1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxyXG52YXIgZ2xvYmFsID0gbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2Ygd2luZG93ICE9ICd1bmRlZmluZWQnICYmIHdpbmRvdy5NYXRoID09IE1hdGhcclxuICA/IHdpbmRvdyA6IHR5cGVvZiBzZWxmICE9ICd1bmRlZmluZWQnICYmIHNlbGYuTWF0aCA9PSBNYXRoID8gc2VsZlxyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1uZXctZnVuY1xyXG4gIDogRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcclxuaWYgKHR5cGVvZiBfX2cgPT0gJ251bWJlcicpIF9fZyA9IGdsb2JhbDsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiAhIWV4ZWMoKTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcclxufTtcclxuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ3drcycpO1xyXG52YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XHJcbnZhciBTeW1ib2wgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5TeW1ib2w7XHJcbnZhciBVU0VfU1lNQk9MID0gdHlwZW9mIFN5bWJvbCA9PSAnZnVuY3Rpb24nO1xyXG5cclxudmFyICRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gIHJldHVybiBzdG9yZVtuYW1lXSB8fCAoc3RvcmVbbmFtZV0gPVxyXG4gICAgVVNFX1NZTUJPTCAmJiBTeW1ib2xbbmFtZV0gfHwgKFVTRV9TWU1CT0wgPyBTeW1ib2wgOiB1aWQpKCdTeW1ib2wuJyArIG5hbWUpKTtcclxufTtcclxuXHJcbiRleHBvcnRzLnN0b3JlID0gc3RvcmU7XHJcbiIsIi8vIDcuMS4xNSBUb0xlbmd0aFxyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgbWluID0gTWF0aC5taW47XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGl0ID4gMCA/IG1pbih0b0ludGVnZXIoaXQpLCAweDFmZmZmZmZmZmZmZmZmKSA6IDA7IC8vIHBvdygyLCA1MykgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcclxufTtcclxuIiwiLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxyXG5tb2R1bGUuZXhwb3J0cyA9ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9IH0pLmEgIT0gNztcclxufSk7XHJcbiIsInZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuL19pZTgtZG9tLWRlZmluZScpO1xyXG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKCcuL190by1wcmltaXRpdmUnKTtcclxudmFyIGRQID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xyXG5cclxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcclxuICBhbk9iamVjdChPKTtcclxuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XHJcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XHJcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xyXG4gICAgcmV0dXJuIGRQKE8sIFAsIEF0dHJpYnV0ZXMpO1xyXG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxyXG4gIGlmICgnZ2V0JyBpbiBBdHRyaWJ1dGVzIHx8ICdzZXQnIGluIEF0dHJpYnV0ZXMpIHRocm93IFR5cGVFcnJvcignQWNjZXNzb3JzIG5vdCBzdXBwb3J0ZWQhJyk7XHJcbiAgaWYgKCd2YWx1ZScgaW4gQXR0cmlidXRlcykgT1tQXSA9IEF0dHJpYnV0ZXMudmFsdWU7XHJcbiAgcmV0dXJuIE87XHJcbn07XHJcbiIsIi8vIDcuMS4xMyBUb09iamVjdChhcmd1bWVudClcclxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIE9iamVjdChkZWZpbmVkKGl0KSk7XHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgaWYgKHR5cGVvZiBpdCAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXQgKyAnIGlzIG5vdCBhIGZ1bmN0aW9uIScpO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBmdW5jdGlvbiAob2JqZWN0LCBrZXksIHZhbHVlKSB7XHJcbiAgcmV0dXJuIGRQLmYob2JqZWN0LCBrZXksIGNyZWF0ZURlc2MoMSwgdmFsdWUpKTtcclxufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcclxuICBvYmplY3Rba2V5XSA9IHZhbHVlO1xyXG4gIHJldHVybiBvYmplY3Q7XHJcbn07XHJcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIFNSQyA9IHJlcXVpcmUoJy4vX3VpZCcpKCdzcmMnKTtcclxudmFyICR0b1N0cmluZyA9IHJlcXVpcmUoJy4vX2Z1bmN0aW9uLXRvLXN0cmluZycpO1xyXG52YXIgVE9fU1RSSU5HID0gJ3RvU3RyaW5nJztcclxudmFyIFRQTCA9ICgnJyArICR0b1N0cmluZykuc3BsaXQoVE9fU1RSSU5HKTtcclxuXHJcbnJlcXVpcmUoJy4vX2NvcmUnKS5pbnNwZWN0U291cmNlID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuICR0b1N0cmluZy5jYWxsKGl0KTtcclxufTtcclxuXHJcbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBrZXksIHZhbCwgc2FmZSkge1xyXG4gIHZhciBpc0Z1bmN0aW9uID0gdHlwZW9mIHZhbCA9PSAnZnVuY3Rpb24nO1xyXG4gIGlmIChpc0Z1bmN0aW9uKSBoYXModmFsLCAnbmFtZScpIHx8IGhpZGUodmFsLCAnbmFtZScsIGtleSk7XHJcbiAgaWYgKE9ba2V5XSA9PT0gdmFsKSByZXR1cm47XHJcbiAgaWYgKGlzRnVuY3Rpb24pIGhhcyh2YWwsIFNSQykgfHwgaGlkZSh2YWwsIFNSQywgT1trZXldID8gJycgKyBPW2tleV0gOiBUUEwuam9pbihTdHJpbmcoa2V5KSkpO1xyXG4gIGlmIChPID09PSBnbG9iYWwpIHtcclxuICAgIE9ba2V5XSA9IHZhbDtcclxuICB9IGVsc2UgaWYgKCFzYWZlKSB7XHJcbiAgICBkZWxldGUgT1trZXldO1xyXG4gICAgaGlkZShPLCBrZXksIHZhbCk7XHJcbiAgfSBlbHNlIGlmIChPW2tleV0pIHtcclxuICAgIE9ba2V5XSA9IHZhbDtcclxuICB9IGVsc2Uge1xyXG4gICAgaGlkZShPLCBrZXksIHZhbCk7XHJcbiAgfVxyXG4vLyBhZGQgZmFrZSBGdW5jdGlvbiN0b1N0cmluZyBmb3IgY29ycmVjdCB3b3JrIHdyYXBwZWQgbWV0aG9kcyAvIGNvbnN0cnVjdG9ycyB3aXRoIG1ldGhvZHMgbGlrZSBMb0Rhc2ggaXNOYXRpdmVcclxufSkoRnVuY3Rpb24ucHJvdG90eXBlLCBUT19TVFJJTkcsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gIHJldHVybiB0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nICYmIHRoaXNbU1JDXSB8fCAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcclxufSk7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG52YXIgcXVvdCA9IC9cIi9nO1xyXG4vLyBCLjIuMy4yLjEgQ3JlYXRlSFRNTChzdHJpbmcsIHRhZywgYXR0cmlidXRlLCB2YWx1ZSlcclxudmFyIGNyZWF0ZUhUTUwgPSBmdW5jdGlvbiAoc3RyaW5nLCB0YWcsIGF0dHJpYnV0ZSwgdmFsdWUpIHtcclxuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHN0cmluZykpO1xyXG4gIHZhciBwMSA9ICc8JyArIHRhZztcclxuICBpZiAoYXR0cmlidXRlICE9PSAnJykgcDEgKz0gJyAnICsgYXR0cmlidXRlICsgJz1cIicgKyBTdHJpbmcodmFsdWUpLnJlcGxhY2UocXVvdCwgJyZxdW90OycpICsgJ1wiJztcclxuICByZXR1cm4gcDEgKyAnPicgKyBTICsgJzwvJyArIHRhZyArICc+JztcclxufTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSwgZXhlYykge1xyXG4gIHZhciBPID0ge307XHJcbiAgT1tOQU1FXSA9IGV4ZWMoY3JlYXRlSFRNTCk7XHJcbiAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdGVzdCA9ICcnW05BTUVdKCdcIicpO1xyXG4gICAgcmV0dXJuIHRlc3QgIT09IHRlc3QudG9Mb3dlckNhc2UoKSB8fCB0ZXN0LnNwbGl0KCdcIicpLmxlbmd0aCA+IDM7XHJcbiAgfSksICdTdHJpbmcnLCBPKTtcclxufTtcclxuIiwiLyogZ2xvYmFscyBfX1ZVRV9TU1JfQ09OVEVYVF9fICovXHJcblxyXG4vLyBJTVBPUlRBTlQ6IERvIE5PVCB1c2UgRVMyMDE1IGZlYXR1cmVzIGluIHRoaXMgZmlsZSAoZXhjZXB0IGZvciBtb2R1bGVzKS5cclxuLy8gVGhpcyBtb2R1bGUgaXMgYSBydW50aW1lIHV0aWxpdHkgZm9yIGNsZWFuZXIgY29tcG9uZW50IG1vZHVsZSBvdXRwdXQgYW5kIHdpbGxcclxuLy8gYmUgaW5jbHVkZWQgaW4gdGhlIGZpbmFsIHdlYnBhY2sgdXNlciBidW5kbGUuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBub3JtYWxpemVDb21wb25lbnQgKFxyXG4gIHNjcmlwdEV4cG9ydHMsXHJcbiAgcmVuZGVyLFxyXG4gIHN0YXRpY1JlbmRlckZucyxcclxuICBmdW5jdGlvbmFsVGVtcGxhdGUsXHJcbiAgaW5qZWN0U3R5bGVzLFxyXG4gIHNjb3BlSWQsXHJcbiAgbW9kdWxlSWRlbnRpZmllciwgLyogc2VydmVyIG9ubHkgKi9cclxuICBzaGFkb3dNb2RlIC8qIHZ1ZS1jbGkgb25seSAqL1xyXG4pIHtcclxuICAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wXHJcbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0RXhwb3J0cyA9PT0gJ2Z1bmN0aW9uJ1xyXG4gICAgPyBzY3JpcHRFeHBvcnRzLm9wdGlvbnNcclxuICAgIDogc2NyaXB0RXhwb3J0c1xyXG5cclxuICAvLyByZW5kZXIgZnVuY3Rpb25zXHJcbiAgaWYgKHJlbmRlcikge1xyXG4gICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXJcclxuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zXHJcbiAgICBvcHRpb25zLl9jb21waWxlZCA9IHRydWVcclxuICB9XHJcblxyXG4gIC8vIGZ1bmN0aW9uYWwgdGVtcGxhdGVcclxuICBpZiAoZnVuY3Rpb25hbFRlbXBsYXRlKSB7XHJcbiAgICBvcHRpb25zLmZ1bmN0aW9uYWwgPSB0cnVlXHJcbiAgfVxyXG5cclxuICAvLyBzY29wZWRJZFxyXG4gIGlmIChzY29wZUlkKSB7XHJcbiAgICBvcHRpb25zLl9zY29wZUlkID0gJ2RhdGEtdi0nICsgc2NvcGVJZFxyXG4gIH1cclxuXHJcbiAgdmFyIGhvb2tcclxuICBpZiAobW9kdWxlSWRlbnRpZmllcikgeyAvLyBzZXJ2ZXIgYnVpbGRcclxuICAgIGhvb2sgPSBmdW5jdGlvbiAoY29udGV4dCkge1xyXG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXHJcbiAgICAgIGNvbnRleHQgPVxyXG4gICAgICAgIGNvbnRleHQgfHwgLy8gY2FjaGVkIGNhbGxcclxuICAgICAgICAodGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCkgfHwgLy8gc3RhdGVmdWxcclxuICAgICAgICAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0KSAvLyBmdW5jdGlvbmFsXHJcbiAgICAgIC8vIDIuMiB3aXRoIHJ1bkluTmV3Q29udGV4dDogdHJ1ZVxyXG4gICAgICBpZiAoIWNvbnRleHQgJiYgdHlwZW9mIF9fVlVFX1NTUl9DT05URVhUX18gIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgY29udGV4dCA9IF9fVlVFX1NTUl9DT05URVhUX19cclxuICAgICAgfVxyXG4gICAgICAvLyBpbmplY3QgY29tcG9uZW50IHN0eWxlc1xyXG4gICAgICBpZiAoaW5qZWN0U3R5bGVzKSB7XHJcbiAgICAgICAgaW5qZWN0U3R5bGVzLmNhbGwodGhpcywgY29udGV4dClcclxuICAgICAgfVxyXG4gICAgICAvLyByZWdpc3RlciBjb21wb25lbnQgbW9kdWxlIGlkZW50aWZpZXIgZm9yIGFzeW5jIGNodW5rIGluZmVycmVuY2VcclxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcclxuICAgICAgICBjb250ZXh0Ll9yZWdpc3RlcmVkQ29tcG9uZW50cy5hZGQobW9kdWxlSWRlbnRpZmllcilcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gdXNlZCBieSBzc3IgaW4gY2FzZSBjb21wb25lbnQgaXMgY2FjaGVkIGFuZCBiZWZvcmVDcmVhdGVcclxuICAgIC8vIG5ldmVyIGdldHMgY2FsbGVkXHJcbiAgICBvcHRpb25zLl9zc3JSZWdpc3RlciA9IGhvb2tcclxuICB9IGVsc2UgaWYgKGluamVjdFN0eWxlcykge1xyXG4gICAgaG9vayA9IHNoYWRvd01vZGVcclxuICAgICAgPyBmdW5jdGlvbiAoKSB7IGluamVjdFN0eWxlcy5jYWxsKHRoaXMsIHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkgfVxyXG4gICAgICA6IGluamVjdFN0eWxlc1xyXG4gIH1cclxuXHJcbiAgaWYgKGhvb2spIHtcclxuICAgIGlmIChvcHRpb25zLmZ1bmN0aW9uYWwpIHtcclxuICAgICAgLy8gZm9yIHRlbXBsYXRlLW9ubHkgaG90LXJlbG9hZCBiZWNhdXNlIGluIHRoYXQgY2FzZSB0aGUgcmVuZGVyIGZuIGRvZXNuJ3RcclxuICAgICAgLy8gZ28gdGhyb3VnaCB0aGUgbm9ybWFsaXplclxyXG4gICAgICBvcHRpb25zLl9pbmplY3RTdHlsZXMgPSBob29rXHJcbiAgICAgIC8vIHJlZ2lzdGVyIGZvciBmdW5jdGlvYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXHJcbiAgICAgIHZhciBvcmlnaW5hbFJlbmRlciA9IG9wdGlvbnMucmVuZGVyXHJcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyV2l0aFN0eWxlSW5qZWN0aW9uIChoLCBjb250ZXh0KSB7XHJcbiAgICAgICAgaG9vay5jYWxsKGNvbnRleHQpXHJcbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsUmVuZGVyKGgsIGNvbnRleHQpXHJcbiAgICAgIH1cclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXHJcbiAgICAgIHZhciBleGlzdGluZyA9IG9wdGlvbnMuYmVmb3JlQ3JlYXRlXHJcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmdcclxuICAgICAgICA/IFtdLmNvbmNhdChleGlzdGluZywgaG9vaylcclxuICAgICAgICA6IFtob29rXVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGV4cG9ydHM6IHNjcmlwdEV4cG9ydHMsXHJcbiAgICBvcHRpb25zOiBvcHRpb25zXHJcbiAgfVxyXG59XHJcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XHJcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoaXQsIGtleSk7XHJcbn07XHJcbiIsIi8vIHRvIGluZGV4ZWQgb2JqZWN0LCB0b09iamVjdCB3aXRoIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgc3RyaW5nc1xyXG52YXIgSU9iamVjdCA9IHJlcXVpcmUoJy4vX2lvYmplY3QnKTtcclxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIElPYmplY3QoZGVmaW5lZChpdCkpO1xyXG59O1xyXG4iLCJ2YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xyXG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIElFOF9ET01fREVGSU5FID0gcmVxdWlyZSgnLi9faWU4LWRvbS1kZWZpbmUnKTtcclxudmFyIGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xyXG5cclxuZXhwb3J0cy5mID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSA/IGdPUEQgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xyXG4gIE8gPSB0b0lPYmplY3QoTyk7XHJcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xyXG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcclxuICAgIHJldHVybiBnT1BEKE8sIFApO1xyXG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxyXG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVEZXNjKCFwSUUuZi5jYWxsKE8sIFApLCBPW1BdKTtcclxufTtcclxuIiwiLy8gMTkuMS4yLjkgLyAxNS4yLjMuMiBPYmplY3QuZ2V0UHJvdG90eXBlT2YoTylcclxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xyXG52YXIgT2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKE8pIHtcclxuICBPID0gdG9PYmplY3QoTyk7XHJcbiAgaWYgKGhhcyhPLCBJRV9QUk9UTykpIHJldHVybiBPW0lFX1BST1RPXTtcclxuICBpZiAodHlwZW9mIE8uY29uc3RydWN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBPIGluc3RhbmNlb2YgTy5jb25zdHJ1Y3Rvcikge1xyXG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xyXG4gIH0gcmV0dXJuIE8gaW5zdGFuY2VvZiBPYmplY3QgPyBPYmplY3RQcm90byA6IG51bGw7XHJcbn07XHJcbiIsInZhciBjb3JlID0gbW9kdWxlLmV4cG9ydHMgPSB7IHZlcnNpb246ICcyLjYuNScgfTtcclxuaWYgKHR5cGVvZiBfX2UgPT0gJ251bWJlcicpIF9fZSA9IGNvcmU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW5kZWZcclxuIiwiLy8gb3B0aW9uYWwgLyBzaW1wbGUgY29udGV4dCBiaW5kaW5nXHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGZuLCB0aGF0LCBsZW5ndGgpIHtcclxuICBhRnVuY3Rpb24oZm4pO1xyXG4gIGlmICh0aGF0ID09PSB1bmRlZmluZWQpIHJldHVybiBmbjtcclxuICBzd2l0Y2ggKGxlbmd0aCkge1xyXG4gICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24gKGEpIHtcclxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSk7XHJcbiAgICB9O1xyXG4gICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYik7XHJcbiAgICB9O1xyXG4gICAgY2FzZSAzOiByZXR1cm4gZnVuY3Rpb24gKGEsIGIsIGMpIHtcclxuICAgICAgcmV0dXJuIGZuLmNhbGwodGhhdCwgYSwgYiwgYyk7XHJcbiAgICB9O1xyXG4gIH1cclxuICByZXR1cm4gZnVuY3Rpb24gKC8qIC4uLmFyZ3MgKi8pIHtcclxuICAgIHJldHVybiBmbi5hcHBseSh0aGF0LCBhcmd1bWVudHMpO1xyXG4gIH07XHJcbn07XHJcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xyXG59O1xyXG4iLCIvLyA3LjEuNCBUb0ludGVnZXJcclxudmFyIGNlaWwgPSBNYXRoLmNlaWw7XHJcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGlzTmFOKGl0ID0gK2l0KSA/IDAgOiAoaXQgPiAwID8gZmxvb3IgOiBjZWlsKShpdCk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1ldGhvZCwgYXJnKSB7XHJcbiAgcmV0dXJuICEhbWV0aG9kICYmIGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWNhbGxcclxuICAgIGFyZyA/IG1ldGhvZC5jYWxsKG51bGwsIGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgMSkgOiBtZXRob2QuY2FsbChudWxsKTtcclxuICB9KTtcclxufTtcclxuIiwiLy8gNy4xLjEgVG9QcmltaXRpdmUoaW5wdXQgWywgUHJlZmVycmVkVHlwZV0pXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG4vLyBpbnN0ZWFkIG9mIHRoZSBFUzYgc3BlYyB2ZXJzaW9uLCB3ZSBkaWRuJ3QgaW1wbGVtZW50IEBAdG9QcmltaXRpdmUgY2FzZVxyXG4vLyBhbmQgdGhlIHNlY29uZCBhcmd1bWVudCAtIGZsYWcgLSBwcmVmZXJyZWQgdHlwZSBpcyBhIHN0cmluZ1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgUykge1xyXG4gIGlmICghaXNPYmplY3QoaXQpKSByZXR1cm4gaXQ7XHJcbiAgdmFyIGZuLCB2YWw7XHJcbiAgaWYgKFMgJiYgdHlwZW9mIChmbiA9IGl0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XHJcbiAgaWYgKHR5cGVvZiAoZm4gPSBpdC52YWx1ZU9mKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGl0KSkpIHJldHVybiB2YWw7XHJcbiAgaWYgKCFTICYmIHR5cGVvZiAoZm4gPSBpdC50b1N0cmluZykgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpdCkpKSByZXR1cm4gdmFsO1xyXG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcclxufTtcclxuIiwiLy8gNy4yLjEgUmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudClcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiAgXCIgKyBpdCk7XHJcbiAgcmV0dXJuIGl0O1xyXG59O1xyXG4iLCIvLyBtb3N0IE9iamVjdCBtZXRob2RzIGJ5IEVTNiBzaG91bGQgYWNjZXB0IHByaW1pdGl2ZXNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSwgZXhlYykge1xyXG4gIHZhciBmbiA9IChjb3JlLk9iamVjdCB8fCB7fSlbS0VZXSB8fCBPYmplY3RbS0VZXTtcclxuICB2YXIgZXhwID0ge307XHJcbiAgZXhwW0tFWV0gPSBleGVjKGZuKTtcclxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIGZhaWxzKGZ1bmN0aW9uICgpIHsgZm4oMSk7IH0pLCAnT2JqZWN0JywgZXhwKTtcclxufTtcclxuIiwiLy8gMCAtPiBBcnJheSNmb3JFYWNoXHJcbi8vIDEgLT4gQXJyYXkjbWFwXHJcbi8vIDIgLT4gQXJyYXkjZmlsdGVyXHJcbi8vIDMgLT4gQXJyYXkjc29tZVxyXG4vLyA0IC0+IEFycmF5I2V2ZXJ5XHJcbi8vIDUgLT4gQXJyYXkjZmluZFxyXG4vLyA2IC0+IEFycmF5I2ZpbmRJbmRleFxyXG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciBhc2MgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChUWVBFLCAkY3JlYXRlKSB7XHJcbiAgdmFyIElTX01BUCA9IFRZUEUgPT0gMTtcclxuICB2YXIgSVNfRklMVEVSID0gVFlQRSA9PSAyO1xyXG4gIHZhciBJU19TT01FID0gVFlQRSA9PSAzO1xyXG4gIHZhciBJU19FVkVSWSA9IFRZUEUgPT0gNDtcclxuICB2YXIgSVNfRklORF9JTkRFWCA9IFRZUEUgPT0gNjtcclxuICB2YXIgTk9fSE9MRVMgPSBUWVBFID09IDUgfHwgSVNfRklORF9JTkRFWDtcclxuICB2YXIgY3JlYXRlID0gJGNyZWF0ZSB8fCBhc2M7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgY2FsbGJhY2tmbiwgdGhhdCkge1xyXG4gICAgdmFyIE8gPSB0b09iamVjdCgkdGhpcyk7XHJcbiAgICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XHJcbiAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCB0aGF0LCAzKTtcclxuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChzZWxmLmxlbmd0aCk7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIHJlc3VsdCA9IElTX01BUCA/IGNyZWF0ZSgkdGhpcywgbGVuZ3RoKSA6IElTX0ZJTFRFUiA/IGNyZWF0ZSgkdGhpcywgMCkgOiB1bmRlZmluZWQ7XHJcbiAgICB2YXIgdmFsLCByZXM7XHJcbiAgICBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykgaWYgKE5PX0hPTEVTIHx8IGluZGV4IGluIHNlbGYpIHtcclxuICAgICAgdmFsID0gc2VsZltpbmRleF07XHJcbiAgICAgIHJlcyA9IGYodmFsLCBpbmRleCwgTyk7XHJcbiAgICAgIGlmIChUWVBFKSB7XHJcbiAgICAgICAgaWYgKElTX01BUCkgcmVzdWx0W2luZGV4XSA9IHJlczsgICAvLyBtYXBcclxuICAgICAgICBlbHNlIGlmIChyZXMpIHN3aXRjaCAoVFlQRSkge1xyXG4gICAgICAgICAgY2FzZSAzOiByZXR1cm4gdHJ1ZTsgICAgICAgICAgICAgLy8gc29tZVxyXG4gICAgICAgICAgY2FzZSA1OiByZXR1cm4gdmFsOyAgICAgICAgICAgICAgLy8gZmluZFxyXG4gICAgICAgICAgY2FzZSA2OiByZXR1cm4gaW5kZXg7ICAgICAgICAgICAgLy8gZmluZEluZGV4XHJcbiAgICAgICAgICBjYXNlIDI6IHJlc3VsdC5wdXNoKHZhbCk7ICAgICAgICAvLyBmaWx0ZXJcclxuICAgICAgICB9IGVsc2UgaWYgKElTX0VWRVJZKSByZXR1cm4gZmFsc2U7IC8vIGV2ZXJ5XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBJU19GSU5EX0lOREVYID8gLTEgOiBJU19TT01FIHx8IElTX0VWRVJZID8gSVNfRVZFUlkgOiByZXN1bHQ7XHJcbiAgfTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSkge1xyXG4gIHZhciBMSUJSQVJZID0gcmVxdWlyZSgnLi9fbGlicmFyeScpO1xyXG4gIHZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxuICB2YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG4gIHZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbiAgdmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XHJcbiAgdmFyICRidWZmZXIgPSByZXF1aXJlKCcuL190eXBlZC1idWZmZXInKTtcclxuICB2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbiAgdmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG4gIHZhciBwcm9wZXJ0eURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XHJcbiAgdmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbiAgdmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XHJcbiAgdmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcclxuICB2YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxuICB2YXIgdG9JbmRleCA9IHJlcXVpcmUoJy4vX3RvLWluZGV4Jyk7XHJcbiAgdmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbiAgdmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbiAgdmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG4gIHZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG4gIHZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG4gIHZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG4gIHZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcclxuICB2YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xyXG4gIHZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxuICB2YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcclxuICB2YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcclxuICB2YXIgdWlkID0gcmVxdWlyZSgnLi9fdWlkJyk7XHJcbiAgdmFyIHdrcyA9IHJlcXVpcmUoJy4vX3drcycpO1xyXG4gIHZhciBjcmVhdGVBcnJheU1ldGhvZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKTtcclxuICB2YXIgY3JlYXRlQXJyYXlJbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJyk7XHJcbiAgdmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcclxuICB2YXIgQXJyYXlJdGVyYXRvcnMgPSByZXF1aXJlKCcuL2VzNi5hcnJheS5pdGVyYXRvcicpO1xyXG4gIHZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcclxuICB2YXIgJGl0ZXJEZXRlY3QgPSByZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpO1xyXG4gIHZhciBzZXRTcGVjaWVzID0gcmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKTtcclxuICB2YXIgYXJyYXlGaWxsID0gcmVxdWlyZSgnLi9fYXJyYXktZmlsbCcpO1xyXG4gIHZhciBhcnJheUNvcHlXaXRoaW4gPSByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpO1xyXG4gIHZhciAkRFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxuICB2YXIgJEdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xyXG4gIHZhciBkUCA9ICREUC5mO1xyXG4gIHZhciBnT1BEID0gJEdPUEQuZjtcclxuICB2YXIgUmFuZ2VFcnJvciA9IGdsb2JhbC5SYW5nZUVycm9yO1xyXG4gIHZhciBUeXBlRXJyb3IgPSBnbG9iYWwuVHlwZUVycm9yO1xyXG4gIHZhciBVaW50OEFycmF5ID0gZ2xvYmFsLlVpbnQ4QXJyYXk7XHJcbiAgdmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XHJcbiAgdmFyIFNIQVJFRF9CVUZGRVIgPSAnU2hhcmVkJyArIEFSUkFZX0JVRkZFUjtcclxuICB2YXIgQllURVNfUEVSX0VMRU1FTlQgPSAnQllURVNfUEVSX0VMRU1FTlQnO1xyXG4gIHZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcclxuICB2YXIgQXJyYXlQcm90byA9IEFycmF5W1BST1RPVFlQRV07XHJcbiAgdmFyICRBcnJheUJ1ZmZlciA9ICRidWZmZXIuQXJyYXlCdWZmZXI7XHJcbiAgdmFyICREYXRhVmlldyA9ICRidWZmZXIuRGF0YVZpZXc7XHJcbiAgdmFyIGFycmF5Rm9yRWFjaCA9IGNyZWF0ZUFycmF5TWV0aG9kKDApO1xyXG4gIHZhciBhcnJheUZpbHRlciA9IGNyZWF0ZUFycmF5TWV0aG9kKDIpO1xyXG4gIHZhciBhcnJheVNvbWUgPSBjcmVhdGVBcnJheU1ldGhvZCgzKTtcclxuICB2YXIgYXJyYXlFdmVyeSA9IGNyZWF0ZUFycmF5TWV0aG9kKDQpO1xyXG4gIHZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcclxuICB2YXIgYXJyYXlGaW5kSW5kZXggPSBjcmVhdGVBcnJheU1ldGhvZCg2KTtcclxuICB2YXIgYXJyYXlJbmNsdWRlcyA9IGNyZWF0ZUFycmF5SW5jbHVkZXModHJ1ZSk7XHJcbiAgdmFyIGFycmF5SW5kZXhPZiA9IGNyZWF0ZUFycmF5SW5jbHVkZXMoZmFsc2UpO1xyXG4gIHZhciBhcnJheVZhbHVlcyA9IEFycmF5SXRlcmF0b3JzLnZhbHVlcztcclxuICB2YXIgYXJyYXlLZXlzID0gQXJyYXlJdGVyYXRvcnMua2V5cztcclxuICB2YXIgYXJyYXlFbnRyaWVzID0gQXJyYXlJdGVyYXRvcnMuZW50cmllcztcclxuICB2YXIgYXJyYXlMYXN0SW5kZXhPZiA9IEFycmF5UHJvdG8ubGFzdEluZGV4T2Y7XHJcbiAgdmFyIGFycmF5UmVkdWNlID0gQXJyYXlQcm90by5yZWR1Y2U7XHJcbiAgdmFyIGFycmF5UmVkdWNlUmlnaHQgPSBBcnJheVByb3RvLnJlZHVjZVJpZ2h0O1xyXG4gIHZhciBhcnJheUpvaW4gPSBBcnJheVByb3RvLmpvaW47XHJcbiAgdmFyIGFycmF5U29ydCA9IEFycmF5UHJvdG8uc29ydDtcclxuICB2YXIgYXJyYXlTbGljZSA9IEFycmF5UHJvdG8uc2xpY2U7XHJcbiAgdmFyIGFycmF5VG9TdHJpbmcgPSBBcnJheVByb3RvLnRvU3RyaW5nO1xyXG4gIHZhciBhcnJheVRvTG9jYWxlU3RyaW5nID0gQXJyYXlQcm90by50b0xvY2FsZVN0cmluZztcclxuICB2YXIgSVRFUkFUT1IgPSB3a3MoJ2l0ZXJhdG9yJyk7XHJcbiAgdmFyIFRBRyA9IHdrcygndG9TdHJpbmdUYWcnKTtcclxuICB2YXIgVFlQRURfQ09OU1RSVUNUT1IgPSB1aWQoJ3R5cGVkX2NvbnN0cnVjdG9yJyk7XHJcbiAgdmFyIERFRl9DT05TVFJVQ1RPUiA9IHVpZCgnZGVmX2NvbnN0cnVjdG9yJyk7XHJcbiAgdmFyIEFMTF9DT05TVFJVQ1RPUlMgPSAkdHlwZWQuQ09OU1RSO1xyXG4gIHZhciBUWVBFRF9BUlJBWSA9ICR0eXBlZC5UWVBFRDtcclxuICB2YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xyXG4gIHZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XHJcblxyXG4gIHZhciAkbWFwID0gY3JlYXRlQXJyYXlNZXRob2QoMSwgZnVuY3Rpb24gKE8sIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGFsbG9jYXRlKHNwZWNpZXNDb25zdHJ1Y3RvcihPLCBPW0RFRl9DT05TVFJVQ1RPUl0pLCBsZW5ndGgpO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgTElUVExFX0VORElBTiA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5ldyBVaW50MTZBcnJheShbMV0pLmJ1ZmZlcilbMF0gPT09IDE7XHJcbiAgfSk7XHJcblxyXG4gIHZhciBGT1JDRURfU0VUID0gISFVaW50OEFycmF5ICYmICEhVWludDhBcnJheVtQUk9UT1RZUEVdLnNldCAmJiBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICBuZXcgVWludDhBcnJheSgxKS5zZXQoe30pO1xyXG4gIH0pO1xyXG5cclxuICB2YXIgdG9PZmZzZXQgPSBmdW5jdGlvbiAoaXQsIEJZVEVTKSB7XHJcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGl0KTtcclxuICAgIGlmIChvZmZzZXQgPCAwIHx8IG9mZnNldCAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XHJcbiAgICByZXR1cm4gb2Zmc2V0O1xyXG4gIH07XHJcblxyXG4gIHZhciB2YWxpZGF0ZSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gICAgaWYgKGlzT2JqZWN0KGl0KSAmJiBUWVBFRF9BUlJBWSBpbiBpdCkgcmV0dXJuIGl0O1xyXG4gICAgdGhyb3cgVHlwZUVycm9yKGl0ICsgJyBpcyBub3QgYSB0eXBlZCBhcnJheSEnKTtcclxuICB9O1xyXG5cclxuICB2YXIgYWxsb2NhdGUgPSBmdW5jdGlvbiAoQywgbGVuZ3RoKSB7XHJcbiAgICBpZiAoIShpc09iamVjdChDKSAmJiBUWVBFRF9DT05TVFJVQ1RPUiBpbiBDKSkge1xyXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0l0IGlzIG5vdCBhIHR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIScpO1xyXG4gICAgfSByZXR1cm4gbmV3IEMobGVuZ3RoKTtcclxuICB9O1xyXG5cclxuICB2YXIgc3BlY2llc0Zyb21MaXN0ID0gZnVuY3Rpb24gKE8sIGxpc3QpIHtcclxuICAgIHJldHVybiBmcm9tTGlzdChzcGVjaWVzQ29uc3RydWN0b3IoTywgT1tERUZfQ09OU1RSVUNUT1JdKSwgbGlzdCk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIGZyb21MaXN0ID0gZnVuY3Rpb24gKEMsIGxpc3QpIHtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICB2YXIgbGVuZ3RoID0gbGlzdC5sZW5ndGg7XHJcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUoQywgbGVuZ3RoKTtcclxuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGxpc3RbaW5kZXgrK107XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH07XHJcblxyXG4gIHZhciBhZGRHZXR0ZXIgPSBmdW5jdGlvbiAoaXQsIGtleSwgaW50ZXJuYWwpIHtcclxuICAgIGRQKGl0LCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kW2ludGVybmFsXTsgfSB9KTtcclxuICB9O1xyXG5cclxuICB2YXIgJGZyb20gPSBmdW5jdGlvbiBmcm9tKHNvdXJjZSAvKiAsIG1hcGZuLCB0aGlzQXJnICovKSB7XHJcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHNvdXJjZSk7XHJcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgbWFwZm4gPSBhTGVuID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZDtcclxuICAgIHZhciBtYXBwaW5nID0gbWFwZm4gIT09IHVuZGVmaW5lZDtcclxuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XHJcbiAgICB2YXIgaSwgbGVuZ3RoLCB2YWx1ZXMsIHJlc3VsdCwgc3RlcCwgaXRlcmF0b3I7XHJcbiAgICBpZiAoaXRlckZuICE9IHVuZGVmaW5lZCAmJiAhaXNBcnJheUl0ZXIoaXRlckZuKSkge1xyXG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHZhbHVlcyA9IFtdLCBpID0gMDsgIShzdGVwID0gaXRlcmF0b3IubmV4dCgpKS5kb25lOyBpKyspIHtcclxuICAgICAgICB2YWx1ZXMucHVzaChzdGVwLnZhbHVlKTtcclxuICAgICAgfSBPID0gdmFsdWVzO1xyXG4gICAgfVxyXG4gICAgaWYgKG1hcHBpbmcgJiYgYUxlbiA+IDIpIG1hcGZuID0gY3R4KG1hcGZuLCBhcmd1bWVudHNbMl0sIDIpO1xyXG4gICAgZm9yIChpID0gMCwgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpLCByZXN1bHQgPSBhbGxvY2F0ZSh0aGlzLCBsZW5ndGgpOyBsZW5ndGggPiBpOyBpKyspIHtcclxuICAgICAgcmVzdWx0W2ldID0gbWFwcGluZyA/IG1hcGZuKE9baV0sIGkpIDogT1tpXTtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxuXHJcbiAgdmFyICRvZiA9IGZ1bmN0aW9uIG9mKC8qIC4uLml0ZW1zICovKSB7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgcmVzdWx0ID0gYWxsb2NhdGUodGhpcywgbGVuZ3RoKTtcclxuICAgIHdoaWxlIChsZW5ndGggPiBpbmRleCkgcmVzdWx0W2luZGV4XSA9IGFyZ3VtZW50c1tpbmRleCsrXTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxuXHJcbiAgLy8gaU9TIFNhZmFyaSA2LnggZmFpbHMgaGVyZVxyXG4gIHZhciBUT19MT0NBTEVfQlVHID0gISFVaW50OEFycmF5ICYmIGZhaWxzKGZ1bmN0aW9uICgpIHsgYXJyYXlUb0xvY2FsZVN0cmluZy5jYWxsKG5ldyBVaW50OEFycmF5KDEpKTsgfSk7XHJcblxyXG4gIHZhciAkdG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b0xvY2FsZVN0cmluZygpIHtcclxuICAgIHJldHVybiBhcnJheVRvTG9jYWxlU3RyaW5nLmFwcGx5KFRPX0xPQ0FMRV9CVUcgPyBhcnJheVNsaWNlLmNhbGwodmFsaWRhdGUodGhpcykpIDogdmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XHJcbiAgfTtcclxuXHJcbiAgdmFyIHByb3RvID0ge1xyXG4gICAgY29weVdpdGhpbjogZnVuY3Rpb24gY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0IC8qICwgZW5kICovKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUNvcHlXaXRoaW4uY2FsbCh2YWxpZGF0ZSh0aGlzKSwgdGFyZ2V0LCBzdGFydCwgYXJndW1lbnRzLmxlbmd0aCA+IDIgPyBhcmd1bWVudHNbMl0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgICByZXR1cm4gYXJyYXlFdmVyeSh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIGZpbGw6IGZ1bmN0aW9uIGZpbGwodmFsdWUgLyogLCBzdGFydCwgZW5kICovKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcclxuICAgICAgcmV0dXJuIGFycmF5RmlsbC5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcclxuICAgIH0sXHJcbiAgICBmaWx0ZXI6IGZ1bmN0aW9uIGZpbHRlcihjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgICByZXR1cm4gc3BlY2llc0Zyb21MaXN0KHRoaXMsIGFycmF5RmlsdGVyKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLFxyXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKSk7XHJcbiAgICB9LFxyXG4gICAgZmluZDogZnVuY3Rpb24gZmluZChwcmVkaWNhdGUgLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUZpbmQodmFsaWRhdGUodGhpcyksIHByZWRpY2F0ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIGZpbmRJbmRleDogZnVuY3Rpb24gZmluZEluZGV4KHByZWRpY2F0ZSAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgICAgcmV0dXJuIGFycmF5RmluZEluZGV4KHZhbGlkYXRlKHRoaXMpLCBwcmVkaWNhdGUsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBmb3JFYWNoOiBmdW5jdGlvbiBmb3JFYWNoKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICAgIGFycmF5Rm9yRWFjaCh2YWxpZGF0ZSh0aGlzKSwgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gICAgfSxcclxuICAgIGluZGV4T2Y6IGZ1bmN0aW9uIGluZGV4T2Yoc2VhcmNoRWxlbWVudCAvKiAsIGZyb21JbmRleCAqLykge1xyXG4gICAgICByZXR1cm4gYXJyYXlJbmRleE9mKHZhbGlkYXRlKHRoaXMpLCBzZWFyY2hFbGVtZW50LCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgaW5jbHVkZXM6IGZ1bmN0aW9uIGluY2x1ZGVzKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHtcclxuICAgICAgcmV0dXJuIGFycmF5SW5jbHVkZXModmFsaWRhdGUodGhpcyksIHNlYXJjaEVsZW1lbnQsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICAgIH0sXHJcbiAgICBqb2luOiBmdW5jdGlvbiBqb2luKHNlcGFyYXRvcikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgICAgIHJldHVybiBhcnJheUpvaW4uYXBwbHkodmFsaWRhdGUodGhpcyksIGFyZ3VtZW50cyk7XHJcbiAgICB9LFxyXG4gICAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggKi8pIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgICByZXR1cm4gYXJyYXlMYXN0SW5kZXhPZi5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcclxuICAgIH0sXHJcbiAgICBtYXA6IGZ1bmN0aW9uIG1hcChtYXBmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgICAgcmV0dXJuICRtYXAodmFsaWRhdGUodGhpcyksIG1hcGZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgcmVkdWNlOiBmdW5jdGlvbiByZWR1Y2UoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZS5hcHBseSh2YWxpZGF0ZSh0aGlzKSwgYXJndW1lbnRzKTtcclxuICAgIH0sXHJcbiAgICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgICAgIHJldHVybiBhcnJheVJlZHVjZVJpZ2h0LmFwcGx5KHZhbGlkYXRlKHRoaXMpLCBhcmd1bWVudHMpO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XHJcbiAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgdmFyIGxlbmd0aCA9IHZhbGlkYXRlKHRoYXQpLmxlbmd0aDtcclxuICAgICAgdmFyIG1pZGRsZSA9IE1hdGguZmxvb3IobGVuZ3RoIC8gMik7XHJcbiAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgIHZhciB2YWx1ZTtcclxuICAgICAgd2hpbGUgKGluZGV4IDwgbWlkZGxlKSB7XHJcbiAgICAgICAgdmFsdWUgPSB0aGF0W2luZGV4XTtcclxuICAgICAgICB0aGF0W2luZGV4KytdID0gdGhhdFstLWxlbmd0aF07XHJcbiAgICAgICAgdGhhdFtsZW5ndGhdID0gdmFsdWU7XHJcbiAgICAgIH0gcmV0dXJuIHRoYXQ7XHJcbiAgICB9LFxyXG4gICAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgICByZXR1cm4gYXJyYXlTb21lKHZhbGlkYXRlKHRoaXMpLCBjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCk7XHJcbiAgICB9LFxyXG4gICAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcclxuICAgICAgcmV0dXJuIGFycmF5U29ydC5jYWxsKHZhbGlkYXRlKHRoaXMpLCBjb21wYXJlZm4pO1xyXG4gICAgfSxcclxuICAgIHN1YmFycmF5OiBmdW5jdGlvbiBzdWJhcnJheShiZWdpbiwgZW5kKSB7XHJcbiAgICAgIHZhciBPID0gdmFsaWRhdGUodGhpcyk7XHJcbiAgICAgIHZhciBsZW5ndGggPSBPLmxlbmd0aDtcclxuICAgICAgdmFyICRiZWdpbiA9IHRvQWJzb2x1dGVJbmRleChiZWdpbiwgbGVuZ3RoKTtcclxuICAgICAgcmV0dXJuIG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKE8sIE9bREVGX0NPTlNUUlVDVE9SXSkpKFxyXG4gICAgICAgIE8uYnVmZmVyLFxyXG4gICAgICAgIE8uYnl0ZU9mZnNldCArICRiZWdpbiAqIE8uQllURVNfUEVSX0VMRU1FTlQsXHJcbiAgICAgICAgdG9MZW5ndGgoKGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogdG9BYnNvbHV0ZUluZGV4KGVuZCwgbGVuZ3RoKSkgLSAkYmVnaW4pXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgdmFyICRzbGljZSA9IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcclxuICAgIHJldHVybiBzcGVjaWVzRnJvbUxpc3QodGhpcywgYXJyYXlTbGljZS5jYWxsKHZhbGlkYXRlKHRoaXMpLCBzdGFydCwgZW5kKSk7XHJcbiAgfTtcclxuXHJcbiAgdmFyICRzZXQgPSBmdW5jdGlvbiBzZXQoYXJyYXlMaWtlIC8qICwgb2Zmc2V0ICovKSB7XHJcbiAgICB2YWxpZGF0ZSh0aGlzKTtcclxuICAgIHZhciBvZmZzZXQgPSB0b09mZnNldChhcmd1bWVudHNbMV0sIDEpO1xyXG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoO1xyXG4gICAgdmFyIHNyYyA9IHRvT2JqZWN0KGFycmF5TGlrZSk7XHJcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgoc3JjLmxlbmd0aCk7XHJcbiAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgaWYgKGxlbiArIG9mZnNldCA+IGxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xyXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuKSB0aGlzW29mZnNldCArIGluZGV4XSA9IHNyY1tpbmRleCsrXTtcclxuICB9O1xyXG5cclxuICB2YXIgJGl0ZXJhdG9ycyA9IHtcclxuICAgIGVudHJpZXM6IGZ1bmN0aW9uIGVudHJpZXMoKSB7XHJcbiAgICAgIHJldHVybiBhcnJheUVudHJpZXMuY2FsbCh2YWxpZGF0ZSh0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAga2V5czogZnVuY3Rpb24ga2V5cygpIHtcclxuICAgICAgcmV0dXJuIGFycmF5S2V5cy5jYWxsKHZhbGlkYXRlKHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICB2YWx1ZXM6IGZ1bmN0aW9uIHZhbHVlcygpIHtcclxuICAgICAgcmV0dXJuIGFycmF5VmFsdWVzLmNhbGwodmFsaWRhdGUodGhpcykpO1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIHZhciBpc1RBSW5kZXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcclxuICAgIHJldHVybiBpc09iamVjdCh0YXJnZXQpXHJcbiAgICAgICYmIHRhcmdldFtUWVBFRF9BUlJBWV1cclxuICAgICAgJiYgdHlwZW9mIGtleSAhPSAnc3ltYm9sJ1xyXG4gICAgICAmJiBrZXkgaW4gdGFyZ2V0XHJcbiAgICAgICYmIFN0cmluZygra2V5KSA9PSBTdHJpbmcoa2V5KTtcclxuICB9O1xyXG4gIHZhciAkZ2V0RGVzYyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkge1xyXG4gICAgcmV0dXJuIGlzVEFJbmRleCh0YXJnZXQsIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSkpXHJcbiAgICAgID8gcHJvcGVydHlEZXNjKDIsIHRhcmdldFtrZXldKVxyXG4gICAgICA6IGdPUEQodGFyZ2V0LCBrZXkpO1xyXG4gIH07XHJcbiAgdmFyICRzZXREZXNjID0gZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIGlmIChpc1RBSW5kZXgodGFyZ2V0LCBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpKVxyXG4gICAgICAmJiBpc09iamVjdChkZXNjKVxyXG4gICAgICAmJiBoYXMoZGVzYywgJ3ZhbHVlJylcclxuICAgICAgJiYgIWhhcyhkZXNjLCAnZ2V0JylcclxuICAgICAgJiYgIWhhcyhkZXNjLCAnc2V0JylcclxuICAgICAgLy8gVE9ETzogYWRkIHZhbGlkYXRpb24gZGVzY3JpcHRvciB3L28gY2FsbGluZyBhY2Nlc3NvcnNcclxuICAgICAgJiYgIWRlc2MuY29uZmlndXJhYmxlXHJcbiAgICAgICYmICghaGFzKGRlc2MsICd3cml0YWJsZScpIHx8IGRlc2Mud3JpdGFibGUpXHJcbiAgICAgICYmICghaGFzKGRlc2MsICdlbnVtZXJhYmxlJykgfHwgZGVzYy5lbnVtZXJhYmxlKVxyXG4gICAgKSB7XHJcbiAgICAgIHRhcmdldFtrZXldID0gZGVzYy52YWx1ZTtcclxuICAgICAgcmV0dXJuIHRhcmdldDtcclxuICAgIH0gcmV0dXJuIGRQKHRhcmdldCwga2V5LCBkZXNjKTtcclxuICB9O1xyXG5cclxuICBpZiAoIUFMTF9DT05TVFJVQ1RPUlMpIHtcclxuICAgICRHT1BELmYgPSAkZ2V0RGVzYztcclxuICAgICREUC5mID0gJHNldERlc2M7XHJcbiAgfVxyXG5cclxuICAkZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFBTExfQ09OU1RSVUNUT1JTLCAnT2JqZWN0Jywge1xyXG4gICAgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOiAkZ2V0RGVzYyxcclxuICAgIGRlZmluZVByb3BlcnR5OiAkc2V0RGVzY1xyXG4gIH0pO1xyXG5cclxuICBpZiAoZmFpbHMoZnVuY3Rpb24gKCkgeyBhcnJheVRvU3RyaW5nLmNhbGwoe30pOyB9KSkge1xyXG4gICAgYXJyYXlUb1N0cmluZyA9IGFycmF5VG9Mb2NhbGVTdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgICAgcmV0dXJuIGFycmF5Sm9pbi5jYWxsKHRoaXMpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHZhciAkVHlwZWRBcnJheVByb3RvdHlwZSQgPSByZWRlZmluZUFsbCh7fSwgcHJvdG8pO1xyXG4gIHJlZGVmaW5lQWxsKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJGl0ZXJhdG9ycyk7XHJcbiAgaGlkZSgkVHlwZWRBcnJheVByb3RvdHlwZSQsIElURVJBVE9SLCAkaXRlcmF0b3JzLnZhbHVlcyk7XHJcbiAgcmVkZWZpbmVBbGwoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCB7XHJcbiAgICBzbGljZTogJHNsaWNlLFxyXG4gICAgc2V0OiAkc2V0LFxyXG4gICAgY29uc3RydWN0b3I6IGZ1bmN0aW9uICgpIHsgLyogbm9vcCAqLyB9LFxyXG4gICAgdG9TdHJpbmc6IGFycmF5VG9TdHJpbmcsXHJcbiAgICB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nXHJcbiAgfSk7XHJcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J1ZmZlcicsICdiJyk7XHJcbiAgYWRkR2V0dGVyKCRUeXBlZEFycmF5UHJvdG90eXBlJCwgJ2J5dGVPZmZzZXQnLCAnbycpO1xyXG4gIGFkZEdldHRlcigkVHlwZWRBcnJheVByb3RvdHlwZSQsICdieXRlTGVuZ3RoJywgJ2wnKTtcclxuICBhZGRHZXR0ZXIoJFR5cGVkQXJyYXlQcm90b3R5cGUkLCAnbGVuZ3RoJywgJ2UnKTtcclxuICBkUCgkVHlwZWRBcnJheVByb3RvdHlwZSQsIFRBRywge1xyXG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW1RZUEVEX0FSUkFZXTsgfVxyXG4gIH0pO1xyXG5cclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbWF4LXN0YXRlbWVudHNcclxuICBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVksIEJZVEVTLCB3cmFwcGVyLCBDTEFNUEVEKSB7XHJcbiAgICBDTEFNUEVEID0gISFDTEFNUEVEO1xyXG4gICAgdmFyIE5BTUUgPSBLRVkgKyAoQ0xBTVBFRCA/ICdDbGFtcGVkJyA6ICcnKSArICdBcnJheSc7XHJcbiAgICB2YXIgR0VUVEVSID0gJ2dldCcgKyBLRVk7XHJcbiAgICB2YXIgU0VUVEVSID0gJ3NldCcgKyBLRVk7XHJcbiAgICB2YXIgVHlwZWRBcnJheSA9IGdsb2JhbFtOQU1FXTtcclxuICAgIHZhciBCYXNlID0gVHlwZWRBcnJheSB8fCB7fTtcclxuICAgIHZhciBUQUMgPSBUeXBlZEFycmF5ICYmIGdldFByb3RvdHlwZU9mKFR5cGVkQXJyYXkpO1xyXG4gICAgdmFyIEZPUkNFRCA9ICFUeXBlZEFycmF5IHx8ICEkdHlwZWQuQUJWO1xyXG4gICAgdmFyIE8gPSB7fTtcclxuICAgIHZhciBUeXBlZEFycmF5UHJvdG90eXBlID0gVHlwZWRBcnJheSAmJiBUeXBlZEFycmF5W1BST1RPVFlQRV07XHJcbiAgICB2YXIgZ2V0dGVyID0gZnVuY3Rpb24gKHRoYXQsIGluZGV4KSB7XHJcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcclxuICAgICAgcmV0dXJuIGRhdGEudltHRVRURVJdKGluZGV4ICogQllURVMgKyBkYXRhLm8sIExJVFRMRV9FTkRJQU4pO1xyXG4gICAgfTtcclxuICAgIHZhciBzZXR0ZXIgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgsIHZhbHVlKSB7XHJcbiAgICAgIHZhciBkYXRhID0gdGhhdC5fZDtcclxuICAgICAgaWYgKENMQU1QRUQpIHZhbHVlID0gKHZhbHVlID0gTWF0aC5yb3VuZCh2YWx1ZSkpIDwgMCA/IDAgOiB2YWx1ZSA+IDB4ZmYgPyAweGZmIDogdmFsdWUgJiAweGZmO1xyXG4gICAgICBkYXRhLnZbU0VUVEVSXShpbmRleCAqIEJZVEVTICsgZGF0YS5vLCB2YWx1ZSwgTElUVExFX0VORElBTik7XHJcbiAgICB9O1xyXG4gICAgdmFyIGFkZEVsZW1lbnQgPSBmdW5jdGlvbiAodGhhdCwgaW5kZXgpIHtcclxuICAgICAgZFAodGhhdCwgaW5kZXgsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgIHJldHVybiBnZXR0ZXIodGhpcywgaW5kZXgpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgIHJldHVybiBzZXR0ZXIodGhpcywgaW5kZXgsIHZhbHVlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgaWYgKEZPUkNFRCkge1xyXG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xyXG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSwgJ19kJyk7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgICB2YXIgb2Zmc2V0ID0gMDtcclxuICAgICAgICB2YXIgYnVmZmVyLCBieXRlTGVuZ3RoLCBsZW5ndGgsIGtsYXNzO1xyXG4gICAgICAgIGlmICghaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgICAgIGxlbmd0aCA9IHRvSW5kZXgoZGF0YSk7XHJcbiAgICAgICAgICBieXRlTGVuZ3RoID0gbGVuZ3RoICogQllURVM7XHJcbiAgICAgICAgICBidWZmZXIgPSBuZXcgJEFycmF5QnVmZmVyKGJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mICRBcnJheUJ1ZmZlciB8fCAoa2xhc3MgPSBjbGFzc29mKGRhdGEpKSA9PSBBUlJBWV9CVUZGRVIgfHwga2xhc3MgPT0gU0hBUkVEX0JVRkZFUikge1xyXG4gICAgICAgICAgYnVmZmVyID0gZGF0YTtcclxuICAgICAgICAgIG9mZnNldCA9IHRvT2Zmc2V0KCRvZmZzZXQsIEJZVEVTKTtcclxuICAgICAgICAgIHZhciAkbGVuID0gZGF0YS5ieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgaWYgKCRsZW5ndGggPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBpZiAoJGxlbiAlIEJZVEVTKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0xFTkdUSCk7XHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSAkbGVuIC0gb2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCA8IDApIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGJ5dGVMZW5ndGggPSB0b0xlbmd0aCgkbGVuZ3RoKSAqIEJZVEVTO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZUxlbmd0aCArIG9mZnNldCA+ICRsZW4pIHRocm93IFJhbmdlRXJyb3IoV1JPTkdfTEVOR1RIKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGxlbmd0aCA9IGJ5dGVMZW5ndGggLyBCWVRFUztcclxuICAgICAgICB9IGVsc2UgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHtcclxuICAgICAgICAgIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuICRmcm9tLmNhbGwoVHlwZWRBcnJheSwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGhpZGUodGhhdCwgJ19kJywge1xyXG4gICAgICAgICAgYjogYnVmZmVyLFxyXG4gICAgICAgICAgbzogb2Zmc2V0LFxyXG4gICAgICAgICAgbDogYnl0ZUxlbmd0aCxcclxuICAgICAgICAgIGU6IGxlbmd0aCxcclxuICAgICAgICAgIHY6IG5ldyAkRGF0YVZpZXcoYnVmZmVyKVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkgYWRkRWxlbWVudCh0aGF0LCBpbmRleCsrKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFR5cGVkQXJyYXlQcm90b3R5cGUgPSBUeXBlZEFycmF5W1BST1RPVFlQRV0gPSBjcmVhdGUoJFR5cGVkQXJyYXlQcm90b3R5cGUkKTtcclxuICAgICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCAnY29uc3RydWN0b3InLCBUeXBlZEFycmF5KTtcclxuICAgIH0gZWxzZSBpZiAoIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgICAgVHlwZWRBcnJheSgxKTtcclxuICAgIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgIG5ldyBUeXBlZEFycmF5KC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICAgIH0pIHx8ICEkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikge1xyXG4gICAgICBuZXcgVHlwZWRBcnJheSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgICBuZXcgVHlwZWRBcnJheShudWxsKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICAgICAgbmV3IFR5cGVkQXJyYXkoMS41KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICAgICAgbmV3IFR5cGVkQXJyYXkoaXRlcik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICB9LCB0cnVlKSkge1xyXG4gICAgICBUeXBlZEFycmF5ID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgZGF0YSwgJG9mZnNldCwgJGxlbmd0aCkge1xyXG4gICAgICAgIGFuSW5zdGFuY2UodGhhdCwgVHlwZWRBcnJheSwgTkFNRSk7XHJcbiAgICAgICAgdmFyIGtsYXNzO1xyXG4gICAgICAgIC8vIGB3c2AgbW9kdWxlIGJ1ZywgdGVtcG9yYXJpbHkgcmVtb3ZlIHZhbGlkYXRpb24gbGVuZ3RoIGZvciBVaW50OEFycmF5XHJcbiAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3dlYnNvY2tldHMvd3MvcHVsbC82NDVcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGRhdGEpKSByZXR1cm4gbmV3IEJhc2UodG9JbmRleChkYXRhKSk7XHJcbiAgICAgICAgaWYgKGRhdGEgaW5zdGFuY2VvZiAkQXJyYXlCdWZmZXIgfHwgKGtsYXNzID0gY2xhc3NvZihkYXRhKSkgPT0gQVJSQVlfQlVGRkVSIHx8IGtsYXNzID09IFNIQVJFRF9CVUZGRVIpIHtcclxuICAgICAgICAgIHJldHVybiAkbGVuZ3RoICE9PSB1bmRlZmluZWRcclxuICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUyksICRsZW5ndGgpXHJcbiAgICAgICAgICAgIDogJG9mZnNldCAhPT0gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgPyBuZXcgQmFzZShkYXRhLCB0b09mZnNldCgkb2Zmc2V0LCBCWVRFUykpXHJcbiAgICAgICAgICAgICAgOiBuZXcgQmFzZShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKFRZUEVEX0FSUkFZIGluIGRhdGEpIHJldHVybiBmcm9tTGlzdChUeXBlZEFycmF5LCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gJGZyb20uY2FsbChUeXBlZEFycmF5LCBkYXRhKTtcclxuICAgICAgfSk7XHJcbiAgICAgIGFycmF5Rm9yRWFjaChUQUMgIT09IEZ1bmN0aW9uLnByb3RvdHlwZSA/IGdPUE4oQmFzZSkuY29uY2F0KGdPUE4oVEFDKSkgOiBnT1BOKEJhc2UpLCBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgaWYgKCEoa2V5IGluIFR5cGVkQXJyYXkpKSBoaWRlKFR5cGVkQXJyYXksIGtleSwgQmFzZVtrZXldKTtcclxuICAgICAgfSk7XHJcbiAgICAgIFR5cGVkQXJyYXlbUFJPVE9UWVBFXSA9IFR5cGVkQXJyYXlQcm90b3R5cGU7XHJcbiAgICAgIGlmICghTElCUkFSWSkgVHlwZWRBcnJheVByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFR5cGVkQXJyYXk7XHJcbiAgICB9XHJcbiAgICB2YXIgJG5hdGl2ZUl0ZXJhdG9yID0gVHlwZWRBcnJheVByb3RvdHlwZVtJVEVSQVRPUl07XHJcbiAgICB2YXIgQ09SUkVDVF9JVEVSX05BTUUgPSAhISRuYXRpdmVJdGVyYXRvclxyXG4gICAgICAmJiAoJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gJ3ZhbHVlcycgfHwgJG5hdGl2ZUl0ZXJhdG9yLm5hbWUgPT0gdW5kZWZpbmVkKTtcclxuICAgIHZhciAkaXRlcmF0b3IgPSAkaXRlcmF0b3JzLnZhbHVlcztcclxuICAgIGhpZGUoVHlwZWRBcnJheSwgVFlQRURfQ09OU1RSVUNUT1IsIHRydWUpO1xyXG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBUWVBFRF9BUlJBWSwgTkFNRSk7XHJcbiAgICBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIFZJRVcsIHRydWUpO1xyXG4gICAgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBERUZfQ09OU1RSVUNUT1IsIFR5cGVkQXJyYXkpO1xyXG5cclxuICAgIGlmIChDTEFNUEVEID8gbmV3IFR5cGVkQXJyYXkoMSlbVEFHXSAhPSBOQU1FIDogIShUQUcgaW4gVHlwZWRBcnJheVByb3RvdHlwZSkpIHtcclxuICAgICAgZFAoVHlwZWRBcnJheVByb3RvdHlwZSwgVEFHLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOQU1FOyB9XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIE9bTkFNRV0gPSBUeXBlZEFycmF5O1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKFR5cGVkQXJyYXkgIT0gQmFzZSksIE8pO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5TLCBOQU1FLCB7XHJcbiAgICAgIEJZVEVTX1BFUl9FTEVNRU5UOiBCWVRFU1xyXG4gICAgfSk7XHJcblxyXG4gICAgJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiBmYWlscyhmdW5jdGlvbiAoKSB7IEJhc2Uub2YuY2FsbChUeXBlZEFycmF5LCAxKTsgfSksIE5BTUUsIHtcclxuICAgICAgZnJvbTogJGZyb20sXHJcbiAgICAgIG9mOiAkb2ZcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghKEJZVEVTX1BFUl9FTEVNRU5UIGluIFR5cGVkQXJyYXlQcm90b3R5cGUpKSBoaWRlKFR5cGVkQXJyYXlQcm90b3R5cGUsIEJZVEVTX1BFUl9FTEVNRU5ULCBCWVRFUyk7XHJcblxyXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAsIE5BTUUsIHByb3RvKTtcclxuXHJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogRk9SQ0VEX1NFVCwgTkFNRSwgeyBzZXQ6ICRzZXQgfSk7XHJcblxyXG4gICAgJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhQ09SUkVDVF9JVEVSX05BTUUsIE5BTUUsICRpdGVyYXRvcnMpO1xyXG5cclxuICAgIGlmICghTElCUkFSWSAmJiBUeXBlZEFycmF5UHJvdG90eXBlLnRvU3RyaW5nICE9IGFycmF5VG9TdHJpbmcpIFR5cGVkQXJyYXlQcm90b3R5cGUudG9TdHJpbmcgPSBhcnJheVRvU3RyaW5nO1xyXG5cclxuICAgICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICBuZXcgVHlwZWRBcnJheSgxKS5zbGljZSgpO1xyXG4gICAgfSksIE5BTUUsIHsgc2xpY2U6ICRzbGljZSB9KTtcclxuXHJcbiAgICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHJldHVybiBbMSwgMl0udG9Mb2NhbGVTdHJpbmcoKSAhPSBuZXcgVHlwZWRBcnJheShbMSwgMl0pLnRvTG9jYWxlU3RyaW5nKCk7XHJcbiAgICB9KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICBUeXBlZEFycmF5UHJvdG90eXBlLnRvTG9jYWxlU3RyaW5nLmNhbGwoWzEsIDJdKTtcclxuICAgIH0pKSwgTkFNRSwgeyB0b0xvY2FsZVN0cmluZzogJHRvTG9jYWxlU3RyaW5nIH0pO1xyXG5cclxuICAgIEl0ZXJhdG9yc1tOQU1FXSA9IENPUlJFQ1RfSVRFUl9OQU1FID8gJG5hdGl2ZUl0ZXJhdG9yIDogJGl0ZXJhdG9yO1xyXG4gICAgaWYgKCFMSUJSQVJZICYmICFDT1JSRUNUX0lURVJfTkFNRSkgaGlkZShUeXBlZEFycmF5UHJvdG90eXBlLCBJVEVSQVRPUiwgJGl0ZXJhdG9yKTtcclxuICB9O1xyXG59IGVsc2UgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XHJcbiIsInZhciBNYXAgPSByZXF1aXJlKCcuL2VzNi5tYXAnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4vX3NoYXJlZCcpKCdtZXRhZGF0YScpO1xyXG52YXIgc3RvcmUgPSBzaGFyZWQuc3RvcmUgfHwgKHNoYXJlZC5zdG9yZSA9IG5ldyAocmVxdWlyZSgnLi9lczYud2Vhay1tYXAnKSkoKSk7XHJcblxyXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSwgY3JlYXRlKSB7XHJcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XHJcbiAgaWYgKCF0YXJnZXRNZXRhZGF0YSkge1xyXG4gICAgaWYgKCFjcmVhdGUpIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICBzdG9yZS5zZXQodGFyZ2V0LCB0YXJnZXRNZXRhZGF0YSA9IG5ldyBNYXAoKSk7XHJcbiAgfVxyXG4gIHZhciBrZXlNZXRhZGF0YSA9IHRhcmdldE1ldGFkYXRhLmdldCh0YXJnZXRLZXkpO1xyXG4gIGlmICgha2V5TWV0YWRhdGEpIHtcclxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgdGFyZ2V0TWV0YWRhdGEuc2V0KHRhcmdldEtleSwga2V5TWV0YWRhdGEgPSBuZXcgTWFwKCkpO1xyXG4gIH0gcmV0dXJuIGtleU1ldGFkYXRhO1xyXG59O1xyXG52YXIgb3JkaW5hcnlIYXNPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xyXG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBtZXRhZGF0YU1hcC5oYXMoTWV0YWRhdGFLZXkpO1xyXG59O1xyXG52YXIgb3JkaW5hcnlHZXRPd25NZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoTywgUCwgZmFsc2UpO1xyXG4gIHJldHVybiBtZXRhZGF0YU1hcCA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogbWV0YWRhdGFNYXAuZ2V0KE1ldGFkYXRhS2V5KTtcclxufTtcclxudmFyIG9yZGluYXJ5RGVmaW5lT3duTWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE1ldGFkYXRhVmFsdWUsIE8sIFApIHtcclxuICBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwKE8sIFAsIHRydWUpLnNldChNZXRhZGF0YUtleSwgTWV0YWRhdGFWYWx1ZSk7XHJcbn07XHJcbnZhciBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHRhcmdldEtleSkge1xyXG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAodGFyZ2V0LCB0YXJnZXRLZXksIGZhbHNlKTtcclxuICB2YXIga2V5cyA9IFtdO1xyXG4gIGlmIChtZXRhZGF0YU1hcCkgbWV0YWRhdGFNYXAuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7IGtleXMucHVzaChrZXkpOyB9KTtcclxuICByZXR1cm4ga2V5cztcclxufTtcclxudmFyIHRvTWV0YUtleSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiBpdCA9PT0gdW5kZWZpbmVkIHx8IHR5cGVvZiBpdCA9PSAnc3ltYm9sJyA/IGl0IDogU3RyaW5nKGl0KTtcclxufTtcclxudmFyIGV4cCA9IGZ1bmN0aW9uIChPKSB7XHJcbiAgJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0JywgTyk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBzdG9yZTogc3RvcmUsXHJcbiAgbWFwOiBnZXRPckNyZWF0ZU1ldGFkYXRhTWFwLFxyXG4gIGhhczogb3JkaW5hcnlIYXNPd25NZXRhZGF0YSxcclxuICBnZXQ6IG9yZGluYXJ5R2V0T3duTWV0YWRhdGEsXHJcbiAgc2V0OiBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhLFxyXG4gIGtleXM6IG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzLFxyXG4gIGtleTogdG9NZXRhS2V5LFxyXG4gIGV4cDogZXhwXHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZmFsc2U7XHJcbiIsInZhciBNRVRBID0gcmVxdWlyZSgnLi9fdWlkJykoJ21ldGEnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyIHNldERlc2MgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xyXG52YXIgaWQgPSAwO1xyXG52YXIgaXNFeHRlbnNpYmxlID0gT2JqZWN0LmlzRXh0ZW5zaWJsZSB8fCBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIHRydWU7XHJcbn07XHJcbnZhciBGUkVFWkUgPSAhcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIGlzRXh0ZW5zaWJsZShPYmplY3QucHJldmVudEV4dGVuc2lvbnMoe30pKTtcclxufSk7XHJcbnZhciBzZXRNZXRhID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgc2V0RGVzYyhpdCwgTUVUQSwgeyB2YWx1ZToge1xyXG4gICAgaTogJ08nICsgKytpZCwgLy8gb2JqZWN0IElEXHJcbiAgICB3OiB7fSAgICAgICAgICAvLyB3ZWFrIGNvbGxlY3Rpb25zIElEc1xyXG4gIH0gfSk7XHJcbn07XHJcbnZhciBmYXN0S2V5ID0gZnVuY3Rpb24gKGl0LCBjcmVhdGUpIHtcclxuICAvLyByZXR1cm4gcHJpbWl0aXZlIHdpdGggcHJlZml4XHJcbiAgaWYgKCFpc09iamVjdChpdCkpIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCcgPyBpdCA6ICh0eXBlb2YgaXQgPT0gJ3N0cmluZycgPyAnUycgOiAnUCcpICsgaXQ7XHJcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XHJcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxyXG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gJ0YnO1xyXG4gICAgLy8gbm90IG5lY2Vzc2FyeSB0byBhZGQgbWV0YWRhdGFcclxuICAgIGlmICghY3JlYXRlKSByZXR1cm4gJ0UnO1xyXG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcclxuICAgIHNldE1ldGEoaXQpO1xyXG4gIC8vIHJldHVybiBvYmplY3QgSURcclxuICB9IHJldHVybiBpdFtNRVRBXS5pO1xyXG59O1xyXG52YXIgZ2V0V2VhayA9IGZ1bmN0aW9uIChpdCwgY3JlYXRlKSB7XHJcbiAgaWYgKCFoYXMoaXQsIE1FVEEpKSB7XHJcbiAgICAvLyBjYW4ndCBzZXQgbWV0YWRhdGEgdG8gdW5jYXVnaHQgZnJvemVuIG9iamVjdFxyXG4gICAgaWYgKCFpc0V4dGVuc2libGUoaXQpKSByZXR1cm4gdHJ1ZTtcclxuICAgIC8vIG5vdCBuZWNlc3NhcnkgdG8gYWRkIG1ldGFkYXRhXHJcbiAgICBpZiAoIWNyZWF0ZSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgLy8gYWRkIG1pc3NpbmcgbWV0YWRhdGFcclxuICAgIHNldE1ldGEoaXQpO1xyXG4gIC8vIHJldHVybiBoYXNoIHdlYWsgY29sbGVjdGlvbnMgSURzXHJcbiAgfSByZXR1cm4gaXRbTUVUQV0udztcclxufTtcclxuLy8gYWRkIG1ldGFkYXRhIG9uIGZyZWV6ZS1mYW1pbHkgbWV0aG9kcyBjYWxsaW5nXHJcbnZhciBvbkZyZWV6ZSA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIGlmIChGUkVFWkUgJiYgbWV0YS5ORUVEICYmIGlzRXh0ZW5zaWJsZShpdCkgJiYgIWhhcyhpdCwgTUVUQSkpIHNldE1ldGEoaXQpO1xyXG4gIHJldHVybiBpdDtcclxufTtcclxudmFyIG1ldGEgPSBtb2R1bGUuZXhwb3J0cyA9IHtcclxuICBLRVk6IE1FVEEsXHJcbiAgTkVFRDogZmFsc2UsXHJcbiAgZmFzdEtleTogZmFzdEtleSxcclxuICBnZXRXZWFrOiBnZXRXZWFrLFxyXG4gIG9uRnJlZXplOiBvbkZyZWV6ZVxyXG59O1xyXG4iLCIvLyAyMi4xLjMuMzEgQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXHJcbnZhciBVTlNDT1BBQkxFUyA9IHJlcXVpcmUoJy4vX3drcycpKCd1bnNjb3BhYmxlcycpO1xyXG52YXIgQXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcclxuaWYgKEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkgcmVxdWlyZSgnLi9faGlkZScpKEFycmF5UHJvdG8sIFVOU0NPUEFCTEVTLCB7fSk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gIEFycmF5UHJvdG9bVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGVudW1lcmFibGU6ICEoYml0bWFwICYgMSksXHJcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXHJcbiAgICB3cml0YWJsZTogIShiaXRtYXAgJiA0KSxcclxuICAgIHZhbHVlOiB2YWx1ZVxyXG4gIH07XHJcbn07XHJcbiIsInZhciBpZCA9IDA7XHJcbnZhciBweCA9IE1hdGgucmFuZG9tKCk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xyXG4gIHJldHVybiAnU3ltYm9sKCcuY29uY2F0KGtleSA9PT0gdW5kZWZpbmVkID8gJycgOiBrZXksICcpXycsICgrK2lkICsgcHgpLnRvU3RyaW5nKDM2KSk7XHJcbn07XHJcbiIsIi8vIDE5LjEuMi4xNCAvIDE1LjIuMy4xNCBPYmplY3Qua2V5cyhPKVxyXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xyXG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuL19lbnVtLWJ1Zy1rZXlzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5rZXlzIHx8IGZ1bmN0aW9uIGtleXMoTykge1xyXG4gIHJldHVybiAka2V5cyhPLCBlbnVtQnVnS2V5cyk7XHJcbn07XHJcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciBtYXggPSBNYXRoLm1heDtcclxudmFyIG1pbiA9IE1hdGgubWluO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XHJcbiAgaW5kZXggPSB0b0ludGVnZXIoaW5kZXgpO1xyXG4gIHJldHVybiBpbmRleCA8IDAgPyBtYXgoaW5kZXggKyBsZW5ndGgsIDApIDogbWluKGluZGV4LCBsZW5ndGgpO1xyXG59O1xyXG4iLCIvLyAxOS4xLjIuMiAvIDE1LjIuMy41IE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBkUHMgPSByZXF1aXJlKCcuL19vYmplY3QtZHBzJyk7XHJcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKTtcclxudmFyIElFX1BST1RPID0gcmVxdWlyZSgnLi9fc2hhcmVkLWtleScpKCdJRV9QUk9UTycpO1xyXG52YXIgRW1wdHkgPSBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH07XHJcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcclxuXHJcbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBpZnJhbWUgT2JqZWN0IHdpdGggY2xlYXJlZCBwcm90b3R5cGVcclxudmFyIGNyZWF0ZURpY3QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgLy8gVGhyYXNoLCB3YXN0ZSBhbmQgc29kb215OiBJRSBHQyBidWdcclxuICB2YXIgaWZyYW1lID0gcmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdpZnJhbWUnKTtcclxuICB2YXIgaSA9IGVudW1CdWdLZXlzLmxlbmd0aDtcclxuICB2YXIgbHQgPSAnPCc7XHJcbiAgdmFyIGd0ID0gJz4nO1xyXG4gIHZhciBpZnJhbWVEb2N1bWVudDtcclxuICBpZnJhbWUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICByZXF1aXJlKCcuL19odG1sJykuYXBwZW5kQ2hpbGQoaWZyYW1lKTtcclxuICBpZnJhbWUuc3JjID0gJ2phdmFzY3JpcHQ6JzsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zY3JpcHQtdXJsXHJcbiAgLy8gY3JlYXRlRGljdCA9IGlmcmFtZS5jb250ZW50V2luZG93Lk9iamVjdDtcclxuICAvLyBodG1sLnJlbW92ZUNoaWxkKGlmcmFtZSk7XHJcbiAgaWZyYW1lRG9jdW1lbnQgPSBpZnJhbWUuY29udGVudFdpbmRvdy5kb2N1bWVudDtcclxuICBpZnJhbWVEb2N1bWVudC5vcGVuKCk7XHJcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUobHQgKyAnc2NyaXB0JyArIGd0ICsgJ2RvY3VtZW50LkY9T2JqZWN0JyArIGx0ICsgJy9zY3JpcHQnICsgZ3QpO1xyXG4gIGlmcmFtZURvY3VtZW50LmNsb3NlKCk7XHJcbiAgY3JlYXRlRGljdCA9IGlmcmFtZURvY3VtZW50LkY7XHJcbiAgd2hpbGUgKGktLSkgZGVsZXRlIGNyZWF0ZURpY3RbUFJPVE9UWVBFXVtlbnVtQnVnS2V5c1tpXV07XHJcbiAgcmV0dXJuIGNyZWF0ZURpY3QoKTtcclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmNyZWF0ZSB8fCBmdW5jdGlvbiBjcmVhdGUoTywgUHJvcGVydGllcykge1xyXG4gIHZhciByZXN1bHQ7XHJcbiAgaWYgKE8gIT09IG51bGwpIHtcclxuICAgIEVtcHR5W1BST1RPVFlQRV0gPSBhbk9iamVjdChPKTtcclxuICAgIHJlc3VsdCA9IG5ldyBFbXB0eSgpO1xyXG4gICAgRW1wdHlbUFJPVE9UWVBFXSA9IG51bGw7XHJcbiAgICAvLyBhZGQgXCJfX3Byb3RvX19cIiBmb3IgT2JqZWN0LmdldFByb3RvdHlwZU9mIHBvbHlmaWxsXHJcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcclxuICB9IGVsc2UgcmVzdWx0ID0gY3JlYXRlRGljdCgpO1xyXG4gIHJldHVybiBQcm9wZXJ0aWVzID09PSB1bmRlZmluZWQgPyByZXN1bHQgOiBkUHMocmVzdWx0LCBQcm9wZXJ0aWVzKTtcclxufTtcclxuIiwiLy8gMTkuMS4yLjcgLyAxNS4yLjMuNCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhPKVxyXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cy1pbnRlcm5hbCcpO1xyXG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0tYnVnLWtleXMnKS5jb25jYXQoJ2xlbmd0aCcsICdwcm90b3R5cGUnKTtcclxuXHJcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xyXG4gIHJldHVybiAka2V5cyhPLCBoaWRkZW5LZXlzKTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xyXG52YXIgU1BFQ0lFUyA9IHJlcXVpcmUoJy4vX3drcycpKCdzcGVjaWVzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChLRVkpIHtcclxuICB2YXIgQyA9IGdsb2JhbFtLRVldO1xyXG4gIGlmIChERVNDUklQVE9SUyAmJiBDICYmICFDW1NQRUNJRVNdKSBkUC5mKEMsIFNQRUNJRVMsIHtcclxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfVxyXG4gIH0pO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgQ29uc3RydWN0b3IsIG5hbWUsIGZvcmJpZGRlbkZpZWxkKSB7XHJcbiAgaWYgKCEoaXQgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikgfHwgKGZvcmJpZGRlbkZpZWxkICE9PSB1bmRlZmluZWQgJiYgZm9yYmlkZGVuRmllbGQgaW4gaXQpKSB7XHJcbiAgICB0aHJvdyBUeXBlRXJyb3IobmFtZSArICc6IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xyXG4gIH0gcmV0dXJuIGl0O1xyXG59O1xyXG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBjYWxsID0gcmVxdWlyZSgnLi9faXRlci1jYWxsJyk7XHJcbnZhciBpc0FycmF5SXRlciA9IHJlcXVpcmUoJy4vX2lzLWFycmF5LWl0ZXInKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgZ2V0SXRlckZuID0gcmVxdWlyZSgnLi9jb3JlLmdldC1pdGVyYXRvci1tZXRob2QnKTtcclxudmFyIEJSRUFLID0ge307XHJcbnZhciBSRVRVUk4gPSB7fTtcclxudmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyYWJsZSwgZW50cmllcywgZm4sIHRoYXQsIElURVJBVE9SKSB7XHJcbiAgdmFyIGl0ZXJGbiA9IElURVJBVE9SID8gZnVuY3Rpb24gKCkgeyByZXR1cm4gaXRlcmFibGU7IH0gOiBnZXRJdGVyRm4oaXRlcmFibGUpO1xyXG4gIHZhciBmID0gY3R4KGZuLCB0aGF0LCBlbnRyaWVzID8gMiA6IDEpO1xyXG4gIHZhciBpbmRleCA9IDA7XHJcbiAgdmFyIGxlbmd0aCwgc3RlcCwgaXRlcmF0b3IsIHJlc3VsdDtcclxuICBpZiAodHlwZW9mIGl0ZXJGbiAhPSAnZnVuY3Rpb24nKSB0aHJvdyBUeXBlRXJyb3IoaXRlcmFibGUgKyAnIGlzIG5vdCBpdGVyYWJsZSEnKTtcclxuICAvLyBmYXN0IGNhc2UgZm9yIGFycmF5cyB3aXRoIGRlZmF1bHQgaXRlcmF0b3JcclxuICBpZiAoaXNBcnJheUl0ZXIoaXRlckZuKSkgZm9yIChsZW5ndGggPSB0b0xlbmd0aChpdGVyYWJsZS5sZW5ndGgpOyBsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xyXG4gICAgcmVzdWx0ID0gZW50cmllcyA/IGYoYW5PYmplY3Qoc3RlcCA9IGl0ZXJhYmxlW2luZGV4XSlbMF0sIHN0ZXBbMV0pIDogZihpdGVyYWJsZVtpbmRleF0pO1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XHJcbiAgfSBlbHNlIGZvciAoaXRlcmF0b3IgPSBpdGVyRm4uY2FsbChpdGVyYWJsZSk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTspIHtcclxuICAgIHJlc3VsdCA9IGNhbGwoaXRlcmF0b3IsIGYsIHN0ZXAudmFsdWUsIGVudHJpZXMpO1xyXG4gICAgaWYgKHJlc3VsdCA9PT0gQlJFQUsgfHwgcmVzdWx0ID09PSBSRVRVUk4pIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59O1xyXG5leHBvcnRzLkJSRUFLID0gQlJFQUs7XHJcbmV4cG9ydHMuUkVUVVJOID0gUkVUVVJOO1xyXG4iLCJ2YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuL19yZWRlZmluZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNyYywgc2FmZSkge1xyXG4gIGZvciAodmFyIGtleSBpbiBzcmMpIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzcmNba2V5XSwgc2FmZSk7XHJcbiAgcmV0dXJuIHRhcmdldDtcclxufTtcclxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0LCBUWVBFKSB7XHJcbiAgaWYgKCFpc09iamVjdChpdCkgfHwgaXQuX3QgIT09IFRZUEUpIHRocm93IFR5cGVFcnJvcignSW5jb21wYXRpYmxlIHJlY2VpdmVyLCAnICsgVFlQRSArICcgcmVxdWlyZWQhJyk7XHJcbiAgcmV0dXJuIGl0O1xyXG59O1xyXG4iLCJ2YXIgZGVmID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgdGFnLCBzdGF0KSB7XHJcbiAgaWYgKGl0ICYmICFoYXMoaXQgPSBzdGF0ID8gaXQgOiBpdC5wcm90b3R5cGUsIFRBRykpIGRlZihpdCwgVEFHLCB7IGNvbmZpZ3VyYWJsZTogdHJ1ZSwgdmFsdWU6IHRhZyB9KTtcclxufTtcclxuIiwiLy8gZ2V0dGluZyB0YWcgZnJvbSAxOS4xLjMuNiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nKClcclxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xyXG52YXIgVEFHID0gcmVxdWlyZSgnLi9fd2tzJykoJ3RvU3RyaW5nVGFnJyk7XHJcbi8vIEVTMyB3cm9uZyBoZXJlXHJcbnZhciBBUkcgPSBjb2YoZnVuY3Rpb24gKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID09ICdBcmd1bWVudHMnO1xyXG5cclxuLy8gZmFsbGJhY2sgZm9yIElFMTEgU2NyaXB0IEFjY2VzcyBEZW5pZWQgZXJyb3JcclxudmFyIHRyeUdldCA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiBpdFtrZXldO1xyXG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICB2YXIgTywgVCwgQjtcclxuICByZXR1cm4gaXQgPT09IHVuZGVmaW5lZCA/ICdVbmRlZmluZWQnIDogaXQgPT09IG51bGwgPyAnTnVsbCdcclxuICAgIC8vIEBAdG9TdHJpbmdUYWcgY2FzZVxyXG4gICAgOiB0eXBlb2YgKFQgPSB0cnlHZXQoTyA9IE9iamVjdChpdCksIFRBRykpID09ICdzdHJpbmcnID8gVFxyXG4gICAgLy8gYnVpbHRpblRhZyBjYXNlXHJcbiAgICA6IEFSRyA/IGNvZihPKVxyXG4gICAgLy8gRVMzIGFyZ3VtZW50cyBmYWxsYmFja1xyXG4gICAgOiAoQiA9IGNvZihPKSkgPT0gJ09iamVjdCcgJiYgdHlwZW9mIE8uY2FsbGVlID09ICdmdW5jdGlvbicgPyAnQXJndW1lbnRzJyA6IEI7XHJcbn07XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgc3BhY2VzID0gcmVxdWlyZSgnLi9fc3RyaW5nLXdzJyk7XHJcbnZhciBzcGFjZSA9ICdbJyArIHNwYWNlcyArICddJztcclxudmFyIG5vbiA9ICdcXHUyMDBiXFx1MDA4NSc7XHJcbnZhciBsdHJpbSA9IFJlZ0V4cCgnXicgKyBzcGFjZSArIHNwYWNlICsgJyonKTtcclxudmFyIHJ0cmltID0gUmVnRXhwKHNwYWNlICsgc3BhY2UgKyAnKiQnKTtcclxuXHJcbnZhciBleHBvcnRlciA9IGZ1bmN0aW9uIChLRVksIGV4ZWMsIEFMSUFTKSB7XHJcbiAgdmFyIGV4cCA9IHt9O1xyXG4gIHZhciBGT1JDRSA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiAhIXNwYWNlc1tLRVldKCkgfHwgbm9uW0tFWV0oKSAhPSBub247XHJcbiAgfSk7XHJcbiAgdmFyIGZuID0gZXhwW0tFWV0gPSBGT1JDRSA/IGV4ZWModHJpbSkgOiBzcGFjZXNbS0VZXTtcclxuICBpZiAoQUxJQVMpIGV4cFtBTElBU10gPSBmbjtcclxuICAkZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIEZPUkNFLCAnU3RyaW5nJywgZXhwKTtcclxufTtcclxuXHJcbi8vIDEgLT4gU3RyaW5nI3RyaW1MZWZ0XHJcbi8vIDIgLT4gU3RyaW5nI3RyaW1SaWdodFxyXG4vLyAzIC0+IFN0cmluZyN0cmltXHJcbnZhciB0cmltID0gZXhwb3J0ZXIudHJpbSA9IGZ1bmN0aW9uIChzdHJpbmcsIFRZUEUpIHtcclxuICBzdHJpbmcgPSBTdHJpbmcoZGVmaW5lZChzdHJpbmcpKTtcclxuICBpZiAoVFlQRSAmIDEpIHN0cmluZyA9IHN0cmluZy5yZXBsYWNlKGx0cmltLCAnJyk7XHJcbiAgaWYgKFRZUEUgJiAyKSBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShydHJpbSwgJycpO1xyXG4gIHJldHVybiBzdHJpbmc7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydGVyO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IHt9O1xyXG4iLCJ2YXIgY29yZSA9IHJlcXVpcmUoJy4vX2NvcmUnKTtcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XHJcbnZhciBzdG9yZSA9IGdsb2JhbFtTSEFSRURdIHx8IChnbG9iYWxbU0hBUkVEXSA9IHt9KTtcclxuXHJcbihtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XHJcbn0pKCd2ZXJzaW9ucycsIFtdKS5wdXNoKHtcclxuICB2ZXJzaW9uOiBjb3JlLnZlcnNpb24sXHJcbiAgbW9kZTogcmVxdWlyZSgnLi9fbGlicmFyeScpID8gJ3B1cmUnIDogJ2dsb2JhbCcsXHJcbiAgY29weXJpZ2h0OiAnwqkgMjAxOSBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcclxufSk7XHJcbiIsIi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXHJcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdCgneicpLnByb3BlcnR5SXNFbnVtZXJhYmxlKDApID8gT2JqZWN0IDogZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGNvZihpdCkgPT0gJ1N0cmluZycgPyBpdC5zcGxpdCgnJykgOiBPYmplY3QoaXQpO1xyXG59O1xyXG4iLCJleHBvcnRzLmYgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFnc1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRoYXQgPSBhbk9iamVjdCh0aGlzKTtcclxuICB2YXIgcmVzdWx0ID0gJyc7XHJcbiAgaWYgKHRoYXQuZ2xvYmFsKSByZXN1bHQgKz0gJ2cnO1xyXG4gIGlmICh0aGF0Lmlnbm9yZUNhc2UpIHJlc3VsdCArPSAnaSc7XHJcbiAgaWYgKHRoYXQubXVsdGlsaW5lKSByZXN1bHQgKz0gJ20nO1xyXG4gIGlmICh0aGF0LnVuaWNvZGUpIHJlc3VsdCArPSAndSc7XHJcbiAgaWYgKHRoYXQuc3RpY2t5KSByZXN1bHQgKz0gJ3knO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiIsIi8vIDcuMy4yMCBTcGVjaWVzQ29uc3RydWN0b3IoTywgZGVmYXVsdENvbnN0cnVjdG9yKVxyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChPLCBEKSB7XHJcbiAgdmFyIEMgPSBhbk9iamVjdChPKS5jb25zdHJ1Y3RvcjtcclxuICB2YXIgUztcclxuICByZXR1cm4gQyA9PT0gdW5kZWZpbmVkIHx8IChTID0gYW5PYmplY3QoQylbU1BFQ0lFU10pID09IHVuZGVmaW5lZCA/IEQgOiBhRnVuY3Rpb24oUyk7XHJcbn07XHJcbiIsIi8vIGZhbHNlIC0+IEFycmF5I2luZGV4T2ZcclxuLy8gdHJ1ZSAgLT4gQXJyYXkjaW5jbHVkZXNcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuL190by1hYnNvbHV0ZS1pbmRleCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xyXG4gIHJldHVybiBmdW5jdGlvbiAoJHRoaXMsIGVsLCBmcm9tSW5kZXgpIHtcclxuICAgIHZhciBPID0gdG9JT2JqZWN0KCR0aGlzKTtcclxuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgICB2YXIgaW5kZXggPSB0b0Fic29sdXRlSW5kZXgoZnJvbUluZGV4LCBsZW5ndGgpO1xyXG4gICAgdmFyIHZhbHVlO1xyXG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcclxuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XHJcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XHJcbiAgICB9IGVsc2UgZm9yICg7bGVuZ3RoID4gaW5kZXg7IGluZGV4KyspIGlmIChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSB7XHJcbiAgICAgIGlmIChPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xyXG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xyXG4gIH07XHJcbn07XHJcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbiIsIi8vIDcuMi4yIElzQXJyYXkoYXJndW1lbnQpXHJcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIGlzQXJyYXkoYXJnKSB7XHJcbiAgcmV0dXJuIGNvZihhcmcpID09ICdBcnJheSc7XHJcbn07XHJcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG4vLyB0cnVlICAtPiBTdHJpbmcjYXRcclxuLy8gZmFsc2UgLT4gU3RyaW5nI2NvZGVQb2ludEF0XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFRPX1NUUklORykge1xyXG4gIHJldHVybiBmdW5jdGlvbiAodGhhdCwgcG9zKSB7XHJcbiAgICB2YXIgcyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcclxuICAgIHZhciBpID0gdG9JbnRlZ2VyKHBvcyk7XHJcbiAgICB2YXIgbCA9IHMubGVuZ3RoO1xyXG4gICAgdmFyIGEsIGI7XHJcbiAgICBpZiAoaSA8IDAgfHwgaSA+PSBsKSByZXR1cm4gVE9fU1RSSU5HID8gJycgOiB1bmRlZmluZWQ7XHJcbiAgICBhID0gcy5jaGFyQ29kZUF0KGkpO1xyXG4gICAgcmV0dXJuIGEgPCAweGQ4MDAgfHwgYSA+IDB4ZGJmZiB8fCBpICsgMSA9PT0gbCB8fCAoYiA9IHMuY2hhckNvZGVBdChpICsgMSkpIDwgMHhkYzAwIHx8IGIgPiAweGRmZmZcclxuICAgICAgPyBUT19TVFJJTkcgPyBzLmNoYXJBdChpKSA6IGFcclxuICAgICAgOiBUT19TVFJJTkcgPyBzLnNsaWNlKGksIGkgKyAyKSA6IChhIC0gMHhkODAwIDw8IDEwKSArIChiIC0gMHhkYzAwKSArIDB4MTAwMDA7XHJcbiAgfTtcclxufTtcclxuIiwiLy8gNy4yLjggSXNSZWdFeHAoYXJndW1lbnQpXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcbnZhciBNQVRDSCA9IHJlcXVpcmUoJy4vX3drcycpKCdtYXRjaCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIHZhciBpc1JlZ0V4cDtcclxuICByZXR1cm4gaXNPYmplY3QoaXQpICYmICgoaXNSZWdFeHAgPSBpdFtNQVRDSF0pICE9PSB1bmRlZmluZWQgPyAhIWlzUmVnRXhwIDogY29mKGl0KSA9PSAnUmVnRXhwJyk7XHJcbn07XHJcbiIsInZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xyXG52YXIgU0FGRV9DTE9TSU5HID0gZmFsc2U7XHJcblxyXG50cnkge1xyXG4gIHZhciByaXRlciA9IFs3XVtJVEVSQVRPUl0oKTtcclxuICByaXRlclsncmV0dXJuJ10gPSBmdW5jdGlvbiAoKSB7IFNBRkVfQ0xPU0lORyA9IHRydWU7IH07XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcclxuICBBcnJheS5mcm9tKHJpdGVyLCBmdW5jdGlvbiAoKSB7IHRocm93IDI7IH0pO1xyXG59IGNhdGNoIChlKSB7IC8qIGVtcHR5ICovIH1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGV4ZWMsIHNraXBDbG9zaW5nKSB7XHJcbiAgaWYgKCFza2lwQ2xvc2luZyAmJiAhU0FGRV9DTE9TSU5HKSByZXR1cm4gZmFsc2U7XHJcbiAgdmFyIHNhZmUgPSBmYWxzZTtcclxuICB0cnkge1xyXG4gICAgdmFyIGFyciA9IFs3XTtcclxuICAgIHZhciBpdGVyID0gYXJyW0lURVJBVE9SXSgpO1xyXG4gICAgaXRlci5uZXh0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4geyBkb25lOiBzYWZlID0gdHJ1ZSB9OyB9O1xyXG4gICAgYXJyW0lURVJBVE9SXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGl0ZXI7IH07XHJcbiAgICBleGVjKGFycik7XHJcbiAgfSBjYXRjaCAoZSkgeyAvKiBlbXB0eSAqLyB9XHJcbiAgcmV0dXJuIHNhZmU7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG52YXIgYnVpbHRpbkV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XHJcblxyXG4gLy8gYFJlZ0V4cEV4ZWNgIGFic3RyYWN0IG9wZXJhdGlvblxyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHBleGVjXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFIsIFMpIHtcclxuICB2YXIgZXhlYyA9IFIuZXhlYztcclxuICBpZiAodHlwZW9mIGV4ZWMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgIHZhciByZXN1bHQgPSBleGVjLmNhbGwoUiwgUyk7XHJcbiAgICBpZiAodHlwZW9mIHJlc3VsdCAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUmVnRXhwIGV4ZWMgbWV0aG9kIHJldHVybmVkIHNvbWV0aGluZyBvdGhlciB0aGFuIGFuIE9iamVjdCBvciBudWxsJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuICBpZiAoY2xhc3NvZihSKSAhPT0gJ1JlZ0V4cCcpIHtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1JlZ0V4cCNleGVjIGNhbGxlZCBvbiBpbmNvbXBhdGlibGUgcmVjZWl2ZXInKTtcclxuICB9XHJcbiAgcmV0dXJuIGJ1aWx0aW5FeGVjLmNhbGwoUiwgUyk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxucmVxdWlyZSgnLi9lczYucmVnZXhwLmV4ZWMnKTtcclxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XHJcbnZhciByZWdleHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMnKTtcclxuXHJcbnZhciBTUEVDSUVTID0gd2tzKCdzcGVjaWVzJyk7XHJcblxyXG52YXIgUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIC8vICNyZXBsYWNlIG5lZWRzIGJ1aWx0LWluIHN1cHBvcnQgZm9yIG5hbWVkIGdyb3Vwcy5cclxuICAvLyAjbWF0Y2ggd29ya3MgZmluZSBiZWNhdXNlIGl0IGp1c3QgcmV0dXJuIHRoZSBleGVjIHJlc3VsdHMsIGV2ZW4gaWYgaXQgaGFzXHJcbiAgLy8gYSBcImdyb3BzXCIgcHJvcGVydHkuXHJcbiAgdmFyIHJlID0gLy4vO1xyXG4gIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gW107XHJcbiAgICByZXN1bHQuZ3JvdXBzID0geyBhOiAnNycgfTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfTtcclxuICByZXR1cm4gJycucmVwbGFjZShyZSwgJyQ8YT4nKSAhPT0gJzcnO1xyXG59KTtcclxuXHJcbnZhciBTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMgPSAoZnVuY3Rpb24gKCkge1xyXG4gIC8vIENocm9tZSA1MSBoYXMgYSBidWdneSBcInNwbGl0XCIgaW1wbGVtZW50YXRpb24gd2hlbiBSZWdFeHAjZXhlYyAhPT0gbmF0aXZlRXhlY1xyXG4gIHZhciByZSA9IC8oPzopLztcclxuICB2YXIgb3JpZ2luYWxFeGVjID0gcmUuZXhlYztcclxuICByZS5leGVjID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gb3JpZ2luYWxFeGVjLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH07XHJcbiAgdmFyIHJlc3VsdCA9ICdhYicuc3BsaXQocmUpO1xyXG4gIHJldHVybiByZXN1bHQubGVuZ3RoID09PSAyICYmIHJlc3VsdFswXSA9PT0gJ2EnICYmIHJlc3VsdFsxXSA9PT0gJ2InO1xyXG59KSgpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoS0VZLCBsZW5ndGgsIGV4ZWMpIHtcclxuICB2YXIgU1lNQk9MID0gd2tzKEtFWSk7XHJcblxyXG4gIHZhciBERUxFR0FURVNfVE9fU1lNQk9MID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAgIC8vIFN0cmluZyBtZXRob2RzIGNhbGwgc3ltYm9sLW5hbWVkIFJlZ0VwIG1ldGhvZHNcclxuICAgIHZhciBPID0ge307XHJcbiAgICBPW1NZTUJPTF0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9O1xyXG4gICAgcmV0dXJuICcnW0tFWV0oTykgIT0gNztcclxuICB9KTtcclxuXHJcbiAgdmFyIERFTEVHQVRFU19UT19FWEVDID0gREVMRUdBVEVTX1RPX1NZTUJPTCA/ICFmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICAvLyBTeW1ib2wtbmFtZWQgUmVnRXhwIG1ldGhvZHMgY2FsbCAuZXhlY1xyXG4gICAgdmFyIGV4ZWNDYWxsZWQgPSBmYWxzZTtcclxuICAgIHZhciByZSA9IC9hLztcclxuICAgIHJlLmV4ZWMgPSBmdW5jdGlvbiAoKSB7IGV4ZWNDYWxsZWQgPSB0cnVlOyByZXR1cm4gbnVsbDsgfTtcclxuICAgIGlmIChLRVkgPT09ICdzcGxpdCcpIHtcclxuICAgICAgLy8gUmVnRXhwW0BAc3BsaXRdIGRvZXNuJ3QgY2FsbCB0aGUgcmVnZXgncyBleGVjIG1ldGhvZCwgYnV0IGZpcnN0IGNyZWF0ZXNcclxuICAgICAgLy8gYSBuZXcgb25lLiBXZSBuZWVkIHRvIHJldHVybiB0aGUgcGF0Y2hlZCByZWdleCB3aGVuIGNyZWF0aW5nIHRoZSBuZXcgb25lLlxyXG4gICAgICByZS5jb25zdHJ1Y3RvciA9IHt9O1xyXG4gICAgICByZS5jb25zdHJ1Y3RvcltTUEVDSUVTXSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlOyB9O1xyXG4gICAgfVxyXG4gICAgcmVbU1lNQk9MXSgnJyk7XHJcbiAgICByZXR1cm4gIWV4ZWNDYWxsZWQ7XHJcbiAgfSkgOiB1bmRlZmluZWQ7XHJcblxyXG4gIGlmIChcclxuICAgICFERUxFR0FURVNfVE9fU1lNQk9MIHx8XHJcbiAgICAhREVMRUdBVEVTX1RPX0VYRUMgfHxcclxuICAgIChLRVkgPT09ICdyZXBsYWNlJyAmJiAhUkVQTEFDRV9TVVBQT1JUU19OQU1FRF9HUk9VUFMpIHx8XHJcbiAgICAoS0VZID09PSAnc3BsaXQnICYmICFTUExJVF9XT1JLU19XSVRIX09WRVJXUklUVEVOX0VYRUMpXHJcbiAgKSB7XHJcbiAgICB2YXIgbmF0aXZlUmVnRXhwTWV0aG9kID0gLy4vW1NZTUJPTF07XHJcbiAgICB2YXIgZm5zID0gZXhlYyhcclxuICAgICAgZGVmaW5lZCxcclxuICAgICAgU1lNQk9MLFxyXG4gICAgICAnJ1tLRVldLFxyXG4gICAgICBmdW5jdGlvbiBtYXliZUNhbGxOYXRpdmUobmF0aXZlTWV0aG9kLCByZWdleHAsIHN0ciwgYXJnMiwgZm9yY2VTdHJpbmdNZXRob2QpIHtcclxuICAgICAgICBpZiAocmVnZXhwLmV4ZWMgPT09IHJlZ2V4cEV4ZWMpIHtcclxuICAgICAgICAgIGlmIChERUxFR0FURVNfVE9fU1lNQk9MICYmICFmb3JjZVN0cmluZ01ldGhvZCkge1xyXG4gICAgICAgICAgICAvLyBUaGUgbmF0aXZlIFN0cmluZyBtZXRob2QgYWxyZWFkeSBkZWxlZ2F0ZXMgdG8gQEBtZXRob2QgKHRoaXNcclxuICAgICAgICAgICAgLy8gcG9seWZpbGxlZCBmdW5jdGlvbiksIGxlYXNpbmcgdG8gaW5maW5pdGUgcmVjdXJzaW9uLlxyXG4gICAgICAgICAgICAvLyBXZSBhdm9pZCBpdCBieSBkaXJlY3RseSBjYWxsaW5nIHRoZSBuYXRpdmUgQEBtZXRob2QgbWV0aG9kLlxyXG4gICAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlUmVnRXhwTWV0aG9kLmNhbGwocmVnZXhwLCBzdHIsIGFyZzIpIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZTogbmF0aXZlTWV0aG9kLmNhbGwoc3RyLCByZWdleHAsIGFyZzIpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlIH07XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgICB2YXIgc3RyZm4gPSBmbnNbMF07XHJcbiAgICB2YXIgcnhmbiA9IGZuc1sxXTtcclxuXHJcbiAgICByZWRlZmluZShTdHJpbmcucHJvdG90eXBlLCBLRVksIHN0cmZuKTtcclxuICAgIGhpZGUoUmVnRXhwLnByb3RvdHlwZSwgU1lNQk9MLCBsZW5ndGggPT0gMlxyXG4gICAgICAvLyAyMS4yLjUuOCBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV0oc3RyaW5nLCByZXBsYWNlVmFsdWUpXHJcbiAgICAgIC8vIDIxLjIuNS4xMSBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdKHN0cmluZywgbGltaXQpXHJcbiAgICAgID8gZnVuY3Rpb24gKHN0cmluZywgYXJnKSB7IHJldHVybiByeGZuLmNhbGwoc3RyaW5nLCB0aGlzLCBhcmcpOyB9XHJcbiAgICAgIC8vIDIxLjIuNS42IFJlZ0V4cC5wcm90b3R5cGVbQEBtYXRjaF0oc3RyaW5nKVxyXG4gICAgICAvLyAyMS4yLjUuOSBSZWdFeHAucHJvdG90eXBlW0BAc2VhcmNoXShzdHJpbmcpXHJcbiAgICAgIDogZnVuY3Rpb24gKHN0cmluZykgeyByZXR1cm4gcnhmbi5jYWxsKHN0cmluZywgdGhpcyk7IH1cclxuICAgICk7XHJcbiAgfVxyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBuYXZpZ2F0b3IgPSBnbG9iYWwubmF2aWdhdG9yO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBuYXZpZ2F0b3IgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCB8fCAnJztcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xyXG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKTtcclxudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcbnZhciBhbkluc3RhbmNlID0gcmVxdWlyZSgnLi9fYW4taW5zdGFuY2UnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciAkaXRlckRldGVjdCA9IHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0Jyk7XHJcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XHJcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE5BTUUsIHdyYXBwZXIsIG1ldGhvZHMsIGNvbW1vbiwgSVNfTUFQLCBJU19XRUFLKSB7XHJcbiAgdmFyIEJhc2UgPSBnbG9iYWxbTkFNRV07XHJcbiAgdmFyIEMgPSBCYXNlO1xyXG4gIHZhciBBRERFUiA9IElTX01BUCA/ICdzZXQnIDogJ2FkZCc7XHJcbiAgdmFyIHByb3RvID0gQyAmJiBDLnByb3RvdHlwZTtcclxuICB2YXIgTyA9IHt9O1xyXG4gIHZhciBmaXhNZXRob2QgPSBmdW5jdGlvbiAoS0VZKSB7XHJcbiAgICB2YXIgZm4gPSBwcm90b1tLRVldO1xyXG4gICAgcmVkZWZpbmUocHJvdG8sIEtFWSxcclxuICAgICAgS0VZID09ICdkZWxldGUnID8gZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICByZXR1cm4gSVNfV0VBSyAmJiAhaXNPYmplY3QoYSkgPyBmYWxzZSA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcclxuICAgICAgfSA6IEtFWSA9PSAnaGFzJyA/IGZ1bmN0aW9uIGhhcyhhKSB7XHJcbiAgICAgICAgcmV0dXJuIElTX1dFQUsgJiYgIWlzT2JqZWN0KGEpID8gZmFsc2UgOiBmbi5jYWxsKHRoaXMsIGEgPT09IDAgPyAwIDogYSk7XHJcbiAgICAgIH0gOiBLRVkgPT0gJ2dldCcgPyBmdW5jdGlvbiBnZXQoYSkge1xyXG4gICAgICAgIHJldHVybiBJU19XRUFLICYmICFpc09iamVjdChhKSA/IHVuZGVmaW5lZCA6IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTtcclxuICAgICAgfSA6IEtFWSA9PSAnYWRkJyA/IGZ1bmN0aW9uIGFkZChhKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgICAgICA6IGZ1bmN0aW9uIHNldChhLCBiKSB7IGZuLmNhbGwodGhpcywgYSA9PT0gMCA/IDAgOiBhLCBiKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgICk7XHJcbiAgfTtcclxuICBpZiAodHlwZW9mIEMgIT0gJ2Z1bmN0aW9uJyB8fCAhKElTX1dFQUsgfHwgcHJvdG8uZm9yRWFjaCAmJiAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgbmV3IEMoKS5lbnRyaWVzKCkubmV4dCgpO1xyXG4gIH0pKSkge1xyXG4gICAgLy8gY3JlYXRlIGNvbGxlY3Rpb24gY29uc3RydWN0b3JcclxuICAgIEMgPSBjb21tb24uZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgTkFNRSwgSVNfTUFQLCBBRERFUik7XHJcbiAgICByZWRlZmluZUFsbChDLnByb3RvdHlwZSwgbWV0aG9kcyk7XHJcbiAgICBtZXRhLk5FRUQgPSB0cnVlO1xyXG4gIH0gZWxzZSB7XHJcbiAgICB2YXIgaW5zdGFuY2UgPSBuZXcgQygpO1xyXG4gICAgLy8gZWFybHkgaW1wbGVtZW50YXRpb25zIG5vdCBzdXBwb3J0cyBjaGFpbmluZ1xyXG4gICAgdmFyIEhBU05UX0NIQUlOSU5HID0gaW5zdGFuY2VbQURERVJdKElTX1dFQUsgPyB7fSA6IC0wLCAxKSAhPSBpbnN0YW5jZTtcclxuICAgIC8vIFY4IH4gIENocm9taXVtIDQwLSB3ZWFrLWNvbGxlY3Rpb25zIHRocm93cyBvbiBwcmltaXRpdmVzLCBidXQgc2hvdWxkIHJldHVybiBmYWxzZVxyXG4gICAgdmFyIFRIUk9XU19PTl9QUklNSVRJVkVTID0gZmFpbHMoZnVuY3Rpb24gKCkgeyBpbnN0YW5jZS5oYXMoMSk7IH0pO1xyXG4gICAgLy8gbW9zdCBlYXJseSBpbXBsZW1lbnRhdGlvbnMgZG9lc24ndCBzdXBwb3J0cyBpdGVyYWJsZXMsIG1vc3QgbW9kZXJuIC0gbm90IGNsb3NlIGl0IGNvcnJlY3RseVxyXG4gICAgdmFyIEFDQ0VQVF9JVEVSQUJMRVMgPSAkaXRlckRldGVjdChmdW5jdGlvbiAoaXRlcikgeyBuZXcgQyhpdGVyKTsgfSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICAvLyBmb3IgZWFybHkgaW1wbGVtZW50YXRpb25zIC0wIGFuZCArMCBub3QgdGhlIHNhbWVcclxuICAgIHZhciBCVUdHWV9aRVJPID0gIUlTX1dFQUsgJiYgZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBWOCB+IENocm9taXVtIDQyLSBmYWlscyBvbmx5IHdpdGggNSsgZWxlbWVudHNcclxuICAgICAgdmFyICRpbnN0YW5jZSA9IG5ldyBDKCk7XHJcbiAgICAgIHZhciBpbmRleCA9IDU7XHJcbiAgICAgIHdoaWxlIChpbmRleC0tKSAkaW5zdGFuY2VbQURERVJdKGluZGV4LCBpbmRleCk7XHJcbiAgICAgIHJldHVybiAhJGluc3RhbmNlLmhhcygtMCk7XHJcbiAgICB9KTtcclxuICAgIGlmICghQUNDRVBUX0lURVJBQkxFUykge1xyXG4gICAgICBDID0gd3JhcHBlcihmdW5jdGlvbiAodGFyZ2V0LCBpdGVyYWJsZSkge1xyXG4gICAgICAgIGFuSW5zdGFuY2UodGFyZ2V0LCBDLCBOQU1FKTtcclxuICAgICAgICB2YXIgdGhhdCA9IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKCksIHRhcmdldCwgQyk7XHJcbiAgICAgICAgaWYgKGl0ZXJhYmxlICE9IHVuZGVmaW5lZCkgZm9yT2YoaXRlcmFibGUsIElTX01BUCwgdGhhdFtBRERFUl0sIHRoYXQpO1xyXG4gICAgICAgIHJldHVybiB0aGF0O1xyXG4gICAgICB9KTtcclxuICAgICAgQy5wcm90b3R5cGUgPSBwcm90bztcclxuICAgICAgcHJvdG8uY29uc3RydWN0b3IgPSBDO1xyXG4gICAgfVxyXG4gICAgaWYgKFRIUk9XU19PTl9QUklNSVRJVkVTIHx8IEJVR0dZX1pFUk8pIHtcclxuICAgICAgZml4TWV0aG9kKCdkZWxldGUnKTtcclxuICAgICAgZml4TWV0aG9kKCdoYXMnKTtcclxuICAgICAgSVNfTUFQICYmIGZpeE1ldGhvZCgnZ2V0Jyk7XHJcbiAgICB9XHJcbiAgICBpZiAoQlVHR1lfWkVSTyB8fCBIQVNOVF9DSEFJTklORykgZml4TWV0aG9kKEFEREVSKTtcclxuICAgIC8vIHdlYWsgY29sbGVjdGlvbnMgc2hvdWxkIG5vdCBjb250YWlucyAuY2xlYXIgbWV0aG9kXHJcbiAgICBpZiAoSVNfV0VBSyAmJiBwcm90by5jbGVhcikgZGVsZXRlIHByb3RvLmNsZWFyO1xyXG4gIH1cclxuXHJcbiAgc2V0VG9TdHJpbmdUYWcoQywgTkFNRSk7XHJcblxyXG4gIE9bTkFNRV0gPSBDO1xyXG4gICRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEMgIT0gQmFzZSksIE8pO1xyXG5cclxuICBpZiAoIUlTX1dFQUspIGNvbW1vbi5zZXRTdHJvbmcoQywgTkFNRSwgSVNfTUFQKTtcclxuXHJcbiAgcmV0dXJuIEM7XHJcbn07XHJcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciB1aWQgPSByZXF1aXJlKCcuL191aWQnKTtcclxudmFyIFRZUEVEID0gdWlkKCd0eXBlZF9hcnJheScpO1xyXG52YXIgVklFVyA9IHVpZCgndmlldycpO1xyXG52YXIgQUJWID0gISEoZ2xvYmFsLkFycmF5QnVmZmVyICYmIGdsb2JhbC5EYXRhVmlldyk7XHJcbnZhciBDT05TVFIgPSBBQlY7XHJcbnZhciBpID0gMDtcclxudmFyIGwgPSA5O1xyXG52YXIgVHlwZWQ7XHJcblxyXG52YXIgVHlwZWRBcnJheUNvbnN0cnVjdG9ycyA9IChcclxuICAnSW50OEFycmF5LFVpbnQ4QXJyYXksVWludDhDbGFtcGVkQXJyYXksSW50MTZBcnJheSxVaW50MTZBcnJheSxJbnQzMkFycmF5LFVpbnQzMkFycmF5LEZsb2F0MzJBcnJheSxGbG9hdDY0QXJyYXknXHJcbikuc3BsaXQoJywnKTtcclxuXHJcbndoaWxlIChpIDwgbCkge1xyXG4gIGlmIChUeXBlZCA9IGdsb2JhbFtUeXBlZEFycmF5Q29uc3RydWN0b3JzW2krK11dKSB7XHJcbiAgICBoaWRlKFR5cGVkLnByb3RvdHlwZSwgVFlQRUQsIHRydWUpO1xyXG4gICAgaGlkZShUeXBlZC5wcm90b3R5cGUsIFZJRVcsIHRydWUpO1xyXG4gIH0gZWxzZSBDT05TVFIgPSBmYWxzZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgQUJWOiBBQlYsXHJcbiAgQ09OU1RSOiBDT05TVFIsXHJcbiAgVFlQRUQ6IFRZUEVELFxyXG4gIFZJRVc6IFZJRVdcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBGb3JjZWQgcmVwbGFjZW1lbnQgcHJvdG90eXBlIGFjY2Vzc29ycyBtZXRob2RzXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fbGlicmFyeScpIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICB2YXIgSyA9IE1hdGgucmFuZG9tKCk7XHJcbiAgLy8gSW4gRkYgdGhyb3dzIG9ubHkgZGVmaW5lIG1ldGhvZHNcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWYsIG5vLXVzZWxlc3MtY2FsbFxyXG4gIF9fZGVmaW5lU2V0dGVyX18uY2FsbChudWxsLCBLLCBmdW5jdGlvbiAoKSB7IC8qIGVtcHR5ICovIH0pO1xyXG4gIGRlbGV0ZSByZXF1aXJlKCcuL19nbG9iYWwnKVtLXTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoQ09MTEVDVElPTikge1xyXG4gICRleHBvcnQoJGV4cG9ydC5TLCBDT0xMRUNUSU9OLCB7IG9mOiBmdW5jdGlvbiBvZigpIHtcclxuICAgIHZhciBsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIEEgPSBuZXcgQXJyYXkobGVuZ3RoKTtcclxuICAgIHdoaWxlIChsZW5ndGgtLSkgQVtsZW5ndGhdID0gYXJndW1lbnRzW2xlbmd0aF07XHJcbiAgICByZXR1cm4gbmV3IHRoaXMoQSk7XHJcbiAgfSB9KTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBjdHggPSByZXF1aXJlKCcuL19jdHgnKTtcclxudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDT0xMRUNUSU9OKSB7XHJcbiAgJGV4cG9ydCgkZXhwb3J0LlMsIENPTExFQ1RJT04sIHsgZnJvbTogZnVuY3Rpb24gZnJvbShzb3VyY2UgLyogLCBtYXBGbiwgdGhpc0FyZyAqLykge1xyXG4gICAgdmFyIG1hcEZuID0gYXJndW1lbnRzWzFdO1xyXG4gICAgdmFyIG1hcHBpbmcsIEEsIG4sIGNiO1xyXG4gICAgYUZ1bmN0aW9uKHRoaXMpO1xyXG4gICAgbWFwcGluZyA9IG1hcEZuICE9PSB1bmRlZmluZWQ7XHJcbiAgICBpZiAobWFwcGluZykgYUZ1bmN0aW9uKG1hcEZuKTtcclxuICAgIGlmIChzb3VyY2UgPT0gdW5kZWZpbmVkKSByZXR1cm4gbmV3IHRoaXMoKTtcclxuICAgIEEgPSBbXTtcclxuICAgIGlmIChtYXBwaW5nKSB7XHJcbiAgICAgIG4gPSAwO1xyXG4gICAgICBjYiA9IGN0eChtYXBGbiwgYXJndW1lbnRzWzJdLCAyKTtcclxuICAgICAgZm9yT2Yoc291cmNlLCBmYWxzZSwgZnVuY3Rpb24gKG5leHRJdGVtKSB7XHJcbiAgICAgICAgQS5wdXNoKGNiKG5leHRJdGVtLCBuKyspKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBmb3JPZihzb3VyY2UsIGZhbHNlLCBBLnB1c2gsIEEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyB0aGlzKEEpO1xyXG4gIH0gfSk7XHJcbn07XHJcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgZG9jdW1lbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5kb2N1bWVudDtcclxuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXHJcbnZhciBpcyA9IGlzT2JqZWN0KGRvY3VtZW50KSAmJiBpc09iamVjdChkb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gaXMgPyBkb2N1bWVudC5jcmVhdGVFbGVtZW50KGl0KSA6IHt9O1xyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBjb3JlID0gcmVxdWlyZSgnLi9fY29yZScpO1xyXG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcclxudmFyIHdrc0V4dCA9IHJlcXVpcmUoJy4vX3drcy1leHQnKTtcclxudmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobmFtZSkge1xyXG4gIHZhciAkU3ltYm9sID0gY29yZS5TeW1ib2wgfHwgKGNvcmUuU3ltYm9sID0gTElCUkFSWSA/IHt9IDogZ2xvYmFsLlN5bWJvbCB8fCB7fSk7XHJcbiAgaWYgKG5hbWUuY2hhckF0KDApICE9ICdfJyAmJiAhKG5hbWUgaW4gJFN5bWJvbCkpIGRlZmluZVByb3BlcnR5KCRTeW1ib2wsIG5hbWUsIHsgdmFsdWU6IHdrc0V4dC5mKG5hbWUpIH0pO1xyXG59O1xyXG4iLCJ2YXIgc2hhcmVkID0gcmVxdWlyZSgnLi9fc2hhcmVkJykoJ2tleXMnKTtcclxudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICByZXR1cm4gc2hhcmVkW2tleV0gfHwgKHNoYXJlZFtrZXldID0gdWlkKGtleSkpO1xyXG59O1xyXG4iLCIvLyBJRSA4LSBkb24ndCBlbnVtIGJ1ZyBrZXlzXHJcbm1vZHVsZS5leHBvcnRzID0gKFxyXG4gICdjb25zdHJ1Y3RvcixoYXNPd25Qcm9wZXJ0eSxpc1Byb3RvdHlwZU9mLHByb3BlcnR5SXNFbnVtZXJhYmxlLHRvTG9jYWxlU3RyaW5nLHRvU3RyaW5nLHZhbHVlT2YnXHJcbikuc3BsaXQoJywnKTtcclxuIiwidmFyIGRvY3VtZW50ID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuZG9jdW1lbnQ7XHJcbm1vZHVsZS5leHBvcnRzID0gZG9jdW1lbnQgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xyXG4iLCIvLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cclxuLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgY2hlY2sgPSBmdW5jdGlvbiAoTywgcHJvdG8pIHtcclxuICBhbk9iamVjdChPKTtcclxuICBpZiAoIWlzT2JqZWN0KHByb3RvKSAmJiBwcm90byAhPT0gbnVsbCkgdGhyb3cgVHlwZUVycm9yKHByb3RvICsgXCI6IGNhbid0IHNldCBhcyBwcm90b3R5cGUhXCIpO1xyXG59O1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBzZXQ6IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXHJcbiAgICBmdW5jdGlvbiAodGVzdCwgYnVnZ3ksIHNldCkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHNldCA9IHJlcXVpcmUoJy4vX2N0eCcpKEZ1bmN0aW9uLmNhbGwsIHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZihPYmplY3QucHJvdG90eXBlLCAnX19wcm90b19fJykuc2V0LCAyKTtcclxuICAgICAgICBzZXQodGVzdCwgW10pO1xyXG4gICAgICAgIGJ1Z2d5ID0gISh0ZXN0IGluc3RhbmNlb2YgQXJyYXkpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7IGJ1Z2d5ID0gdHJ1ZTsgfVxyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YoTywgcHJvdG8pIHtcclxuICAgICAgICBjaGVjayhPLCBwcm90byk7XHJcbiAgICAgICAgaWYgKGJ1Z2d5KSBPLl9fcHJvdG9fXyA9IHByb3RvO1xyXG4gICAgICAgIGVsc2Ugc2V0KE8sIHByb3RvKTtcclxuICAgICAgICByZXR1cm4gTztcclxuICAgICAgfTtcclxuICAgIH0oe30sIGZhbHNlKSA6IHVuZGVmaW5lZCksXHJcbiAgY2hlY2s6IGNoZWNrXHJcbn07XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gJ1xceDA5XFx4MEFcXHgwQlxceDBDXFx4MERcXHgyMFxceEEwXFx1MTY4MFxcdTE4MEVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzJyArXHJcbiAgJ1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMEFcXHUyMDJGXFx1MjA1RlxcdTMwMDBcXHUyMDI4XFx1MjAyOVxcdUZFRkYnO1xyXG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIHNldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJykuc2V0O1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCB0YXJnZXQsIEMpIHtcclxuICB2YXIgUyA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcclxuICB2YXIgUDtcclxuICBpZiAoUyAhPT0gQyAmJiB0eXBlb2YgUyA9PSAnZnVuY3Rpb24nICYmIChQID0gUy5wcm90b3R5cGUpICE9PSBDLnByb3RvdHlwZSAmJiBpc09iamVjdChQKSAmJiBzZXRQcm90b3R5cGVPZikge1xyXG4gICAgc2V0UHJvdG90eXBlT2YodGhhdCwgUCk7XHJcbiAgfSByZXR1cm4gdGhhdDtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgZGVmaW5lZCA9IHJlcXVpcmUoJy4vX2RlZmluZWQnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcmVwZWF0KGNvdW50KSB7XHJcbiAgdmFyIHN0ciA9IFN0cmluZyhkZWZpbmVkKHRoaXMpKTtcclxuICB2YXIgcmVzID0gJyc7XHJcbiAgdmFyIG4gPSB0b0ludGVnZXIoY291bnQpO1xyXG4gIGlmIChuIDwgMCB8fCBuID09IEluZmluaXR5KSB0aHJvdyBSYW5nZUVycm9yKFwiQ291bnQgY2FuJ3QgYmUgbmVnYXRpdmVcIik7XHJcbiAgZm9yICg7biA+IDA7IChuID4+Pj0gMSkgJiYgKHN0ciArPSBzdHIpKSBpZiAobiAmIDEpIHJlcyArPSBzdHI7XHJcbiAgcmV0dXJuIHJlcztcclxufTtcclxuIiwiLy8gMjAuMi4yLjI4IE1hdGguc2lnbih4KVxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguc2lnbiB8fCBmdW5jdGlvbiBzaWduKHgpIHtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgfHwgeCAhPSB4ID8geCA6IHggPCAwID8gLTEgOiAxO1xyXG59O1xyXG4iLCIvLyAyMC4yLjIuMTQgTWF0aC5leHBtMSh4KVxyXG52YXIgJGV4cG0xID0gTWF0aC5leHBtMTtcclxubW9kdWxlLmV4cG9ydHMgPSAoISRleHBtMVxyXG4gIC8vIE9sZCBGRiBidWdcclxuICB8fCAkZXhwbTEoMTApID4gMjIwMjUuNDY1Nzk0ODA2NzE5IHx8ICRleHBtMSgxMCkgPCAyMjAyNS40NjU3OTQ4MDY3MTY1MTY4XHJcbiAgLy8gVG9yIEJyb3dzZXIgYnVnXHJcbiAgfHwgJGV4cG0xKC0yZS0xNykgIT0gLTJlLTE3XHJcbikgPyBmdW5jdGlvbiBleHBtMSh4KSB7XHJcbiAgcmV0dXJuICh4ID0gK3gpID09IDAgPyB4IDogeCA+IC0xZS02ICYmIHggPCAxZS02ID8geCArIHggKiB4IC8gMiA6IE1hdGguZXhwKHgpIC0gMTtcclxufSA6ICRleHBtMTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxudmFyIGhpZGUgPSByZXF1aXJlKCcuL19oaWRlJyk7XHJcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcclxudmFyICRpdGVyQ3JlYXRlID0gcmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKTtcclxudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgSVRFUkFUT1IgPSByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKTtcclxudmFyIEJVR0dZID0gIShbXS5rZXlzICYmICduZXh0JyBpbiBbXS5rZXlzKCkpOyAvLyBTYWZhcmkgaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXHJcbnZhciBGRl9JVEVSQVRPUiA9ICdAQGl0ZXJhdG9yJztcclxudmFyIEtFWVMgPSAna2V5cyc7XHJcbnZhciBWQUxVRVMgPSAndmFsdWVzJztcclxuXHJcbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEJhc2UsIE5BTUUsIENvbnN0cnVjdG9yLCBuZXh0LCBERUZBVUxULCBJU19TRVQsIEZPUkNFRCkge1xyXG4gICRpdGVyQ3JlYXRlKENvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcclxuICB2YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGtpbmQpIHtcclxuICAgIGlmICghQlVHR1kgJiYga2luZCBpbiBwcm90bykgcmV0dXJuIHByb3RvW2tpbmRdO1xyXG4gICAgc3dpdGNoIChraW5kKSB7XHJcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgQ29uc3RydWN0b3IodGhpcywga2luZCk7IH07XHJcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IENvbnN0cnVjdG9yKHRoaXMsIGtpbmQpOyB9O1xyXG4gICAgfSByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBDb25zdHJ1Y3Rvcih0aGlzLCBraW5kKTsgfTtcclxuICB9O1xyXG4gIHZhciBUQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XHJcbiAgdmFyIERFRl9WQUxVRVMgPSBERUZBVUxUID09IFZBTFVFUztcclxuICB2YXIgVkFMVUVTX0JVRyA9IGZhbHNlO1xyXG4gIHZhciBwcm90byA9IEJhc2UucHJvdG90eXBlO1xyXG4gIHZhciAkbmF0aXZlID0gcHJvdG9bSVRFUkFUT1JdIHx8IHByb3RvW0ZGX0lURVJBVE9SXSB8fCBERUZBVUxUICYmIHByb3RvW0RFRkFVTFRdO1xyXG4gIHZhciAkZGVmYXVsdCA9ICRuYXRpdmUgfHwgZ2V0TWV0aG9kKERFRkFVTFQpO1xyXG4gIHZhciAkZW50cmllcyA9IERFRkFVTFQgPyAhREVGX1ZBTFVFUyA/ICRkZWZhdWx0IDogZ2V0TWV0aG9kKCdlbnRyaWVzJykgOiB1bmRlZmluZWQ7XHJcbiAgdmFyICRhbnlOYXRpdmUgPSBOQU1FID09ICdBcnJheScgPyBwcm90by5lbnRyaWVzIHx8ICRuYXRpdmUgOiAkbmF0aXZlO1xyXG4gIHZhciBtZXRob2RzLCBrZXksIEl0ZXJhdG9yUHJvdG90eXBlO1xyXG4gIC8vIEZpeCBuYXRpdmVcclxuICBpZiAoJGFueU5hdGl2ZSkge1xyXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZigkYW55TmF0aXZlLmNhbGwobmV3IEJhc2UoKSkpO1xyXG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEl0ZXJhdG9yUHJvdG90eXBlLm5leHQpIHtcclxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xyXG4gICAgICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvclByb3RvdHlwZSwgVEFHLCB0cnVlKTtcclxuICAgICAgLy8gZml4IGZvciBzb21lIG9sZCBlbmdpbmVzXHJcbiAgICAgIGlmICghTElCUkFSWSAmJiB0eXBlb2YgSXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIGhpZGUoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcclxuICAgIH1cclxuICB9XHJcbiAgLy8gZml4IEFycmF5I3t2YWx1ZXMsIEBAaXRlcmF0b3J9Lm5hbWUgaW4gVjggLyBGRlxyXG4gIGlmIChERUZfVkFMVUVTICYmICRuYXRpdmUgJiYgJG5hdGl2ZS5uYW1lICE9PSBWQUxVRVMpIHtcclxuICAgIFZBTFVFU19CVUcgPSB0cnVlO1xyXG4gICAgJGRlZmF1bHQgPSBmdW5jdGlvbiB2YWx1ZXMoKSB7IHJldHVybiAkbmF0aXZlLmNhbGwodGhpcyk7IH07XHJcbiAgfVxyXG4gIC8vIERlZmluZSBpdGVyYXRvclxyXG4gIGlmICgoIUxJQlJBUlkgfHwgRk9SQ0VEKSAmJiAoQlVHR1kgfHwgVkFMVUVTX0JVRyB8fCAhcHJvdG9bSVRFUkFUT1JdKSkge1xyXG4gICAgaGlkZShwcm90bywgSVRFUkFUT1IsICRkZWZhdWx0KTtcclxuICB9XHJcbiAgLy8gUGx1ZyBmb3IgbGlicmFyeVxyXG4gIEl0ZXJhdG9yc1tOQU1FXSA9ICRkZWZhdWx0O1xyXG4gIEl0ZXJhdG9yc1tUQUddID0gcmV0dXJuVGhpcztcclxuICBpZiAoREVGQVVMVCkge1xyXG4gICAgbWV0aG9kcyA9IHtcclxuICAgICAgdmFsdWVzOiBERUZfVkFMVUVTID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoVkFMVUVTKSxcclxuICAgICAga2V5czogSVNfU0VUID8gJGRlZmF1bHQgOiBnZXRNZXRob2QoS0VZUyksXHJcbiAgICAgIGVudHJpZXM6ICRlbnRyaWVzXHJcbiAgICB9O1xyXG4gICAgaWYgKEZPUkNFRCkgZm9yIChrZXkgaW4gbWV0aG9kcykge1xyXG4gICAgICBpZiAoIShrZXkgaW4gcHJvdG8pKSByZWRlZmluZShwcm90bywga2V5LCBtZXRob2RzW2tleV0pO1xyXG4gICAgfSBlbHNlICRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKEJVR0dZIHx8IFZBTFVFU19CVUcpLCBOQU1FLCBtZXRob2RzKTtcclxuICB9XHJcbiAgcmV0dXJuIG1ldGhvZHM7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcclxudmFyIGRlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XHJcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJyk7XHJcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xyXG5cclxuLy8gMjUuMS4yLjEuMSAlSXRlcmF0b3JQcm90b3R5cGUlW0BAaXRlcmF0b3JdKClcclxucmVxdWlyZSgnLi9faGlkZScpKEl0ZXJhdG9yUHJvdG90eXBlLCByZXF1aXJlKCcuL193a3MnKSgnaXRlcmF0b3InKSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xyXG4gIENvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBkZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xyXG4gIHNldFRvU3RyaW5nVGFnKENvbnN0cnVjdG9yLCBOQU1FICsgJyBJdGVyYXRvcicpO1xyXG59O1xyXG4iLCIvLyBoZWxwZXIgZm9yIFN0cmluZyN7c3RhcnRzV2l0aCwgZW5kc1dpdGgsIGluY2x1ZGVzfVxyXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcclxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBzZWFyY2hTdHJpbmcsIE5BTUUpIHtcclxuICBpZiAoaXNSZWdFeHAoc2VhcmNoU3RyaW5nKSkgdGhyb3cgVHlwZUVycm9yKCdTdHJpbmcjJyArIE5BTUUgKyBcIiBkb2Vzbid0IGFjY2VwdCByZWdleCFcIik7XHJcbiAgcmV0dXJuIFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcclxufTtcclxuIiwidmFyIE1BVENIID0gcmVxdWlyZSgnLi9fd2tzJykoJ21hdGNoJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEtFWSkge1xyXG4gIHZhciByZSA9IC8uLztcclxuICB0cnkge1xyXG4gICAgJy8uLydbS0VZXShyZSk7XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmVbTUFUQ0hdID0gZmFsc2U7XHJcbiAgICAgIHJldHVybiAhJy8uLydbS0VZXShyZSk7XHJcbiAgICB9IGNhdGNoIChmKSB7IC8qIGVtcHR5ICovIH1cclxuICB9IHJldHVybiB0cnVlO1xyXG59O1xyXG4iLCIvLyBjaGVjayBvbiBkZWZhdWx0IEFycmF5IGl0ZXJhdG9yXHJcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcclxudmFyIElURVJBVE9SID0gcmVxdWlyZSgnLi9fd2tzJykoJ2l0ZXJhdG9yJyk7XHJcbnZhciBBcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gaXQgIT09IHVuZGVmaW5lZCAmJiAoSXRlcmF0b3JzLkFycmF5ID09PSBpdCB8fCBBcnJheVByb3RvW0lURVJBVE9SXSA9PT0gaXQpO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxudmFyIGNyZWF0ZURlc2MgPSByZXF1aXJlKCcuL19wcm9wZXJ0eS1kZXNjJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIGluZGV4LCB2YWx1ZSkge1xyXG4gIGlmIChpbmRleCBpbiBvYmplY3QpICRkZWZpbmVQcm9wZXJ0eS5mKG9iamVjdCwgaW5kZXgsIGNyZWF0ZURlc2MoMCwgdmFsdWUpKTtcclxuICBlbHNlIG9iamVjdFtpbmRleF0gPSB2YWx1ZTtcclxufTtcclxuIiwidmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuL19jbGFzc29mJyk7XHJcbnZhciBJVEVSQVRPUiA9IHJlcXVpcmUoJy4vX3drcycpKCdpdGVyYXRvcicpO1xyXG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi9faXRlcmF0b3JzJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29yZScpLmdldEl0ZXJhdG9yTWV0aG9kID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgaWYgKGl0ICE9IHVuZGVmaW5lZCkgcmV0dXJuIGl0W0lURVJBVE9SXVxyXG4gICAgfHwgaXRbJ0BAaXRlcmF0b3InXVxyXG4gICAgfHwgSXRlcmF0b3JzW2NsYXNzb2YoaXQpXTtcclxufTtcclxuIiwiLy8gOS40LjIuMyBBcnJheVNwZWNpZXNDcmVhdGUob3JpZ2luYWxBcnJheSwgbGVuZ3RoKVxyXG52YXIgc3BlY2llc0NvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jb25zdHJ1Y3RvcicpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwsIGxlbmd0aCkge1xyXG4gIHJldHVybiBuZXcgKHNwZWNpZXNDb25zdHJ1Y3RvcihvcmlnaW5hbCkpKGxlbmd0aCk7XHJcbn07XHJcbiIsIi8vIDIyLjEuMy42IEFycmF5LnByb3RvdHlwZS5maWxsKHZhbHVlLCBzdGFydCA9IDAsIGVuZCA9IHRoaXMubGVuZ3RoKVxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZmlsbCh2YWx1ZSAvKiAsIHN0YXJ0ID0gMCwgZW5kID0gQGxlbmd0aCAqLykge1xyXG4gIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcclxuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBsZW5ndGgpO1xyXG4gIHZhciBlbmQgPSBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZDtcclxuICB2YXIgZW5kUG9zID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiB0b0Fic29sdXRlSW5kZXgoZW5kLCBsZW5ndGgpO1xyXG4gIHdoaWxlIChlbmRQb3MgPiBpbmRleCkgT1tpbmRleCsrXSA9IHZhbHVlO1xyXG4gIHJldHVybiBPO1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhZGRUb1Vuc2NvcGFibGVzID0gcmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJyk7XHJcbnZhciBzdGVwID0gcmVxdWlyZSgnLi9faXRlci1zdGVwJyk7XHJcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuL19pdGVyYXRvcnMnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxuXHJcbi8vIDIyLjEuMy40IEFycmF5LnByb3RvdHlwZS5lbnRyaWVzKClcclxuLy8gMjIuMS4zLjEzIEFycmF5LnByb3RvdHlwZS5rZXlzKClcclxuLy8gMjIuMS4zLjI5IEFycmF5LnByb3RvdHlwZS52YWx1ZXMoKVxyXG4vLyAyMi4xLjMuMzAgQXJyYXkucHJvdG90eXBlW0BAaXRlcmF0b3JdKClcclxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpKEFycmF5LCAnQXJyYXknLCBmdW5jdGlvbiAoaXRlcmF0ZWQsIGtpbmQpIHtcclxuICB0aGlzLl90ID0gdG9JT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XHJcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgIC8vIG5leHQgaW5kZXhcclxuICB0aGlzLl9rID0ga2luZDsgICAgICAgICAgICAgICAgLy8ga2luZFxyXG4vLyAyMi4xLjUuMi4xICVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcclxufSwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBPID0gdGhpcy5fdDtcclxuICB2YXIga2luZCA9IHRoaXMuX2s7XHJcbiAgdmFyIGluZGV4ID0gdGhpcy5faSsrO1xyXG4gIGlmICghTyB8fCBpbmRleCA+PSBPLmxlbmd0aCkge1xyXG4gICAgdGhpcy5fdCA9IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiBzdGVwKDEpO1xyXG4gIH1cclxuICBpZiAoa2luZCA9PSAna2V5cycpIHJldHVybiBzdGVwKDAsIGluZGV4KTtcclxuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHN0ZXAoMCwgT1tpbmRleF0pO1xyXG4gIHJldHVybiBzdGVwKDAsIFtpbmRleCwgT1tpbmRleF1dKTtcclxufSwgJ3ZhbHVlcycpO1xyXG5cclxuLy8gYXJndW1lbnRzTGlzdFtAQGl0ZXJhdG9yXSBpcyAlQXJyYXlQcm90b192YWx1ZXMlICg5LjQuNC42LCA5LjQuNC43KVxyXG5JdGVyYXRvcnMuQXJndW1lbnRzID0gSXRlcmF0b3JzLkFycmF5O1xyXG5cclxuYWRkVG9VbnNjb3BhYmxlcygna2V5cycpO1xyXG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcclxuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgcmVnZXhwRmxhZ3MgPSByZXF1aXJlKCcuL19mbGFncycpO1xyXG5cclxudmFyIG5hdGl2ZUV4ZWMgPSBSZWdFeHAucHJvdG90eXBlLmV4ZWM7XHJcbi8vIFRoaXMgYWx3YXlzIHJlZmVycyB0byB0aGUgbmF0aXZlIGltcGxlbWVudGF0aW9uLCBiZWNhdXNlIHRoZVxyXG4vLyBTdHJpbmcjcmVwbGFjZSBwb2x5ZmlsbCB1c2VzIC4vZml4LXJlZ2V4cC13ZWxsLWtub3duLXN5bWJvbC1sb2dpYy5qcyxcclxuLy8gd2hpY2ggbG9hZHMgdGhpcyBmaWxlIGJlZm9yZSBwYXRjaGluZyB0aGUgbWV0aG9kLlxyXG52YXIgbmF0aXZlUmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcclxuXHJcbnZhciBwYXRjaGVkRXhlYyA9IG5hdGl2ZUV4ZWM7XHJcblxyXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xyXG5cclxudmFyIFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyA9IChmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHJlMSA9IC9hLyxcclxuICAgICAgcmUyID0gL2IqL2c7XHJcbiAgbmF0aXZlRXhlYy5jYWxsKHJlMSwgJ2EnKTtcclxuICBuYXRpdmVFeGVjLmNhbGwocmUyLCAnYScpO1xyXG4gIHJldHVybiByZTFbTEFTVF9JTkRFWF0gIT09IDAgfHwgcmUyW0xBU1RfSU5ERVhdICE9PSAwO1xyXG59KSgpO1xyXG5cclxuLy8gbm9ucGFydGljaXBhdGluZyBjYXB0dXJpbmcgZ3JvdXAsIGNvcGllZCBmcm9tIGVzNS1zaGltJ3MgU3RyaW5nI3NwbGl0IHBhdGNoLlxyXG52YXIgTlBDR19JTkNMVURFRCA9IC8oKT8/Ly5leGVjKCcnKVsxXSAhPT0gdW5kZWZpbmVkO1xyXG5cclxudmFyIFBBVENIID0gVVBEQVRFU19MQVNUX0lOREVYX1dST05HIHx8IE5QQ0dfSU5DTFVERUQ7XHJcblxyXG5pZiAoUEFUQ0gpIHtcclxuICBwYXRjaGVkRXhlYyA9IGZ1bmN0aW9uIGV4ZWMoc3RyKSB7XHJcbiAgICB2YXIgcmUgPSB0aGlzO1xyXG4gICAgdmFyIGxhc3RJbmRleCwgcmVDb3B5LCBtYXRjaCwgaTtcclxuXHJcbiAgICBpZiAoTlBDR19JTkNMVURFRCkge1xyXG4gICAgICByZUNvcHkgPSBuZXcgUmVnRXhwKCdeJyArIHJlLnNvdXJjZSArICckKD8hXFxcXHMpJywgcmVnZXhwRmxhZ3MuY2FsbChyZSkpO1xyXG4gICAgfVxyXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORykgbGFzdEluZGV4ID0gcmVbTEFTVF9JTkRFWF07XHJcblxyXG4gICAgbWF0Y2ggPSBuYXRpdmVFeGVjLmNhbGwocmUsIHN0cik7XHJcblxyXG4gICAgaWYgKFVQREFURVNfTEFTVF9JTkRFWF9XUk9ORyAmJiBtYXRjaCkge1xyXG4gICAgICByZVtMQVNUX0lOREVYXSA9IHJlLmdsb2JhbCA/IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIDogbGFzdEluZGV4O1xyXG4gICAgfVxyXG4gICAgaWYgKE5QQ0dfSU5DTFVERUQgJiYgbWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSkge1xyXG4gICAgICAvLyBGaXggYnJvd3NlcnMgd2hvc2UgYGV4ZWNgIG1ldGhvZHMgZG9uJ3QgY29uc2lzdGVudGx5IHJldHVybiBgdW5kZWZpbmVkYFxyXG4gICAgICAvLyBmb3IgTlBDRywgbGlrZSBJRTguIE5PVEU6IFRoaXMgZG9lc24nIHdvcmsgZm9yIC8oLj8pPy9cclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWxvb3AtZnVuY1xyXG4gICAgICBuYXRpdmVSZXBsYWNlLmNhbGwobWF0Y2hbMF0sIHJlQ29weSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoIC0gMjsgaSsrKSB7XHJcbiAgICAgICAgICBpZiAoYXJndW1lbnRzW2ldID09PSB1bmRlZmluZWQpIG1hdGNoW2ldID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIG1hdGNoO1xyXG4gIH07XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gcGF0Y2hlZEV4ZWM7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XHJcblxyXG4gLy8gYEFkdmFuY2VTdHJpbmdJbmRleGAgYWJzdHJhY3Qgb3BlcmF0aW9uXHJcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFkdmFuY2VzdHJpbmdpbmRleFxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChTLCBpbmRleCwgdW5pY29kZSkge1xyXG4gIHJldHVybiBpbmRleCArICh1bmljb2RlID8gYXQoUywgaW5kZXgpLmxlbmd0aCA6IDEpO1xyXG59O1xyXG4iLCJ2YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBpbnZva2UgPSByZXF1aXJlKCcuL19pbnZva2UnKTtcclxudmFyIGh0bWwgPSByZXF1aXJlKCcuL19odG1sJyk7XHJcbnZhciBjZWwgPSByZXF1aXJlKCcuL19kb20tY3JlYXRlJyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcclxudmFyIHNldFRhc2sgPSBnbG9iYWwuc2V0SW1tZWRpYXRlO1xyXG52YXIgY2xlYXJUYXNrID0gZ2xvYmFsLmNsZWFySW1tZWRpYXRlO1xyXG52YXIgTWVzc2FnZUNoYW5uZWwgPSBnbG9iYWwuTWVzc2FnZUNoYW5uZWw7XHJcbnZhciBEaXNwYXRjaCA9IGdsb2JhbC5EaXNwYXRjaDtcclxudmFyIGNvdW50ZXIgPSAwO1xyXG52YXIgcXVldWUgPSB7fTtcclxudmFyIE9OUkVBRFlTVEFURUNIQU5HRSA9ICdvbnJlYWR5c3RhdGVjaGFuZ2UnO1xyXG52YXIgZGVmZXIsIGNoYW5uZWwsIHBvcnQ7XHJcbnZhciBydW4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGlkID0gK3RoaXM7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xyXG4gIGlmIChxdWV1ZS5oYXNPd25Qcm9wZXJ0eShpZCkpIHtcclxuICAgIHZhciBmbiA9IHF1ZXVlW2lkXTtcclxuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XHJcbiAgICBmbigpO1xyXG4gIH1cclxufTtcclxudmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgcnVuLmNhbGwoZXZlbnQuZGF0YSk7XHJcbn07XHJcbi8vIE5vZGUuanMgMC45KyAmIElFMTArIGhhcyBzZXRJbW1lZGlhdGUsIG90aGVyd2lzZTpcclxuaWYgKCFzZXRUYXNrIHx8ICFjbGVhclRhc2spIHtcclxuICBzZXRUYXNrID0gZnVuY3Rpb24gc2V0SW1tZWRpYXRlKGZuKSB7XHJcbiAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgdmFyIGkgPSAxO1xyXG4gICAgd2hpbGUgKGFyZ3VtZW50cy5sZW5ndGggPiBpKSBhcmdzLnB1c2goYXJndW1lbnRzW2krK10pO1xyXG4gICAgcXVldWVbKytjb3VudGVyXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICAgIGludm9rZSh0eXBlb2YgZm4gPT0gJ2Z1bmN0aW9uJyA/IGZuIDogRnVuY3Rpb24oZm4pLCBhcmdzKTtcclxuICAgIH07XHJcbiAgICBkZWZlcihjb3VudGVyKTtcclxuICAgIHJldHVybiBjb3VudGVyO1xyXG4gIH07XHJcbiAgY2xlYXJUYXNrID0gZnVuY3Rpb24gY2xlYXJJbW1lZGlhdGUoaWQpIHtcclxuICAgIGRlbGV0ZSBxdWV1ZVtpZF07XHJcbiAgfTtcclxuICAvLyBOb2RlLmpzIDAuOC1cclxuICBpZiAocmVxdWlyZSgnLi9fY29mJykocHJvY2VzcykgPT0gJ3Byb2Nlc3MnKSB7XHJcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGN0eChydW4sIGlkLCAxKSk7XHJcbiAgICB9O1xyXG4gIC8vIFNwaGVyZSAoSlMgZ2FtZSBlbmdpbmUpIERpc3BhdGNoIEFQSVxyXG4gIH0gZWxzZSBpZiAoRGlzcGF0Y2ggJiYgRGlzcGF0Y2gubm93KSB7XHJcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICBEaXNwYXRjaC5ub3coY3R4KHJ1biwgaWQsIDEpKTtcclxuICAgIH07XHJcbiAgLy8gQnJvd3NlcnMgd2l0aCBNZXNzYWdlQ2hhbm5lbCwgaW5jbHVkZXMgV2ViV29ya2Vyc1xyXG4gIH0gZWxzZSBpZiAoTWVzc2FnZUNoYW5uZWwpIHtcclxuICAgIGNoYW5uZWwgPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcclxuICAgIHBvcnQgPSBjaGFubmVsLnBvcnQyO1xyXG4gICAgY2hhbm5lbC5wb3J0MS5vbm1lc3NhZ2UgPSBsaXN0ZW5lcjtcclxuICAgIGRlZmVyID0gY3R4KHBvcnQucG9zdE1lc3NhZ2UsIHBvcnQsIDEpO1xyXG4gIC8vIEJyb3dzZXJzIHdpdGggcG9zdE1lc3NhZ2UsIHNraXAgV2ViV29ya2Vyc1xyXG4gIC8vIElFOCBoYXMgcG9zdE1lc3NhZ2UsIGJ1dCBpdCdzIHN5bmMgJiB0eXBlb2YgaXRzIHBvc3RNZXNzYWdlIGlzICdvYmplY3QnXHJcbiAgfSBlbHNlIGlmIChnbG9iYWwuYWRkRXZlbnRMaXN0ZW5lciAmJiB0eXBlb2YgcG9zdE1lc3NhZ2UgPT0gJ2Z1bmN0aW9uJyAmJiAhZ2xvYmFsLmltcG9ydFNjcmlwdHMpIHtcclxuICAgIGRlZmVyID0gZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgIGdsb2JhbC5wb3N0TWVzc2FnZShpZCArICcnLCAnKicpO1xyXG4gICAgfTtcclxuICAgIGdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdtZXNzYWdlJywgbGlzdGVuZXIsIGZhbHNlKTtcclxuICAvLyBJRTgtXHJcbiAgfSBlbHNlIGlmIChPTlJFQURZU1RBVEVDSEFOR0UgaW4gY2VsKCdzY3JpcHQnKSkge1xyXG4gICAgZGVmZXIgPSBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgaHRtbC5hcHBlbmRDaGlsZChjZWwoJ3NjcmlwdCcpKVtPTlJFQURZU1RBVEVDSEFOR0VdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGh0bWwucmVtb3ZlQ2hpbGQodGhpcyk7XHJcbiAgICAgICAgcnVuLmNhbGwoaWQpO1xyXG4gICAgICB9O1xyXG4gICAgfTtcclxuICAvLyBSZXN0IG9sZCBicm93c2Vyc1xyXG4gIH0gZWxzZSB7XHJcbiAgICBkZWZlciA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgICBzZXRUaW1lb3V0KGN0eChydW4sIGlkLCAxKSwgMCk7XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBzZXQ6IHNldFRhc2ssXHJcbiAgY2xlYXI6IGNsZWFyVGFza1xyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBtYWNyb3Rhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xyXG52YXIgT2JzZXJ2ZXIgPSBnbG9iYWwuTXV0YXRpb25PYnNlcnZlciB8fCBnbG9iYWwuV2ViS2l0TXV0YXRpb25PYnNlcnZlcjtcclxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcclxudmFyIFByb21pc2UgPSBnbG9iYWwuUHJvbWlzZTtcclxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKCkge1xyXG4gIHZhciBoZWFkLCBsYXN0LCBub3RpZnk7XHJcblxyXG4gIHZhciBmbHVzaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwYXJlbnQsIGZuO1xyXG4gICAgaWYgKGlzTm9kZSAmJiAocGFyZW50ID0gcHJvY2Vzcy5kb21haW4pKSBwYXJlbnQuZXhpdCgpO1xyXG4gICAgd2hpbGUgKGhlYWQpIHtcclxuICAgICAgZm4gPSBoZWFkLmZuO1xyXG4gICAgICBoZWFkID0gaGVhZC5uZXh0O1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGZuKCk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAoaGVhZCkgbm90aWZ5KCk7XHJcbiAgICAgICAgZWxzZSBsYXN0ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRocm93IGU7XHJcbiAgICAgIH1cclxuICAgIH0gbGFzdCA9IHVuZGVmaW5lZDtcclxuICAgIGlmIChwYXJlbnQpIHBhcmVudC5lbnRlcigpO1xyXG4gIH07XHJcblxyXG4gIC8vIE5vZGUuanNcclxuICBpZiAoaXNOb2RlKSB7XHJcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZmx1c2gpO1xyXG4gICAgfTtcclxuICAvLyBicm93c2VycyB3aXRoIE11dGF0aW9uT2JzZXJ2ZXIsIGV4Y2VwdCBpT1MgU2FmYXJpIC0gaHR0cHM6Ly9naXRodWIuY29tL3psb2lyb2NrL2NvcmUtanMvaXNzdWVzLzMzOVxyXG4gIH0gZWxzZSBpZiAoT2JzZXJ2ZXIgJiYgIShnbG9iYWwubmF2aWdhdG9yICYmIGdsb2JhbC5uYXZpZ2F0b3Iuc3RhbmRhbG9uZSkpIHtcclxuICAgIHZhciB0b2dnbGUgPSB0cnVlO1xyXG4gICAgdmFyIG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XHJcbiAgICBuZXcgT2JzZXJ2ZXIoZmx1c2gpLm9ic2VydmUobm9kZSwgeyBjaGFyYWN0ZXJEYXRhOiB0cnVlIH0pOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ld1xyXG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBub2RlLmRhdGEgPSB0b2dnbGUgPSAhdG9nZ2xlO1xyXG4gICAgfTtcclxuICAvLyBlbnZpcm9ubWVudHMgd2l0aCBtYXliZSBub24tY29tcGxldGVseSBjb3JyZWN0LCBidXQgZXhpc3RlbnQgUHJvbWlzZVxyXG4gIH0gZWxzZSBpZiAoUHJvbWlzZSAmJiBQcm9taXNlLnJlc29sdmUpIHtcclxuICAgIC8vIFByb21pc2UucmVzb2x2ZSB3aXRob3V0IGFuIGFyZ3VtZW50IHRocm93cyBhbiBlcnJvciBpbiBMRyBXZWJPUyAyXHJcbiAgICB2YXIgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSh1bmRlZmluZWQpO1xyXG4gICAgbm90aWZ5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICBwcm9taXNlLnRoZW4oZmx1c2gpO1xyXG4gICAgfTtcclxuICAvLyBmb3Igb3RoZXIgZW52aXJvbm1lbnRzIC0gbWFjcm90YXNrIGJhc2VkIG9uOlxyXG4gIC8vIC0gc2V0SW1tZWRpYXRlXHJcbiAgLy8gLSBNZXNzYWdlQ2hhbm5lbFxyXG4gIC8vIC0gd2luZG93LnBvc3RNZXNzYWdcclxuICAvLyAtIG9ucmVhZHlzdGF0ZWNoYW5nZVxyXG4gIC8vIC0gc2V0VGltZW91dFxyXG4gIH0gZWxzZSB7XHJcbiAgICBub3RpZnkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgIC8vIHN0cmFuZ2UgSUUgKyB3ZWJwYWNrIGRldiBzZXJ2ZXIgYnVnIC0gdXNlIC5jYWxsKGdsb2JhbClcclxuICAgICAgbWFjcm90YXNrLmNhbGwoZ2xvYmFsLCBmbHVzaCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xyXG4gICAgdmFyIHRhc2sgPSB7IGZuOiBmbiwgbmV4dDogdW5kZWZpbmVkIH07XHJcbiAgICBpZiAobGFzdCkgbGFzdC5uZXh0ID0gdGFzaztcclxuICAgIGlmICghaGVhZCkge1xyXG4gICAgICBoZWFkID0gdGFzaztcclxuICAgICAgbm90aWZ5KCk7XHJcbiAgICB9IGxhc3QgPSB0YXNrO1xyXG4gIH07XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjUuNC4xLjUgTmV3UHJvbWlzZUNhcGFiaWxpdHkoQylcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxuXHJcbmZ1bmN0aW9uIFByb21pc2VDYXBhYmlsaXR5KEMpIHtcclxuICB2YXIgcmVzb2x2ZSwgcmVqZWN0O1xyXG4gIHRoaXMucHJvbWlzZSA9IG5ldyBDKGZ1bmN0aW9uICgkJHJlc29sdmUsICQkcmVqZWN0KSB7XHJcbiAgICBpZiAocmVzb2x2ZSAhPT0gdW5kZWZpbmVkIHx8IHJlamVjdCAhPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoJ0JhZCBQcm9taXNlIGNvbnN0cnVjdG9yJyk7XHJcbiAgICByZXNvbHZlID0gJCRyZXNvbHZlO1xyXG4gICAgcmVqZWN0ID0gJCRyZWplY3Q7XHJcbiAgfSk7XHJcbiAgdGhpcy5yZXNvbHZlID0gYUZ1bmN0aW9uKHJlc29sdmUpO1xyXG4gIHRoaXMucmVqZWN0ID0gYUZ1bmN0aW9uKHJlamVjdCk7XHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiAoQykge1xyXG4gIHJldHVybiBuZXcgUHJvbWlzZUNhcGFiaWxpdHkoQyk7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpO1xyXG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcclxudmFyICR0eXBlZCA9IHJlcXVpcmUoJy4vX3R5cGVkJyk7XHJcbnZhciBoaWRlID0gcmVxdWlyZSgnLi9faGlkZScpO1xyXG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG52YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi9fdG8taW50ZWdlcicpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIHRvSW5kZXggPSByZXF1aXJlKCcuL190by1pbmRleCcpO1xyXG52YXIgZ09QTiA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZjtcclxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIGFycmF5RmlsbCA9IHJlcXVpcmUoJy4vX2FycmF5LWZpbGwnKTtcclxudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcclxudmFyIEFSUkFZX0JVRkZFUiA9ICdBcnJheUJ1ZmZlcic7XHJcbnZhciBEQVRBX1ZJRVcgPSAnRGF0YVZpZXcnO1xyXG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XHJcbnZhciBXUk9OR19MRU5HVEggPSAnV3JvbmcgbGVuZ3RoISc7XHJcbnZhciBXUk9OR19JTkRFWCA9ICdXcm9uZyBpbmRleCEnO1xyXG52YXIgJEFycmF5QnVmZmVyID0gZ2xvYmFsW0FSUkFZX0JVRkZFUl07XHJcbnZhciAkRGF0YVZpZXcgPSBnbG9iYWxbREFUQV9WSUVXXTtcclxudmFyIE1hdGggPSBnbG9iYWwuTWF0aDtcclxudmFyIFJhbmdlRXJyb3IgPSBnbG9iYWwuUmFuZ2VFcnJvcjtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvdy1yZXN0cmljdGVkLW5hbWVzXHJcbnZhciBJbmZpbml0eSA9IGdsb2JhbC5JbmZpbml0eTtcclxudmFyIEJhc2VCdWZmZXIgPSAkQXJyYXlCdWZmZXI7XHJcbnZhciBhYnMgPSBNYXRoLmFicztcclxudmFyIHBvdyA9IE1hdGgucG93O1xyXG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xyXG52YXIgbG9nID0gTWF0aC5sb2c7XHJcbnZhciBMTjIgPSBNYXRoLkxOMjtcclxudmFyIEJVRkZFUiA9ICdidWZmZXInO1xyXG52YXIgQllURV9MRU5HVEggPSAnYnl0ZUxlbmd0aCc7XHJcbnZhciBCWVRFX09GRlNFVCA9ICdieXRlT2Zmc2V0JztcclxudmFyICRCVUZGRVIgPSBERVNDUklQVE9SUyA/ICdfYicgOiBCVUZGRVI7XHJcbnZhciAkTEVOR1RIID0gREVTQ1JJUFRPUlMgPyAnX2wnIDogQllURV9MRU5HVEg7XHJcbnZhciAkT0ZGU0VUID0gREVTQ1JJUFRPUlMgPyAnX28nIDogQllURV9PRkZTRVQ7XHJcblxyXG4vLyBJRUVFNzU0IGNvbnZlcnNpb25zIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvaWVlZTc1NFxyXG5mdW5jdGlvbiBwYWNrSUVFRTc1NCh2YWx1ZSwgbUxlbiwgbkJ5dGVzKSB7XHJcbiAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShuQnl0ZXMpO1xyXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxO1xyXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxO1xyXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMTtcclxuICB2YXIgcnQgPSBtTGVuID09PSAyMyA/IHBvdygyLCAtMjQpIC0gcG93KDIsIC03NykgOiAwO1xyXG4gIHZhciBpID0gMDtcclxuICB2YXIgcyA9IHZhbHVlIDwgMCB8fCB2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwID8gMSA6IDA7XHJcbiAgdmFyIGUsIG0sIGM7XHJcbiAgdmFsdWUgPSBhYnModmFsdWUpO1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICBpZiAodmFsdWUgIT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5KSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICBtID0gdmFsdWUgIT0gdmFsdWUgPyAxIDogMDtcclxuICAgIGUgPSBlTWF4O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBlID0gZmxvb3IobG9nKHZhbHVlKSAvIExOMik7XHJcbiAgICBpZiAodmFsdWUgKiAoYyA9IHBvdygyLCAtZSkpIDwgMSkge1xyXG4gICAgICBlLS07XHJcbiAgICAgIGMgKj0gMjtcclxuICAgIH1cclxuICAgIGlmIChlICsgZUJpYXMgPj0gMSkge1xyXG4gICAgICB2YWx1ZSArPSBydCAvIGM7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWx1ZSArPSBydCAqIHBvdygyLCAxIC0gZUJpYXMpO1xyXG4gICAgfVxyXG4gICAgaWYgKHZhbHVlICogYyA+PSAyKSB7XHJcbiAgICAgIGUrKztcclxuICAgICAgYyAvPSAyO1xyXG4gICAgfVxyXG4gICAgaWYgKGUgKyBlQmlhcyA+PSBlTWF4KSB7XHJcbiAgICAgIG0gPSAwO1xyXG4gICAgICBlID0gZU1heDtcclxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcclxuICAgICAgbSA9ICh2YWx1ZSAqIGMgLSAxKSAqIHBvdygyLCBtTGVuKTtcclxuICAgICAgZSA9IGUgKyBlQmlhcztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG0gPSB2YWx1ZSAqIHBvdygyLCBlQmlhcyAtIDEpICogcG93KDIsIG1MZW4pO1xyXG4gICAgICBlID0gMDtcclxuICAgIH1cclxuICB9XHJcbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW2krK10gPSBtICYgMjU1LCBtIC89IDI1NiwgbUxlbiAtPSA4KTtcclxuICBlID0gZSA8PCBtTGVuIHwgbTtcclxuICBlTGVuICs9IG1MZW47XHJcbiAgZm9yICg7IGVMZW4gPiAwOyBidWZmZXJbaSsrXSA9IGUgJiAyNTUsIGUgLz0gMjU2LCBlTGVuIC09IDgpO1xyXG4gIGJ1ZmZlclstLWldIHw9IHMgKiAxMjg7XHJcbiAgcmV0dXJuIGJ1ZmZlcjtcclxufVxyXG5mdW5jdGlvbiB1bnBhY2tJRUVFNzU0KGJ1ZmZlciwgbUxlbiwgbkJ5dGVzKSB7XHJcbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDE7XHJcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDE7XHJcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxO1xyXG4gIHZhciBuQml0cyA9IGVMZW4gLSA3O1xyXG4gIHZhciBpID0gbkJ5dGVzIC0gMTtcclxuICB2YXIgcyA9IGJ1ZmZlcltpLS1dO1xyXG4gIHZhciBlID0gcyAmIDEyNztcclxuICB2YXIgbTtcclxuICBzID4+PSA3O1xyXG4gIGZvciAoOyBuQml0cyA+IDA7IGUgPSBlICogMjU2ICsgYnVmZmVyW2ldLCBpLS0sIG5CaXRzIC09IDgpO1xyXG4gIG0gPSBlICYgKDEgPDwgLW5CaXRzKSAtIDE7XHJcbiAgZSA+Pj0gLW5CaXRzO1xyXG4gIG5CaXRzICs9IG1MZW47XHJcbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbaV0sIGktLSwgbkJpdHMgLT0gOCk7XHJcbiAgaWYgKGUgPT09IDApIHtcclxuICAgIGUgPSAxIC0gZUJpYXM7XHJcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XHJcbiAgICByZXR1cm4gbSA/IE5hTiA6IHMgPyAtSW5maW5pdHkgOiBJbmZpbml0eTtcclxuICB9IGVsc2Uge1xyXG4gICAgbSA9IG0gKyBwb3coMiwgbUxlbik7XHJcbiAgICBlID0gZSAtIGVCaWFzO1xyXG4gIH0gcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBwb3coMiwgZSAtIG1MZW4pO1xyXG59XHJcblxyXG5mdW5jdGlvbiB1bnBhY2tJMzIoYnl0ZXMpIHtcclxuICByZXR1cm4gYnl0ZXNbM10gPDwgMjQgfCBieXRlc1syXSA8PCAxNiB8IGJ5dGVzWzFdIDw8IDggfCBieXRlc1swXTtcclxufVxyXG5mdW5jdGlvbiBwYWNrSTgoaXQpIHtcclxuICByZXR1cm4gW2l0ICYgMHhmZl07XHJcbn1cclxuZnVuY3Rpb24gcGFja0kxNihpdCkge1xyXG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZl07XHJcbn1cclxuZnVuY3Rpb24gcGFja0kzMihpdCkge1xyXG4gIHJldHVybiBbaXQgJiAweGZmLCBpdCA+PiA4ICYgMHhmZiwgaXQgPj4gMTYgJiAweGZmLCBpdCA+PiAyNCAmIDB4ZmZdO1xyXG59XHJcbmZ1bmN0aW9uIHBhY2tGNjQoaXQpIHtcclxuICByZXR1cm4gcGFja0lFRUU3NTQoaXQsIDUyLCA4KTtcclxufVxyXG5mdW5jdGlvbiBwYWNrRjMyKGl0KSB7XHJcbiAgcmV0dXJuIHBhY2tJRUVFNzU0KGl0LCAyMywgNCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFkZEdldHRlcihDLCBrZXksIGludGVybmFsKSB7XHJcbiAgZFAoQ1tQUk9UT1RZUEVdLCBrZXksIHsgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzW2ludGVybmFsXTsgfSB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gZ2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgaXNMaXR0bGVFbmRpYW4pIHtcclxuICB2YXIgbnVtSW5kZXggPSAraW5kZXg7XHJcbiAgdmFyIGludEluZGV4ID0gdG9JbmRleChudW1JbmRleCk7XHJcbiAgaWYgKGludEluZGV4ICsgYnl0ZXMgPiB2aWV3WyRMRU5HVEhdKSB0aHJvdyBSYW5nZUVycm9yKFdST05HX0lOREVYKTtcclxuICB2YXIgc3RvcmUgPSB2aWV3WyRCVUZGRVJdLl9iO1xyXG4gIHZhciBzdGFydCA9IGludEluZGV4ICsgdmlld1skT0ZGU0VUXTtcclxuICB2YXIgcGFjayA9IHN0b3JlLnNsaWNlKHN0YXJ0LCBzdGFydCArIGJ5dGVzKTtcclxuICByZXR1cm4gaXNMaXR0bGVFbmRpYW4gPyBwYWNrIDogcGFjay5yZXZlcnNlKCk7XHJcbn1cclxuZnVuY3Rpb24gc2V0KHZpZXcsIGJ5dGVzLCBpbmRleCwgY29udmVyc2lvbiwgdmFsdWUsIGlzTGl0dGxlRW5kaWFuKSB7XHJcbiAgdmFyIG51bUluZGV4ID0gK2luZGV4O1xyXG4gIHZhciBpbnRJbmRleCA9IHRvSW5kZXgobnVtSW5kZXgpO1xyXG4gIGlmIChpbnRJbmRleCArIGJ5dGVzID4gdmlld1skTEVOR1RIXSkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19JTkRFWCk7XHJcbiAgdmFyIHN0b3JlID0gdmlld1skQlVGRkVSXS5fYjtcclxuICB2YXIgc3RhcnQgPSBpbnRJbmRleCArIHZpZXdbJE9GRlNFVF07XHJcbiAgdmFyIHBhY2sgPSBjb252ZXJzaW9uKCt2YWx1ZSk7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlczsgaSsrKSBzdG9yZVtzdGFydCArIGldID0gcGFja1tpc0xpdHRsZUVuZGlhbiA/IGkgOiBieXRlcyAtIGkgLSAxXTtcclxufVxyXG5cclxuaWYgKCEkdHlwZWQuQUJWKSB7XHJcbiAgJEFycmF5QnVmZmVyID0gZnVuY3Rpb24gQXJyYXlCdWZmZXIobGVuZ3RoKSB7XHJcbiAgICBhbkluc3RhbmNlKHRoaXMsICRBcnJheUJ1ZmZlciwgQVJSQVlfQlVGRkVSKTtcclxuICAgIHZhciBieXRlTGVuZ3RoID0gdG9JbmRleChsZW5ndGgpO1xyXG4gICAgdGhpcy5fYiA9IGFycmF5RmlsbC5jYWxsKG5ldyBBcnJheShieXRlTGVuZ3RoKSwgMCk7XHJcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcclxuICB9O1xyXG5cclxuICAkRGF0YVZpZXcgPSBmdW5jdGlvbiBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQsIGJ5dGVMZW5ndGgpIHtcclxuICAgIGFuSW5zdGFuY2UodGhpcywgJERhdGFWaWV3LCBEQVRBX1ZJRVcpO1xyXG4gICAgYW5JbnN0YW5jZShidWZmZXIsICRBcnJheUJ1ZmZlciwgREFUQV9WSUVXKTtcclxuICAgIHZhciBidWZmZXJMZW5ndGggPSBidWZmZXJbJExFTkdUSF07XHJcbiAgICB2YXIgb2Zmc2V0ID0gdG9JbnRlZ2VyKGJ5dGVPZmZzZXQpO1xyXG4gICAgaWYgKG9mZnNldCA8IDAgfHwgb2Zmc2V0ID4gYnVmZmVyTGVuZ3RoKSB0aHJvdyBSYW5nZUVycm9yKCdXcm9uZyBvZmZzZXQhJyk7XHJcbiAgICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gYnVmZmVyTGVuZ3RoIC0gb2Zmc2V0IDogdG9MZW5ndGgoYnl0ZUxlbmd0aCk7XHJcbiAgICBpZiAob2Zmc2V0ICsgYnl0ZUxlbmd0aCA+IGJ1ZmZlckxlbmd0aCkgdGhyb3cgUmFuZ2VFcnJvcihXUk9OR19MRU5HVEgpO1xyXG4gICAgdGhpc1skQlVGRkVSXSA9IGJ1ZmZlcjtcclxuICAgIHRoaXNbJE9GRlNFVF0gPSBvZmZzZXQ7XHJcbiAgICB0aGlzWyRMRU5HVEhdID0gYnl0ZUxlbmd0aDtcclxuICB9O1xyXG5cclxuICBpZiAoREVTQ1JJUFRPUlMpIHtcclxuICAgIGFkZEdldHRlcigkQXJyYXlCdWZmZXIsIEJZVEVfTEVOR1RILCAnX2wnKTtcclxuICAgIGFkZEdldHRlcigkRGF0YVZpZXcsIEJVRkZFUiwgJ19iJyk7XHJcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX0xFTkdUSCwgJ19sJyk7XHJcbiAgICBhZGRHZXR0ZXIoJERhdGFWaWV3LCBCWVRFX09GRlNFVCwgJ19vJyk7XHJcbiAgfVxyXG5cclxuICByZWRlZmluZUFsbCgkRGF0YVZpZXdbUFJPVE9UWVBFXSwge1xyXG4gICAgZ2V0SW50ODogZnVuY3Rpb24gZ2V0SW50OChieXRlT2Zmc2V0KSB7XHJcbiAgICAgIHJldHVybiBnZXQodGhpcywgMSwgYnl0ZU9mZnNldClbMF0gPDwgMjQgPj4gMjQ7XHJcbiAgICB9LFxyXG4gICAgZ2V0VWludDg6IGZ1bmN0aW9uIGdldFVpbnQ4KGJ5dGVPZmZzZXQpIHtcclxuICAgICAgcmV0dXJuIGdldCh0aGlzLCAxLCBieXRlT2Zmc2V0KVswXTtcclxuICAgIH0sXHJcbiAgICBnZXRJbnQxNjogZnVuY3Rpb24gZ2V0SW50MTYoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xyXG4gICAgICB2YXIgYnl0ZXMgPSBnZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKTtcclxuICAgICAgcmV0dXJuIChieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF0pIDw8IDE2ID4+IDE2O1xyXG4gICAgfSxcclxuICAgIGdldFVpbnQxNjogZnVuY3Rpb24gZ2V0VWludDE2KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgdmFyIGJ5dGVzID0gZ2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSk7XHJcbiAgICAgIHJldHVybiBieXRlc1sxXSA8PCA4IHwgYnl0ZXNbMF07XHJcbiAgICB9LFxyXG4gICAgZ2V0SW50MzI6IGZ1bmN0aW9uIGdldEludDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgcmV0dXJuIHVucGFja0kzMihnZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgYXJndW1lbnRzWzFdKSk7XHJcbiAgICB9LFxyXG4gICAgZ2V0VWludDMyOiBmdW5jdGlvbiBnZXRVaW50MzIoYnl0ZU9mZnNldCAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xyXG4gICAgICByZXR1cm4gdW5wYWNrSTMyKGdldCh0aGlzLCA0LCBieXRlT2Zmc2V0LCBhcmd1bWVudHNbMV0pKSA+Pj4gMDtcclxuICAgIH0sXHJcbiAgICBnZXRGbG9hdDMyOiBmdW5jdGlvbiBnZXRGbG9hdDMyKGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDIzLCA0KTtcclxuICAgIH0sXHJcbiAgICBnZXRGbG9hdDY0OiBmdW5jdGlvbiBnZXRGbG9hdDY0KGJ5dGVPZmZzZXQgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgcmV0dXJuIHVucGFja0lFRUU3NTQoZ2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIGFyZ3VtZW50c1sxXSksIDUyLCA4KTtcclxuICAgIH0sXHJcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XHJcbiAgICAgIHNldCh0aGlzLCAxLCBieXRlT2Zmc2V0LCBwYWNrSTgsIHZhbHVlKTtcclxuICAgIH0sXHJcbiAgICBzZXRVaW50ODogZnVuY3Rpb24gc2V0VWludDgoYnl0ZU9mZnNldCwgdmFsdWUpIHtcclxuICAgICAgc2V0KHRoaXMsIDEsIGJ5dGVPZmZzZXQsIHBhY2tJOCwgdmFsdWUpO1xyXG4gICAgfSxcclxuICAgIHNldEludDE2OiBmdW5jdGlvbiBzZXRJbnQxNihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xyXG4gICAgICBzZXQodGhpcywgMiwgYnl0ZU9mZnNldCwgcGFja0kxNiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XHJcbiAgICB9LFxyXG4gICAgc2V0VWludDE2OiBmdW5jdGlvbiBzZXRVaW50MTYoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDIsIGJ5dGVPZmZzZXQsIHBhY2tJMTYsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfSxcclxuICAgIHNldEludDMyOiBmdW5jdGlvbiBzZXRJbnQzMihieXRlT2Zmc2V0LCB2YWx1ZSAvKiAsIGxpdHRsZUVuZGlhbiAqLykge1xyXG4gICAgICBzZXQodGhpcywgNCwgYnl0ZU9mZnNldCwgcGFja0kzMiwgdmFsdWUsIGFyZ3VtZW50c1syXSk7XHJcbiAgICB9LFxyXG4gICAgc2V0VWludDMyOiBmdW5jdGlvbiBzZXRVaW50MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tJMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfSxcclxuICAgIHNldEZsb2F0MzI6IGZ1bmN0aW9uIHNldEZsb2F0MzIoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDQsIGJ5dGVPZmZzZXQsIHBhY2tGMzIsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfSxcclxuICAgIHNldEZsb2F0NjQ6IGZ1bmN0aW9uIHNldEZsb2F0NjQoYnl0ZU9mZnNldCwgdmFsdWUgLyogLCBsaXR0bGVFbmRpYW4gKi8pIHtcclxuICAgICAgc2V0KHRoaXMsIDgsIGJ5dGVPZmZzZXQsIHBhY2tGNjQsIHZhbHVlLCBhcmd1bWVudHNbMl0pO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59IGVsc2Uge1xyXG4gIGlmICghZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICAgJEFycmF5QnVmZmVyKDEpO1xyXG4gIH0pIHx8ICFmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICBuZXcgJEFycmF5QnVmZmVyKC0xKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXdcclxuICB9KSB8fCBmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgICBuZXcgJEFycmF5QnVmZmVyKCk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICBuZXcgJEFycmF5QnVmZmVyKDEuNSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICBuZXcgJEFycmF5QnVmZmVyKE5hTik7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3XHJcbiAgICByZXR1cm4gJEFycmF5QnVmZmVyLm5hbWUgIT0gQVJSQVlfQlVGRkVSO1xyXG4gIH0pKSB7XHJcbiAgICAkQXJyYXlCdWZmZXIgPSBmdW5jdGlvbiBBcnJheUJ1ZmZlcihsZW5ndGgpIHtcclxuICAgICAgYW5JbnN0YW5jZSh0aGlzLCAkQXJyYXlCdWZmZXIpO1xyXG4gICAgICByZXR1cm4gbmV3IEJhc2VCdWZmZXIodG9JbmRleChsZW5ndGgpKTtcclxuICAgIH07XHJcbiAgICB2YXIgQXJyYXlCdWZmZXJQcm90byA9ICRBcnJheUJ1ZmZlcltQUk9UT1RZUEVdID0gQmFzZUJ1ZmZlcltQUk9UT1RZUEVdO1xyXG4gICAgZm9yICh2YXIga2V5cyA9IGdPUE4oQmFzZUJ1ZmZlciksIGogPSAwLCBrZXk7IGtleXMubGVuZ3RoID4gajspIHtcclxuICAgICAgaWYgKCEoKGtleSA9IGtleXNbaisrXSkgaW4gJEFycmF5QnVmZmVyKSkgaGlkZSgkQXJyYXlCdWZmZXIsIGtleSwgQmFzZUJ1ZmZlcltrZXldKTtcclxuICAgIH1cclxuICAgIGlmICghTElCUkFSWSkgQXJyYXlCdWZmZXJQcm90by5jb25zdHJ1Y3RvciA9ICRBcnJheUJ1ZmZlcjtcclxuICB9XHJcbiAgLy8gaU9TIFNhZmFyaSA3LnggYnVnXHJcbiAgdmFyIHZpZXcgPSBuZXcgJERhdGFWaWV3KG5ldyAkQXJyYXlCdWZmZXIoMikpO1xyXG4gIHZhciAkc2V0SW50OCA9ICREYXRhVmlld1tQUk9UT1RZUEVdLnNldEludDg7XHJcbiAgdmlldy5zZXRJbnQ4KDAsIDIxNDc0ODM2NDgpO1xyXG4gIHZpZXcuc2V0SW50OCgxLCAyMTQ3NDgzNjQ5KTtcclxuICBpZiAodmlldy5nZXRJbnQ4KDApIHx8ICF2aWV3LmdldEludDgoMSkpIHJlZGVmaW5lQWxsKCREYXRhVmlld1tQUk9UT1RZUEVdLCB7XHJcbiAgICBzZXRJbnQ4OiBmdW5jdGlvbiBzZXRJbnQ4KGJ5dGVPZmZzZXQsIHZhbHVlKSB7XHJcbiAgICAgICRzZXRJbnQ4LmNhbGwodGhpcywgYnl0ZU9mZnNldCwgdmFsdWUgPDwgMjQgPj4gMjQpO1xyXG4gICAgfSxcclxuICAgIHNldFVpbnQ4OiBmdW5jdGlvbiBzZXRVaW50OChieXRlT2Zmc2V0LCB2YWx1ZSkge1xyXG4gICAgICAkc2V0SW50OC5jYWxsKHRoaXMsIGJ5dGVPZmZzZXQsIHZhbHVlIDw8IDI0ID4+IDI0KTtcclxuICAgIH1cclxuICB9LCB0cnVlKTtcclxufVxyXG5zZXRUb1N0cmluZ1RhZygkQXJyYXlCdWZmZXIsIEFSUkFZX0JVRkZFUik7XHJcbnNldFRvU3RyaW5nVGFnKCREYXRhVmlldywgREFUQV9WSUVXKTtcclxuaGlkZSgkRGF0YVZpZXdbUFJPVE9UWVBFXSwgJHR5cGVkLlZJRVcsIHRydWUpO1xyXG5leHBvcnRzW0FSUkFZX0JVRkZFUl0gPSAkQXJyYXlCdWZmZXI7XHJcbmV4cG9ydHNbREFUQV9WSUVXXSA9ICREYXRhVmlldztcclxuIiwidmFyIGc7XHJcblxyXG4vLyBUaGlzIHdvcmtzIGluIG5vbi1zdHJpY3QgbW9kZVxyXG5nID0gKGZ1bmN0aW9uKCkge1xyXG5cdHJldHVybiB0aGlzO1xyXG59KSgpO1xyXG5cclxudHJ5IHtcclxuXHQvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcclxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xyXG59IGNhdGNoIChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgIXJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVxdWlyZSgnLi9fZG9tLWNyZWF0ZScpKCdkaXYnKSwgJ2EnLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KS5hICE9IDc7XHJcbn0pO1xyXG4iLCJleHBvcnRzLmYgPSByZXF1aXJlKCcuL193a3MnKTtcclxuIiwidmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgYXJyYXlJbmRleE9mID0gcmVxdWlyZSgnLi9fYXJyYXktaW5jbHVkZXMnKShmYWxzZSk7XHJcbnZhciBJRV9QUk9UTyA9IHJlcXVpcmUoJy4vX3NoYXJlZC1rZXknKSgnSUVfUFJPVE8nKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9iamVjdCwgbmFtZXMpIHtcclxuICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xyXG4gIHZhciBpID0gMDtcclxuICB2YXIgcmVzdWx0ID0gW107XHJcbiAgdmFyIGtleTtcclxuICBmb3IgKGtleSBpbiBPKSBpZiAoa2V5ICE9IElFX1BST1RPKSBoYXMoTywga2V5KSAmJiByZXN1bHQucHVzaChrZXkpO1xyXG4gIC8vIERvbid0IGVudW0gYnVnICYgaGlkZGVuIGtleXNcclxuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xyXG4gICAgfmFycmF5SW5kZXhPZihyZXN1bHQsIGtleSkgfHwgcmVzdWx0LnB1c2goa2V5KTtcclxuICB9XHJcbiAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xyXG4gIGFuT2JqZWN0KE8pO1xyXG4gIHZhciBrZXlzID0gZ2V0S2V5cyhQcm9wZXJ0aWVzKTtcclxuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgdmFyIGkgPSAwO1xyXG4gIHZhciBQO1xyXG4gIHdoaWxlIChsZW5ndGggPiBpKSBkUC5mKE8sIFAgPSBrZXlzW2krK10sIFByb3BlcnRpZXNbUF0pO1xyXG4gIHJldHVybiBPO1xyXG59O1xyXG4iLCIvLyBmYWxsYmFjayBmb3IgSUUxMSBidWdneSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyB3aXRoIGlmcmFtZSBhbmQgd2luZG93XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xyXG52YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcclxuXHJcbnZhciB3aW5kb3dOYW1lcyA9IHR5cGVvZiB3aW5kb3cgPT0gJ29iamVjdCcgJiYgd2luZG93ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzXHJcbiAgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh3aW5kb3cpIDogW107XHJcblxyXG52YXIgZ2V0V2luZG93TmFtZXMgPSBmdW5jdGlvbiAoaXQpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGdPUE4oaXQpO1xyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHJldHVybiB3aW5kb3dOYW1lcy5zbGljZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbm1vZHVsZS5leHBvcnRzLmYgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XHJcbiAgcmV0dXJuIHdpbmRvd05hbWVzICYmIHRvU3RyaW5nLmNhbGwoaXQpID09ICdbb2JqZWN0IFdpbmRvd10nID8gZ2V0V2luZG93TmFtZXMoaXQpIDogZ09QTih0b0lPYmplY3QoaXQpKTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAxOS4xLjIuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlLCAuLi4pXHJcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xyXG52YXIgcElFID0gcmVxdWlyZSgnLi9fb2JqZWN0LXBpZScpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIElPYmplY3QgPSByZXF1aXJlKCcuL19pb2JqZWN0Jyk7XHJcbnZhciAkYXNzaWduID0gT2JqZWN0LmFzc2lnbjtcclxuXHJcbi8vIHNob3VsZCB3b3JrIHdpdGggc3ltYm9scyBhbmQgc2hvdWxkIGhhdmUgZGV0ZXJtaW5pc3RpYyBwcm9wZXJ0eSBvcmRlciAoVjggYnVnKVxyXG5tb2R1bGUuZXhwb3J0cyA9ICEkYXNzaWduIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHZhciBBID0ge307XHJcbiAgdmFyIEIgPSB7fTtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcclxuICB2YXIgUyA9IFN5bWJvbCgpO1xyXG4gIHZhciBLID0gJ2FiY2RlZmdoaWprbG1ub3BxcnN0JztcclxuICBBW1NdID0gNztcclxuICBLLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChrKSB7IEJba10gPSBrOyB9KTtcclxuICByZXR1cm4gJGFzc2lnbih7fSwgQSlbU10gIT0gNyB8fCBPYmplY3Qua2V5cygkYXNzaWduKHt9LCBCKSkuam9pbignJykgIT0gSztcclxufSkgPyBmdW5jdGlvbiBhc3NpZ24odGFyZ2V0LCBzb3VyY2UpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gIHZhciBUID0gdG9PYmplY3QodGFyZ2V0KTtcclxuICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgdmFyIGluZGV4ID0gMTtcclxuICB2YXIgZ2V0U3ltYm9scyA9IGdPUFMuZjtcclxuICB2YXIgaXNFbnVtID0gcElFLmY7XHJcbiAgd2hpbGUgKGFMZW4gPiBpbmRleCkge1xyXG4gICAgdmFyIFMgPSBJT2JqZWN0KGFyZ3VtZW50c1tpbmRleCsrXSk7XHJcbiAgICB2YXIga2V5cyA9IGdldFN5bWJvbHMgPyBnZXRLZXlzKFMpLmNvbmNhdChnZXRTeW1ib2xzKFMpKSA6IGdldEtleXMoUyk7XHJcbiAgICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XHJcbiAgICB2YXIgaiA9IDA7XHJcbiAgICB2YXIga2V5O1xyXG4gICAgd2hpbGUgKGxlbmd0aCA+IGopIGlmIChpc0VudW0uY2FsbChTLCBrZXkgPSBrZXlzW2orK10pKSBUW2tleV0gPSBTW2tleV07XHJcbiAgfSByZXR1cm4gVDtcclxufSA6ICRhc3NpZ247XHJcbiIsIi8vIDcuMi45IFNhbWVWYWx1ZSh4LCB5KVxyXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5pcyB8fCBmdW5jdGlvbiBpcyh4LCB5KSB7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gIHJldHVybiB4ID09PSB5ID8geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHkgOiB4ICE9IHggJiYgeSAhPSB5O1xyXG59O1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgaW52b2tlID0gcmVxdWlyZSgnLi9faW52b2tlJyk7XHJcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XHJcbnZhciBmYWN0b3JpZXMgPSB7fTtcclxuXHJcbnZhciBjb25zdHJ1Y3QgPSBmdW5jdGlvbiAoRiwgbGVuLCBhcmdzKSB7XHJcbiAgaWYgKCEobGVuIGluIGZhY3RvcmllcykpIHtcclxuICAgIGZvciAodmFyIG4gPSBbXSwgaSA9IDA7IGkgPCBsZW47IGkrKykgbltpXSA9ICdhWycgKyBpICsgJ10nO1xyXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLW5ldy1mdW5jXHJcbiAgICBmYWN0b3JpZXNbbGVuXSA9IEZ1bmN0aW9uKCdGLGEnLCAncmV0dXJuIG5ldyBGKCcgKyBuLmpvaW4oJywnKSArICcpJyk7XHJcbiAgfSByZXR1cm4gZmFjdG9yaWVzW2xlbl0oRiwgYXJncyk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLmJpbmQgfHwgZnVuY3Rpb24gYmluZCh0aGF0IC8qICwgLi4uYXJncyAqLykge1xyXG4gIHZhciBmbiA9IGFGdW5jdGlvbih0aGlzKTtcclxuICB2YXIgcGFydEFyZ3MgPSBhcnJheVNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTtcclxuICB2YXIgYm91bmQgPSBmdW5jdGlvbiAoLyogYXJncy4uLiAqLykge1xyXG4gICAgdmFyIGFyZ3MgPSBwYXJ0QXJncy5jb25jYXQoYXJyYXlTbGljZS5jYWxsKGFyZ3VtZW50cykpO1xyXG4gICAgcmV0dXJuIHRoaXMgaW5zdGFuY2VvZiBib3VuZCA/IGNvbnN0cnVjdChmbiwgYXJncy5sZW5ndGgsIGFyZ3MpIDogaW52b2tlKGZuLCBhcmdzLCB0aGF0KTtcclxuICB9O1xyXG4gIGlmIChpc09iamVjdChmbi5wcm90b3R5cGUpKSBib3VuZC5wcm90b3R5cGUgPSBmbi5wcm90b3R5cGU7XHJcbiAgcmV0dXJuIGJvdW5kO1xyXG59O1xyXG4iLCIvLyBmYXN0IGFwcGx5LCBodHRwOi8vanNwZXJmLmxua2l0LmNvbS9mYXN0LWFwcGx5LzVcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZm4sIGFyZ3MsIHRoYXQpIHtcclxuICB2YXIgdW4gPSB0aGF0ID09PSB1bmRlZmluZWQ7XHJcbiAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xyXG4gICAgY2FzZSAwOiByZXR1cm4gdW4gPyBmbigpXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCk7XHJcbiAgICBjYXNlIDE6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSk7XHJcbiAgICBjYXNlIDI6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0pXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSk7XHJcbiAgICBjYXNlIDM6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSk7XHJcbiAgICBjYXNlIDQ6IHJldHVybiB1biA/IGZuKGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pXHJcbiAgICAgICAgICAgICAgICAgICAgICA6IGZuLmNhbGwodGhhdCwgYXJnc1swXSwgYXJnc1sxXSwgYXJnc1syXSwgYXJnc1szXSk7XHJcbiAgfSByZXR1cm4gZm4uYXBwbHkodGhhdCwgYXJncyk7XHJcbn07XHJcbiIsInZhciAkcGFyc2VJbnQgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5wYXJzZUludDtcclxudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xyXG52YXIgd3MgPSByZXF1aXJlKCcuL19zdHJpbmctd3MnKTtcclxudmFyIGhleCA9IC9eWy0rXT8wW3hYXS87XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9ICRwYXJzZUludCh3cyArICcwOCcpICE9PSA4IHx8ICRwYXJzZUludCh3cyArICcweDE2JykgIT09IDIyID8gZnVuY3Rpb24gcGFyc2VJbnQoc3RyLCByYWRpeCkge1xyXG4gIHZhciBzdHJpbmcgPSAkdHJpbShTdHJpbmcoc3RyKSwgMyk7XHJcbiAgcmV0dXJuICRwYXJzZUludChzdHJpbmcsIChyYWRpeCA+Pj4gMCkgfHwgKGhleC50ZXN0KHN0cmluZykgPyAxNiA6IDEwKSk7XHJcbn0gOiAkcGFyc2VJbnQ7XHJcbiIsInZhciAkcGFyc2VGbG9hdCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLnBhcnNlRmxvYXQ7XHJcbnZhciAkdHJpbSA9IHJlcXVpcmUoJy4vX3N0cmluZy10cmltJykudHJpbTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gMSAvICRwYXJzZUZsb2F0KHJlcXVpcmUoJy4vX3N0cmluZy13cycpICsgJy0wJykgIT09IC1JbmZpbml0eSA/IGZ1bmN0aW9uIHBhcnNlRmxvYXQoc3RyKSB7XHJcbiAgdmFyIHN0cmluZyA9ICR0cmltKFN0cmluZyhzdHIpLCAzKTtcclxuICB2YXIgcmVzdWx0ID0gJHBhcnNlRmxvYXQoc3RyaW5nKTtcclxuICByZXR1cm4gcmVzdWx0ID09PSAwICYmIHN0cmluZy5jaGFyQXQoMCkgPT0gJy0nID8gLTAgOiByZXN1bHQ7XHJcbn0gOiAkcGFyc2VGbG9hdDtcclxuIiwidmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwgbXNnKSB7XHJcbiAgaWYgKHR5cGVvZiBpdCAhPSAnbnVtYmVyJyAmJiBjb2YoaXQpICE9ICdOdW1iZXInKSB0aHJvdyBUeXBlRXJyb3IobXNnKTtcclxuICByZXR1cm4gK2l0O1xyXG59O1xyXG4iLCIvLyAyMC4xLjIuMyBOdW1iZXIuaXNJbnRlZ2VyKG51bWJlcilcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNJbnRlZ2VyKGl0KSB7XHJcbiAgcmV0dXJuICFpc09iamVjdChpdCkgJiYgaXNGaW5pdGUoaXQpICYmIGZsb29yKGl0KSA9PT0gaXQ7XHJcbn07XHJcbiIsIi8vIDIwLjIuMi4yMCBNYXRoLmxvZzFwKHgpXHJcbm1vZHVsZS5leHBvcnRzID0gTWF0aC5sb2cxcCB8fCBmdW5jdGlvbiBsb2cxcCh4KSB7XHJcbiAgcmV0dXJuICh4ID0gK3gpID4gLTFlLTggJiYgeCA8IDFlLTggPyB4IC0geCAqIHggLyAyIDogTWF0aC5sb2coMSArIHgpO1xyXG59O1xyXG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcclxudmFyIHNpZ24gPSByZXF1aXJlKCcuL19tYXRoLXNpZ24nKTtcclxudmFyIHBvdyA9IE1hdGgucG93O1xyXG52YXIgRVBTSUxPTiA9IHBvdygyLCAtNTIpO1xyXG52YXIgRVBTSUxPTjMyID0gcG93KDIsIC0yMyk7XHJcbnZhciBNQVgzMiA9IHBvdygyLCAxMjcpICogKDIgLSBFUFNJTE9OMzIpO1xyXG52YXIgTUlOMzIgPSBwb3coMiwgLTEyNik7XHJcblxyXG52YXIgcm91bmRUaWVzVG9FdmVuID0gZnVuY3Rpb24gKG4pIHtcclxuICByZXR1cm4gbiArIDEgLyBFUFNJTE9OIC0gMSAvIEVQU0lMT047XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IE1hdGguZnJvdW5kIHx8IGZ1bmN0aW9uIGZyb3VuZCh4KSB7XHJcbiAgdmFyICRhYnMgPSBNYXRoLmFicyh4KTtcclxuICB2YXIgJHNpZ24gPSBzaWduKHgpO1xyXG4gIHZhciBhLCByZXN1bHQ7XHJcbiAgaWYgKCRhYnMgPCBNSU4zMikgcmV0dXJuICRzaWduICogcm91bmRUaWVzVG9FdmVuKCRhYnMgLyBNSU4zMiAvIEVQU0lMT04zMikgKiBNSU4zMiAqIEVQU0lMT04zMjtcclxuICBhID0gKDEgKyBFUFNJTE9OMzIgLyBFUFNJTE9OKSAqICRhYnM7XHJcbiAgcmVzdWx0ID0gYSAtIChhIC0gJGFicyk7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gIGlmIChyZXN1bHQgPiBNQVgzMiB8fCByZXN1bHQgIT0gcmVzdWx0KSByZXR1cm4gJHNpZ24gKiBJbmZpbml0eTtcclxuICByZXR1cm4gJHNpZ24gKiByZXN1bHQ7XHJcbn07XHJcbiIsIi8vIGNhbGwgc29tZXRoaW5nIG9uIGl0ZXJhdG9yIHN0ZXAgd2l0aCBzYWZlIGNsb3Npbmcgb24gZXJyb3JcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZXJhdG9yLCBmbiwgdmFsdWUsIGVudHJpZXMpIHtcclxuICB0cnkge1xyXG4gICAgcmV0dXJuIGVudHJpZXMgPyBmbihhbk9iamVjdCh2YWx1ZSlbMF0sIHZhbHVlWzFdKSA6IGZuKHZhbHVlKTtcclxuICAvLyA3LjQuNiBJdGVyYXRvckNsb3NlKGl0ZXJhdG9yLCBjb21wbGV0aW9uKVxyXG4gIH0gY2F0Y2ggKGUpIHtcclxuICAgIHZhciByZXQgPSBpdGVyYXRvclsncmV0dXJuJ107XHJcbiAgICBpZiAocmV0ICE9PSB1bmRlZmluZWQpIGFuT2JqZWN0KHJldC5jYWxsKGl0ZXJhdG9yKSk7XHJcbiAgICB0aHJvdyBlO1xyXG4gIH1cclxufTtcclxuIiwidmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciBJT2JqZWN0ID0gcmVxdWlyZSgnLi9faW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHRoYXQsIGNhbGxiYWNrZm4sIGFMZW4sIG1lbW8sIGlzUmlnaHQpIHtcclxuICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XHJcbiAgdmFyIE8gPSB0b09iamVjdCh0aGF0KTtcclxuICB2YXIgc2VsZiA9IElPYmplY3QoTyk7XHJcbiAgdmFyIGxlbmd0aCA9IHRvTGVuZ3RoKE8ubGVuZ3RoKTtcclxuICB2YXIgaW5kZXggPSBpc1JpZ2h0ID8gbGVuZ3RoIC0gMSA6IDA7XHJcbiAgdmFyIGkgPSBpc1JpZ2h0ID8gLTEgOiAxO1xyXG4gIGlmIChhTGVuIDwgMikgZm9yICg7Oykge1xyXG4gICAgaWYgKGluZGV4IGluIHNlbGYpIHtcclxuICAgICAgbWVtbyA9IHNlbGZbaW5kZXhdO1xyXG4gICAgICBpbmRleCArPSBpO1xyXG4gICAgICBicmVhaztcclxuICAgIH1cclxuICAgIGluZGV4ICs9IGk7XHJcbiAgICBpZiAoaXNSaWdodCA/IGluZGV4IDwgMCA6IGxlbmd0aCA8PSBpbmRleCkge1xyXG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ1JlZHVjZSBvZiBlbXB0eSBhcnJheSB3aXRoIG5vIGluaXRpYWwgdmFsdWUnKTtcclxuICAgIH1cclxuICB9XHJcbiAgZm9yICg7aXNSaWdodCA/IGluZGV4ID49IDAgOiBsZW5ndGggPiBpbmRleDsgaW5kZXggKz0gaSkgaWYgKGluZGV4IGluIHNlbGYpIHtcclxuICAgIG1lbW8gPSBjYWxsYmFja2ZuKG1lbW8sIHNlbGZbaW5kZXhdLCBpbmRleCwgTyk7XHJcbiAgfVxyXG4gIHJldHVybiBtZW1vO1xyXG59O1xyXG4iLCIvLyAyMi4xLjMuMyBBcnJheS5wcm90b3R5cGUuY29weVdpdGhpbih0YXJnZXQsIHN0YXJ0LCBlbmQgPSB0aGlzLmxlbmd0aClcclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBbXS5jb3B5V2l0aGluIHx8IGZ1bmN0aW9uIGNvcHlXaXRoaW4odGFyZ2V0IC8qID0gMCAqLywgc3RhcnQgLyogPSAwLCBlbmQgPSBAbGVuZ3RoICovKSB7XHJcbiAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcclxuICB2YXIgbGVuID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gIHZhciB0byA9IHRvQWJzb2x1dGVJbmRleCh0YXJnZXQsIGxlbik7XHJcbiAgdmFyIGZyb20gPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XHJcbiAgdmFyIGVuZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyID8gYXJndW1lbnRzWzJdIDogdW5kZWZpbmVkO1xyXG4gIHZhciBjb3VudCA9IE1hdGgubWluKChlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbikpIC0gZnJvbSwgbGVuIC0gdG8pO1xyXG4gIHZhciBpbmMgPSAxO1xyXG4gIGlmIChmcm9tIDwgdG8gJiYgdG8gPCBmcm9tICsgY291bnQpIHtcclxuICAgIGluYyA9IC0xO1xyXG4gICAgZnJvbSArPSBjb3VudCAtIDE7XHJcbiAgICB0byArPSBjb3VudCAtIDE7XHJcbiAgfVxyXG4gIHdoaWxlIChjb3VudC0tID4gMCkge1xyXG4gICAgaWYgKGZyb20gaW4gTykgT1t0b10gPSBPW2Zyb21dO1xyXG4gICAgZWxzZSBkZWxldGUgT1t0b107XHJcbiAgICB0byArPSBpbmM7XHJcbiAgICBmcm9tICs9IGluYztcclxuICB9IHJldHVybiBPO1xyXG59O1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChkb25lLCB2YWx1ZSkge1xyXG4gIHJldHVybiB7IHZhbHVlOiB2YWx1ZSwgZG9uZTogISFkb25lIH07XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xyXG5yZXF1aXJlKCcuL19leHBvcnQnKSh7XHJcbiAgdGFyZ2V0OiAnUmVnRXhwJyxcclxuICBwcm90bzogdHJ1ZSxcclxuICBmb3JjZWQ6IHJlZ2V4cEV4ZWMgIT09IC8uLy5leGVjXHJcbn0sIHtcclxuICBleGVjOiByZWdleHBFeGVjXHJcbn0pO1xyXG4iLCIvLyAyMS4yLjUuMyBnZXQgUmVnRXhwLnByb3RvdHlwZS5mbGFncygpXHJcbmlmIChyZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmIC8uL2cuZmxhZ3MgIT0gJ2cnKSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mKFJlZ0V4cC5wcm90b3R5cGUsICdmbGFncycsIHtcclxuICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgZ2V0OiByZXF1aXJlKCcuL19mbGFncycpXHJcbn0pO1xyXG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XHJcbiAgdHJ5IHtcclxuICAgIHJldHVybiB7IGU6IGZhbHNlLCB2OiBleGVjKCkgfTtcclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICByZXR1cm4geyBlOiB0cnVlLCB2OiBlIH07XHJcbiAgfVxyXG59O1xyXG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBuZXdQcm9taXNlQ2FwYWJpbGl0eSA9IHJlcXVpcmUoJy4vX25ldy1wcm9taXNlLWNhcGFiaWxpdHknKTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKEMsIHgpIHtcclxuICBhbk9iamVjdChDKTtcclxuICBpZiAoaXNPYmplY3QoeCkgJiYgeC5jb25zdHJ1Y3RvciA9PT0gQykgcmV0dXJuIHg7XHJcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZihDKTtcclxuICB2YXIgcmVzb2x2ZSA9IHByb21pc2VDYXBhYmlsaXR5LnJlc29sdmU7XHJcbiAgcmVzb2x2ZSh4KTtcclxuICByZXR1cm4gcHJvbWlzZUNhcGFiaWxpdHkucHJvbWlzZTtcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcclxudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgTUFQID0gJ01hcCc7XHJcblxyXG4vLyAyMy4xIE1hcCBPYmplY3RzXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKE1BUCwgZnVuY3Rpb24gKGdldCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBNYXAoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xyXG59LCB7XHJcbiAgLy8gMjMuMS4zLjYgTWFwLnByb3RvdHlwZS5nZXQoa2V5KVxyXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSkge1xyXG4gICAgdmFyIGVudHJ5ID0gc3Ryb25nLmdldEVudHJ5KHZhbGlkYXRlKHRoaXMsIE1BUCksIGtleSk7XHJcbiAgICByZXR1cm4gZW50cnkgJiYgZW50cnkudjtcclxuICB9LFxyXG4gIC8vIDIzLjEuMy45IE1hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXHJcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHN0cm9uZy5kZWYodmFsaWRhdGUodGhpcywgTUFQKSwga2V5ID09PSAwID8gMCA6IGtleSwgdmFsdWUpO1xyXG4gIH1cclxufSwgc3Ryb25nLCB0cnVlKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mO1xyXG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi9fb2JqZWN0LWNyZWF0ZScpO1xyXG52YXIgcmVkZWZpbmVBbGwgPSByZXF1aXJlKCcuL19yZWRlZmluZS1hbGwnKTtcclxudmFyIGN0eCA9IHJlcXVpcmUoJy4vX2N0eCcpO1xyXG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XHJcbnZhciBmb3JPZiA9IHJlcXVpcmUoJy4vX2Zvci1vZicpO1xyXG52YXIgJGl0ZXJEZWZpbmUgPSByZXF1aXJlKCcuL19pdGVyLWRlZmluZScpO1xyXG52YXIgc3RlcCA9IHJlcXVpcmUoJy4vX2l0ZXItc3RlcCcpO1xyXG52YXIgc2V0U3BlY2llcyA9IHJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJyk7XHJcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XHJcbnZhciBmYXN0S2V5ID0gcmVxdWlyZSgnLi9fbWV0YScpLmZhc3RLZXk7XHJcbnZhciB2YWxpZGF0ZSA9IHJlcXVpcmUoJy4vX3ZhbGlkYXRlLWNvbGxlY3Rpb24nKTtcclxudmFyIFNJWkUgPSBERVNDUklQVE9SUyA/ICdfcycgOiAnc2l6ZSc7XHJcblxyXG52YXIgZ2V0RW50cnkgPSBmdW5jdGlvbiAodGhhdCwga2V5KSB7XHJcbiAgLy8gZmFzdCBjYXNlXHJcbiAgdmFyIGluZGV4ID0gZmFzdEtleShrZXkpO1xyXG4gIHZhciBlbnRyeTtcclxuICBpZiAoaW5kZXggIT09ICdGJykgcmV0dXJuIHRoYXQuX2lbaW5kZXhdO1xyXG4gIC8vIGZyb3plbiBvYmplY3QgY2FzZVxyXG4gIGZvciAoZW50cnkgPSB0aGF0Ll9mOyBlbnRyeTsgZW50cnkgPSBlbnRyeS5uKSB7XHJcbiAgICBpZiAoZW50cnkuayA9PSBrZXkpIHJldHVybiBlbnRyeTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBnZXRDb25zdHJ1Y3RvcjogZnVuY3Rpb24gKHdyYXBwZXIsIE5BTUUsIElTX01BUCwgQURERVIpIHtcclxuICAgIHZhciBDID0gd3JhcHBlcihmdW5jdGlvbiAodGhhdCwgaXRlcmFibGUpIHtcclxuICAgICAgYW5JbnN0YW5jZSh0aGF0LCBDLCBOQU1FLCAnX2knKTtcclxuICAgICAgdGhhdC5fdCA9IE5BTUU7ICAgICAgICAgLy8gY29sbGVjdGlvbiB0eXBlXHJcbiAgICAgIHRoYXQuX2kgPSBjcmVhdGUobnVsbCk7IC8vIGluZGV4XHJcbiAgICAgIHRoYXQuX2YgPSB1bmRlZmluZWQ7ICAgIC8vIGZpcnN0IGVudHJ5XHJcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7ICAgIC8vIGxhc3QgZW50cnlcclxuICAgICAgdGhhdFtTSVpFXSA9IDA7ICAgICAgICAgLy8gc2l6ZVxyXG4gICAgICBpZiAoaXRlcmFibGUgIT0gdW5kZWZpbmVkKSBmb3JPZihpdGVyYWJsZSwgSVNfTUFQLCB0aGF0W0FEREVSXSwgdGhhdCk7XHJcbiAgICB9KTtcclxuICAgIHJlZGVmaW5lQWxsKEMucHJvdG90eXBlLCB7XHJcbiAgICAgIC8vIDIzLjEuMy4xIE1hcC5wcm90b3R5cGUuY2xlYXIoKVxyXG4gICAgICAvLyAyMy4yLjMuMiBTZXQucHJvdG90eXBlLmNsZWFyKClcclxuICAgICAgY2xlYXI6IGZ1bmN0aW9uIGNsZWFyKCkge1xyXG4gICAgICAgIGZvciAodmFyIHRoYXQgPSB2YWxpZGF0ZSh0aGlzLCBOQU1FKSwgZGF0YSA9IHRoYXQuX2ksIGVudHJ5ID0gdGhhdC5fZjsgZW50cnk7IGVudHJ5ID0gZW50cnkubikge1xyXG4gICAgICAgICAgZW50cnkuciA9IHRydWU7XHJcbiAgICAgICAgICBpZiAoZW50cnkucCkgZW50cnkucCA9IGVudHJ5LnAubiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIGRlbGV0ZSBkYXRhW2VudHJ5LmldO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGF0Ll9mID0gdGhhdC5fbCA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGF0W1NJWkVdID0gMDtcclxuICAgICAgfSxcclxuICAgICAgLy8gMjMuMS4zLjMgTWFwLnByb3RvdHlwZS5kZWxldGUoa2V5KVxyXG4gICAgICAvLyAyMy4yLjMuNCBTZXQucHJvdG90eXBlLmRlbGV0ZSh2YWx1ZSlcclxuICAgICAgJ2RlbGV0ZSc6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgdGhhdCA9IHZhbGlkYXRlKHRoaXMsIE5BTUUpO1xyXG4gICAgICAgIHZhciBlbnRyeSA9IGdldEVudHJ5KHRoYXQsIGtleSk7XHJcbiAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICB2YXIgbmV4dCA9IGVudHJ5Lm47XHJcbiAgICAgICAgICB2YXIgcHJldiA9IGVudHJ5LnA7XHJcbiAgICAgICAgICBkZWxldGUgdGhhdC5faVtlbnRyeS5pXTtcclxuICAgICAgICAgIGVudHJ5LnIgPSB0cnVlO1xyXG4gICAgICAgICAgaWYgKHByZXYpIHByZXYubiA9IG5leHQ7XHJcbiAgICAgICAgICBpZiAobmV4dCkgbmV4dC5wID0gcHJldjtcclxuICAgICAgICAgIGlmICh0aGF0Ll9mID09IGVudHJ5KSB0aGF0Ll9mID0gbmV4dDtcclxuICAgICAgICAgIGlmICh0aGF0Ll9sID09IGVudHJ5KSB0aGF0Ll9sID0gcHJldjtcclxuICAgICAgICAgIHRoYXRbU0laRV0tLTtcclxuICAgICAgICB9IHJldHVybiAhIWVudHJ5O1xyXG4gICAgICB9LFxyXG4gICAgICAvLyAyMy4yLjMuNiBTZXQucHJvdG90eXBlLmZvckVhY2goY2FsbGJhY2tmbiwgdGhpc0FyZyA9IHVuZGVmaW5lZClcclxuICAgICAgLy8gMjMuMS4zLjUgTWFwLnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4sIHRoaXNBcmcgPSB1bmRlZmluZWQpXHJcbiAgICAgIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goY2FsbGJhY2tmbiAvKiAsIHRoYXQgPSB1bmRlZmluZWQgKi8pIHtcclxuICAgICAgICB2YWxpZGF0ZSh0aGlzLCBOQU1FKTtcclxuICAgICAgICB2YXIgZiA9IGN0eChjYWxsYmFja2ZuLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgMyk7XHJcbiAgICAgICAgdmFyIGVudHJ5O1xyXG4gICAgICAgIHdoaWxlIChlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoaXMuX2YpIHtcclxuICAgICAgICAgIGYoZW50cnkudiwgZW50cnkuaywgdGhpcyk7XHJcbiAgICAgICAgICAvLyByZXZlcnQgdG8gdGhlIGxhc3QgZXhpc3RpbmcgZW50cnlcclxuICAgICAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICAvLyAyMy4xLjMuNyBNYXAucHJvdG90eXBlLmhhcyhrZXkpXHJcbiAgICAgIC8vIDIzLjIuMy43IFNldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxyXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcclxuICAgICAgICByZXR1cm4gISFnZXRFbnRyeSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSwga2V5KTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBpZiAoREVTQ1JJUFRPUlMpIGRQKEMucHJvdG90eXBlLCAnc2l6ZScsIHtcclxuICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHZhbGlkYXRlKHRoaXMsIE5BTUUpW1NJWkVdO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBDO1xyXG4gIH0sXHJcbiAgZGVmOiBmdW5jdGlvbiAodGhhdCwga2V5LCB2YWx1ZSkge1xyXG4gICAgdmFyIGVudHJ5ID0gZ2V0RW50cnkodGhhdCwga2V5KTtcclxuICAgIHZhciBwcmV2LCBpbmRleDtcclxuICAgIC8vIGNoYW5nZSBleGlzdGluZyBlbnRyeVxyXG4gICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgIGVudHJ5LnYgPSB2YWx1ZTtcclxuICAgIC8vIGNyZWF0ZSBuZXcgZW50cnlcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoYXQuX2wgPSBlbnRyeSA9IHtcclxuICAgICAgICBpOiBpbmRleCA9IGZhc3RLZXkoa2V5LCB0cnVlKSwgLy8gPC0gaW5kZXhcclxuICAgICAgICBrOiBrZXksICAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0ga2V5XHJcbiAgICAgICAgdjogdmFsdWUsICAgICAgICAgICAgICAgICAgICAgIC8vIDwtIHZhbHVlXHJcbiAgICAgICAgcDogcHJldiA9IHRoYXQuX2wsICAgICAgICAgICAgIC8vIDwtIHByZXZpb3VzIGVudHJ5XHJcbiAgICAgICAgbjogdW5kZWZpbmVkLCAgICAgICAgICAgICAgICAgIC8vIDwtIG5leHQgZW50cnlcclxuICAgICAgICByOiBmYWxzZSAgICAgICAgICAgICAgICAgICAgICAgLy8gPC0gcmVtb3ZlZFxyXG4gICAgICB9O1xyXG4gICAgICBpZiAoIXRoYXQuX2YpIHRoYXQuX2YgPSBlbnRyeTtcclxuICAgICAgaWYgKHByZXYpIHByZXYubiA9IGVudHJ5O1xyXG4gICAgICB0aGF0W1NJWkVdKys7XHJcbiAgICAgIC8vIGFkZCB0byBpbmRleFxyXG4gICAgICBpZiAoaW5kZXggIT09ICdGJykgdGhhdC5faVtpbmRleF0gPSBlbnRyeTtcclxuICAgIH0gcmV0dXJuIHRoYXQ7XHJcbiAgfSxcclxuICBnZXRFbnRyeTogZ2V0RW50cnksXHJcbiAgc2V0U3Ryb25nOiBmdW5jdGlvbiAoQywgTkFNRSwgSVNfTUFQKSB7XHJcbiAgICAvLyBhZGQgLmtleXMsIC52YWx1ZXMsIC5lbnRyaWVzLCBbQEBpdGVyYXRvcl1cclxuICAgIC8vIDIzLjEuMy40LCAyMy4xLjMuOCwgMjMuMS4zLjExLCAyMy4xLjMuMTIsIDIzLjIuMy41LCAyMy4yLjMuOCwgMjMuMi4zLjEwLCAyMy4yLjMuMTFcclxuICAgICRpdGVyRGVmaW5lKEMsIE5BTUUsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xyXG4gICAgICB0aGlzLl90ID0gdmFsaWRhdGUoaXRlcmF0ZWQsIE5BTUUpOyAvLyB0YXJnZXRcclxuICAgICAgdGhpcy5fayA9IGtpbmQ7ICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxyXG4gICAgICB0aGlzLl9sID0gdW5kZWZpbmVkOyAgICAgICAgICAgICAgICAvLyBwcmV2aW91c1xyXG4gICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICAgIHZhciBraW5kID0gdGhhdC5faztcclxuICAgICAgdmFyIGVudHJ5ID0gdGhhdC5fbDtcclxuICAgICAgLy8gcmV2ZXJ0IHRvIHRoZSBsYXN0IGV4aXN0aW5nIGVudHJ5XHJcbiAgICAgIHdoaWxlIChlbnRyeSAmJiBlbnRyeS5yKSBlbnRyeSA9IGVudHJ5LnA7XHJcbiAgICAgIC8vIGdldCBuZXh0IGVudHJ5XHJcbiAgICAgIGlmICghdGhhdC5fdCB8fCAhKHRoYXQuX2wgPSBlbnRyeSA9IGVudHJ5ID8gZW50cnkubiA6IHRoYXQuX3QuX2YpKSB7XHJcbiAgICAgICAgLy8gb3IgZmluaXNoIHRoZSBpdGVyYXRpb25cclxuICAgICAgICB0aGF0Ll90ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHJldHVybiBzdGVwKDEpO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHJldHVybiBzdGVwIGJ5IGtpbmRcclxuICAgICAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4gc3RlcCgwLCBlbnRyeS5rKTtcclxuICAgICAgaWYgKGtpbmQgPT0gJ3ZhbHVlcycpIHJldHVybiBzdGVwKDAsIGVudHJ5LnYpO1xyXG4gICAgICByZXR1cm4gc3RlcCgwLCBbZW50cnkuaywgZW50cnkudl0pO1xyXG4gICAgfSwgSVNfTUFQID8gJ2VudHJpZXMnIDogJ3ZhbHVlcycsICFJU19NQVAsIHRydWUpO1xyXG5cclxuICAgIC8vIGFkZCBbQEBzcGVjaWVzXSwgMjMuMS4yLjIsIDIzLjIuMi4yXHJcbiAgICBzZXRTcGVjaWVzKE5BTUUpO1xyXG4gIH1cclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgc3Ryb25nID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi1zdHJvbmcnKTtcclxudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgU0VUID0gJ1NldCc7XHJcblxyXG4vLyAyMy4yIFNldCBPYmplY3RzXHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbicpKFNFVCwgZnVuY3Rpb24gKGdldCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBTZXQoKSB7IHJldHVybiBnZXQodGhpcywgYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpOyB9O1xyXG59LCB7XHJcbiAgLy8gMjMuMi4zLjEgU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXHJcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcclxuICAgIHJldHVybiBzdHJvbmcuZGVmKHZhbGlkYXRlKHRoaXMsIFNFVCksIHZhbHVlID0gdmFsdWUgPT09IDAgPyAwIDogdmFsdWUsIHZhbHVlKTtcclxuICB9XHJcbn0sIHN0cm9uZyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgZWFjaCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgwKTtcclxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJyk7XHJcbnZhciBhc3NpZ24gPSByZXF1aXJlKCcuL19vYmplY3QtYXNzaWduJyk7XHJcbnZhciB3ZWFrID0gcmVxdWlyZSgnLi9fY29sbGVjdGlvbi13ZWFrJyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XHJcbnZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XHJcbnZhciBJU19JRTExID0gIWdsb2JhbC5BY3RpdmVYT2JqZWN0ICYmICdBY3RpdmVYT2JqZWN0JyBpbiBnbG9iYWw7XHJcbnZhciBXRUFLX01BUCA9ICdXZWFrTWFwJztcclxudmFyIGdldFdlYWsgPSBtZXRhLmdldFdlYWs7XHJcbnZhciBpc0V4dGVuc2libGUgPSBPYmplY3QuaXNFeHRlbnNpYmxlO1xyXG52YXIgdW5jYXVnaHRGcm96ZW5TdG9yZSA9IHdlYWsudWZzdG9yZTtcclxudmFyIEludGVybmFsTWFwO1xyXG5cclxudmFyIHdyYXBwZXIgPSBmdW5jdGlvbiAoZ2V0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIFdlYWtNYXAoKSB7XHJcbiAgICByZXR1cm4gZ2V0KHRoaXMsIGFyZ3VtZW50cy5sZW5ndGggPiAwID8gYXJndW1lbnRzWzBdIDogdW5kZWZpbmVkKTtcclxuICB9O1xyXG59O1xyXG5cclxudmFyIG1ldGhvZHMgPSB7XHJcbiAgLy8gMjMuMy4zLjMgV2Vha01hcC5wcm90b3R5cGUuZ2V0KGtleSlcclxuICBnZXQ6IGZ1bmN0aW9uIGdldChrZXkpIHtcclxuICAgIGlmIChpc09iamVjdChrZXkpKSB7XHJcbiAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xyXG4gICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgV0VBS19NQVApKS5nZXQoa2V5KTtcclxuICAgICAgcmV0dXJuIGRhdGEgPyBkYXRhW3RoaXMuX2ldIDogdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgLy8gMjMuMy4zLjUgV2Vha01hcC5wcm90b3R5cGUuc2V0KGtleSwgdmFsdWUpXHJcbiAgc2V0OiBmdW5jdGlvbiBzZXQoa2V5LCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIHdlYWsuZGVmKHZhbGlkYXRlKHRoaXMsIFdFQUtfTUFQKSwga2V5LCB2YWx1ZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuLy8gMjMuMyBXZWFrTWFwIE9iamVjdHNcclxudmFyICRXZWFrTWFwID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19NQVAsIHdyYXBwZXIsIG1ldGhvZHMsIHdlYWssIHRydWUsIHRydWUpO1xyXG5cclxuLy8gSUUxMSBXZWFrTWFwIGZyb3plbiBrZXlzIGZpeFxyXG5pZiAoTkFUSVZFX1dFQUtfTUFQICYmIElTX0lFMTEpIHtcclxuICBJbnRlcm5hbE1hcCA9IHdlYWsuZ2V0Q29uc3RydWN0b3Iod3JhcHBlciwgV0VBS19NQVApO1xyXG4gIGFzc2lnbihJbnRlcm5hbE1hcC5wcm90b3R5cGUsIG1ldGhvZHMpO1xyXG4gIG1ldGEuTkVFRCA9IHRydWU7XHJcbiAgZWFjaChbJ2RlbGV0ZScsICdoYXMnLCAnZ2V0JywgJ3NldCddLCBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICB2YXIgcHJvdG8gPSAkV2Vha01hcC5wcm90b3R5cGU7XHJcbiAgICB2YXIgbWV0aG9kID0gcHJvdG9ba2V5XTtcclxuICAgIHJlZGVmaW5lKHByb3RvLCBrZXksIGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgIC8vIHN0b3JlIGZyb3plbiBvYmplY3RzIG9uIGludGVybmFsIHdlYWttYXAgc2hpbVxyXG4gICAgICBpZiAoaXNPYmplY3QoYSkgJiYgIWlzRXh0ZW5zaWJsZShhKSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZikgdGhpcy5fZiA9IG5ldyBJbnRlcm5hbE1hcCgpO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB0aGlzLl9mW2tleV0oYSwgYik7XHJcbiAgICAgICAgcmV0dXJuIGtleSA9PSAnc2V0JyA/IHRoaXMgOiByZXN1bHQ7XHJcbiAgICAgIC8vIHN0b3JlIGFsbCB0aGUgcmVzdCBvbiBuYXRpdmUgd2Vha21hcFxyXG4gICAgICB9IHJldHVybiBtZXRob2QuY2FsbCh0aGlzLCBhLCBiKTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHJlZGVmaW5lQWxsID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJyk7XHJcbnZhciBnZXRXZWFrID0gcmVxdWlyZSgnLi9fbWV0YScpLmdldFdlYWs7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcclxudmFyIGNyZWF0ZUFycmF5TWV0aG9kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpO1xyXG52YXIgJGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgdmFsaWRhdGUgPSByZXF1aXJlKCcuL192YWxpZGF0ZS1jb2xsZWN0aW9uJyk7XHJcbnZhciBhcnJheUZpbmQgPSBjcmVhdGVBcnJheU1ldGhvZCg1KTtcclxudmFyIGFycmF5RmluZEluZGV4ID0gY3JlYXRlQXJyYXlNZXRob2QoNik7XHJcbnZhciBpZCA9IDA7XHJcblxyXG4vLyBmYWxsYmFjayBmb3IgdW5jYXVnaHQgZnJvemVuIGtleXNcclxudmFyIHVuY2F1Z2h0RnJvemVuU3RvcmUgPSBmdW5jdGlvbiAodGhhdCkge1xyXG4gIHJldHVybiB0aGF0Ll9sIHx8ICh0aGF0Ll9sID0gbmV3IFVuY2F1Z2h0RnJvemVuU3RvcmUoKSk7XHJcbn07XHJcbnZhciBVbmNhdWdodEZyb3plblN0b3JlID0gZnVuY3Rpb24gKCkge1xyXG4gIHRoaXMuYSA9IFtdO1xyXG59O1xyXG52YXIgZmluZFVuY2F1Z2h0RnJvemVuID0gZnVuY3Rpb24gKHN0b3JlLCBrZXkpIHtcclxuICByZXR1cm4gYXJyYXlGaW5kKHN0b3JlLmEsIGZ1bmN0aW9uIChpdCkge1xyXG4gICAgcmV0dXJuIGl0WzBdID09PSBrZXk7XHJcbiAgfSk7XHJcbn07XHJcblVuY2F1Z2h0RnJvemVuU3RvcmUucHJvdG90eXBlID0ge1xyXG4gIGdldDogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgdmFyIGVudHJ5ID0gZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XHJcbiAgICBpZiAoZW50cnkpIHJldHVybiBlbnRyeVsxXTtcclxuICB9LFxyXG4gIGhhczogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgcmV0dXJuICEhZmluZFVuY2F1Z2h0RnJvemVuKHRoaXMsIGtleSk7XHJcbiAgfSxcclxuICBzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICB2YXIgZW50cnkgPSBmaW5kVW5jYXVnaHRGcm96ZW4odGhpcywga2V5KTtcclxuICAgIGlmIChlbnRyeSkgZW50cnlbMV0gPSB2YWx1ZTtcclxuICAgIGVsc2UgdGhpcy5hLnB1c2goW2tleSwgdmFsdWVdKTtcclxuICB9LFxyXG4gICdkZWxldGUnOiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICB2YXIgaW5kZXggPSBhcnJheUZpbmRJbmRleCh0aGlzLmEsIGZ1bmN0aW9uIChpdCkge1xyXG4gICAgICByZXR1cm4gaXRbMF0gPT09IGtleTtcclxuICAgIH0pO1xyXG4gICAgaWYgKH5pbmRleCkgdGhpcy5hLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICByZXR1cm4gISF+aW5kZXg7XHJcbiAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgZ2V0Q29uc3RydWN0b3I6IGZ1bmN0aW9uICh3cmFwcGVyLCBOQU1FLCBJU19NQVAsIEFEREVSKSB7XHJcbiAgICB2YXIgQyA9IHdyYXBwZXIoZnVuY3Rpb24gKHRoYXQsIGl0ZXJhYmxlKSB7XHJcbiAgICAgIGFuSW5zdGFuY2UodGhhdCwgQywgTkFNRSwgJ19pJyk7XHJcbiAgICAgIHRoYXQuX3QgPSBOQU1FOyAgICAgIC8vIGNvbGxlY3Rpb24gdHlwZVxyXG4gICAgICB0aGF0Ll9pID0gaWQrKzsgICAgICAvLyBjb2xsZWN0aW9uIGlkXHJcbiAgICAgIHRoYXQuX2wgPSB1bmRlZmluZWQ7IC8vIGxlYWsgc3RvcmUgZm9yIHVuY2F1Z2h0IGZyb3plbiBvYmplY3RzXHJcbiAgICAgIGlmIChpdGVyYWJsZSAhPSB1bmRlZmluZWQpIGZvck9mKGl0ZXJhYmxlLCBJU19NQVAsIHRoYXRbQURERVJdLCB0aGF0KTtcclxuICAgIH0pO1xyXG4gICAgcmVkZWZpbmVBbGwoQy5wcm90b3R5cGUsIHtcclxuICAgICAgLy8gMjMuMy4zLjIgV2Vha01hcC5wcm90b3R5cGUuZGVsZXRlKGtleSlcclxuICAgICAgLy8gMjMuNC4zLjMgV2Vha1NldC5wcm90b3R5cGUuZGVsZXRlKHZhbHVlKVxyXG4gICAgICAnZGVsZXRlJzogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmICghaXNPYmplY3Qoa2V5KSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHZhciBkYXRhID0gZ2V0V2VhayhrZXkpO1xyXG4gICAgICAgIGlmIChkYXRhID09PSB0cnVlKSByZXR1cm4gdW5jYXVnaHRGcm96ZW5TdG9yZSh2YWxpZGF0ZSh0aGlzLCBOQU1FKSlbJ2RlbGV0ZSddKGtleSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGEgJiYgJGhhcyhkYXRhLCB0aGlzLl9pKSAmJiBkZWxldGUgZGF0YVt0aGlzLl9pXTtcclxuICAgICAgfSxcclxuICAgICAgLy8gMjMuMy4zLjQgV2Vha01hcC5wcm90b3R5cGUuaGFzKGtleSlcclxuICAgICAgLy8gMjMuNC4zLjQgV2Vha1NldC5wcm90b3R5cGUuaGFzKHZhbHVlKVxyXG4gICAgICBoYXM6IGZ1bmN0aW9uIGhhcyhrZXkpIHtcclxuICAgICAgICBpZiAoIWlzT2JqZWN0KGtleSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICB2YXIgZGF0YSA9IGdldFdlYWsoa2V5KTtcclxuICAgICAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgcmV0dXJuIHVuY2F1Z2h0RnJvemVuU3RvcmUodmFsaWRhdGUodGhpcywgTkFNRSkpLmhhcyhrZXkpO1xyXG4gICAgICAgIHJldHVybiBkYXRhICYmICRoYXMoZGF0YSwgdGhpcy5faSk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIEM7XHJcbiAgfSxcclxuICBkZWY6IGZ1bmN0aW9uICh0aGF0LCBrZXksIHZhbHVlKSB7XHJcbiAgICB2YXIgZGF0YSA9IGdldFdlYWsoYW5PYmplY3Qoa2V5KSwgdHJ1ZSk7XHJcbiAgICBpZiAoZGF0YSA9PT0gdHJ1ZSkgdW5jYXVnaHRGcm96ZW5TdG9yZSh0aGF0KS5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICBlbHNlIGRhdGFbdGhhdC5faV0gPSB2YWx1ZTtcclxuICAgIHJldHVybiB0aGF0O1xyXG4gIH0sXHJcbiAgdWZzdG9yZTogdW5jYXVnaHRGcm96ZW5TdG9yZVxyXG59O1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2luZGV4XHJcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xyXG4gIGlmIChpdCA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMDtcclxuICB2YXIgbnVtYmVyID0gdG9JbnRlZ2VyKGl0KTtcclxuICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgobnVtYmVyKTtcclxuICBpZiAobnVtYmVyICE9PSBsZW5ndGgpIHRocm93IFJhbmdlRXJyb3IoJ1dyb25nIGxlbmd0aCEnKTtcclxuICByZXR1cm4gbGVuZ3RoO1xyXG59O1xyXG4iLCIvLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXHJcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKTtcclxudmFyIGdPUFMgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wcycpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIFJlZmxlY3QgPSByZXF1aXJlKCcuL19nbG9iYWwnKS5SZWZsZWN0O1xyXG5tb2R1bGUuZXhwb3J0cyA9IFJlZmxlY3QgJiYgUmVmbGVjdC5vd25LZXlzIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcclxuICB2YXIga2V5cyA9IGdPUE4uZihhbk9iamVjdChpdCkpO1xyXG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xyXG4gIHJldHVybiBnZXRTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0U3ltYm9scyhpdCkpIDoga2V5cztcclxufTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1GbGF0dGVuSW50b0FycmF5XHJcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBJU19DT05DQVRfU1BSRUFEQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdpc0NvbmNhdFNwcmVhZGFibGUnKTtcclxuXHJcbmZ1bmN0aW9uIGZsYXR0ZW5JbnRvQXJyYXkodGFyZ2V0LCBvcmlnaW5hbCwgc291cmNlLCBzb3VyY2VMZW4sIHN0YXJ0LCBkZXB0aCwgbWFwcGVyLCB0aGlzQXJnKSB7XHJcbiAgdmFyIHRhcmdldEluZGV4ID0gc3RhcnQ7XHJcbiAgdmFyIHNvdXJjZUluZGV4ID0gMDtcclxuICB2YXIgbWFwRm4gPSBtYXBwZXIgPyBjdHgobWFwcGVyLCB0aGlzQXJnLCAzKSA6IGZhbHNlO1xyXG4gIHZhciBlbGVtZW50LCBzcHJlYWRhYmxlO1xyXG5cclxuICB3aGlsZSAoc291cmNlSW5kZXggPCBzb3VyY2VMZW4pIHtcclxuICAgIGlmIChzb3VyY2VJbmRleCBpbiBzb3VyY2UpIHtcclxuICAgICAgZWxlbWVudCA9IG1hcEZuID8gbWFwRm4oc291cmNlW3NvdXJjZUluZGV4XSwgc291cmNlSW5kZXgsIG9yaWdpbmFsKSA6IHNvdXJjZVtzb3VyY2VJbmRleF07XHJcblxyXG4gICAgICBzcHJlYWRhYmxlID0gZmFsc2U7XHJcbiAgICAgIGlmIChpc09iamVjdChlbGVtZW50KSkge1xyXG4gICAgICAgIHNwcmVhZGFibGUgPSBlbGVtZW50W0lTX0NPTkNBVF9TUFJFQURBQkxFXTtcclxuICAgICAgICBzcHJlYWRhYmxlID0gc3ByZWFkYWJsZSAhPT0gdW5kZWZpbmVkID8gISFzcHJlYWRhYmxlIDogaXNBcnJheShlbGVtZW50KTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHNwcmVhZGFibGUgJiYgZGVwdGggPiAwKSB7XHJcbiAgICAgICAgdGFyZ2V0SW5kZXggPSBmbGF0dGVuSW50b0FycmF5KHRhcmdldCwgb3JpZ2luYWwsIGVsZW1lbnQsIHRvTGVuZ3RoKGVsZW1lbnQubGVuZ3RoKSwgdGFyZ2V0SW5kZXgsIGRlcHRoIC0gMSkgLSAxO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICh0YXJnZXRJbmRleCA+PSAweDFmZmZmZmZmZmZmZmZmKSB0aHJvdyBUeXBlRXJyb3IoKTtcclxuICAgICAgICB0YXJnZXRbdGFyZ2V0SW5kZXhdID0gZWxlbWVudDtcclxuICAgICAgfVxyXG5cclxuICAgICAgdGFyZ2V0SW5kZXgrKztcclxuICAgIH1cclxuICAgIHNvdXJjZUluZGV4Kys7XHJcbiAgfVxyXG4gIHJldHVybiB0YXJnZXRJbmRleDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmbGF0dGVuSW50b0FycmF5O1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJy4vX3N0cmluZy1yZXBlYXQnKTtcclxudmFyIGRlZmluZWQgPSByZXF1aXJlKCcuL19kZWZpbmVkJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0aGF0LCBtYXhMZW5ndGgsIGZpbGxTdHJpbmcsIGxlZnQpIHtcclxuICB2YXIgUyA9IFN0cmluZyhkZWZpbmVkKHRoYXQpKTtcclxuICB2YXIgc3RyaW5nTGVuZ3RoID0gUy5sZW5ndGg7XHJcbiAgdmFyIGZpbGxTdHIgPSBmaWxsU3RyaW5nID09PSB1bmRlZmluZWQgPyAnICcgOiBTdHJpbmcoZmlsbFN0cmluZyk7XHJcbiAgdmFyIGludE1heExlbmd0aCA9IHRvTGVuZ3RoKG1heExlbmd0aCk7XHJcbiAgaWYgKGludE1heExlbmd0aCA8PSBzdHJpbmdMZW5ndGggfHwgZmlsbFN0ciA9PSAnJykgcmV0dXJuIFM7XHJcbiAgdmFyIGZpbGxMZW4gPSBpbnRNYXhMZW5ndGggLSBzdHJpbmdMZW5ndGg7XHJcbiAgdmFyIHN0cmluZ0ZpbGxlciA9IHJlcGVhdC5jYWxsKGZpbGxTdHIsIE1hdGguY2VpbChmaWxsTGVuIC8gZmlsbFN0ci5sZW5ndGgpKTtcclxuICBpZiAoc3RyaW5nRmlsbGVyLmxlbmd0aCA+IGZpbGxMZW4pIHN0cmluZ0ZpbGxlciA9IHN0cmluZ0ZpbGxlci5zbGljZSgwLCBmaWxsTGVuKTtcclxuICByZXR1cm4gbGVmdCA/IHN0cmluZ0ZpbGxlciArIFMgOiBTICsgc3RyaW5nRmlsbGVyO1xyXG59O1xyXG4iLCJ2YXIgZ2V0S2V5cyA9IHJlcXVpcmUoJy4vX29iamVjdC1rZXlzJyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciBpc0VudW0gPSByZXF1aXJlKCcuL19vYmplY3QtcGllJykuZjtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXNFbnRyaWVzKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xyXG4gICAgdmFyIE8gPSB0b0lPYmplY3QoaXQpO1xyXG4gICAgdmFyIGtleXMgPSBnZXRLZXlzKE8pO1xyXG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gICAgdmFyIGtleTtcclxuICAgIHdoaWxlIChsZW5ndGggPiBpKSBpZiAoaXNFbnVtLmNhbGwoTywga2V5ID0ga2V5c1tpKytdKSkge1xyXG4gICAgICByZXN1bHQucHVzaChpc0VudHJpZXMgPyBba2V5LCBPW2tleV1dIDogT1trZXldKTtcclxuICAgIH0gcmV0dXJuIHJlc3VsdDtcclxuICB9O1xyXG59O1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vRGF2aWRCcnVhbnQvTWFwLVNldC5wcm90b3R5cGUudG9KU09OXHJcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG52YXIgZnJvbSA9IHJlcXVpcmUoJy4vX2FycmF5LWZyb20taXRlcmFibGUnKTtcclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoTkFNRSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiB0b0pTT04oKSB7XHJcbiAgICBpZiAoY2xhc3NvZih0aGlzKSAhPSBOQU1FKSB0aHJvdyBUeXBlRXJyb3IoTkFNRSArIFwiI3RvSlNPTiBpc24ndCBnZW5lcmljXCIpO1xyXG4gICAgcmV0dXJuIGZyb20odGhpcyk7XHJcbiAgfTtcclxufTtcclxuIiwidmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdGVyLCBJVEVSQVRPUikge1xyXG4gIHZhciByZXN1bHQgPSBbXTtcclxuICBmb3JPZihpdGVyLCBmYWxzZSwgcmVzdWx0LnB1c2gsIHJlc3VsdCwgSVRFUkFUT1IpO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cclxubW9kdWxlLmV4cG9ydHMgPSBNYXRoLnNjYWxlIHx8IGZ1bmN0aW9uIHNjYWxlKHgsIGluTG93LCBpbkhpZ2gsIG91dExvdywgb3V0SGlnaCkge1xyXG4gIGlmIChcclxuICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDBcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgICB8fCB4ICE9IHhcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgICB8fCBpbkxvdyAhPSBpbkxvd1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICAgIHx8IGluSGlnaCAhPSBpbkhpZ2hcclxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG4gICAgICB8fCBvdXRMb3cgIT0gb3V0TG93XHJcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcclxuICAgICAgfHwgb3V0SGlnaCAhPSBvdXRIaWdoXHJcbiAgKSByZXR1cm4gTmFOO1xyXG4gIGlmICh4ID09PSBJbmZpbml0eSB8fCB4ID09PSAtSW5maW5pdHkpIHJldHVybiB4O1xyXG4gIHJldHVybiAoeCAtIGluTG93KSAqIChvdXRIaWdoIC0gb3V0TG93KSAvIChpbkhpZ2ggLSBpbkxvdykgKyBvdXRMb3c7XHJcbn07XHJcbiIsIi8vIOWFqOmDqOmHh+eUqOW8guatpee7hOS7tueahOaWueW8j+WKoOi9vVxyXG4vLyDljovnvKkganMg5L2T56evXHJcbmNvbnN0IGluZGV4ID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2luZGV4L2luZGV4LnZ1ZScpO1xyXG5jb25zdCBsb2dpbiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9sb2dpbi9sb2dpbi52dWUnKTtcclxuY29uc3QgbGlzdEZvclJvdXRlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3JvdXRlL2xpc3QudnVlJyk7XHJcbmNvbnN0IHJvdXRlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3JvdXRlL3JvdXRlLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yUm9sZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9yb2xlL2xpc3QudnVlJyk7XHJcbmNvbnN0IHJvbGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvcm9sZS9yb2xlLnZ1ZScpO1xyXG5jb25zdCBwcml2ID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3JvbGUvcHJpdi52dWUnKTtcclxuY29uc3QgbGlzdEZvckFkbWluID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2FkbWluL2xpc3QudnVlJyk7XHJcbmNvbnN0IGFkbWluID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2FkbWluL3VzZXIudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JCcmFuZCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9icmFuZC9saXN0LnZ1ZScpO1xyXG5jb25zdCBicmFuZCA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9icmFuZC9icmFuZC52dWUnKTtcclxuY29uc3QgY2FyU2VyaWVzID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclNlcmllcy9jYXJTZXJpZXMudnVlJyk7XHJcbmNvbnN0IGNhclNlcmllc0xpc3QgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyU2VyaWVzL2NhclNlcmllc0xpc3QudnVlJyk7XHJcbmNvbnN0IGNhclNlcmllc0dyb3VwID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclNlcmllcy9jYXJTZXJpZXNHcm91cC52dWUnKTtcclxuY29uc3QgY2FyU2VyaWVzR3JvdXBMaXN0ID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhclNlcmllcy9jYXJTZXJpZXNHcm91cExpc3QudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JDYXJDb25maWd1cmF0aW9uR3JvdXAgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyQ29uZmlndXJhdGlvbkdyb3VwL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yQ2FyQ29uZmlndXJhdGlvbkdyb3VwID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2NhckNvbmZpZ3VyYXRpb25Hcm91cC90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckNhckNvbmZpZ3VyYXRpb24gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyQ29uZmlndXJhdGlvbi9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb24gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyQ29uZmlndXJhdGlvbi90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckNhclR5cGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyVHlwZS9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckNhclR5cGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyVHlwZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckNhck1vZGVsID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2Nhck1vZGVsL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yQ2FyTW9kZWwgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvY2FyTW9kZWwvdGhpbmcudnVlJyk7XHJcbmNvbnN0IGxpc3RGb3JEZWN0aW9uTW9kdWxlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2RldGVjdGlvbk1vZHVsZS9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckRlY3Rpb25Nb2R1bGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvZGV0ZWN0aW9uTW9kdWxlL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yRGVjdGlvbkdyb3VwID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L0RldGVjdGlvbkdyb3VwL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yRGVjdGlvbkdyb3VwID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L0RldGVjdGlvbkdyb3VwL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yRGVjdGlvblBvcyA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25Qb3MvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JEZWN0aW9uUG9zID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L0RldGVjdGlvblBvcy90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckRlY3Rpb25JdGVtID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L0RldGVjdGlvbkl0ZW0vbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JEZWN0aW9uSXRlbSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9EZXRlY3Rpb25JdGVtL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yU2VydmljZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zZXJ2aWNlL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yU2VydmljZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zZXJ2aWNlL3RoaW5nLnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yQ2FyID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L2Nhci9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckNhciA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXIvdGhpbmcudnVlJyk7XHJcbmNvbnN0IHJlcG9ydEZvckNhciA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9jYXIvcmVwb3J0LnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yQXJ0aWNsZVR5cGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYXJ0aWNsZVR5cGUvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JBcnRpY2xlVHlwZSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9hcnRpY2xlVHlwZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvckFydGljbGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYXJ0aWNsZS9saXN0LnZ1ZScpO1xyXG5jb25zdCB0aGluZ0ZvckFydGljbGUgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvYXJ0aWNsZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvclNob3dJbWFnZSAgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc2hvd0ltYWdlL2xpc3QudnVlJyk7XHJcbmNvbnN0IHRoaW5nRm9yU2hvd0ltYWdlID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3Nob3dJbWFnZS90aGluZy52dWUnKTtcclxuY29uc3QgbGlzdEZvclNhbGVBcHBsaWNhdGlvbiA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zYWxlQXBwbGljYXRpb24vbGlzdC52dWUnKTtcclxuY29uc3QgbGlzdEZvclJlY29tbWVuZGF0aW9uQXBwbGljYXRpb24gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvcmVjb21tZW5kYXRpb25BcHBsaWNhdGlvbi9saXN0LnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yU3RhZ2luZ0J1eUFwcGxpY2F0aW9uID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3N0YWdpbmdCdXlBcHBsaWNhdGlvbi9saXN0LnZ1ZScpO1xyXG5jb25zdCBsaXN0Rm9yUmVzZXJ2YXRpb24gPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvcmVzZXJ2YXRpb24vbGlzdC52dWUnKTtcclxuY29uc3QgbGlzdEZvclVzZXIgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvdXNlci9saXN0LnZ1ZScpO1xyXG4vLyDmjqfliLbpnaLmnb9cclxuY29uc3QgcGFubmVsID0gKCkgPT4gaW1wb3J0KCcuLi92aWV3L3Bhbm5lbC9wYW5uZWwudnVlJyk7XHJcblxyXG5jb25zdCBsaXN0Rm9yU3RvcnkgPSAoKSA9PiBpbXBvcnQoJy4uL3ZpZXcvc3RvcnkvbGlzdC52dWUnKTtcclxuY29uc3QgdGhpbmdGb3JTdG9yeSA9ICgpID0+IGltcG9ydCgnLi4vdmlldy9zdG9yeS90aGluZy52dWUnKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IFtcclxuICAgIHtcclxuICAgICAgICBuYW1lOiAnaG9tZScgLFxyXG4gICAgICAgIHBhdGg6ICcvJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBpbmRleFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgbmFtZTogJ2xvZ2luJyAsXHJcbiAgICAgICAgcGF0aDogJy9sb2dpbicgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbG9naW5cclxuICAgIH0gLFxyXG4gICAgLy8g5o6n5Yi26Z2i5p2/XHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9wYW5uZWwnICxcclxuICAgICAgICBjb21wb25lbnQ6IHBhbm5lbFxyXG4gICAgfSAsXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDmqKHlnZfvvJrot6/nlLFcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvdXRlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JSb3V0ZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yb3V0ZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHJvdXRlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvdXRlL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHJvdXRlXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDmqKHlnZfvvJrop5LoibJcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvbGUvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclJvbGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcm9sZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHJvbGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcm9sZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiByb2xlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3JvbGUvcHJpdicgLFxyXG4gICAgICAgIGNvbXBvbmVudDogcHJpdlxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5ZCO5Y+w55So5oi3XHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hZG1pbi9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQWRtaW5cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYWRtaW4vZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogYWRtaW5cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYWRtaW4vYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBhZG1pblxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5bmz5Y+w55So5oi3XHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy91c2VyL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JVc2VyXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDlk4HniYxcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2JyYW5kL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JCcmFuZFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9icmFuZC9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBicmFuZFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9icmFuZC9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IGJyYW5kXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabns7vliIbnu4RcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhclNlcmllc0dyb3VwL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGNhclNlcmllc0dyb3VwTGlzdFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJTZXJpZXNHcm91cC9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBjYXJTZXJpZXNHcm91cFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJTZXJpZXNHcm91cC9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IGNhclNlcmllc0dyb3VwXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabns7tcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhclNlcmllcy9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBjYXJTZXJpZXNMaXN0XHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhclNlcmllcy9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBjYXJTZXJpZXNcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyU2VyaWVzL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogY2FyU2VyaWVzXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabovobphY3nva7liIbnu4RcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhckNvbmZpZ3VyYXRpb25Hcm91cC9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQ2FyQ29uZmlndXJhdGlvbkdyb3VwXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhckNvbmZpZ3VyYXRpb25Hcm91cC9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb25Hcm91cFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uR3JvdXAvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb25Hcm91cFxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m6L6G6YWN572uXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJDb25maWd1cmF0aW9uL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JDYXJDb25maWd1cmF0aW9uXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhckNvbmZpZ3VyYXRpb24vZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJDb25maWd1cmF0aW9uXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2NhckNvbmZpZ3VyYXRpb24vYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckNhckNvbmZpZ3VyYXRpb25cclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi9pui+huWIhuexu1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyVHlwZS9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yQ2FyVHlwZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJUeXBlL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQ2FyVHlwZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJUeXBlL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJUeXBlXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabovoblnovlj7dcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2Nhck1vZGVsL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JDYXJNb2RlbFxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXJNb2RlbC9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckNhck1vZGVsXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2Nhck1vZGVsL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJNb2RlbFxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6LSo6YeP5qOA5rWLLeaooeWdl1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uTW9kdWxlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JEZWN0aW9uTW9kdWxlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbk1vZHVsZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckRlY3Rpb25Nb2R1bGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uTW9kdWxlL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uTW9kdWxlXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDotKjph4/mo4DmtYst5L2N572u5YiG57uEXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Hcm91cC9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yRGVjdGlvbkdyb3VwXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbkdyb3VwL2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yRGVjdGlvbkdyb3VwXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbkdyb3VwL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uR3JvdXBcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOi0qOmHj+ajgOa1iy3kvY3nva7liIbnu4RcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvblBvcy9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yRGVjdGlvblBvc1xyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9kZXRlY3Rpb25Qb3MvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JEZWN0aW9uUG9zXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvblBvcy9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yRGVjdGlvblBvc1xyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6LSo6YeP5qOA5rWLLeajgOa1i+mhuVxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uSXRlbS9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yRGVjdGlvbkl0ZW1cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvZGV0ZWN0aW9uSXRlbS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckRlY3Rpb25JdGVtXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2RldGVjdGlvbkl0ZW0vYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckRlY3Rpb25JdGVtXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDovabovobmnI3liqFcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3NlcnZpY2UvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclNlcnZpY2VcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2VydmljZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvclNlcnZpY2VcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2VydmljZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yU2VydmljZVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog6L2m6L6G566h55CGXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXIvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckNhclxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9jYXIvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JDYXJcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvY2FyL3JlcG9ydCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogcmVwb3J0Rm9yQ2FyXHJcbiAgICB9ICxcclxuXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDmlofnq6DliIbnsbtcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FydGljbGVUeXBlL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JBcnRpY2xlVHlwZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9hcnRpY2xlVHlwZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckFydGljbGVUeXBlXHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FydGljbGVUeXBlL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JBcnRpY2xlVHlwZVxyXG4gICAgfSAsXHJcbiAgICAvKipcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKiDmlofnq6BcclxuICAgICAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgKi9cclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL2FydGljbGUvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvckFydGljbGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYXJ0aWNsZS9lZGl0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvckFydGljbGVcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvYXJ0aWNsZS9hZGQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yQXJ0aWNsZVxyXG4gICAgfSAsXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICog5bGV56S65Zu+54mHXHJcbiAgICAgKiAqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICovXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9zaG93SW1hZ2UvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclNob3dJbWFnZVxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9zaG93SW1hZ2UvZWRpdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JTaG93SW1hZ2VcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2hvd0ltYWdlL2FkZCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogdGhpbmdGb3JTaG93SW1hZ2VcclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOWNlui9pueUs+ivt1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc2FsZUFwcGxpY2F0aW9uL2xpc3QnICxcclxuICAgICAgICBjb21wb25lbnQ6IGxpc3RGb3JTYWxlQXBwbGljYXRpb25cclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvcmVjb21tZW5kYXRpb25BcHBsaWNhdGlvbi9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yUmVjb21tZW5kYXRpb25BcHBsaWNhdGlvblxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9zdGFnaW5nQnV5QXBwbGljYXRpb24vbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclN0YWdpbmdCdXlBcHBsaWNhdGlvblxyXG4gICAgfSAsXHJcbiAgICB7XHJcbiAgICAgICAgcGF0aDogJy9yZXNlcnZhdGlvbi9saXN0JyAsXHJcbiAgICAgICAgY29tcG9uZW50OiBsaXN0Rm9yUmVzZXJ2YXRpb25cclxuICAgIH0gLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqIOS5sOi9puaVheS6i1xyXG4gICAgICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICAgICAqL1xyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc3RvcnkvbGlzdCcgLFxyXG4gICAgICAgIGNvbXBvbmVudDogbGlzdEZvclN0b3J5XHJcbiAgICB9ICxcclxuICAgIHtcclxuICAgICAgICBwYXRoOiAnL3N0b3J5L2VkaXQnICxcclxuICAgICAgICBjb21wb25lbnQ6IHRoaW5nRm9yU3RvcnlcclxuICAgIH0gLFxyXG4gICAge1xyXG4gICAgICAgIHBhdGg6ICcvc3RvcnkvYWRkJyAsXHJcbiAgICAgICAgY29tcG9uZW50OiB0aGluZ0ZvclN0b3J5XHJcbiAgICB9ICxcclxuXTsiLCJcInVzZSBzdHJpY3RcIjtcclxuXHJcbnJlcXVpcmUoXCJjb3JlLWpzL3NoaW1cIik7XHJcblxyXG5yZXF1aXJlKFwicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lXCIpO1xyXG5cclxucmVxdWlyZShcImNvcmUtanMvZm4vcmVnZXhwL2VzY2FwZVwiKTtcclxuXHJcbmlmIChnbG9iYWwuX2JhYmVsUG9seWZpbGwpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoXCJvbmx5IG9uZSBpbnN0YW5jZSBvZiBiYWJlbC1wb2x5ZmlsbCBpcyBhbGxvd2VkXCIpO1xyXG59XHJcbmdsb2JhbC5fYmFiZWxQb2x5ZmlsbCA9IHRydWU7XHJcblxyXG52YXIgREVGSU5FX1BST1BFUlRZID0gXCJkZWZpbmVQcm9wZXJ0eVwiO1xyXG5mdW5jdGlvbiBkZWZpbmUoTywga2V5LCB2YWx1ZSkge1xyXG4gIE9ba2V5XSB8fCBPYmplY3RbREVGSU5FX1BST1BFUlRZXShPLCBrZXksIHtcclxuICAgIHdyaXRhYmxlOiB0cnVlLFxyXG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgdmFsdWU6IHZhbHVlXHJcbiAgfSk7XHJcbn1cclxuXHJcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZExlZnRcIiwgXCJcIi5wYWRTdGFydCk7XHJcbmRlZmluZShTdHJpbmcucHJvdG90eXBlLCBcInBhZFJpZ2h0XCIsIFwiXCIucGFkRW5kKTtcclxuXHJcblwicG9wLHJldmVyc2Usc2hpZnQsa2V5cyx2YWx1ZXMsZW50cmllcyxpbmRleE9mLGV2ZXJ5LHNvbWUsZm9yRWFjaCxtYXAsZmlsdGVyLGZpbmQsZmluZEluZGV4LGluY2x1ZGVzLGpvaW4sc2xpY2UsY29uY2F0LHB1c2gsc3BsaWNlLHVuc2hpZnQsc29ydCxsYXN0SW5kZXhPZixyZWR1Y2UscmVkdWNlUmlnaHQsY29weVdpdGhpbixmaWxsXCIuc3BsaXQoXCIsXCIpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xyXG4gIFtdW2tleV0gJiYgZGVmaW5lKEFycmF5LCBrZXksIEZ1bmN0aW9uLmNhbGwuYmluZChbXVtrZXldKSk7XHJcbn0pOyIsInJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3ltYm9sJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmNyZWF0ZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5kZWZpbmUtcHJvcGVydHknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZGVmaW5lLXByb3BlcnRpZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3Qua2V5cycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmZyZWV6ZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5zZWFsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm9iamVjdC5pcy1mcm96ZW4nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuaXMtc2VhbGVkJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzLWV4dGVuc2libGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QuYXNzaWduJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LmlzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYub2JqZWN0LnNldC1wcm90b3R5cGUtb2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5vYmplY3QudG8tc3RyaW5nJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZnVuY3Rpb24uYmluZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmZ1bmN0aW9uLm5hbWUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5mdW5jdGlvbi5oYXMtaW5zdGFuY2UnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1pbnQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5wYXJzZS1mbG9hdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5jb25zdHJ1Y3RvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1maXhlZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci50by1wcmVjaXNpb24nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuZXBzaWxvbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1maW5pdGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtaW50ZWdlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5pcy1uYW4nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIuaXMtc2FmZS1pbnRlZ2VyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubnVtYmVyLm1heC1zYWZlLWludGVnZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5udW1iZXIubWluLXNhZmUtaW50ZWdlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1mbG9hdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm51bWJlci5wYXJzZS1pbnQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmFjb3NoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5hc2luaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguYXRhbmgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNicnQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmNsejMyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5jb3NoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5leHBtMScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguZnJvdW5kJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5oeXBvdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGguaW11bCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2Lm1hdGgubG9nMTAnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXRoLmxvZzFwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5sb2cyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaWduJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC5zaW5oJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50YW5oJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYubWF0aC50cnVuYycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mcm9tLWNvZGUtcG9pbnQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmF3Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnRyaW0nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRlcmF0b3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuY29kZS1wb2ludC1hdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5lbmRzLXdpdGgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaW5jbHVkZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcucmVwZWF0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0YXJ0cy13aXRoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLmFuY2hvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5iaWcnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYmxpbmsnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuYm9sZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5maXhlZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5mb250Y29sb3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuZm9udHNpemUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuaXRhbGljcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5saW5rJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnNtYWxsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuc3RyaW5nLnN0cmlrZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnN0cmluZy5zdWInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zdHJpbmcuc3VwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuZGF0ZS5ub3cnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWpzb24nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLWlzby1zdHJpbmcnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5kYXRlLnRvLXN0cmluZycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmRhdGUudG8tcHJpbWl0aXZlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuaXMtYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5mcm9tJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkub2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5qb2luJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuc2xpY2UnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb3J0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZm9yLWVhY2gnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5tYXAnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maWx0ZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5zb21lJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZXZlcnknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5yZWR1Y2UtcmlnaHQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pbmRleC1vZicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5Lmxhc3QtaW5kZXgtb2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5jb3B5LXdpdGhpbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LmZpbGwnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5maW5kJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYuYXJyYXkuZmluZC1pbmRleCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LmFycmF5LnNwZWNpZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5hcnJheS5pdGVyYXRvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5jb25zdHJ1Y3RvcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5leGVjJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnRvLXN0cmluZycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5mbGFncycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5tYXRjaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5yZXBsYWNlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVnZXhwLnNlYXJjaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZ2V4cC5zcGxpdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnByb21pc2UnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5tYXAnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5zZXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi53ZWFrLW1hcCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LndlYWstc2V0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuYXJyYXktYnVmZmVyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZGF0YS12aWV3Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50OC1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLnVpbnQ4LWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDgtY2xhbXBlZC1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnR5cGVkLmludDE2LWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQudWludDE2LWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuaW50MzItYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC51aW50MzItYXJyYXknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi50eXBlZC5mbG9hdDMyLWFycmF5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYudHlwZWQuZmxvYXQ2NC1hcnJheScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuYXBwbHknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmNvbnN0cnVjdCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZGVmaW5lLXByb3BlcnR5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5kZWxldGUtcHJvcGVydHknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmVudW1lcmF0ZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuZ2V0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmdldC1wcm90b3R5cGUtb2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LmhhcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3QuaXMtZXh0ZW5zaWJsZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Qub3duLWtleXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNi5yZWZsZWN0LnByZXZlbnQtZXh0ZW5zaW9ucycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM2LnJlZmxlY3Quc2V0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczYucmVmbGVjdC5zZXQtcHJvdG90eXBlLW9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuYXJyYXkuaW5jbHVkZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hcnJheS5mbGF0LW1hcCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LmFycmF5LmZsYXR0ZW4nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcuYXQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcucGFkLXN0YXJ0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnBhZC1lbmQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcudHJpbS1sZWZ0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3RyaW5nLnRyaW0tcmlnaHQnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zdHJpbmcubWF0Y2gtYWxsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLmFzeW5jLWl0ZXJhdG9yJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuc3ltYm9sLm9ic2VydmFibGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9ycycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC52YWx1ZXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QuZW50cmllcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5kZWZpbmUtZ2V0dGVyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JqZWN0LmRlZmluZS1zZXR0ZXInKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5vYmplY3QubG9va3VwLWdldHRlcicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm9iamVjdC5sb29rdXAtc2V0dGVyJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWFwLnRvLWpzb24nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zZXQudG8tanNvbicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hcC5vZicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5vZicpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstbWFwLm9mJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1zZXQub2YnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXAuZnJvbScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnNldC5mcm9tJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcud2Vhay1tYXAuZnJvbScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LndlYWstc2V0LmZyb20nKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5nbG9iYWwnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5zeXN0ZW0uZ2xvYmFsJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcuZXJyb3IuaXMtZXJyb3InKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmNsYW1wJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5kZWctcGVyLXJhZCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZGVncmVlcycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguZnNjYWxlJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5pYWRkaCcpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguaXN1YmgnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLmltdWxoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5yYWQtcGVyLWRlZycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGgucmFkaWFucycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3Lm1hdGguc2NhbGUnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5tYXRoLnVtdWxoJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcubWF0aC5zaWduYml0Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS5maW5hbGx5Jyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucHJvbWlzZS50cnknKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmRlZmluZS1tZXRhZGF0YScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuZGVsZXRlLW1ldGFkYXRhJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtbWV0YWRhdGEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0LmdldC1tZXRhZGF0YS1rZXlzJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcucmVmbGVjdC5nZXQtb3duLW1ldGFkYXRhLWtleXMnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5yZWZsZWN0Lmhhcy1tZXRhZGF0YScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QuaGFzLW93bi1tZXRhZGF0YScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvZXM3LnJlZmxlY3QubWV0YWRhdGEnKTtcclxucmVxdWlyZSgnLi9tb2R1bGVzL2VzNy5hc2FwJyk7XHJcbnJlcXVpcmUoJy4vbW9kdWxlcy9lczcub2JzZXJ2YWJsZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLnRpbWVycycpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmltbWVkaWF0ZScpO1xyXG5yZXF1aXJlKCcuL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZScpO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vbW9kdWxlcy9fY29yZScpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEVDTUFTY3JpcHQgNiBzeW1ib2xzIHNoaW1cclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgaGFzID0gcmVxdWlyZSgnLi9faGFzJyk7XHJcbnZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lJyk7XHJcbnZhciBNRVRBID0gcmVxdWlyZSgnLi9fbWV0YScpLktFWTtcclxudmFyICRmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBzaGFyZWQgPSByZXF1aXJlKCcuL19zaGFyZWQnKTtcclxudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi9fc2V0LXRvLXN0cmluZy10YWcnKTtcclxudmFyIHVpZCA9IHJlcXVpcmUoJy4vX3VpZCcpO1xyXG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XHJcbnZhciB3a3NFeHQgPSByZXF1aXJlKCcuL193a3MtZXh0Jyk7XHJcbnZhciB3a3NEZWZpbmUgPSByZXF1aXJlKCcuL193a3MtZGVmaW5lJyk7XHJcbnZhciBlbnVtS2V5cyA9IHJlcXVpcmUoJy4vX2VudW0ta2V5cycpO1xyXG52YXIgaXNBcnJheSA9IHJlcXVpcmUoJy4vX2lzLWFycmF5Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbnZhciBjcmVhdGVEZXNjID0gcmVxdWlyZSgnLi9fcHJvcGVydHktZGVzYycpO1xyXG52YXIgX2NyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcclxudmFyIGdPUE5FeHQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKTtcclxudmFyICRHT1BEID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcGQnKTtcclxudmFyICREUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xyXG52YXIgZ09QRCA9ICRHT1BELmY7XHJcbnZhciBkUCA9ICREUC5mO1xyXG52YXIgZ09QTiA9IGdPUE5FeHQuZjtcclxudmFyICRTeW1ib2wgPSBnbG9iYWwuU3ltYm9sO1xyXG52YXIgJEpTT04gPSBnbG9iYWwuSlNPTjtcclxudmFyIF9zdHJpbmdpZnkgPSAkSlNPTiAmJiAkSlNPTi5zdHJpbmdpZnk7XHJcbnZhciBQUk9UT1RZUEUgPSAncHJvdG90eXBlJztcclxudmFyIEhJRERFTiA9IHdrcygnX2hpZGRlbicpO1xyXG52YXIgVE9fUFJJTUlUSVZFID0gd2tzKCd0b1ByaW1pdGl2ZScpO1xyXG52YXIgaXNFbnVtID0ge30ucHJvcGVydHlJc0VudW1lcmFibGU7XHJcbnZhciBTeW1ib2xSZWdpc3RyeSA9IHNoYXJlZCgnc3ltYm9sLXJlZ2lzdHJ5Jyk7XHJcbnZhciBBbGxTeW1ib2xzID0gc2hhcmVkKCdzeW1ib2xzJyk7XHJcbnZhciBPUFN5bWJvbHMgPSBzaGFyZWQoJ29wLXN5bWJvbHMnKTtcclxudmFyIE9iamVjdFByb3RvID0gT2JqZWN0W1BST1RPVFlQRV07XHJcbnZhciBVU0VfTkFUSVZFID0gdHlwZW9mICRTeW1ib2wgPT0gJ2Z1bmN0aW9uJztcclxudmFyIFFPYmplY3QgPSBnbG9iYWwuUU9iamVjdDtcclxuLy8gRG9uJ3QgdXNlIHNldHRlcnMgaW4gUXQgU2NyaXB0LCBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvMTczXHJcbnZhciBzZXR0ZXIgPSAhUU9iamVjdCB8fCAhUU9iamVjdFtQUk9UT1RZUEVdIHx8ICFRT2JqZWN0W1BST1RPVFlQRV0uZmluZENoaWxkO1xyXG5cclxuLy8gZmFsbGJhY2sgZm9yIG9sZCBBbmRyb2lkLCBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9Njg3XHJcbnZhciBzZXRTeW1ib2xEZXNjID0gREVTQ1JJUFRPUlMgJiYgJGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gX2NyZWF0ZShkUCh7fSwgJ2EnLCB7XHJcbiAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRQKHRoaXMsICdhJywgeyB2YWx1ZTogNyB9KS5hOyB9XHJcbiAgfSkpLmEgIT0gNztcclxufSkgPyBmdW5jdGlvbiAoaXQsIGtleSwgRCkge1xyXG4gIHZhciBwcm90b0Rlc2MgPSBnT1BEKE9iamVjdFByb3RvLCBrZXkpO1xyXG4gIGlmIChwcm90b0Rlc2MpIGRlbGV0ZSBPYmplY3RQcm90b1trZXldO1xyXG4gIGRQKGl0LCBrZXksIEQpO1xyXG4gIGlmIChwcm90b0Rlc2MgJiYgaXQgIT09IE9iamVjdFByb3RvKSBkUChPYmplY3RQcm90bywga2V5LCBwcm90b0Rlc2MpO1xyXG59IDogZFA7XHJcblxyXG52YXIgd3JhcCA9IGZ1bmN0aW9uICh0YWcpIHtcclxuICB2YXIgc3ltID0gQWxsU3ltYm9sc1t0YWddID0gX2NyZWF0ZSgkU3ltYm9sW1BST1RPVFlQRV0pO1xyXG4gIHN5bS5fayA9IHRhZztcclxuICByZXR1cm4gc3ltO1xyXG59O1xyXG5cclxudmFyIGlzU3ltYm9sID0gVVNFX05BVElWRSAmJiB0eXBlb2YgJFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJyA/IGZ1bmN0aW9uIChpdCkge1xyXG4gIHJldHVybiB0eXBlb2YgaXQgPT0gJ3N5bWJvbCc7XHJcbn0gOiBmdW5jdGlvbiAoaXQpIHtcclxuICByZXR1cm4gaXQgaW5zdGFuY2VvZiAkU3ltYm9sO1xyXG59O1xyXG5cclxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KGl0LCBrZXksIEQpIHtcclxuICBpZiAoaXQgPT09IE9iamVjdFByb3RvKSAkZGVmaW5lUHJvcGVydHkoT1BTeW1ib2xzLCBrZXksIEQpO1xyXG4gIGFuT2JqZWN0KGl0KTtcclxuICBrZXkgPSB0b1ByaW1pdGl2ZShrZXksIHRydWUpO1xyXG4gIGFuT2JqZWN0KEQpO1xyXG4gIGlmIChoYXMoQWxsU3ltYm9scywga2V5KSkge1xyXG4gICAgaWYgKCFELmVudW1lcmFibGUpIHtcclxuICAgICAgaWYgKCFoYXMoaXQsIEhJRERFTikpIGRQKGl0LCBISURERU4sIGNyZWF0ZURlc2MoMSwge30pKTtcclxuICAgICAgaXRbSElEREVOXVtrZXldID0gdHJ1ZTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGlmIChoYXMoaXQsIEhJRERFTikgJiYgaXRbSElEREVOXVtrZXldKSBpdFtISURERU5dW2tleV0gPSBmYWxzZTtcclxuICAgICAgRCA9IF9jcmVhdGUoRCwgeyBlbnVtZXJhYmxlOiBjcmVhdGVEZXNjKDAsIGZhbHNlKSB9KTtcclxuICAgIH0gcmV0dXJuIHNldFN5bWJvbERlc2MoaXQsIGtleSwgRCk7XHJcbiAgfSByZXR1cm4gZFAoaXQsIGtleSwgRCk7XHJcbn07XHJcbnZhciAkZGVmaW5lUHJvcGVydGllcyA9IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoaXQsIFApIHtcclxuICBhbk9iamVjdChpdCk7XHJcbiAgdmFyIGtleXMgPSBlbnVtS2V5cyhQID0gdG9JT2JqZWN0KFApKTtcclxuICB2YXIgaSA9IDA7XHJcbiAgdmFyIGwgPSBrZXlzLmxlbmd0aDtcclxuICB2YXIga2V5O1xyXG4gIHdoaWxlIChsID4gaSkgJGRlZmluZVByb3BlcnR5KGl0LCBrZXkgPSBrZXlzW2krK10sIFBba2V5XSk7XHJcbiAgcmV0dXJuIGl0O1xyXG59O1xyXG52YXIgJGNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShpdCwgUCkge1xyXG4gIHJldHVybiBQID09PSB1bmRlZmluZWQgPyBfY3JlYXRlKGl0KSA6ICRkZWZpbmVQcm9wZXJ0aWVzKF9jcmVhdGUoaXQpLCBQKTtcclxufTtcclxudmFyICRwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IGZ1bmN0aW9uIHByb3BlcnR5SXNFbnVtZXJhYmxlKGtleSkge1xyXG4gIHZhciBFID0gaXNFbnVtLmNhbGwodGhpcywga2V5ID0gdG9QcmltaXRpdmUoa2V5LCB0cnVlKSk7XHJcbiAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvICYmIGhhcyhBbGxTeW1ib2xzLCBrZXkpICYmICFoYXMoT1BTeW1ib2xzLCBrZXkpKSByZXR1cm4gZmFsc2U7XHJcbiAgcmV0dXJuIEUgfHwgIWhhcyh0aGlzLCBrZXkpIHx8ICFoYXMoQWxsU3ltYm9scywga2V5KSB8fCBoYXModGhpcywgSElEREVOKSAmJiB0aGlzW0hJRERFTl1ba2V5XSA/IEUgOiB0cnVlO1xyXG59O1xyXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcihpdCwga2V5KSB7XHJcbiAgaXQgPSB0b0lPYmplY3QoaXQpO1xyXG4gIGtleSA9IHRvUHJpbWl0aXZlKGtleSwgdHJ1ZSk7XHJcbiAgaWYgKGl0ID09PSBPYmplY3RQcm90byAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhaGFzKE9QU3ltYm9scywga2V5KSkgcmV0dXJuO1xyXG4gIHZhciBEID0gZ09QRChpdCwga2V5KTtcclxuICBpZiAoRCAmJiBoYXMoQWxsU3ltYm9scywga2V5KSAmJiAhKGhhcyhpdCwgSElEREVOKSAmJiBpdFtISURERU5dW2tleV0pKSBELmVudW1lcmFibGUgPSB0cnVlO1xyXG4gIHJldHVybiBEO1xyXG59O1xyXG52YXIgJGdldE93blByb3BlcnR5TmFtZXMgPSBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eU5hbWVzKGl0KSB7XHJcbiAgdmFyIG5hbWVzID0gZ09QTih0b0lPYmplY3QoaXQpKTtcclxuICB2YXIgcmVzdWx0ID0gW107XHJcbiAgdmFyIGkgPSAwO1xyXG4gIHZhciBrZXk7XHJcbiAgd2hpbGUgKG5hbWVzLmxlbmd0aCA+IGkpIHtcclxuICAgIGlmICghaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIGtleSAhPSBISURERU4gJiYga2V5ICE9IE1FVEEpIHJlc3VsdC5wdXNoKGtleSk7XHJcbiAgfSByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG52YXIgJGdldE93blByb3BlcnR5U3ltYm9scyA9IGZ1bmN0aW9uIGdldE93blByb3BlcnR5U3ltYm9scyhpdCkge1xyXG4gIHZhciBJU19PUCA9IGl0ID09PSBPYmplY3RQcm90bztcclxuICB2YXIgbmFtZXMgPSBnT1BOKElTX09QID8gT1BTeW1ib2xzIDogdG9JT2JqZWN0KGl0KSk7XHJcbiAgdmFyIHJlc3VsdCA9IFtdO1xyXG4gIHZhciBpID0gMDtcclxuICB2YXIga2V5O1xyXG4gIHdoaWxlIChuYW1lcy5sZW5ndGggPiBpKSB7XHJcbiAgICBpZiAoaGFzKEFsbFN5bWJvbHMsIGtleSA9IG5hbWVzW2krK10pICYmIChJU19PUCA/IGhhcyhPYmplY3RQcm90bywga2V5KSA6IHRydWUpKSByZXN1bHQucHVzaChBbGxTeW1ib2xzW2tleV0pO1xyXG4gIH0gcmV0dXJuIHJlc3VsdDtcclxufTtcclxuXHJcbi8vIDE5LjQuMS4xIFN5bWJvbChbZGVzY3JpcHRpb25dKVxyXG5pZiAoIVVTRV9OQVRJVkUpIHtcclxuICAkU3ltYm9sID0gZnVuY3Rpb24gU3ltYm9sKCkge1xyXG4gICAgaWYgKHRoaXMgaW5zdGFuY2VvZiAkU3ltYm9sKSB0aHJvdyBUeXBlRXJyb3IoJ1N5bWJvbCBpcyBub3QgYSBjb25zdHJ1Y3RvciEnKTtcclxuICAgIHZhciB0YWcgPSB1aWQoYXJndW1lbnRzLmxlbmd0aCA+IDAgPyBhcmd1bWVudHNbMF0gOiB1bmRlZmluZWQpO1xyXG4gICAgdmFyICRzZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgaWYgKHRoaXMgPT09IE9iamVjdFByb3RvKSAkc2V0LmNhbGwoT1BTeW1ib2xzLCB2YWx1ZSk7XHJcbiAgICAgIGlmIChoYXModGhpcywgSElEREVOKSAmJiBoYXModGhpc1tISURERU5dLCB0YWcpKSB0aGlzW0hJRERFTl1bdGFnXSA9IGZhbHNlO1xyXG4gICAgICBzZXRTeW1ib2xEZXNjKHRoaXMsIHRhZywgY3JlYXRlRGVzYygxLCB2YWx1ZSkpO1xyXG4gICAgfTtcclxuICAgIGlmIChERVNDUklQVE9SUyAmJiBzZXR0ZXIpIHNldFN5bWJvbERlc2MoT2JqZWN0UHJvdG8sIHRhZywgeyBjb25maWd1cmFibGU6IHRydWUsIHNldDogJHNldCB9KTtcclxuICAgIHJldHVybiB3cmFwKHRhZyk7XHJcbiAgfTtcclxuICByZWRlZmluZSgkU3ltYm9sW1BST1RPVFlQRV0sICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2s7XHJcbiAgfSk7XHJcblxyXG4gICRHT1BELmYgPSAkZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xyXG4gICREUC5mID0gJGRlZmluZVByb3BlcnR5O1xyXG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BuJykuZiA9IGdPUE5FeHQuZiA9ICRnZXRPd25Qcm9wZXJ0eU5hbWVzO1xyXG4gIHJlcXVpcmUoJy4vX29iamVjdC1waWUnKS5mID0gJHByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG4gIHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJykuZiA9ICRnZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcblxyXG4gIGlmIChERVNDUklQVE9SUyAmJiAhcmVxdWlyZSgnLi9fbGlicmFyeScpKSB7XHJcbiAgICByZWRlZmluZShPYmplY3RQcm90bywgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJywgJHByb3BlcnR5SXNFbnVtZXJhYmxlLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIHdrc0V4dC5mID0gZnVuY3Rpb24gKG5hbWUpIHtcclxuICAgIHJldHVybiB3cmFwKHdrcyhuYW1lKSk7XHJcbiAgfTtcclxufVxyXG5cclxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhVVNFX05BVElWRSwgeyBTeW1ib2w6ICRTeW1ib2wgfSk7XHJcblxyXG5mb3IgKHZhciBlczZTeW1ib2xzID0gKFxyXG4gIC8vIDE5LjQuMi4yLCAxOS40LjIuMywgMTkuNC4yLjQsIDE5LjQuMi42LCAxOS40LjIuOCwgMTkuNC4yLjksIDE5LjQuMi4xMCwgMTkuNC4yLjExLCAxOS40LjIuMTIsIDE5LjQuMi4xMywgMTkuNC4yLjE0XHJcbiAgJ2hhc0luc3RhbmNlLGlzQ29uY2F0U3ByZWFkYWJsZSxpdGVyYXRvcixtYXRjaCxyZXBsYWNlLHNlYXJjaCxzcGVjaWVzLHNwbGl0LHRvUHJpbWl0aXZlLHRvU3RyaW5nVGFnLHVuc2NvcGFibGVzJ1xyXG4pLnNwbGl0KCcsJyksIGogPSAwOyBlczZTeW1ib2xzLmxlbmd0aCA+IGo7KXdrcyhlczZTeW1ib2xzW2orK10pO1xyXG5cclxuZm9yICh2YXIgd2VsbEtub3duU3ltYm9scyA9ICRrZXlzKHdrcy5zdG9yZSksIGsgPSAwOyB3ZWxsS25vd25TeW1ib2xzLmxlbmd0aCA+IGs7KSB3a3NEZWZpbmUod2VsbEtub3duU3ltYm9sc1trKytdKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsICdTeW1ib2wnLCB7XHJcbiAgLy8gMTkuNC4yLjEgU3ltYm9sLmZvcihrZXkpXHJcbiAgJ2Zvcic6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIHJldHVybiBoYXMoU3ltYm9sUmVnaXN0cnksIGtleSArPSAnJylcclxuICAgICAgPyBTeW1ib2xSZWdpc3RyeVtrZXldXHJcbiAgICAgIDogU3ltYm9sUmVnaXN0cnlba2V5XSA9ICRTeW1ib2woa2V5KTtcclxuICB9LFxyXG4gIC8vIDE5LjQuMi41IFN5bWJvbC5rZXlGb3Ioc3ltKVxyXG4gIGtleUZvcjogZnVuY3Rpb24ga2V5Rm9yKHN5bSkge1xyXG4gICAgaWYgKCFpc1N5bWJvbChzeW0pKSB0aHJvdyBUeXBlRXJyb3Ioc3ltICsgJyBpcyBub3QgYSBzeW1ib2whJyk7XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gU3ltYm9sUmVnaXN0cnkpIGlmIChTeW1ib2xSZWdpc3RyeVtrZXldID09PSBzeW0pIHJldHVybiBrZXk7XHJcbiAgfSxcclxuICB1c2VTZXR0ZXI6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gdHJ1ZTsgfSxcclxuICB1c2VTaW1wbGU6IGZ1bmN0aW9uICgpIHsgc2V0dGVyID0gZmFsc2U7IH1cclxufSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCAnT2JqZWN0Jywge1xyXG4gIC8vIDE5LjEuMi4yIE9iamVjdC5jcmVhdGUoTyBbLCBQcm9wZXJ0aWVzXSlcclxuICBjcmVhdGU6ICRjcmVhdGUsXHJcbiAgLy8gMTkuMS4yLjQgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXHJcbiAgZGVmaW5lUHJvcGVydHk6ICRkZWZpbmVQcm9wZXJ0eSxcclxuICAvLyAxOS4xLjIuMyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKVxyXG4gIGRlZmluZVByb3BlcnRpZXM6ICRkZWZpbmVQcm9wZXJ0aWVzLFxyXG4gIC8vIDE5LjEuMi42IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUClcclxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6ICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXHJcbiAgLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcclxuICBnZXRPd25Qcm9wZXJ0eU5hbWVzOiAkZ2V0T3duUHJvcGVydHlOYW1lcyxcclxuICAvLyAxOS4xLjIuOCBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKE8pXHJcbiAgZ2V0T3duUHJvcGVydHlTeW1ib2xzOiAkZ2V0T3duUHJvcGVydHlTeW1ib2xzXHJcbn0pO1xyXG5cclxuLy8gMjQuMy4yIEpTT04uc3RyaW5naWZ5KHZhbHVlIFssIHJlcGxhY2VyIFssIHNwYWNlXV0pXHJcbiRKU09OICYmICRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogKCFVU0VfTkFUSVZFIHx8ICRmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIFMgPSAkU3ltYm9sKCk7XHJcbiAgLy8gTVMgRWRnZSBjb252ZXJ0cyBzeW1ib2wgdmFsdWVzIHRvIEpTT04gYXMge31cclxuICAvLyBXZWJLaXQgY29udmVydHMgc3ltYm9sIHZhbHVlcyB0byBKU09OIGFzIG51bGxcclxuICAvLyBWOCB0aHJvd3Mgb24gYm94ZWQgc3ltYm9sc1xyXG4gIHJldHVybiBfc3RyaW5naWZ5KFtTXSkgIT0gJ1tudWxsXScgfHwgX3N0cmluZ2lmeSh7IGE6IFMgfSkgIT0gJ3t9JyB8fCBfc3RyaW5naWZ5KE9iamVjdChTKSkgIT0gJ3t9JztcclxufSkpLCAnSlNPTicsIHtcclxuICBzdHJpbmdpZnk6IGZ1bmN0aW9uIHN0cmluZ2lmeShpdCkge1xyXG4gICAgdmFyIGFyZ3MgPSBbaXRdO1xyXG4gICAgdmFyIGkgPSAxO1xyXG4gICAgdmFyIHJlcGxhY2VyLCAkcmVwbGFjZXI7XHJcbiAgICB3aGlsZSAoYXJndW1lbnRzLmxlbmd0aCA+IGkpIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAkcmVwbGFjZXIgPSByZXBsYWNlciA9IGFyZ3NbMV07XHJcbiAgICBpZiAoIWlzT2JqZWN0KHJlcGxhY2VyKSAmJiBpdCA9PT0gdW5kZWZpbmVkIHx8IGlzU3ltYm9sKGl0KSkgcmV0dXJuOyAvLyBJRTggcmV0dXJucyBzdHJpbmcgb24gdW5kZWZpbmVkXHJcbiAgICBpZiAoIWlzQXJyYXkocmVwbGFjZXIpKSByZXBsYWNlciA9IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgJHJlcGxhY2VyID09ICdmdW5jdGlvbicpIHZhbHVlID0gJHJlcGxhY2VyLmNhbGwodGhpcywga2V5LCB2YWx1ZSk7XHJcbiAgICAgIGlmICghaXNTeW1ib2wodmFsdWUpKSByZXR1cm4gdmFsdWU7XHJcbiAgICB9O1xyXG4gICAgYXJnc1sxXSA9IHJlcGxhY2VyO1xyXG4gICAgcmV0dXJuIF9zdHJpbmdpZnkuYXBwbHkoJEpTT04sIGFyZ3MpO1xyXG4gIH1cclxufSk7XHJcblxyXG4vLyAxOS40LjMuNCBTeW1ib2wucHJvdG90eXBlW0BAdG9QcmltaXRpdmVdKGhpbnQpXHJcbiRTeW1ib2xbUFJPVE9UWVBFXVtUT19QUklNSVRJVkVdIHx8IHJlcXVpcmUoJy4vX2hpZGUnKSgkU3ltYm9sW1BST1RPVFlQRV0sIFRPX1BSSU1JVElWRSwgJFN5bWJvbFtQUk9UT1RZUEVdLnZhbHVlT2YpO1xyXG4vLyAxOS40LjMuNSBTeW1ib2wucHJvdG90eXBlW0BAdG9TdHJpbmdUYWddXHJcbnNldFRvU3RyaW5nVGFnKCRTeW1ib2wsICdTeW1ib2wnKTtcclxuLy8gMjAuMi4xLjkgTWF0aFtAQHRvU3RyaW5nVGFnXVxyXG5zZXRUb1N0cmluZ1RhZyhNYXRoLCAnTWF0aCcsIHRydWUpO1xyXG4vLyAyNC4zLjMgSlNPTltAQHRvU3RyaW5nVGFnXVxyXG5zZXRUb1N0cmluZ1RhZyhnbG9iYWwuSlNPTiwgJ0pTT04nLCB0cnVlKTtcclxuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19zaGFyZWQnKSgnbmF0aXZlLWZ1bmN0aW9uLXRvLXN0cmluZycsIEZ1bmN0aW9uLnRvU3RyaW5nKTtcclxuIiwiLy8gYWxsIGVudW1lcmFibGUgb2JqZWN0IGtleXMsIGluY2x1ZGVzIHN5bWJvbHNcclxudmFyIGdldEtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xyXG52YXIgZ09QUyA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BzJyk7XHJcbnZhciBwSUUgPSByZXF1aXJlKCcuL19vYmplY3QtcGllJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgdmFyIHJlc3VsdCA9IGdldEtleXMoaXQpO1xyXG4gIHZhciBnZXRTeW1ib2xzID0gZ09QUy5mO1xyXG4gIGlmIChnZXRTeW1ib2xzKSB7XHJcbiAgICB2YXIgc3ltYm9scyA9IGdldFN5bWJvbHMoaXQpO1xyXG4gICAgdmFyIGlzRW51bSA9IHBJRS5mO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIGtleTtcclxuICAgIHdoaWxlIChzeW1ib2xzLmxlbmd0aCA+IGkpIGlmIChpc0VudW0uY2FsbChpdCwga2V5ID0gc3ltYm9sc1tpKytdKSkgcmVzdWx0LnB1c2goa2V5KTtcclxuICB9IHJldHVybiByZXN1bHQ7XHJcbn07XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbi8vIDE5LjEuMi4yIC8gMTUuMi4zLjUgT2JqZWN0LmNyZWF0ZShPIFssIFByb3BlcnRpZXNdKVxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgY3JlYXRlOiByZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykgfSk7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbi8vIDE5LjEuMi40IC8gMTUuMi4zLjYgT2JqZWN0LmRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnR5OiByZXF1aXJlKCcuL19vYmplY3QtZHAnKS5mIH0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4vLyAxOS4xLjIuMyAvIDE1LjIuMy43IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKE8sIFByb3BlcnRpZXMpXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJyksICdPYmplY3QnLCB7IGRlZmluZVByb3BlcnRpZXM6IHJlcXVpcmUoJy4vX29iamVjdC1kcHMnKSB9KTtcclxuIiwiLy8gMTkuMS4yLjYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihPLCBQKVxyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgJGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yJywgZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoaXQsIGtleSkge1xyXG4gICAgcmV0dXJuICRnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodG9JT2JqZWN0KGl0KSwga2V5KTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjkgT2JqZWN0LmdldFByb3RvdHlwZU9mKE8pXHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgJGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRQcm90b3R5cGVPZicsIGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gZ2V0UHJvdG90eXBlT2YoaXQpIHtcclxuICAgIHJldHVybiAkZ2V0UHJvdG90eXBlT2YodG9PYmplY3QoaXQpKTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjE0IE9iamVjdC5rZXlzKE8pXHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgJGtleXMgPSByZXF1aXJlKCcuL19vYmplY3Qta2V5cycpO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdrZXlzJywgZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBrZXlzKGl0KSB7XHJcbiAgICByZXR1cm4gJGtleXModG9PYmplY3QoaXQpKTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjcgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoTylcclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdnZXRPd25Qcm9wZXJ0eU5hbWVzJywgZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiByZXF1aXJlKCcuL19vYmplY3QtZ29wbi1leHQnKS5mO1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjUgT2JqZWN0LmZyZWV6ZShPKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIG1ldGEgPSByZXF1aXJlKCcuL19tZXRhJykub25GcmVlemU7XHJcblxyXG5yZXF1aXJlKCcuL19vYmplY3Qtc2FwJykoJ2ZyZWV6ZScsIGZ1bmN0aW9uICgkZnJlZXplKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGZyZWV6ZShpdCkge1xyXG4gICAgcmV0dXJuICRmcmVlemUgJiYgaXNPYmplY3QoaXQpID8gJGZyZWV6ZShtZXRhKGl0KSkgOiBpdDtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMTkuMS4yLjE3IE9iamVjdC5zZWFsKE8pXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgbWV0YSA9IHJlcXVpcmUoJy4vX21ldGEnKS5vbkZyZWV6ZTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnc2VhbCcsIGZ1bmN0aW9uICgkc2VhbCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBzZWFsKGl0KSB7XHJcbiAgICByZXR1cm4gJHNlYWwgJiYgaXNPYmplY3QoaXQpID8gJHNlYWwobWV0YShpdCkpIDogaXQ7XHJcbiAgfTtcclxufSk7XHJcbiIsIi8vIDE5LjEuMi4xNSBPYmplY3QucHJldmVudEV4dGVuc2lvbnMoTylcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBtZXRhID0gcmVxdWlyZSgnLi9fbWV0YScpLm9uRnJlZXplO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdwcmV2ZW50RXh0ZW5zaW9ucycsIGZ1bmN0aW9uICgkcHJldmVudEV4dGVuc2lvbnMpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gcHJldmVudEV4dGVuc2lvbnMoaXQpIHtcclxuICAgIHJldHVybiAkcHJldmVudEV4dGVuc2lvbnMgJiYgaXNPYmplY3QoaXQpID8gJHByZXZlbnRFeHRlbnNpb25zKG1ldGEoaXQpKSA6IGl0O1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAxOS4xLjIuMTIgT2JqZWN0LmlzRnJvemVuKE8pXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc0Zyb3plbicsIGZ1bmN0aW9uICgkaXNGcm96ZW4pIHtcclxuICByZXR1cm4gZnVuY3Rpb24gaXNGcm96ZW4oaXQpIHtcclxuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNGcm96ZW4gPyAkaXNGcm96ZW4oaXQpIDogZmFsc2UgOiB0cnVlO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAxOS4xLjIuMTMgT2JqZWN0LmlzU2VhbGVkKE8pXHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG5cclxucmVxdWlyZSgnLi9fb2JqZWN0LXNhcCcpKCdpc1NlYWxlZCcsIGZ1bmN0aW9uICgkaXNTZWFsZWQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gaXNTZWFsZWQoaXQpIHtcclxuICAgIHJldHVybiBpc09iamVjdChpdCkgPyAkaXNTZWFsZWQgPyAkaXNTZWFsZWQoaXQpIDogZmFsc2UgOiB0cnVlO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAxOS4xLjIuMTEgT2JqZWN0LmlzRXh0ZW5zaWJsZShPKVxyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxuXHJcbnJlcXVpcmUoJy4vX29iamVjdC1zYXAnKSgnaXNFeHRlbnNpYmxlJywgZnVuY3Rpb24gKCRpc0V4dGVuc2libGUpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gaXNFeHRlbnNpYmxlKGl0KSB7XHJcbiAgICByZXR1cm4gaXNPYmplY3QoaXQpID8gJGlzRXh0ZW5zaWJsZSA/ICRpc0V4dGVuc2libGUoaXQpIDogdHJ1ZSA6IGZhbHNlO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAxOS4xLjMuMSBPYmplY3QuYXNzaWduKHRhcmdldCwgc291cmNlKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYsICdPYmplY3QnLCB7IGFzc2lnbjogcmVxdWlyZSgnLi9fb2JqZWN0LWFzc2lnbicpIH0pO1xyXG4iLCIvLyAxOS4xLjMuMTAgT2JqZWN0LmlzKHZhbHVlMSwgdmFsdWUyKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG4kZXhwb3J0KCRleHBvcnQuUywgJ09iamVjdCcsIHsgaXM6IHJlcXVpcmUoJy4vX3NhbWUtdmFsdWUnKSB9KTtcclxuIiwiLy8gMTkuMS4zLjE5IE9iamVjdC5zZXRQcm90b3R5cGVPZihPLCBwcm90bylcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7IHNldFByb3RvdHlwZU9mOiByZXF1aXJlKCcuL19zZXQtcHJvdG8nKS5zZXQgfSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMTkuMS4zLjYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZygpXHJcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG52YXIgdGVzdCA9IHt9O1xyXG50ZXN0W3JlcXVpcmUoJy4vX3drcycpKCd0b1N0cmluZ1RhZycpXSA9ICd6JztcclxuaWYgKHRlc3QgKyAnJyAhPSAnW29iamVjdCB6XScpIHtcclxuICByZXF1aXJlKCcuL19yZWRlZmluZScpKE9iamVjdC5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xyXG4gICAgcmV0dXJuICdbb2JqZWN0ICcgKyBjbGFzc29mKHRoaXMpICsgJ10nO1xyXG4gIH0sIHRydWUpO1xyXG59XHJcbiIsIi8vIDE5LjIuMy4yIC8gMTUuMy40LjUgRnVuY3Rpb24ucHJvdG90eXBlLmJpbmQodGhpc0FyZywgYXJncy4uLilcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnRnVuY3Rpb24nLCB7IGJpbmQ6IHJlcXVpcmUoJy4vX2JpbmQnKSB9KTtcclxuIiwidmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIEZQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcclxudmFyIG5hbWVSRSA9IC9eXFxzKmZ1bmN0aW9uIChbXiAoXSopLztcclxudmFyIE5BTUUgPSAnbmFtZSc7XHJcblxyXG4vLyAxOS4yLjQuMiBuYW1lXHJcbk5BTUUgaW4gRlByb3RvIHx8IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgZFAoRlByb3RvLCBOQU1FLCB7XHJcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgcmV0dXJuICgnJyArIHRoaXMpLm1hdGNoKG5hbWVSRSlbMV07XHJcbiAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBIQVNfSU5TVEFOQ0UgPSByZXF1aXJlKCcuL193a3MnKSgnaGFzSW5zdGFuY2UnKTtcclxudmFyIEZ1bmN0aW9uUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGU7XHJcbi8vIDE5LjIuMy42IEZ1bmN0aW9uLnByb3RvdHlwZVtAQGhhc0luc3RhbmNlXShWKVxyXG5pZiAoIShIQVNfSU5TVEFOQ0UgaW4gRnVuY3Rpb25Qcm90bykpIHJlcXVpcmUoJy4vX29iamVjdC1kcCcpLmYoRnVuY3Rpb25Qcm90bywgSEFTX0lOU1RBTkNFLCB7IHZhbHVlOiBmdW5jdGlvbiAoTykge1xyXG4gIGlmICh0eXBlb2YgdGhpcyAhPSAnZnVuY3Rpb24nIHx8ICFpc09iamVjdChPKSkgcmV0dXJuIGZhbHNlO1xyXG4gIGlmICghaXNPYmplY3QodGhpcy5wcm90b3R5cGUpKSByZXR1cm4gTyBpbnN0YW5jZW9mIHRoaXM7XHJcbiAgLy8gZm9yIGVudmlyb25tZW50IHcvbyBuYXRpdmUgYEBAaGFzSW5zdGFuY2VgIGxvZ2ljIGVub3VnaCBgaW5zdGFuY2VvZmAsIGJ1dCBhZGQgdGhpczpcclxuICB3aGlsZSAoTyA9IGdldFByb3RvdHlwZU9mKE8pKSBpZiAodGhpcy5wcm90b3R5cGUgPT09IE8pIHJldHVybiB0cnVlO1xyXG4gIHJldHVybiBmYWxzZTtcclxufSB9KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRwYXJzZUludCA9IHJlcXVpcmUoJy4vX3BhcnNlLWludCcpO1xyXG4vLyAxOC4yLjUgcGFyc2VJbnQoc3RyaW5nLCByYWRpeClcclxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LkYgKiAocGFyc2VJbnQgIT0gJHBhcnNlSW50KSwgeyBwYXJzZUludDogJHBhcnNlSW50IH0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xyXG4vLyAxOC4yLjQgcGFyc2VGbG9hdChzdHJpbmcpXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5GICogKHBhcnNlRmxvYXQgIT0gJHBhcnNlRmxvYXQpLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgY29mID0gcmVxdWlyZSgnLi9fY29mJyk7XHJcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4vX2ZhaWxzJyk7XHJcbnZhciBnT1BOID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdvcG4nKS5mO1xyXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJykuZjtcclxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyICR0cmltID0gcmVxdWlyZSgnLi9fc3RyaW5nLXRyaW0nKS50cmltO1xyXG52YXIgTlVNQkVSID0gJ051bWJlcic7XHJcbnZhciAkTnVtYmVyID0gZ2xvYmFsW05VTUJFUl07XHJcbnZhciBCYXNlID0gJE51bWJlcjtcclxudmFyIHByb3RvID0gJE51bWJlci5wcm90b3R5cGU7XHJcbi8vIE9wZXJhIH4xMiBoYXMgYnJva2VuIE9iamVjdCN0b1N0cmluZ1xyXG52YXIgQlJPS0VOX0NPRiA9IGNvZihyZXF1aXJlKCcuL19vYmplY3QtY3JlYXRlJykocHJvdG8pKSA9PSBOVU1CRVI7XHJcbnZhciBUUklNID0gJ3RyaW0nIGluIFN0cmluZy5wcm90b3R5cGU7XHJcblxyXG4vLyA3LjEuMyBUb051bWJlcihhcmd1bWVudClcclxudmFyIHRvTnVtYmVyID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XHJcbiAgdmFyIGl0ID0gdG9QcmltaXRpdmUoYXJndW1lbnQsIGZhbHNlKTtcclxuICBpZiAodHlwZW9mIGl0ID09ICdzdHJpbmcnICYmIGl0Lmxlbmd0aCA+IDIpIHtcclxuICAgIGl0ID0gVFJJTSA/IGl0LnRyaW0oKSA6ICR0cmltKGl0LCAzKTtcclxuICAgIHZhciBmaXJzdCA9IGl0LmNoYXJDb2RlQXQoMCk7XHJcbiAgICB2YXIgdGhpcmQsIHJhZGl4LCBtYXhDb2RlO1xyXG4gICAgaWYgKGZpcnN0ID09PSA0MyB8fCBmaXJzdCA9PT0gNDUpIHtcclxuICAgICAgdGhpcmQgPSBpdC5jaGFyQ29kZUF0KDIpO1xyXG4gICAgICBpZiAodGhpcmQgPT09IDg4IHx8IHRoaXJkID09PSAxMjApIHJldHVybiBOYU47IC8vIE51bWJlcignKzB4MScpIHNob3VsZCBiZSBOYU4sIG9sZCBWOCBmaXhcclxuICAgIH0gZWxzZSBpZiAoZmlyc3QgPT09IDQ4KSB7XHJcbiAgICAgIHN3aXRjaCAoaXQuY2hhckNvZGVBdCgxKSkge1xyXG4gICAgICAgIGNhc2UgNjY6IGNhc2UgOTg6IHJhZGl4ID0gMjsgbWF4Q29kZSA9IDQ5OyBicmVhazsgLy8gZmFzdCBlcXVhbCAvXjBiWzAxXSskL2lcclxuICAgICAgICBjYXNlIDc5OiBjYXNlIDExMTogcmFkaXggPSA4OyBtYXhDb2RlID0gNTU7IGJyZWFrOyAvLyBmYXN0IGVxdWFsIC9eMG9bMC03XSskL2lcclxuICAgICAgICBkZWZhdWx0OiByZXR1cm4gK2l0O1xyXG4gICAgICB9XHJcbiAgICAgIGZvciAodmFyIGRpZ2l0cyA9IGl0LnNsaWNlKDIpLCBpID0gMCwgbCA9IGRpZ2l0cy5sZW5ndGgsIGNvZGU7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICBjb2RlID0gZGlnaXRzLmNoYXJDb2RlQXQoaSk7XHJcbiAgICAgICAgLy8gcGFyc2VJbnQgcGFyc2VzIGEgc3RyaW5nIHRvIGEgZmlyc3QgdW5hdmFpbGFibGUgc3ltYm9sXHJcbiAgICAgICAgLy8gYnV0IFRvTnVtYmVyIHNob3VsZCByZXR1cm4gTmFOIGlmIGEgc3RyaW5nIGNvbnRhaW5zIHVuYXZhaWxhYmxlIHN5bWJvbHNcclxuICAgICAgICBpZiAoY29kZSA8IDQ4IHx8IGNvZGUgPiBtYXhDb2RlKSByZXR1cm4gTmFOO1xyXG4gICAgICB9IHJldHVybiBwYXJzZUludChkaWdpdHMsIHJhZGl4KTtcclxuICAgIH1cclxuICB9IHJldHVybiAraXQ7XHJcbn07XHJcblxyXG5pZiAoISROdW1iZXIoJyAwbzEnKSB8fCAhJE51bWJlcignMGIxJykgfHwgJE51bWJlcignKzB4MScpKSB7XHJcbiAgJE51bWJlciA9IGZ1bmN0aW9uIE51bWJlcih2YWx1ZSkge1xyXG4gICAgdmFyIGl0ID0gYXJndW1lbnRzLmxlbmd0aCA8IDEgPyAwIDogdmFsdWU7XHJcbiAgICB2YXIgdGhhdCA9IHRoaXM7XHJcbiAgICByZXR1cm4gdGhhdCBpbnN0YW5jZW9mICROdW1iZXJcclxuICAgICAgLy8gY2hlY2sgb24gMS4uY29uc3RydWN0b3IoZm9vKSBjYXNlXHJcbiAgICAgICYmIChCUk9LRU5fQ09GID8gZmFpbHMoZnVuY3Rpb24gKCkgeyBwcm90by52YWx1ZU9mLmNhbGwodGhhdCk7IH0pIDogY29mKHRoYXQpICE9IE5VTUJFUilcclxuICAgICAgICA/IGluaGVyaXRJZlJlcXVpcmVkKG5ldyBCYXNlKHRvTnVtYmVyKGl0KSksIHRoYXQsICROdW1iZXIpIDogdG9OdW1iZXIoaXQpO1xyXG4gIH07XHJcbiAgZm9yICh2YXIga2V5cyA9IHJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgPyBnT1BOKEJhc2UpIDogKFxyXG4gICAgLy8gRVMzOlxyXG4gICAgJ01BWF9WQUxVRSxNSU5fVkFMVUUsTmFOLE5FR0FUSVZFX0lORklOSVRZLFBPU0lUSVZFX0lORklOSVRZLCcgK1xyXG4gICAgLy8gRVM2IChpbiBjYXNlLCBpZiBtb2R1bGVzIHdpdGggRVM2IE51bWJlciBzdGF0aWNzIHJlcXVpcmVkIGJlZm9yZSk6XHJcbiAgICAnRVBTSUxPTixpc0Zpbml0ZSxpc0ludGVnZXIsaXNOYU4saXNTYWZlSW50ZWdlcixNQVhfU0FGRV9JTlRFR0VSLCcgK1xyXG4gICAgJ01JTl9TQUZFX0lOVEVHRVIscGFyc2VGbG9hdCxwYXJzZUludCxpc0ludGVnZXInXHJcbiAgKS5zcGxpdCgnLCcpLCBqID0gMCwga2V5OyBrZXlzLmxlbmd0aCA+IGo7IGorKykge1xyXG4gICAgaWYgKGhhcyhCYXNlLCBrZXkgPSBrZXlzW2pdKSAmJiAhaGFzKCROdW1iZXIsIGtleSkpIHtcclxuICAgICAgZFAoJE51bWJlciwga2V5LCBnT1BEKEJhc2UsIGtleSkpO1xyXG4gICAgfVxyXG4gIH1cclxuICAkTnVtYmVyLnByb3RvdHlwZSA9IHByb3RvO1xyXG4gIHByb3RvLmNvbnN0cnVjdG9yID0gJE51bWJlcjtcclxuICByZXF1aXJlKCcuL19yZWRlZmluZScpKGdsb2JhbCwgTlVNQkVSLCAkTnVtYmVyKTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciBhTnVtYmVyVmFsdWUgPSByZXF1aXJlKCcuL19hLW51bWJlci12YWx1ZScpO1xyXG52YXIgcmVwZWF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpO1xyXG52YXIgJHRvRml4ZWQgPSAxLjAudG9GaXhlZDtcclxudmFyIGZsb29yID0gTWF0aC5mbG9vcjtcclxudmFyIGRhdGEgPSBbMCwgMCwgMCwgMCwgMCwgMF07XHJcbnZhciBFUlJPUiA9ICdOdW1iZXIudG9GaXhlZDogaW5jb3JyZWN0IGludm9jYXRpb24hJztcclxudmFyIFpFUk8gPSAnMCc7XHJcblxyXG52YXIgbXVsdGlwbHkgPSBmdW5jdGlvbiAobiwgYykge1xyXG4gIHZhciBpID0gLTE7XHJcbiAgdmFyIGMyID0gYztcclxuICB3aGlsZSAoKytpIDwgNikge1xyXG4gICAgYzIgKz0gbiAqIGRhdGFbaV07XHJcbiAgICBkYXRhW2ldID0gYzIgJSAxZTc7XHJcbiAgICBjMiA9IGZsb29yKGMyIC8gMWU3KTtcclxuICB9XHJcbn07XHJcbnZhciBkaXZpZGUgPSBmdW5jdGlvbiAobikge1xyXG4gIHZhciBpID0gNjtcclxuICB2YXIgYyA9IDA7XHJcbiAgd2hpbGUgKC0taSA+PSAwKSB7XHJcbiAgICBjICs9IGRhdGFbaV07XHJcbiAgICBkYXRhW2ldID0gZmxvb3IoYyAvIG4pO1xyXG4gICAgYyA9IChjICUgbikgKiAxZTc7XHJcbiAgfVxyXG59O1xyXG52YXIgbnVtVG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGkgPSA2O1xyXG4gIHZhciBzID0gJyc7XHJcbiAgd2hpbGUgKC0taSA+PSAwKSB7XHJcbiAgICBpZiAocyAhPT0gJycgfHwgaSA9PT0gMCB8fCBkYXRhW2ldICE9PSAwKSB7XHJcbiAgICAgIHZhciB0ID0gU3RyaW5nKGRhdGFbaV0pO1xyXG4gICAgICBzID0gcyA9PT0gJycgPyB0IDogcyArIHJlcGVhdC5jYWxsKFpFUk8sIDcgLSB0Lmxlbmd0aCkgKyB0O1xyXG4gICAgfVxyXG4gIH0gcmV0dXJuIHM7XHJcbn07XHJcbnZhciBwb3cgPSBmdW5jdGlvbiAoeCwgbiwgYWNjKSB7XHJcbiAgcmV0dXJuIG4gPT09IDAgPyBhY2MgOiBuICUgMiA9PT0gMSA/IHBvdyh4LCBuIC0gMSwgYWNjICogeCkgOiBwb3coeCAqIHgsIG4gLyAyLCBhY2MpO1xyXG59O1xyXG52YXIgbG9nID0gZnVuY3Rpb24gKHgpIHtcclxuICB2YXIgbiA9IDA7XHJcbiAgdmFyIHgyID0geDtcclxuICB3aGlsZSAoeDIgPj0gNDA5Nikge1xyXG4gICAgbiArPSAxMjtcclxuICAgIHgyIC89IDQwOTY7XHJcbiAgfVxyXG4gIHdoaWxlICh4MiA+PSAyKSB7XHJcbiAgICBuICs9IDE7XHJcbiAgICB4MiAvPSAyO1xyXG4gIH0gcmV0dXJuIG47XHJcbn07XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICghISR0b0ZpeGVkICYmIChcclxuICAwLjAwMDA4LnRvRml4ZWQoMykgIT09ICcwLjAwMCcgfHxcclxuICAwLjkudG9GaXhlZCgwKSAhPT0gJzEnIHx8XHJcbiAgMS4yNTUudG9GaXhlZCgyKSAhPT0gJzEuMjUnIHx8XHJcbiAgMTAwMDAwMDAwMDAwMDAwMDEyOC4wLnRvRml4ZWQoMCkgIT09ICcxMDAwMDAwMDAwMDAwMDAwMTI4J1xyXG4pIHx8ICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxyXG4gICR0b0ZpeGVkLmNhbGwoe30pO1xyXG59KSksICdOdW1iZXInLCB7XHJcbiAgdG9GaXhlZDogZnVuY3Rpb24gdG9GaXhlZChmcmFjdGlvbkRpZ2l0cykge1xyXG4gICAgdmFyIHggPSBhTnVtYmVyVmFsdWUodGhpcywgRVJST1IpO1xyXG4gICAgdmFyIGYgPSB0b0ludGVnZXIoZnJhY3Rpb25EaWdpdHMpO1xyXG4gICAgdmFyIHMgPSAnJztcclxuICAgIHZhciBtID0gWkVSTztcclxuICAgIHZhciBlLCB6LCBqLCBrO1xyXG4gICAgaWYgKGYgPCAwIHx8IGYgPiAyMCkgdGhyb3cgUmFuZ2VFcnJvcihFUlJPUik7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICBpZiAoeCAhPSB4KSByZXR1cm4gJ05hTic7XHJcbiAgICBpZiAoeCA8PSAtMWUyMSB8fCB4ID49IDFlMjEpIHJldHVybiBTdHJpbmcoeCk7XHJcbiAgICBpZiAoeCA8IDApIHtcclxuICAgICAgcyA9ICctJztcclxuICAgICAgeCA9IC14O1xyXG4gICAgfVxyXG4gICAgaWYgKHggPiAxZS0yMSkge1xyXG4gICAgICBlID0gbG9nKHggKiBwb3coMiwgNjksIDEpKSAtIDY5O1xyXG4gICAgICB6ID0gZSA8IDAgPyB4ICogcG93KDIsIC1lLCAxKSA6IHggLyBwb3coMiwgZSwgMSk7XHJcbiAgICAgIHogKj0gMHgxMDAwMDAwMDAwMDAwMDtcclxuICAgICAgZSA9IDUyIC0gZTtcclxuICAgICAgaWYgKGUgPiAwKSB7XHJcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XHJcbiAgICAgICAgaiA9IGY7XHJcbiAgICAgICAgd2hpbGUgKGogPj0gNykge1xyXG4gICAgICAgICAgbXVsdGlwbHkoMWU3LCAwKTtcclxuICAgICAgICAgIGogLT0gNztcclxuICAgICAgICB9XHJcbiAgICAgICAgbXVsdGlwbHkocG93KDEwLCBqLCAxKSwgMCk7XHJcbiAgICAgICAgaiA9IGUgLSAxO1xyXG4gICAgICAgIHdoaWxlIChqID49IDIzKSB7XHJcbiAgICAgICAgICBkaXZpZGUoMSA8PCAyMyk7XHJcbiAgICAgICAgICBqIC09IDIzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkaXZpZGUoMSA8PCBqKTtcclxuICAgICAgICBtdWx0aXBseSgxLCAxKTtcclxuICAgICAgICBkaXZpZGUoMik7XHJcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbXVsdGlwbHkoMCwgeik7XHJcbiAgICAgICAgbXVsdGlwbHkoMSA8PCAtZSwgMCk7XHJcbiAgICAgICAgbSA9IG51bVRvU3RyaW5nKCkgKyByZXBlYXQuY2FsbChaRVJPLCBmKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGYgPiAwKSB7XHJcbiAgICAgIGsgPSBtLmxlbmd0aDtcclxuICAgICAgbSA9IHMgKyAoayA8PSBmID8gJzAuJyArIHJlcGVhdC5jYWxsKFpFUk8sIGYgLSBrKSArIG0gOiBtLnNsaWNlKDAsIGsgLSBmKSArICcuJyArIG0uc2xpY2UoayAtIGYpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG0gPSBzICsgbTtcclxuICAgIH0gcmV0dXJuIG07XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyIGFOdW1iZXJWYWx1ZSA9IHJlcXVpcmUoJy4vX2EtbnVtYmVyLXZhbHVlJyk7XHJcbnZhciAkdG9QcmVjaXNpb24gPSAxLjAudG9QcmVjaXNpb247XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICgkZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIC8vIElFNy1cclxuICByZXR1cm4gJHRvUHJlY2lzaW9uLmNhbGwoMSwgdW5kZWZpbmVkKSAhPT0gJzEnO1xyXG59KSB8fCAhJGZhaWxzKGZ1bmN0aW9uICgpIHtcclxuICAvLyBWOCB+IEFuZHJvaWQgNC4zLVxyXG4gICR0b1ByZWNpc2lvbi5jYWxsKHt9KTtcclxufSkpLCAnTnVtYmVyJywge1xyXG4gIHRvUHJlY2lzaW9uOiBmdW5jdGlvbiB0b1ByZWNpc2lvbihwcmVjaXNpb24pIHtcclxuICAgIHZhciB0aGF0ID0gYU51bWJlclZhbHVlKHRoaXMsICdOdW1iZXIjdG9QcmVjaXNpb246IGluY29ycmVjdCBpbnZvY2F0aW9uIScpO1xyXG4gICAgcmV0dXJuIHByZWNpc2lvbiA9PT0gdW5kZWZpbmVkID8gJHRvUHJlY2lzaW9uLmNhbGwodGhhdCkgOiAkdG9QcmVjaXNpb24uY2FsbCh0aGF0LCBwcmVjaXNpb24pO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjEuMi4xIE51bWJlci5FUFNJTE9OXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgRVBTSUxPTjogTWF0aC5wb3coMiwgLTUyKSB9KTtcclxuIiwiLy8gMjAuMS4yLjIgTnVtYmVyLmlzRmluaXRlKG51bWJlcilcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIF9pc0Zpbml0ZSA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpLmlzRmluaXRlO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7XHJcbiAgaXNGaW5pdGU6IGZ1bmN0aW9uIGlzRmluaXRlKGl0KSB7XHJcbiAgICByZXR1cm4gdHlwZW9mIGl0ID09ICdudW1iZXInICYmIF9pc0Zpbml0ZShpdCk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMS4yLjMgTnVtYmVyLmlzSW50ZWdlcihudW1iZXIpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHsgaXNJbnRlZ2VyOiByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJykgfSk7XHJcbiIsIi8vIDIwLjEuMi40IE51bWJlci5pc05hTihudW1iZXIpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ051bWJlcicsIHtcclxuICBpc05hTjogZnVuY3Rpb24gaXNOYU4obnVtYmVyKSB7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICByZXR1cm4gbnVtYmVyICE9IG51bWJlcjtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4xLjIuNSBOdW1iZXIuaXNTYWZlSW50ZWdlcihudW1iZXIpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBpc0ludGVnZXIgPSByZXF1aXJlKCcuL19pcy1pbnRlZ2VyJyk7XHJcbnZhciBhYnMgPSBNYXRoLmFicztcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTnVtYmVyJywge1xyXG4gIGlzU2FmZUludGVnZXI6IGZ1bmN0aW9uIGlzU2FmZUludGVnZXIobnVtYmVyKSB7XHJcbiAgICByZXR1cm4gaXNJbnRlZ2VyKG51bWJlcikgJiYgYWJzKG51bWJlcikgPD0gMHgxZmZmZmZmZmZmZmZmZjtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4xLjIuNiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUlxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1BWF9TQUZFX0lOVEVHRVI6IDB4MWZmZmZmZmZmZmZmZmYgfSk7XHJcbiIsIi8vIDIwLjEuMi4xMCBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdOdW1iZXInLCB7IE1JTl9TQUZFX0lOVEVHRVI6IC0weDFmZmZmZmZmZmZmZmZmIH0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHBhcnNlRmxvYXQgPSByZXF1aXJlKCcuL19wYXJzZS1mbG9hdCcpO1xyXG4vLyAyMC4xLjIuMTIgTnVtYmVyLnBhcnNlRmxvYXQoc3RyaW5nKVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChOdW1iZXIucGFyc2VGbG9hdCAhPSAkcGFyc2VGbG9hdCksICdOdW1iZXInLCB7IHBhcnNlRmxvYXQ6ICRwYXJzZUZsb2F0IH0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHBhcnNlSW50ID0gcmVxdWlyZSgnLi9fcGFyc2UtaW50Jyk7XHJcbi8vIDIwLjEuMi4xMyBOdW1iZXIucGFyc2VJbnQoc3RyaW5nLCByYWRpeClcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTnVtYmVyLnBhcnNlSW50ICE9ICRwYXJzZUludCksICdOdW1iZXInLCB7IHBhcnNlSW50OiAkcGFyc2VJbnQgfSk7XHJcbiIsIi8vIDIwLjIuMi4zIE1hdGguYWNvc2goeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGxvZzFwID0gcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpO1xyXG52YXIgc3FydCA9IE1hdGguc3FydDtcclxudmFyICRhY29zaCA9IE1hdGguYWNvc2g7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEoJGFjb3NoXHJcbiAgLy8gVjggYnVnOiBodHRwczovL2NvZGUuZ29vZ2xlLmNvbS9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzUwOVxyXG4gICYmIE1hdGguZmxvb3IoJGFjb3NoKE51bWJlci5NQVhfVkFMVUUpKSA9PSA3MTBcclxuICAvLyBUb3IgQnJvd3NlciBidWc6IE1hdGguYWNvc2goSW5maW5pdHkpIC0+IE5hTlxyXG4gICYmICRhY29zaChJbmZpbml0eSkgPT0gSW5maW5pdHlcclxuKSwgJ01hdGgnLCB7XHJcbiAgYWNvc2g6IGZ1bmN0aW9uIGFjb3NoKHgpIHtcclxuICAgIHJldHVybiAoeCA9ICt4KSA8IDEgPyBOYU4gOiB4ID4gOTQ5MDYyNjUuNjI0MjUxNTZcclxuICAgICAgPyBNYXRoLmxvZyh4KSArIE1hdGguTE4yXHJcbiAgICAgIDogbG9nMXAoeCAtIDEgKyBzcXJ0KHggLSAxKSAqIHNxcnQoeCArIDEpKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuNSBNYXRoLmFzaW5oKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkYXNpbmggPSBNYXRoLmFzaW5oO1xyXG5cclxuZnVuY3Rpb24gYXNpbmgoeCkge1xyXG4gIHJldHVybiAhaXNGaW5pdGUoeCA9ICt4KSB8fCB4ID09IDAgPyB4IDogeCA8IDAgPyAtYXNpbmgoLXgpIDogTWF0aC5sb2coeCArIE1hdGguc3FydCh4ICogeCArIDEpKTtcclxufVxyXG5cclxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmFzaW5oKDApIC0+IC0wXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXNpbmggJiYgMSAvICRhc2luaCgwKSA+IDApLCAnTWF0aCcsIHsgYXNpbmg6IGFzaW5oIH0pO1xyXG4iLCIvLyAyMC4yLjIuNyBNYXRoLmF0YW5oKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkYXRhbmggPSBNYXRoLmF0YW5oO1xyXG5cclxuLy8gVG9yIEJyb3dzZXIgYnVnOiBNYXRoLmF0YW5oKC0wKSAtPiAwXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogISgkYXRhbmggJiYgMSAvICRhdGFuaCgtMCkgPCAwKSwgJ01hdGgnLCB7XHJcbiAgYXRhbmg6IGZ1bmN0aW9uIGF0YW5oKHgpIHtcclxuICAgIHJldHVybiAoeCA9ICt4KSA9PSAwID8geCA6IE1hdGgubG9nKCgxICsgeCkgLyAoMSAtIHgpKSAvIDI7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjkgTWF0aC5jYnJ0KHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBzaWduID0gcmVxdWlyZSgnLi9fbWF0aC1zaWduJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgY2JydDogZnVuY3Rpb24gY2JydCh4KSB7XHJcbiAgICByZXR1cm4gc2lnbih4ID0gK3gpICogTWF0aC5wb3coTWF0aC5hYnMoeCksIDEgLyAzKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMTEgTWF0aC5jbHozMih4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGNsejMyOiBmdW5jdGlvbiBjbHozMih4KSB7XHJcbiAgICByZXR1cm4gKHggPj4+PSAwKSA/IDMxIC0gTWF0aC5mbG9vcihNYXRoLmxvZyh4ICsgMC41KSAqIE1hdGguTE9HMkUpIDogMzI7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjEyIE1hdGguY29zaCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZXhwID0gTWF0aC5leHA7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgY29zaDogZnVuY3Rpb24gY29zaCh4KSB7XHJcbiAgICByZXR1cm4gKGV4cCh4ID0gK3gpICsgZXhwKC14KSkgLyAyO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjIuMi4xNCBNYXRoLmV4cG0xKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICgkZXhwbTEgIT0gTWF0aC5leHBtMSksICdNYXRoJywgeyBleHBtMTogJGV4cG0xIH0pO1xyXG4iLCIvLyAyMC4yLjIuMTYgTWF0aC5mcm91bmQoeClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgZnJvdW5kOiByZXF1aXJlKCcuL19tYXRoLWZyb3VuZCcpIH0pO1xyXG4iLCIvLyAyMC4yLjIuMTcgTWF0aC5oeXBvdChbdmFsdWUxWywgdmFsdWUyWywg4oCmIF1dXSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGFicyA9IE1hdGguYWJzO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGh5cG90OiBmdW5jdGlvbiBoeXBvdCh2YWx1ZTEsIHZhbHVlMikgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgICB2YXIgc3VtID0gMDtcclxuICAgIHZhciBpID0gMDtcclxuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIHZhciBsYXJnID0gMDtcclxuICAgIHZhciBhcmcsIGRpdjtcclxuICAgIHdoaWxlIChpIDwgYUxlbikge1xyXG4gICAgICBhcmcgPSBhYnMoYXJndW1lbnRzW2krK10pO1xyXG4gICAgICBpZiAobGFyZyA8IGFyZykge1xyXG4gICAgICAgIGRpdiA9IGxhcmcgLyBhcmc7XHJcbiAgICAgICAgc3VtID0gc3VtICogZGl2ICogZGl2ICsgMTtcclxuICAgICAgICBsYXJnID0gYXJnO1xyXG4gICAgICB9IGVsc2UgaWYgKGFyZyA+IDApIHtcclxuICAgICAgICBkaXYgPSBhcmcgLyBsYXJnO1xyXG4gICAgICAgIHN1bSArPSBkaXYgKiBkaXY7XHJcbiAgICAgIH0gZWxzZSBzdW0gKz0gYXJnO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGxhcmcgPT09IEluZmluaXR5ID8gSW5maW5pdHkgOiBsYXJnICogTWF0aC5zcXJ0KHN1bSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjE4IE1hdGguaW11bCh4LCB5KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGltdWwgPSBNYXRoLmltdWw7XHJcblxyXG4vLyBzb21lIFdlYktpdCB2ZXJzaW9ucyBmYWlscyB3aXRoIGJpZyBudW1iZXJzLCBzb21lIGhhcyB3cm9uZyBhcml0eVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiAkaW11bCgweGZmZmZmZmZmLCA1KSAhPSAtNSB8fCAkaW11bC5sZW5ndGggIT0gMjtcclxufSksICdNYXRoJywge1xyXG4gIGltdWw6IGZ1bmN0aW9uIGltdWwoeCwgeSkge1xyXG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcclxuICAgIHZhciB4biA9ICt4O1xyXG4gICAgdmFyIHluID0gK3k7XHJcbiAgICB2YXIgeGwgPSBVSU5UMTYgJiB4bjtcclxuICAgIHZhciB5bCA9IFVJTlQxNiAmIHluO1xyXG4gICAgcmV0dXJuIDAgfCB4bCAqIHlsICsgKChVSU5UMTYgJiB4biA+Pj4gMTYpICogeWwgKyB4bCAqIChVSU5UMTYgJiB5biA+Pj4gMTYpIDw8IDE2ID4+PiAwKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMjEgTWF0aC5sb2cxMCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGxvZzEwOiBmdW5jdGlvbiBsb2cxMCh4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMjAgTWF0aC5sb2cxcCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBsb2cxcDogcmVxdWlyZSgnLi9fbWF0aC1sb2cxcCcpIH0pO1xyXG4iLCIvLyAyMC4yLjIuMjIgTWF0aC5sb2cyKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgbG9nMjogZnVuY3Rpb24gbG9nMih4KSB7XHJcbiAgICByZXR1cm4gTWF0aC5sb2coeCkgLyBNYXRoLkxOMjtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMjggTWF0aC5zaWduKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IHNpZ246IHJlcXVpcmUoJy4vX21hdGgtc2lnbicpIH0pO1xyXG4iLCIvLyAyMC4yLjIuMzAgTWF0aC5zaW5oKHgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBleHBtMSA9IHJlcXVpcmUoJy4vX21hdGgtZXhwbTEnKTtcclxudmFyIGV4cCA9IE1hdGguZXhwO1xyXG5cclxuLy8gVjggbmVhciBDaHJvbWl1bSAzOCBoYXMgYSBwcm9ibGVtIHdpdGggdmVyeSBzbWFsbCBudW1iZXJzXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuICFNYXRoLnNpbmgoLTJlLTE3KSAhPSAtMmUtMTc7XHJcbn0pLCAnTWF0aCcsIHtcclxuICBzaW5oOiBmdW5jdGlvbiBzaW5oKHgpIHtcclxuICAgIHJldHVybiBNYXRoLmFicyh4ID0gK3gpIDwgMVxyXG4gICAgICA/IChleHBtMSh4KSAtIGV4cG0xKC14KSkgLyAyXHJcbiAgICAgIDogKGV4cCh4IC0gMSkgLSBleHAoLXggLSAxKSkgKiAoTWF0aC5FIC8gMik7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjAuMi4yLjMzIE1hdGgudGFuaCh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZXhwbTEgPSByZXF1aXJlKCcuL19tYXRoLWV4cG0xJyk7XHJcbnZhciBleHAgPSBNYXRoLmV4cDtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICB0YW5oOiBmdW5jdGlvbiB0YW5oKHgpIHtcclxuICAgIHZhciBhID0gZXhwbTEoeCA9ICt4KTtcclxuICAgIHZhciBiID0gZXhwbTEoLXgpO1xyXG4gICAgcmV0dXJuIGEgPT0gSW5maW5pdHkgPyAxIDogYiA9PSBJbmZpbml0eSA/IC0xIDogKGEgLSBiKSAvIChleHAoeCkgKyBleHAoLXgpKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyMC4yLjIuMzQgTWF0aC50cnVuYyh4KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIHRydW5jOiBmdW5jdGlvbiB0cnVuYyhpdCkge1xyXG4gICAgcmV0dXJuIChpdCA+IDAgPyBNYXRoLmZsb29yIDogTWF0aC5jZWlsKShpdCk7XHJcbiAgfVxyXG59KTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbnZhciBmcm9tQ2hhckNvZGUgPSBTdHJpbmcuZnJvbUNoYXJDb2RlO1xyXG52YXIgJGZyb21Db2RlUG9pbnQgPSBTdHJpbmcuZnJvbUNvZGVQb2ludDtcclxuXHJcbi8vIGxlbmd0aCBzaG91bGQgYmUgMSwgb2xkIEZGIHByb2JsZW1cclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoISEkZnJvbUNvZGVQb2ludCAmJiAkZnJvbUNvZGVQb2ludC5sZW5ndGggIT0gMSksICdTdHJpbmcnLCB7XHJcbiAgLy8gMjEuMS4yLjIgU3RyaW5nLmZyb21Db2RlUG9pbnQoLi4uY29kZVBvaW50cylcclxuICBmcm9tQ29kZVBvaW50OiBmdW5jdGlvbiBmcm9tQ29kZVBvaW50KHgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtdmFyc1xyXG4gICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIGNvZGU7XHJcbiAgICB3aGlsZSAoYUxlbiA+IGkpIHtcclxuICAgICAgY29kZSA9ICthcmd1bWVudHNbaSsrXTtcclxuICAgICAgaWYgKHRvQWJzb2x1dGVJbmRleChjb2RlLCAweDEwZmZmZikgIT09IGNvZGUpIHRocm93IFJhbmdlRXJyb3IoY29kZSArICcgaXMgbm90IGEgdmFsaWQgY29kZSBwb2ludCcpO1xyXG4gICAgICByZXMucHVzaChjb2RlIDwgMHgxMDAwMFxyXG4gICAgICAgID8gZnJvbUNoYXJDb2RlKGNvZGUpXHJcbiAgICAgICAgOiBmcm9tQ2hhckNvZGUoKChjb2RlIC09IDB4MTAwMDApID4+IDEwKSArIDB4ZDgwMCwgY29kZSAlIDB4NDAwICsgMHhkYzAwKVxyXG4gICAgICApO1xyXG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xyXG4gIH1cclxufSk7XHJcbiIsInZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdTdHJpbmcnLCB7XHJcbiAgLy8gMjEuMS4yLjQgU3RyaW5nLnJhdyhjYWxsU2l0ZSwgLi4uc3Vic3RpdHV0aW9ucylcclxuICByYXc6IGZ1bmN0aW9uIHJhdyhjYWxsU2l0ZSkge1xyXG4gICAgdmFyIHRwbCA9IHRvSU9iamVjdChjYWxsU2l0ZS5yYXcpO1xyXG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRwbC5sZW5ndGgpO1xyXG4gICAgdmFyIGFMZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xyXG4gICAgdmFyIHJlcyA9IFtdO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgd2hpbGUgKGxlbiA+IGkpIHtcclxuICAgICAgcmVzLnB1c2goU3RyaW5nKHRwbFtpKytdKSk7XHJcbiAgICAgIGlmIChpIDwgYUxlbikgcmVzLnB1c2goU3RyaW5nKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgfSByZXR1cm4gcmVzLmpvaW4oJycpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjEuMS4zLjI1IFN0cmluZy5wcm90b3R5cGUudHJpbSgpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW0nLCBmdW5jdGlvbiAoJHRyaW0pIHtcclxuICByZXR1cm4gZnVuY3Rpb24gdHJpbSgpIHtcclxuICAgIHJldHVybiAkdHJpbSh0aGlzLCAzKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XHJcblxyXG4vLyAyMS4xLjMuMjcgU3RyaW5nLnByb3RvdHlwZVtAQGl0ZXJhdG9yXSgpXHJcbnJlcXVpcmUoJy4vX2l0ZXItZGVmaW5lJykoU3RyaW5nLCAnU3RyaW5nJywgZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XHJcbiAgdGhpcy5fdCA9IFN0cmluZyhpdGVyYXRlZCk7IC8vIHRhcmdldFxyXG4gIHRoaXMuX2kgPSAwOyAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XHJcbi8vIDIxLjEuNS4yLjEgJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJS5uZXh0KClcclxufSwgZnVuY3Rpb24gKCkge1xyXG4gIHZhciBPID0gdGhpcy5fdDtcclxuICB2YXIgaW5kZXggPSB0aGlzLl9pO1xyXG4gIHZhciBwb2ludDtcclxuICBpZiAoaW5kZXggPj0gTy5sZW5ndGgpIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcclxuICBwb2ludCA9ICRhdChPLCBpbmRleCk7XHJcbiAgdGhpcy5faSArPSBwb2ludC5sZW5ndGg7XHJcbiAgcmV0dXJuIHsgdmFsdWU6IHBvaW50LCBkb25lOiBmYWxzZSB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykoZmFsc2UpO1xyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcclxuICAvLyAyMS4xLjMuMyBTdHJpbmcucHJvdG90eXBlLmNvZGVQb2ludEF0KHBvcylcclxuICBjb2RlUG9pbnRBdDogZnVuY3Rpb24gY29kZVBvaW50QXQocG9zKSB7XHJcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjEuMS4zLjYgU3RyaW5nLnByb3RvdHlwZS5lbmRzV2l0aChzZWFyY2hTdHJpbmcgWywgZW5kUG9zaXRpb25dKVxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XHJcbnZhciBFTkRTX1dJVEggPSAnZW5kc1dpdGgnO1xyXG52YXIgJGVuZHNXaXRoID0gJydbRU5EU19XSVRIXTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMtaXMtcmVnZXhwJykoRU5EU19XSVRIKSwgJ1N0cmluZycsIHtcclxuICBlbmRzV2l0aDogZnVuY3Rpb24gZW5kc1dpdGgoc2VhcmNoU3RyaW5nIC8qICwgZW5kUG9zaXRpb24gPSBAbGVuZ3RoICovKSB7XHJcbiAgICB2YXIgdGhhdCA9IGNvbnRleHQodGhpcywgc2VhcmNoU3RyaW5nLCBFTkRTX1dJVEgpO1xyXG4gICAgdmFyIGVuZFBvc2l0aW9uID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQ7XHJcbiAgICB2YXIgbGVuID0gdG9MZW5ndGgodGhhdC5sZW5ndGgpO1xyXG4gICAgdmFyIGVuZCA9IGVuZFBvc2l0aW9uID09PSB1bmRlZmluZWQgPyBsZW4gOiBNYXRoLm1pbih0b0xlbmd0aChlbmRQb3NpdGlvbiksIGxlbik7XHJcbiAgICB2YXIgc2VhcmNoID0gU3RyaW5nKHNlYXJjaFN0cmluZyk7XHJcbiAgICByZXR1cm4gJGVuZHNXaXRoXHJcbiAgICAgID8gJGVuZHNXaXRoLmNhbGwodGhhdCwgc2VhcmNoLCBlbmQpXHJcbiAgICAgIDogdGhhdC5zbGljZShlbmQgLSBzZWFyY2gubGVuZ3RoLCBlbmQpID09PSBzZWFyY2g7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjEuMS4zLjcgU3RyaW5nLnByb3RvdHlwZS5pbmNsdWRlcyhzZWFyY2hTdHJpbmcsIHBvc2l0aW9uID0gMClcclxuJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XHJcbnZhciBJTkNMVURFUyA9ICdpbmNsdWRlcyc7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzLWlzLXJlZ2V4cCcpKElOQ0xVREVTKSwgJ1N0cmluZycsIHtcclxuICBpbmNsdWRlczogZnVuY3Rpb24gaW5jbHVkZXMoc2VhcmNoU3RyaW5nIC8qICwgcG9zaXRpb24gPSAwICovKSB7XHJcbiAgICByZXR1cm4gISF+Y29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIElOQ0xVREVTKVxyXG4gICAgICAuaW5kZXhPZihzZWFyY2hTdHJpbmcsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICB9XHJcbn0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdTdHJpbmcnLCB7XHJcbiAgLy8gMjEuMS4zLjEzIFN0cmluZy5wcm90b3R5cGUucmVwZWF0KGNvdW50KVxyXG4gIHJlcGVhdDogcmVxdWlyZSgnLi9fc3RyaW5nLXJlcGVhdCcpXHJcbn0pO1xyXG4iLCIvLyAyMS4xLjMuMTggU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKHNlYXJjaFN0cmluZyBbLCBwb3NpdGlvbiBdKVxyXG4ndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgY29udGV4dCA9IHJlcXVpcmUoJy4vX3N0cmluZy1jb250ZXh0Jyk7XHJcbnZhciBTVEFSVFNfV0lUSCA9ICdzdGFydHNXaXRoJztcclxudmFyICRzdGFydHNXaXRoID0gJydbU1RBUlRTX1dJVEhdO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscy1pcy1yZWdleHAnKShTVEFSVFNfV0lUSCksICdTdHJpbmcnLCB7XHJcbiAgc3RhcnRzV2l0aDogZnVuY3Rpb24gc3RhcnRzV2l0aChzZWFyY2hTdHJpbmcgLyogLCBwb3NpdGlvbiA9IDAgKi8pIHtcclxuICAgIHZhciB0aGF0ID0gY29udGV4dCh0aGlzLCBzZWFyY2hTdHJpbmcsIFNUQVJUU19XSVRIKTtcclxuICAgIHZhciBpbmRleCA9IHRvTGVuZ3RoKE1hdGgubWluKGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCB0aGF0Lmxlbmd0aCkpO1xyXG4gICAgdmFyIHNlYXJjaCA9IFN0cmluZyhzZWFyY2hTdHJpbmcpO1xyXG4gICAgcmV0dXJuICRzdGFydHNXaXRoXHJcbiAgICAgID8gJHN0YXJ0c1dpdGguY2FsbCh0aGF0LCBzZWFyY2gsIGluZGV4KVxyXG4gICAgICA6IHRoYXQuc2xpY2UoaW5kZXgsIGluZGV4ICsgc2VhcmNoLmxlbmd0aCkgPT09IHNlYXJjaDtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjIgU3RyaW5nLnByb3RvdHlwZS5hbmNob3IobmFtZSlcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYW5jaG9yJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gYW5jaG9yKG5hbWUpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdhJywgJ25hbWUnLCBuYW1lKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy4zIFN0cmluZy5wcm90b3R5cGUuYmlnKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmlnJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gYmlnKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2JpZycsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuNCBTdHJpbmcucHJvdG90eXBlLmJsaW5rKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnYmxpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBibGluaygpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdibGluaycsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuNSBTdHJpbmcucHJvdG90eXBlLmJvbGQoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdib2xkJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gYm9sZCgpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdiJywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy42IFN0cmluZy5wcm90b3R5cGUuZml4ZWQoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmaXhlZCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGZpeGVkKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3R0JywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy43IFN0cmluZy5wcm90b3R5cGUuZm9udGNvbG9yKGNvbG9yKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250Y29sb3InLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBmb250Y29sb3IoY29sb3IpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ2NvbG9yJywgY29sb3IpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjggU3RyaW5nLnByb3RvdHlwZS5mb250c2l6ZShzaXplKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdmb250c2l6ZScsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGZvbnRzaXplKHNpemUpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdmb250JywgJ3NpemUnLCBzaXplKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy45IFN0cmluZy5wcm90b3R5cGUuaXRhbGljcygpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2l0YWxpY3MnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBpdGFsaWNzKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2knLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjEwIFN0cmluZy5wcm90b3R5cGUubGluayh1cmwpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ2xpbmsnLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBsaW5rKHVybCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ2EnLCAnaHJlZicsIHVybCk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuMTEgU3RyaW5nLnByb3RvdHlwZS5zbWFsbCgpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3NtYWxsJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gc21hbGwoKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc21hbGwnLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIEIuMi4zLjEyIFN0cmluZy5wcm90b3R5cGUuc3RyaWtlKClcclxucmVxdWlyZSgnLi9fc3RyaW5nLWh0bWwnKSgnc3RyaWtlJywgZnVuY3Rpb24gKGNyZWF0ZUhUTUwpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gc3RyaWtlKCkge1xyXG4gICAgcmV0dXJuIGNyZWF0ZUhUTUwodGhpcywgJ3N0cmlrZScsICcnLCAnJyk7XHJcbiAgfTtcclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gQi4yLjMuMTMgU3RyaW5nLnByb3RvdHlwZS5zdWIoKVxyXG5yZXF1aXJlKCcuL19zdHJpbmctaHRtbCcpKCdzdWInLCBmdW5jdGlvbiAoY3JlYXRlSFRNTCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBzdWIoKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlSFRNTCh0aGlzLCAnc3ViJywgJycsICcnKTtcclxuICB9O1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBCLjIuMy4xNCBTdHJpbmcucHJvdG90eXBlLnN1cCgpXHJcbnJlcXVpcmUoJy4vX3N0cmluZy1odG1sJykoJ3N1cCcsIGZ1bmN0aW9uIChjcmVhdGVIVE1MKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHN1cCgpIHtcclxuICAgIHJldHVybiBjcmVhdGVIVE1MKHRoaXMsICdzdXAnLCAnJywgJycpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCIvLyAyMC4zLjMuMSAvIDE1LjkuNC40IERhdGUubm93KClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnRGF0ZScsIHsgbm93OiBmdW5jdGlvbiAoKSB7IHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKTsgfSB9KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBuZXcgRGF0ZShOYU4pLnRvSlNPTigpICE9PSBudWxsXHJcbiAgICB8fCBEYXRlLnByb3RvdHlwZS50b0pTT04uY2FsbCh7IHRvSVNPU3RyaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiAxOyB9IH0pICE9PSAxO1xyXG59KSwgJ0RhdGUnLCB7XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oa2V5KSB7XHJcbiAgICB2YXIgTyA9IHRvT2JqZWN0KHRoaXMpO1xyXG4gICAgdmFyIHB2ID0gdG9QcmltaXRpdmUoTyk7XHJcbiAgICByZXR1cm4gdHlwZW9mIHB2ID09ICdudW1iZXInICYmICFpc0Zpbml0ZShwdikgPyBudWxsIDogTy50b0lTT1N0cmluZygpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDIwLjMuNC4zNiAvIDE1LjkuNS40MyBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZygpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0lTT1N0cmluZyA9IHJlcXVpcmUoJy4vX2RhdGUtdG8taXNvLXN0cmluZycpO1xyXG5cclxuLy8gUGhhbnRvbUpTIC8gb2xkIFdlYktpdCBoYXMgYSBicm9rZW4gaW1wbGVtZW50YXRpb25zXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKERhdGUucHJvdG90eXBlLnRvSVNPU3RyaW5nICE9PSB0b0lTT1N0cmluZyksICdEYXRlJywge1xyXG4gIHRvSVNPU3RyaW5nOiB0b0lTT1N0cmluZ1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyMC4zLjQuMzYgLyAxNS45LjUuNDMgRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmcoKVxyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgZ2V0VGltZSA9IERhdGUucHJvdG90eXBlLmdldFRpbWU7XHJcbnZhciAkdG9JU09TdHJpbmcgPSBEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZztcclxuXHJcbnZhciBseiA9IGZ1bmN0aW9uIChudW0pIHtcclxuICByZXR1cm4gbnVtID4gOSA/IG51bSA6ICcwJyArIG51bTtcclxufTtcclxuXHJcbi8vIFBoYW50b21KUyAvIG9sZCBXZWJLaXQgaGFzIGEgYnJva2VuIGltcGxlbWVudGF0aW9uc1xyXG5tb2R1bGUuZXhwb3J0cyA9IChmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKC01ZTEzIC0gMSkpICE9ICcwMzg1LTA3LTI1VDA3OjA2OjM5Ljk5OVonO1xyXG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gICR0b0lTT1N0cmluZy5jYWxsKG5ldyBEYXRlKE5hTikpO1xyXG59KSkgPyBmdW5jdGlvbiB0b0lTT1N0cmluZygpIHtcclxuICBpZiAoIWlzRmluaXRlKGdldFRpbWUuY2FsbCh0aGlzKSkpIHRocm93IFJhbmdlRXJyb3IoJ0ludmFsaWQgdGltZSB2YWx1ZScpO1xyXG4gIHZhciBkID0gdGhpcztcclxuICB2YXIgeSA9IGQuZ2V0VVRDRnVsbFllYXIoKTtcclxuICB2YXIgbSA9IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XHJcbiAgdmFyIHMgPSB5IDwgMCA/ICctJyA6IHkgPiA5OTk5ID8gJysnIDogJyc7XHJcbiAgcmV0dXJuIHMgKyAoJzAwMDAwJyArIE1hdGguYWJzKHkpKS5zbGljZShzID8gLTYgOiAtNCkgK1xyXG4gICAgJy0nICsgbHooZC5nZXRVVENNb250aCgpICsgMSkgKyAnLScgKyBseihkLmdldFVUQ0RhdGUoKSkgK1xyXG4gICAgJ1QnICsgbHooZC5nZXRVVENIb3VycygpKSArICc6JyArIGx6KGQuZ2V0VVRDTWludXRlcygpKSArXHJcbiAgICAnOicgKyBseihkLmdldFVUQ1NlY29uZHMoKSkgKyAnLicgKyAobSA+IDk5ID8gbSA6ICcwJyArIGx6KG0pKSArICdaJztcclxufSA6ICR0b0lTT1N0cmluZztcclxuIiwidmFyIERhdGVQcm90byA9IERhdGUucHJvdG90eXBlO1xyXG52YXIgSU5WQUxJRF9EQVRFID0gJ0ludmFsaWQgRGF0ZSc7XHJcbnZhciBUT19TVFJJTkcgPSAndG9TdHJpbmcnO1xyXG52YXIgJHRvU3RyaW5nID0gRGF0ZVByb3RvW1RPX1NUUklOR107XHJcbnZhciBnZXRUaW1lID0gRGF0ZVByb3RvLmdldFRpbWU7XHJcbmlmIChuZXcgRGF0ZShOYU4pICsgJycgIT0gSU5WQUxJRF9EQVRFKSB7XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShEYXRlUHJvdG8sIFRPX1NUUklORywgZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBnZXRUaW1lLmNhbGwodGhpcyk7XHJcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID8gJHRvU3RyaW5nLmNhbGwodGhpcykgOiBJTlZBTElEX0RBVEU7XHJcbiAgfSk7XHJcbn1cclxuIiwidmFyIFRPX1BSSU1JVElWRSA9IHJlcXVpcmUoJy4vX3drcycpKCd0b1ByaW1pdGl2ZScpO1xyXG52YXIgcHJvdG8gPSBEYXRlLnByb3RvdHlwZTtcclxuXHJcbmlmICghKFRPX1BSSU1JVElWRSBpbiBwcm90bykpIHJlcXVpcmUoJy4vX2hpZGUnKShwcm90bywgVE9fUFJJTUlUSVZFLCByZXF1aXJlKCcuL19kYXRlLXRvLXByaW1pdGl2ZScpKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi9fdG8tcHJpbWl0aXZlJyk7XHJcbnZhciBOVU1CRVIgPSAnbnVtYmVyJztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGhpbnQpIHtcclxuICBpZiAoaGludCAhPT0gJ3N0cmluZycgJiYgaGludCAhPT0gTlVNQkVSICYmIGhpbnQgIT09ICdkZWZhdWx0JykgdGhyb3cgVHlwZUVycm9yKCdJbmNvcnJlY3QgaGludCcpO1xyXG4gIHJldHVybiB0b1ByaW1pdGl2ZShhbk9iamVjdCh0aGlzKSwgaGludCAhPSBOVU1CRVIpO1xyXG59O1xyXG4iLCIvLyAyMi4xLjIuMiAvIDE1LjQuMy4yIEFycmF5LmlzQXJyYXkoYXJnKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdBcnJheScsIHsgaXNBcnJheTogcmVxdWlyZSgnLi9faXMtYXJyYXknKSB9KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgY2FsbCA9IHJlcXVpcmUoJy4vX2l0ZXItY2FsbCcpO1xyXG52YXIgaXNBcnJheUl0ZXIgPSByZXF1aXJlKCcuL19pcy1hcnJheS1pdGVyJyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcclxudmFyIGdldEl0ZXJGbiA9IHJlcXVpcmUoJy4vY29yZS5nZXQtaXRlcmF0b3ItbWV0aG9kJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19pdGVyLWRldGVjdCcpKGZ1bmN0aW9uIChpdGVyKSB7IEFycmF5LmZyb20oaXRlcik7IH0pLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4yLjEgQXJyYXkuZnJvbShhcnJheUxpa2UsIG1hcGZuID0gdW5kZWZpbmVkLCB0aGlzQXJnID0gdW5kZWZpbmVkKVxyXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oYXJyYXlMaWtlIC8qICwgbWFwZm4gPSB1bmRlZmluZWQsIHRoaXNBcmcgPSB1bmRlZmluZWQgKi8pIHtcclxuICAgIHZhciBPID0gdG9PYmplY3QoYXJyYXlMaWtlKTtcclxuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyA/IHRoaXMgOiBBcnJheTtcclxuICAgIHZhciBhTGVuID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgIHZhciBtYXBmbiA9IGFMZW4gPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkO1xyXG4gICAgdmFyIG1hcHBpbmcgPSBtYXBmbiAhPT0gdW5kZWZpbmVkO1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHZhciBpdGVyRm4gPSBnZXRJdGVyRm4oTyk7XHJcbiAgICB2YXIgbGVuZ3RoLCByZXN1bHQsIHN0ZXAsIGl0ZXJhdG9yO1xyXG4gICAgaWYgKG1hcHBpbmcpIG1hcGZuID0gY3R4KG1hcGZuLCBhTGVuID4gMiA/IGFyZ3VtZW50c1syXSA6IHVuZGVmaW5lZCwgMik7XHJcbiAgICAvLyBpZiBvYmplY3QgaXNuJ3QgaXRlcmFibGUgb3IgaXQncyBhcnJheSB3aXRoIGRlZmF1bHQgaXRlcmF0b3IgLSB1c2Ugc2ltcGxlIGNhc2VcclxuICAgIGlmIChpdGVyRm4gIT0gdW5kZWZpbmVkICYmICEoQyA9PSBBcnJheSAmJiBpc0FycmF5SXRlcihpdGVyRm4pKSkge1xyXG4gICAgICBmb3IgKGl0ZXJhdG9yID0gaXRlckZuLmNhbGwoTyksIHJlc3VsdCA9IG5ldyBDKCk7ICEoc3RlcCA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZTsgaW5kZXgrKykge1xyXG4gICAgICAgIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIG1hcHBpbmcgPyBjYWxsKGl0ZXJhdG9yLCBtYXBmbiwgW3N0ZXAudmFsdWUsIGluZGV4XSwgdHJ1ZSkgOiBzdGVwLnZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xyXG4gICAgICBmb3IgKHJlc3VsdCA9IG5ldyBDKGxlbmd0aCk7IGxlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XHJcbiAgICAgICAgY3JlYXRlUHJvcGVydHkocmVzdWx0LCBpbmRleCwgbWFwcGluZyA/IG1hcGZuKE9baW5kZXhdLCBpbmRleCkgOiBPW2luZGV4XSk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJlc3VsdC5sZW5ndGggPSBpbmRleDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcclxuXHJcbi8vIFdlYktpdCBBcnJheS5vZiBpc24ndCBnZW5lcmljXHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxyXG4gIHJldHVybiAhKEFycmF5Lm9mLmNhbGwoRikgaW5zdGFuY2VvZiBGKTtcclxufSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjIuMyBBcnJheS5vZiggLi4uaXRlbXMpXHJcbiAgb2Y6IGZ1bmN0aW9uIG9mKC8qIC4uLmFyZ3MgKi8pIHtcclxuICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICB2YXIgYUxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XHJcbiAgICB2YXIgcmVzdWx0ID0gbmV3ICh0eXBlb2YgdGhpcyA9PSAnZnVuY3Rpb24nID8gdGhpcyA6IEFycmF5KShhTGVuKTtcclxuICAgIHdoaWxlIChhTGVuID4gaW5kZXgpIGNyZWF0ZVByb3BlcnR5KHJlc3VsdCwgaW5kZXgsIGFyZ3VtZW50c1tpbmRleCsrXSk7XHJcbiAgICByZXN1bHQubGVuZ3RoID0gYUxlbjtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyAyMi4xLjMuMTMgQXJyYXkucHJvdG90eXBlLmpvaW4oc2VwYXJhdG9yKVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9JT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8taW9iamVjdCcpO1xyXG52YXIgYXJyYXlKb2luID0gW10uam9pbjtcclxuXHJcbi8vIGZhbGxiYWNrIGZvciBub3QgYXJyYXktbGlrZSBzdHJpbmdzXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogKHJlcXVpcmUoJy4vX2lvYmplY3QnKSAhPSBPYmplY3QgfHwgIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShhcnJheUpvaW4pKSwgJ0FycmF5Jywge1xyXG4gIGpvaW46IGZ1bmN0aW9uIGpvaW4oc2VwYXJhdG9yKSB7XHJcbiAgICByZXR1cm4gYXJyYXlKb2luLmNhbGwodG9JT2JqZWN0KHRoaXMpLCBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCA/ICcsJyA6IHNlcGFyYXRvcik7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgaHRtbCA9IHJlcXVpcmUoJy4vX2h0bWwnKTtcclxudmFyIGNvZiA9IHJlcXVpcmUoJy4vX2NvZicpO1xyXG52YXIgdG9BYnNvbHV0ZUluZGV4ID0gcmVxdWlyZSgnLi9fdG8tYWJzb2x1dGUtaW5kZXgnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciBhcnJheVNsaWNlID0gW10uc2xpY2U7XHJcblxyXG4vLyBmYWxsYmFjayBmb3Igbm90IGFycmF5LWxpa2UgRVMzIHN0cmluZ3MgYW5kIERPTSBvYmplY3RzXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogcmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7XHJcbiAgaWYgKGh0bWwpIGFycmF5U2xpY2UuY2FsbChodG1sKTtcclxufSksICdBcnJheScsIHtcclxuICBzbGljZTogZnVuY3Rpb24gc2xpY2UoYmVnaW4sIGVuZCkge1xyXG4gICAgdmFyIGxlbiA9IHRvTGVuZ3RoKHRoaXMubGVuZ3RoKTtcclxuICAgIHZhciBrbGFzcyA9IGNvZih0aGlzKTtcclxuICAgIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kO1xyXG4gICAgaWYgKGtsYXNzID09ICdBcnJheScpIHJldHVybiBhcnJheVNsaWNlLmNhbGwodGhpcywgYmVnaW4sIGVuZCk7XHJcbiAgICB2YXIgc3RhcnQgPSB0b0Fic29sdXRlSW5kZXgoYmVnaW4sIGxlbik7XHJcbiAgICB2YXIgdXBUbyA9IHRvQWJzb2x1dGVJbmRleChlbmQsIGxlbik7XHJcbiAgICB2YXIgc2l6ZSA9IHRvTGVuZ3RoKHVwVG8gLSBzdGFydCk7XHJcbiAgICB2YXIgY2xvbmVkID0gbmV3IEFycmF5KHNpemUpO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgZm9yICg7IGkgPCBzaXplOyBpKyspIGNsb25lZFtpXSA9IGtsYXNzID09ICdTdHJpbmcnXHJcbiAgICAgID8gdGhpcy5jaGFyQXQoc3RhcnQgKyBpKVxyXG4gICAgICA6IHRoaXNbc3RhcnQgKyBpXTtcclxuICAgIHJldHVybiBjbG9uZWQ7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIGZhaWxzID0gcmVxdWlyZSgnLi9fZmFpbHMnKTtcclxudmFyICRzb3J0ID0gW10uc29ydDtcclxudmFyIHRlc3QgPSBbMSwgMiwgM107XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChmYWlscyhmdW5jdGlvbiAoKSB7XHJcbiAgLy8gSUU4LVxyXG4gIHRlc3Quc29ydCh1bmRlZmluZWQpO1xyXG59KSB8fCAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIC8vIFY4IGJ1Z1xyXG4gIHRlc3Quc29ydChudWxsKTtcclxuICAvLyBPbGQgV2ViS2l0XHJcbn0pIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJHNvcnQpKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4yNSBBcnJheS5wcm90b3R5cGUuc29ydChjb21wYXJlZm4pXHJcbiAgc29ydDogZnVuY3Rpb24gc29ydChjb21wYXJlZm4pIHtcclxuICAgIHJldHVybiBjb21wYXJlZm4gPT09IHVuZGVmaW5lZFxyXG4gICAgICA/ICRzb3J0LmNhbGwodG9PYmplY3QodGhpcykpXHJcbiAgICAgIDogJHNvcnQuY2FsbCh0b09iamVjdCh0aGlzKSwgYUZ1bmN0aW9uKGNvbXBhcmVmbikpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRmb3JFYWNoID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDApO1xyXG52YXIgU1RSSUNUID0gcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmZvckVhY2gsIHRydWUpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhU1RSSUNULCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjEwIC8gMTUuNC40LjE4IEFycmF5LnByb3RvdHlwZS5mb3JFYWNoKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXHJcbiAgZm9yRWFjaDogZnVuY3Rpb24gZm9yRWFjaChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgcmV0dXJuICRmb3JFYWNoKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTtcclxuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9faXMtYXJyYXknKTtcclxudmFyIFNQRUNJRVMgPSByZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3JpZ2luYWwpIHtcclxuICB2YXIgQztcclxuICBpZiAoaXNBcnJheShvcmlnaW5hbCkpIHtcclxuICAgIEMgPSBvcmlnaW5hbC5jb25zdHJ1Y3RvcjtcclxuICAgIC8vIGNyb3NzLXJlYWxtIGZhbGxiYWNrXHJcbiAgICBpZiAodHlwZW9mIEMgPT0gJ2Z1bmN0aW9uJyAmJiAoQyA9PT0gQXJyYXkgfHwgaXNBcnJheShDLnByb3RvdHlwZSkpKSBDID0gdW5kZWZpbmVkO1xyXG4gICAgaWYgKGlzT2JqZWN0KEMpKSB7XHJcbiAgICAgIEMgPSBDW1NQRUNJRVNdO1xyXG4gICAgICBpZiAoQyA9PT0gbnVsbCkgQyA9IHVuZGVmaW5lZDtcclxuICAgIH1cclxuICB9IHJldHVybiBDID09PSB1bmRlZmluZWQgPyBBcnJheSA6IEM7XHJcbn07XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRtYXAgPSByZXF1aXJlKCcuL19hcnJheS1tZXRob2RzJykoMSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoW10ubWFwLCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xNSAvIDE1LjQuNC4xOSBBcnJheS5wcm90b3R5cGUubWFwKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXHJcbiAgbWFwOiBmdW5jdGlvbiBtYXAoY2FsbGJhY2tmbiAvKiAsIHRoaXNBcmcgKi8pIHtcclxuICAgIHJldHVybiAkbWFwKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGZpbHRlciA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSgyKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5maWx0ZXIsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjcgLyAxNS40LjQuMjAgQXJyYXkucHJvdG90eXBlLmZpbHRlcihjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIGZpbHRlcjogZnVuY3Rpb24gZmlsdGVyKGNhbGxiYWNrZm4gLyogLCB0aGlzQXJnICovKSB7XHJcbiAgICByZXR1cm4gJGZpbHRlcih0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRzb21lID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDMpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLnNvbWUsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjIzIC8gMTUuNC40LjE3IEFycmF5LnByb3RvdHlwZS5zb21lKGNhbGxiYWNrZm4gWywgdGhpc0FyZ10pXHJcbiAgc29tZTogZnVuY3Rpb24gc29tZShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgcmV0dXJuICRzb21lKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGV2ZXJ5ID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDQpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKFtdLmV2ZXJ5LCB0cnVlKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy41IC8gMTUuNC40LjE2IEFycmF5LnByb3RvdHlwZS5ldmVyeShjYWxsYmFja2ZuIFssIHRoaXNBcmddKVxyXG4gIGV2ZXJ5OiBmdW5jdGlvbiBldmVyeShjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgcmV0dXJuICRldmVyeSh0aGlzLCBjYWxsYmFja2ZuLCBhcmd1bWVudHNbMV0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2UsIHRydWUpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjE4IC8gMTUuNC40LjIxIEFycmF5LnByb3RvdHlwZS5yZWR1Y2UoY2FsbGJhY2tmbiBbLCBpbml0aWFsVmFsdWVdKVxyXG4gIHJlZHVjZTogZnVuY3Rpb24gcmVkdWNlKGNhbGxiYWNrZm4gLyogLCBpbml0aWFsVmFsdWUgKi8pIHtcclxuICAgIHJldHVybiAkcmVkdWNlKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3VtZW50c1sxXSwgZmFsc2UpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRyZWR1Y2UgPSByZXF1aXJlKCcuL19hcnJheS1yZWR1Y2UnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogIXJlcXVpcmUoJy4vX3N0cmljdC1tZXRob2QnKShbXS5yZWR1Y2VSaWdodCwgdHJ1ZSksICdBcnJheScsIHtcclxuICAvLyAyMi4xLjMuMTkgLyAxNS40LjQuMjIgQXJyYXkucHJvdG90eXBlLnJlZHVjZVJpZ2h0KGNhbGxiYWNrZm4gWywgaW5pdGlhbFZhbHVlXSlcclxuICByZWR1Y2VSaWdodDogZnVuY3Rpb24gcmVkdWNlUmlnaHQoY2FsbGJhY2tmbiAvKiAsIGluaXRpYWxWYWx1ZSAqLykge1xyXG4gICAgcmV0dXJuICRyZWR1Y2UodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCwgYXJndW1lbnRzWzFdLCB0cnVlKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkaW5kZXhPZiA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykoZmFsc2UpO1xyXG52YXIgJG5hdGl2ZSA9IFtdLmluZGV4T2Y7XHJcbnZhciBORUdBVElWRV9aRVJPID0gISEkbmF0aXZlICYmIDEgLyBbMV0uaW5kZXhPZigxLCAtMCkgPCAwO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiAoTkVHQVRJVkVfWkVSTyB8fCAhcmVxdWlyZSgnLi9fc3RyaWN0LW1ldGhvZCcpKCRuYXRpdmUpKSwgJ0FycmF5Jywge1xyXG4gIC8vIDIyLjEuMy4xMSAvIDE1LjQuNC4xNCBBcnJheS5wcm90b3R5cGUuaW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXHJcbiAgaW5kZXhPZjogZnVuY3Rpb24gaW5kZXhPZihzZWFyY2hFbGVtZW50IC8qICwgZnJvbUluZGV4ID0gMCAqLykge1xyXG4gICAgcmV0dXJuIE5FR0FUSVZFX1pFUk9cclxuICAgICAgLy8gY29udmVydCAtMCB0byArMFxyXG4gICAgICA/ICRuYXRpdmUuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCAwXHJcbiAgICAgIDogJGluZGV4T2YodGhpcywgc2VhcmNoRWxlbWVudCwgYXJndW1lbnRzWzFdKTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b0lPYmplY3QgPSByZXF1aXJlKCcuL190by1pb2JqZWN0Jyk7XHJcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgJG5hdGl2ZSA9IFtdLmxhc3RJbmRleE9mO1xyXG52YXIgTkVHQVRJVkVfWkVSTyA9ICEhJG5hdGl2ZSAmJiAxIC8gWzFdLmxhc3RJbmRleE9mKDEsIC0wKSA8IDA7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuRiAqIChORUdBVElWRV9aRVJPIHx8ICFyZXF1aXJlKCcuL19zdHJpY3QtbWV0aG9kJykoJG5hdGl2ZSkpLCAnQXJyYXknLCB7XHJcbiAgLy8gMjIuMS4zLjE0IC8gMTUuNC40LjE1IEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZihzZWFyY2hFbGVtZW50IFssIGZyb21JbmRleF0pXHJcbiAgbGFzdEluZGV4T2Y6IGZ1bmN0aW9uIGxhc3RJbmRleE9mKHNlYXJjaEVsZW1lbnQgLyogLCBmcm9tSW5kZXggPSBAWyotMV0gKi8pIHtcclxuICAgIC8vIGNvbnZlcnQgLTAgdG8gKzBcclxuICAgIGlmIChORUdBVElWRV9aRVJPKSByZXR1cm4gJG5hdGl2ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IDA7XHJcbiAgICB2YXIgTyA9IHRvSU9iamVjdCh0aGlzKTtcclxuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgICB2YXIgaW5kZXggPSBsZW5ndGggLSAxO1xyXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSBpbmRleCA9IE1hdGgubWluKGluZGV4LCB0b0ludGVnZXIoYXJndW1lbnRzWzFdKSk7XHJcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IGxlbmd0aCArIGluZGV4O1xyXG4gICAgZm9yICg7aW5kZXggPj0gMDsgaW5kZXgtLSkgaWYgKGluZGV4IGluIE8pIGlmIChPW2luZGV4XSA9PT0gc2VhcmNoRWxlbWVudCkgcmV0dXJuIGluZGV4IHx8IDA7XHJcbiAgICByZXR1cm4gLTE7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjIuMS4zLjMgQXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4odGFyZ2V0LCBzdGFydCwgZW5kID0gdGhpcy5sZW5ndGgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBjb3B5V2l0aGluOiByZXF1aXJlKCcuL19hcnJheS1jb3B5LXdpdGhpbicpIH0pO1xyXG5cclxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2NvcHlXaXRoaW4nKTtcclxuIiwiLy8gMjIuMS4zLjYgQXJyYXkucHJvdG90eXBlLmZpbGwodmFsdWUsIHN0YXJ0ID0gMCwgZW5kID0gdGhpcy5sZW5ndGgpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5JywgeyBmaWxsOiByZXF1aXJlKCcuL19hcnJheS1maWxsJykgfSk7XHJcblxyXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKSgnZmlsbCcpO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDIyLjEuMy44IEFycmF5LnByb3RvdHlwZS5maW5kKHByZWRpY2F0ZSwgdGhpc0FyZyA9IHVuZGVmaW5lZClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRmaW5kID0gcmVxdWlyZSgnLi9fYXJyYXktbWV0aG9kcycpKDUpO1xyXG52YXIgS0VZID0gJ2ZpbmQnO1xyXG52YXIgZm9yY2VkID0gdHJ1ZTtcclxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcclxuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcclxuICBmaW5kOiBmdW5jdGlvbiBmaW5kKGNhbGxiYWNrZm4gLyogLCB0aGF0ID0gdW5kZWZpbmVkICovKSB7XHJcbiAgICByZXR1cm4gJGZpbmQodGhpcywgY2FsbGJhY2tmbiwgYXJndW1lbnRzLmxlbmd0aCA+IDEgPyBhcmd1bWVudHNbMV0gOiB1bmRlZmluZWQpO1xyXG4gIH1cclxufSk7XHJcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKEtFWSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gMjIuMS4zLjkgQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleChwcmVkaWNhdGUsIHRoaXNBcmcgPSB1bmRlZmluZWQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkZmluZCA9IHJlcXVpcmUoJy4vX2FycmF5LW1ldGhvZHMnKSg2KTtcclxudmFyIEtFWSA9ICdmaW5kSW5kZXgnO1xyXG52YXIgZm9yY2VkID0gdHJ1ZTtcclxuLy8gU2hvdWxkbid0IHNraXAgaG9sZXNcclxuaWYgKEtFWSBpbiBbXSkgQXJyYXkoMSlbS0VZXShmdW5jdGlvbiAoKSB7IGZvcmNlZCA9IGZhbHNlOyB9KTtcclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LkYgKiBmb3JjZWQsICdBcnJheScsIHtcclxuICBmaW5kSW5kZXg6IGZ1bmN0aW9uIGZpbmRJbmRleChjYWxsYmFja2ZuIC8qICwgdGhhdCA9IHVuZGVmaW5lZCAqLykge1xyXG4gICAgcmV0dXJuICRmaW5kKHRoaXMsIGNhbGxiYWNrZm4sIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICB9XHJcbn0pO1xyXG5yZXF1aXJlKCcuL19hZGQtdG8tdW5zY29wYWJsZXMnKShLRVkpO1xyXG4iLCJyZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKCdBcnJheScpO1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciBpbmhlcml0SWZSZXF1aXJlZCA9IHJlcXVpcmUoJy4vX2luaGVyaXQtaWYtcmVxdWlyZWQnKTtcclxudmFyIGRQID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJykuZjtcclxudmFyIGdPUE4gPSByZXF1aXJlKCcuL19vYmplY3QtZ29wbicpLmY7XHJcbnZhciBpc1JlZ0V4cCA9IHJlcXVpcmUoJy4vX2lzLXJlZ2V4cCcpO1xyXG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcclxudmFyICRSZWdFeHAgPSBnbG9iYWwuUmVnRXhwO1xyXG52YXIgQmFzZSA9ICRSZWdFeHA7XHJcbnZhciBwcm90byA9ICRSZWdFeHAucHJvdG90eXBlO1xyXG52YXIgcmUxID0gL2EvZztcclxudmFyIHJlMiA9IC9hL2c7XHJcbi8vIFwibmV3XCIgY3JlYXRlcyBhIG5ldyBvYmplY3QsIG9sZCB3ZWJraXQgYnVnZ3kgaGVyZVxyXG52YXIgQ09SUkVDVF9ORVcgPSBuZXcgJFJlZ0V4cChyZTEpICE9PSByZTE7XHJcblxyXG5pZiAocmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKSAmJiAoIUNPUlJFQ1RfTkVXIHx8IHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIHJlMltyZXF1aXJlKCcuL193a3MnKSgnbWF0Y2gnKV0gPSBmYWxzZTtcclxuICAvLyBSZWdFeHAgY29uc3RydWN0b3IgY2FuIGFsdGVyIGZsYWdzIGFuZCBJc1JlZ0V4cCB3b3JrcyBjb3JyZWN0IHdpdGggQEBtYXRjaFxyXG4gIHJldHVybiAkUmVnRXhwKHJlMSkgIT0gcmUxIHx8ICRSZWdFeHAocmUyKSA9PSByZTIgfHwgJFJlZ0V4cChyZTEsICdpJykgIT0gJy9hL2knO1xyXG59KSkpIHtcclxuICAkUmVnRXhwID0gZnVuY3Rpb24gUmVnRXhwKHAsIGYpIHtcclxuICAgIHZhciB0aVJFID0gdGhpcyBpbnN0YW5jZW9mICRSZWdFeHA7XHJcbiAgICB2YXIgcGlSRSA9IGlzUmVnRXhwKHApO1xyXG4gICAgdmFyIGZpVSA9IGYgPT09IHVuZGVmaW5lZDtcclxuICAgIHJldHVybiAhdGlSRSAmJiBwaVJFICYmIHAuY29uc3RydWN0b3IgPT09ICRSZWdFeHAgJiYgZmlVID8gcFxyXG4gICAgICA6IGluaGVyaXRJZlJlcXVpcmVkKENPUlJFQ1RfTkVXXHJcbiAgICAgICAgPyBuZXcgQmFzZShwaVJFICYmICFmaVUgPyBwLnNvdXJjZSA6IHAsIGYpXHJcbiAgICAgICAgOiBCYXNlKChwaVJFID0gcCBpbnN0YW5jZW9mICRSZWdFeHApID8gcC5zb3VyY2UgOiBwLCBwaVJFICYmIGZpVSA/ICRmbGFncy5jYWxsKHApIDogZilcclxuICAgICAgLCB0aVJFID8gdGhpcyA6IHByb3RvLCAkUmVnRXhwKTtcclxuICB9O1xyXG4gIHZhciBwcm94eSA9IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgIGtleSBpbiAkUmVnRXhwIHx8IGRQKCRSZWdFeHAsIGtleSwge1xyXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXHJcbiAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gQmFzZVtrZXldOyB9LFxyXG4gICAgICBzZXQ6IGZ1bmN0aW9uIChpdCkgeyBCYXNlW2tleV0gPSBpdDsgfVxyXG4gICAgfSk7XHJcbiAgfTtcclxuICBmb3IgKHZhciBrZXlzID0gZ09QTihCYXNlKSwgaSA9IDA7IGtleXMubGVuZ3RoID4gaTspIHByb3h5KGtleXNbaSsrXSk7XHJcbiAgcHJvdG8uY29uc3RydWN0b3IgPSAkUmVnRXhwO1xyXG4gICRSZWdFeHAucHJvdG90eXBlID0gcHJvdG87XHJcbiAgcmVxdWlyZSgnLi9fcmVkZWZpbmUnKShnbG9iYWwsICdSZWdFeHAnLCAkUmVnRXhwKTtcclxufVxyXG5cclxucmVxdWlyZSgnLi9fc2V0LXNwZWNpZXMnKSgnUmVnRXhwJyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxucmVxdWlyZSgnLi9lczYucmVnZXhwLmZsYWdzJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgJGZsYWdzID0gcmVxdWlyZSgnLi9fZmxhZ3MnKTtcclxudmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi9fZGVzY3JpcHRvcnMnKTtcclxudmFyIFRPX1NUUklORyA9ICd0b1N0cmluZyc7XHJcbnZhciAkdG9TdHJpbmcgPSAvLi9bVE9fU1RSSU5HXTtcclxuXHJcbnZhciBkZWZpbmUgPSBmdW5jdGlvbiAoZm4pIHtcclxuICByZXF1aXJlKCcuL19yZWRlZmluZScpKFJlZ0V4cC5wcm90b3R5cGUsIFRPX1NUUklORywgZm4sIHRydWUpO1xyXG59O1xyXG5cclxuLy8gMjEuMi41LjE0IFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcoKVxyXG5pZiAocmVxdWlyZSgnLi9fZmFpbHMnKShmdW5jdGlvbiAoKSB7IHJldHVybiAkdG9TdHJpbmcuY2FsbCh7IHNvdXJjZTogJ2EnLCBmbGFnczogJ2InIH0pICE9ICcvYS9iJzsgfSkpIHtcclxuICBkZWZpbmUoZnVuY3Rpb24gdG9TdHJpbmcoKSB7XHJcbiAgICB2YXIgUiA9IGFuT2JqZWN0KHRoaXMpO1xyXG4gICAgcmV0dXJuICcvJy5jb25jYXQoUi5zb3VyY2UsICcvJyxcclxuICAgICAgJ2ZsYWdzJyBpbiBSID8gUi5mbGFncyA6ICFERVNDUklQVE9SUyAmJiBSIGluc3RhbmNlb2YgUmVnRXhwID8gJGZsYWdzLmNhbGwoUikgOiB1bmRlZmluZWQpO1xyXG4gIH0pO1xyXG4vLyBGRjQ0LSBSZWdFeHAjdG9TdHJpbmcgaGFzIGEgd3JvbmcgbmFtZVxyXG59IGVsc2UgaWYgKCR0b1N0cmluZy5uYW1lICE9IFRPX1NUUklORykge1xyXG4gIGRlZmluZShmdW5jdGlvbiB0b1N0cmluZygpIHtcclxuICAgIHJldHVybiAkdG9TdHJpbmcuY2FsbCh0aGlzKTtcclxuICB9KTtcclxufVxyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xyXG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XHJcblxyXG4vLyBAQG1hdGNoIGxvZ2ljXHJcbnJlcXVpcmUoJy4vX2ZpeC1yZS13a3MnKSgnbWF0Y2gnLCAxLCBmdW5jdGlvbiAoZGVmaW5lZCwgTUFUQ0gsICRtYXRjaCwgbWF5YmVDYWxsTmF0aXZlKSB7XHJcbiAgcmV0dXJuIFtcclxuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLm1hdGNoYCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUubWF0Y2hcclxuICAgIGZ1bmN0aW9uIG1hdGNoKHJlZ2V4cCkge1xyXG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XHJcbiAgICAgIHZhciBmbiA9IHJlZ2V4cCA9PSB1bmRlZmluZWQgPyB1bmRlZmluZWQgOiByZWdleHBbTUFUQ0hdO1xyXG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZCA/IGZuLmNhbGwocmVnZXhwLCBPKSA6IG5ldyBSZWdFeHAocmVnZXhwKVtNQVRDSF0oU3RyaW5nKE8pKTtcclxuICAgIH0sXHJcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQG1hdGNoXWAgbWV0aG9kXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZWdleHAucHJvdG90eXBlLUBAbWF0Y2hcclxuICAgIGZ1bmN0aW9uIChyZWdleHApIHtcclxuICAgICAgdmFyIHJlcyA9IG1heWJlQ2FsbE5hdGl2ZSgkbWF0Y2gsIHJlZ2V4cCwgdGhpcyk7XHJcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcclxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcclxuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XHJcbiAgICAgIGlmICghcnguZ2xvYmFsKSByZXR1cm4gcmVnRXhwRXhlYyhyeCwgUyk7XHJcbiAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XHJcbiAgICAgIHJ4Lmxhc3RJbmRleCA9IDA7XHJcbiAgICAgIHZhciBBID0gW107XHJcbiAgICAgIHZhciBuID0gMDtcclxuICAgICAgdmFyIHJlc3VsdDtcclxuICAgICAgd2hpbGUgKChyZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKSkgIT09IG51bGwpIHtcclxuICAgICAgICB2YXIgbWF0Y2hTdHIgPSBTdHJpbmcocmVzdWx0WzBdKTtcclxuICAgICAgICBBW25dID0gbWF0Y2hTdHI7XHJcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcclxuICAgICAgICBuKys7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIG4gPT09IDAgPyBudWxsIDogQTtcclxuICAgIH1cclxuICBdO1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG5cclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4vX3RvLWludGVnZXInKTtcclxudmFyIGFkdmFuY2VTdHJpbmdJbmRleCA9IHJlcXVpcmUoJy4vX2FkdmFuY2Utc3RyaW5nLWluZGV4Jyk7XHJcbnZhciByZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcclxudmFyIG1heCA9IE1hdGgubWF4O1xyXG52YXIgbWluID0gTWF0aC5taW47XHJcbnZhciBmbG9vciA9IE1hdGguZmxvb3I7XHJcbnZhciBTVUJTVElUVVRJT05fU1lNQk9MUyA9IC9cXCQoWyQmYCddfFxcZFxcZD98PFtePl0qPikvZztcclxudmFyIFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEID0gL1xcJChbJCZgJ118XFxkXFxkPykvZztcclxuXHJcbnZhciBtYXliZVRvU3RyaW5nID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgcmV0dXJuIGl0ID09PSB1bmRlZmluZWQgPyBpdCA6IFN0cmluZyhpdCk7XHJcbn07XHJcblxyXG4vLyBAQHJlcGxhY2UgbG9naWNcclxucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdyZXBsYWNlJywgMiwgZnVuY3Rpb24gKGRlZmluZWQsIFJFUExBQ0UsICRyZXBsYWNlLCBtYXliZUNhbGxOYXRpdmUpIHtcclxuICByZXR1cm4gW1xyXG4gICAgLy8gYFN0cmluZy5wcm90b3R5cGUucmVwbGFjZWAgbWV0aG9kXHJcbiAgICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1zdHJpbmcucHJvdG90eXBlLnJlcGxhY2VcclxuICAgIGZ1bmN0aW9uIHJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSkge1xyXG4gICAgICB2YXIgTyA9IGRlZmluZWQodGhpcyk7XHJcbiAgICAgIHZhciBmbiA9IHNlYXJjaFZhbHVlID09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHNlYXJjaFZhbHVlW1JFUExBQ0VdO1xyXG4gICAgICByZXR1cm4gZm4gIT09IHVuZGVmaW5lZFxyXG4gICAgICAgID8gZm4uY2FsbChzZWFyY2hWYWx1ZSwgTywgcmVwbGFjZVZhbHVlKVxyXG4gICAgICAgIDogJHJlcGxhY2UuY2FsbChTdHJpbmcoTyksIHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xyXG4gICAgfSxcclxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAcmVwbGFjZV1gIG1ldGhvZFxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHJlcGxhY2VcclxuICAgIGZ1bmN0aW9uIChyZWdleHAsIHJlcGxhY2VWYWx1ZSkge1xyXG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRyZXBsYWNlLCByZWdleHAsIHRoaXMsIHJlcGxhY2VWYWx1ZSk7XHJcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcclxuXHJcbiAgICAgIHZhciByeCA9IGFuT2JqZWN0KHJlZ2V4cCk7XHJcbiAgICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICB2YXIgZnVuY3Rpb25hbFJlcGxhY2UgPSB0eXBlb2YgcmVwbGFjZVZhbHVlID09PSAnZnVuY3Rpb24nO1xyXG4gICAgICBpZiAoIWZ1bmN0aW9uYWxSZXBsYWNlKSByZXBsYWNlVmFsdWUgPSBTdHJpbmcocmVwbGFjZVZhbHVlKTtcclxuICAgICAgdmFyIGdsb2JhbCA9IHJ4Lmdsb2JhbDtcclxuICAgICAgaWYgKGdsb2JhbCkge1xyXG4gICAgICAgIHZhciBmdWxsVW5pY29kZSA9IHJ4LnVuaWNvZGU7XHJcbiAgICAgICAgcngubGFzdEluZGV4ID0gMDtcclxuICAgICAgfVxyXG4gICAgICB2YXIgcmVzdWx0cyA9IFtdO1xyXG4gICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZWdFeHBFeGVjKHJ4LCBTKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSBicmVhaztcclxuICAgICAgICByZXN1bHRzLnB1c2gocmVzdWx0KTtcclxuICAgICAgICBpZiAoIWdsb2JhbCkgYnJlYWs7XHJcbiAgICAgICAgdmFyIG1hdGNoU3RyID0gU3RyaW5nKHJlc3VsdFswXSk7XHJcbiAgICAgICAgaWYgKG1hdGNoU3RyID09PSAnJykgcngubGFzdEluZGV4ID0gYWR2YW5jZVN0cmluZ0luZGV4KFMsIHRvTGVuZ3RoKHJ4Lmxhc3RJbmRleCksIGZ1bGxVbmljb2RlKTtcclxuICAgICAgfVxyXG4gICAgICB2YXIgYWNjdW11bGF0ZWRSZXN1bHQgPSAnJztcclxuICAgICAgdmFyIG5leHRTb3VyY2VQb3NpdGlvbiA9IDA7XHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIHJlc3VsdCA9IHJlc3VsdHNbaV07XHJcbiAgICAgICAgdmFyIG1hdGNoZWQgPSBTdHJpbmcocmVzdWx0WzBdKTtcclxuICAgICAgICB2YXIgcG9zaXRpb24gPSBtYXgobWluKHRvSW50ZWdlcihyZXN1bHQuaW5kZXgpLCBTLmxlbmd0aCksIDApO1xyXG4gICAgICAgIHZhciBjYXB0dXJlcyA9IFtdO1xyXG4gICAgICAgIC8vIE5PVEU6IFRoaXMgaXMgZXF1aXZhbGVudCB0b1xyXG4gICAgICAgIC8vICAgY2FwdHVyZXMgPSByZXN1bHQuc2xpY2UoMSkubWFwKG1heWJlVG9TdHJpbmcpXHJcbiAgICAgICAgLy8gYnV0IGZvciBzb21lIHJlYXNvbiBgbmF0aXZlU2xpY2UuY2FsbChyZXN1bHQsIDEsIHJlc3VsdC5sZW5ndGgpYCAoY2FsbGVkIGluXHJcbiAgICAgICAgLy8gdGhlIHNsaWNlIHBvbHlmaWxsIHdoZW4gc2xpY2luZyBuYXRpdmUgYXJyYXlzKSBcImRvZXNuJ3Qgd29ya1wiIGluIHNhZmFyaSA5IGFuZFxyXG4gICAgICAgIC8vIGNhdXNlcyBhIGNyYXNoIChodHRwczovL3Bhc3RlYmluLmNvbS9OMjFRemVRQSkgd2hlbiB0cnlpbmcgdG8gZGVidWcgaXQuXHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDE7IGogPCByZXN1bHQubGVuZ3RoOyBqKyspIGNhcHR1cmVzLnB1c2gobWF5YmVUb1N0cmluZyhyZXN1bHRbal0pKTtcclxuICAgICAgICB2YXIgbmFtZWRDYXB0dXJlcyA9IHJlc3VsdC5ncm91cHM7XHJcbiAgICAgICAgaWYgKGZ1bmN0aW9uYWxSZXBsYWNlKSB7XHJcbiAgICAgICAgICB2YXIgcmVwbGFjZXJBcmdzID0gW21hdGNoZWRdLmNvbmNhdChjYXB0dXJlcywgcG9zaXRpb24sIFMpO1xyXG4gICAgICAgICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkgcmVwbGFjZXJBcmdzLnB1c2gobmFtZWRDYXB0dXJlcyk7XHJcbiAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBTdHJpbmcocmVwbGFjZVZhbHVlLmFwcGx5KHVuZGVmaW5lZCwgcmVwbGFjZXJBcmdzKSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJlcGxhY2VtZW50ID0gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIFMsIHBvc2l0aW9uLCBjYXB0dXJlcywgbmFtZWRDYXB0dXJlcywgcmVwbGFjZVZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uID49IG5leHRTb3VyY2VQb3NpdGlvbikge1xyXG4gICAgICAgICAgYWNjdW11bGF0ZWRSZXN1bHQgKz0gUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24sIHBvc2l0aW9uKSArIHJlcGxhY2VtZW50O1xyXG4gICAgICAgICAgbmV4dFNvdXJjZVBvc2l0aW9uID0gcG9zaXRpb24gKyBtYXRjaGVkLmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGFjY3VtdWxhdGVkUmVzdWx0ICsgUy5zbGljZShuZXh0U291cmNlUG9zaXRpb24pO1xyXG4gICAgfVxyXG4gIF07XHJcblxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtZ2V0c3Vic3RpdHV0aW9uXHJcbiAgZnVuY3Rpb24gZ2V0U3Vic3RpdHV0aW9uKG1hdGNoZWQsIHN0ciwgcG9zaXRpb24sIGNhcHR1cmVzLCBuYW1lZENhcHR1cmVzLCByZXBsYWNlbWVudCkge1xyXG4gICAgdmFyIHRhaWxQb3MgPSBwb3NpdGlvbiArIG1hdGNoZWQubGVuZ3RoO1xyXG4gICAgdmFyIG0gPSBjYXB0dXJlcy5sZW5ndGg7XHJcbiAgICB2YXIgc3ltYm9scyA9IFNVQlNUSVRVVElPTl9TWU1CT0xTX05PX05BTUVEO1xyXG4gICAgaWYgKG5hbWVkQ2FwdHVyZXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICBuYW1lZENhcHR1cmVzID0gdG9PYmplY3QobmFtZWRDYXB0dXJlcyk7XHJcbiAgICAgIHN5bWJvbHMgPSBTVUJTVElUVVRJT05fU1lNQk9MUztcclxuICAgIH1cclxuICAgIHJldHVybiAkcmVwbGFjZS5jYWxsKHJlcGxhY2VtZW50LCBzeW1ib2xzLCBmdW5jdGlvbiAobWF0Y2gsIGNoKSB7XHJcbiAgICAgIHZhciBjYXB0dXJlO1xyXG4gICAgICBzd2l0Y2ggKGNoLmNoYXJBdCgwKSkge1xyXG4gICAgICAgIGNhc2UgJyQnOiByZXR1cm4gJyQnO1xyXG4gICAgICAgIGNhc2UgJyYnOiByZXR1cm4gbWF0Y2hlZDtcclxuICAgICAgICBjYXNlICdgJzogcmV0dXJuIHN0ci5zbGljZSgwLCBwb3NpdGlvbik7XHJcbiAgICAgICAgY2FzZSBcIidcIjogcmV0dXJuIHN0ci5zbGljZSh0YWlsUG9zKTtcclxuICAgICAgICBjYXNlICc8JzpcclxuICAgICAgICAgIGNhcHR1cmUgPSBuYW1lZENhcHR1cmVzW2NoLnNsaWNlKDEsIC0xKV07XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBkZWZhdWx0OiAvLyBcXGRcXGQ/XHJcbiAgICAgICAgICB2YXIgbiA9ICtjaDtcclxuICAgICAgICAgIGlmIChuID09PSAwKSByZXR1cm4gbWF0Y2g7XHJcbiAgICAgICAgICBpZiAobiA+IG0pIHtcclxuICAgICAgICAgICAgdmFyIGYgPSBmbG9vcihuIC8gMTApO1xyXG4gICAgICAgICAgICBpZiAoZiA9PT0gMCkgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgICAgICBpZiAoZiA8PSBtKSByZXR1cm4gY2FwdHVyZXNbZiAtIDFdID09PSB1bmRlZmluZWQgPyBjaC5jaGFyQXQoMSkgOiBjYXB0dXJlc1tmIC0gMV0gKyBjaC5jaGFyQXQoMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXRjaDtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGNhcHR1cmUgPSBjYXB0dXJlc1tuIC0gMV07XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGNhcHR1cmUgPT09IHVuZGVmaW5lZCA/ICcnIDogY2FwdHVyZTtcclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuXHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgc2FtZVZhbHVlID0gcmVxdWlyZSgnLi9fc2FtZS12YWx1ZScpO1xyXG52YXIgcmVnRXhwRXhlYyA9IHJlcXVpcmUoJy4vX3JlZ2V4cC1leGVjLWFic3RyYWN0Jyk7XHJcblxyXG4vLyBAQHNlYXJjaCBsb2dpY1xyXG5yZXF1aXJlKCcuL19maXgtcmUtd2tzJykoJ3NlYXJjaCcsIDEsIGZ1bmN0aW9uIChkZWZpbmVkLCBTRUFSQ0gsICRzZWFyY2gsIG1heWJlQ2FsbE5hdGl2ZSkge1xyXG4gIHJldHVybiBbXHJcbiAgICAvLyBgU3RyaW5nLnByb3RvdHlwZS5zZWFyY2hgIG1ldGhvZFxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtc3RyaW5nLnByb3RvdHlwZS5zZWFyY2hcclxuICAgIGZ1bmN0aW9uIHNlYXJjaChyZWdleHApIHtcclxuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xyXG4gICAgICB2YXIgZm4gPSByZWdleHAgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogcmVnZXhwW1NFQVJDSF07XHJcbiAgICAgIHJldHVybiBmbiAhPT0gdW5kZWZpbmVkID8gZm4uY2FsbChyZWdleHAsIE8pIDogbmV3IFJlZ0V4cChyZWdleHApW1NFQVJDSF0oU3RyaW5nKE8pKTtcclxuICAgIH0sXHJcbiAgICAvLyBgUmVnRXhwLnByb3RvdHlwZVtAQHNlYXJjaF1gIG1ldGhvZFxyXG4gICAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtcmVnZXhwLnByb3RvdHlwZS1AQHNlYXJjaFxyXG4gICAgZnVuY3Rpb24gKHJlZ2V4cCkge1xyXG4gICAgICB2YXIgcmVzID0gbWF5YmVDYWxsTmF0aXZlKCRzZWFyY2gsIHJlZ2V4cCwgdGhpcyk7XHJcbiAgICAgIGlmIChyZXMuZG9uZSkgcmV0dXJuIHJlcy52YWx1ZTtcclxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcclxuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XHJcbiAgICAgIHZhciBwcmV2aW91c0xhc3RJbmRleCA9IHJ4Lmxhc3RJbmRleDtcclxuICAgICAgaWYgKCFzYW1lVmFsdWUocHJldmlvdXNMYXN0SW5kZXgsIDApKSByeC5sYXN0SW5kZXggPSAwO1xyXG4gICAgICB2YXIgcmVzdWx0ID0gcmVnRXhwRXhlYyhyeCwgUyk7XHJcbiAgICAgIGlmICghc2FtZVZhbHVlKHJ4Lmxhc3RJbmRleCwgcHJldmlvdXNMYXN0SW5kZXgpKSByeC5sYXN0SW5kZXggPSBwcmV2aW91c0xhc3RJbmRleDtcclxuICAgICAgcmV0dXJuIHJlc3VsdCA9PT0gbnVsbCA/IC0xIDogcmVzdWx0LmluZGV4O1xyXG4gICAgfVxyXG4gIF07XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcblxyXG52YXIgaXNSZWdFeHAgPSByZXF1aXJlKCcuL19pcy1yZWdleHAnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XHJcbnZhciBhZHZhbmNlU3RyaW5nSW5kZXggPSByZXF1aXJlKCcuL19hZHZhbmNlLXN0cmluZy1pbmRleCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGNhbGxSZWdFeHBFeGVjID0gcmVxdWlyZSgnLi9fcmVnZXhwLWV4ZWMtYWJzdHJhY3QnKTtcclxudmFyIHJlZ2V4cEV4ZWMgPSByZXF1aXJlKCcuL19yZWdleHAtZXhlYycpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgJG1pbiA9IE1hdGgubWluO1xyXG52YXIgJHB1c2ggPSBbXS5wdXNoO1xyXG52YXIgJFNQTElUID0gJ3NwbGl0JztcclxudmFyIExFTkdUSCA9ICdsZW5ndGgnO1xyXG52YXIgTEFTVF9JTkRFWCA9ICdsYXN0SW5kZXgnO1xyXG52YXIgTUFYX1VJTlQzMiA9IDB4ZmZmZmZmZmY7XHJcblxyXG4vLyBiYWJlbC1taW5pZnkgdHJhbnNwaWxlcyBSZWdFeHAoJ3gnLCAneScpIC0+IC94L3kgYW5kIGl0IGNhdXNlcyBTeW50YXhFcnJvclxyXG52YXIgU1VQUE9SVFNfWSA9ICFmYWlscyhmdW5jdGlvbiAoKSB7IFJlZ0V4cChNQVhfVUlOVDMyLCAneScpOyB9KTtcclxuXHJcbi8vIEBAc3BsaXQgbG9naWNcclxucmVxdWlyZSgnLi9fZml4LXJlLXdrcycpKCdzcGxpdCcsIDIsIGZ1bmN0aW9uIChkZWZpbmVkLCBTUExJVCwgJHNwbGl0LCBtYXliZUNhbGxOYXRpdmUpIHtcclxuICB2YXIgaW50ZXJuYWxTcGxpdDtcclxuICBpZiAoXHJcbiAgICAnYWJiYydbJFNQTElUXSgvKGIpKi8pWzFdID09ICdjJyB8fFxyXG4gICAgJ3Rlc3QnWyRTUExJVF0oLyg/OikvLCAtMSlbTEVOR1RIXSAhPSA0IHx8XHJcbiAgICAnYWInWyRTUExJVF0oLyg/OmFiKSovKVtMRU5HVEhdICE9IDIgfHxcclxuICAgICcuJ1skU1BMSVRdKC8oLj8pKC4/KS8pW0xFTkdUSF0gIT0gNCB8fFxyXG4gICAgJy4nWyRTUExJVF0oLygpKCkvKVtMRU5HVEhdID4gMSB8fFxyXG4gICAgJydbJFNQTElUXSgvLj8vKVtMRU5HVEhdXHJcbiAgKSB7XHJcbiAgICAvLyBiYXNlZCBvbiBlczUtc2hpbSBpbXBsZW1lbnRhdGlvbiwgbmVlZCB0byByZXdvcmsgaXRcclxuICAgIGludGVybmFsU3BsaXQgPSBmdW5jdGlvbiAoc2VwYXJhdG9yLCBsaW1pdCkge1xyXG4gICAgICB2YXIgc3RyaW5nID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgICBpZiAoc2VwYXJhdG9yID09PSB1bmRlZmluZWQgJiYgbGltaXQgPT09IDApIHJldHVybiBbXTtcclxuICAgICAgLy8gSWYgYHNlcGFyYXRvcmAgaXMgbm90IGEgcmVnZXgsIHVzZSBuYXRpdmUgc3BsaXRcclxuICAgICAgaWYgKCFpc1JlZ0V4cChzZXBhcmF0b3IpKSByZXR1cm4gJHNwbGl0LmNhbGwoc3RyaW5nLCBzZXBhcmF0b3IsIGxpbWl0KTtcclxuICAgICAgdmFyIG91dHB1dCA9IFtdO1xyXG4gICAgICB2YXIgZmxhZ3MgPSAoc2VwYXJhdG9yLmlnbm9yZUNhc2UgPyAnaScgOiAnJykgK1xyXG4gICAgICAgICAgICAgICAgICAoc2VwYXJhdG9yLm11bHRpbGluZSA/ICdtJyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3IudW5pY29kZSA/ICd1JyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgIChzZXBhcmF0b3Iuc3RpY2t5ID8gJ3knIDogJycpO1xyXG4gICAgICB2YXIgbGFzdExhc3RJbmRleCA9IDA7XHJcbiAgICAgIHZhciBzcGxpdExpbWl0ID0gbGltaXQgPT09IHVuZGVmaW5lZCA/IE1BWF9VSU5UMzIgOiBsaW1pdCA+Pj4gMDtcclxuICAgICAgLy8gTWFrZSBgZ2xvYmFsYCBhbmQgYXZvaWQgYGxhc3RJbmRleGAgaXNzdWVzIGJ5IHdvcmtpbmcgd2l0aCBhIGNvcHlcclxuICAgICAgdmFyIHNlcGFyYXRvckNvcHkgPSBuZXcgUmVnRXhwKHNlcGFyYXRvci5zb3VyY2UsIGZsYWdzICsgJ2cnKTtcclxuICAgICAgdmFyIG1hdGNoLCBsYXN0SW5kZXgsIGxhc3RMZW5ndGg7XHJcbiAgICAgIHdoaWxlIChtYXRjaCA9IHJlZ2V4cEV4ZWMuY2FsbChzZXBhcmF0b3JDb3B5LCBzdHJpbmcpKSB7XHJcbiAgICAgICAgbGFzdEluZGV4ID0gc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXTtcclxuICAgICAgICBpZiAobGFzdEluZGV4ID4gbGFzdExhc3RJbmRleCkge1xyXG4gICAgICAgICAgb3V0cHV0LnB1c2goc3RyaW5nLnNsaWNlKGxhc3RMYXN0SW5kZXgsIG1hdGNoLmluZGV4KSk7XHJcbiAgICAgICAgICBpZiAobWF0Y2hbTEVOR1RIXSA+IDEgJiYgbWF0Y2guaW5kZXggPCBzdHJpbmdbTEVOR1RIXSkgJHB1c2guYXBwbHkob3V0cHV0LCBtYXRjaC5zbGljZSgxKSk7XHJcbiAgICAgICAgICBsYXN0TGVuZ3RoID0gbWF0Y2hbMF1bTEVOR1RIXTtcclxuICAgICAgICAgIGxhc3RMYXN0SW5kZXggPSBsYXN0SW5kZXg7XHJcbiAgICAgICAgICBpZiAob3V0cHV0W0xFTkdUSF0gPj0gc3BsaXRMaW1pdCkgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzZXBhcmF0b3JDb3B5W0xBU1RfSU5ERVhdID09PSBtYXRjaC5pbmRleCkgc2VwYXJhdG9yQ29weVtMQVNUX0lOREVYXSsrOyAvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wXHJcbiAgICAgIH1cclxuICAgICAgaWYgKGxhc3RMYXN0SW5kZXggPT09IHN0cmluZ1tMRU5HVEhdKSB7XHJcbiAgICAgICAgaWYgKGxhc3RMZW5ndGggfHwgIXNlcGFyYXRvckNvcHkudGVzdCgnJykpIG91dHB1dC5wdXNoKCcnKTtcclxuICAgICAgfSBlbHNlIG91dHB1dC5wdXNoKHN0cmluZy5zbGljZShsYXN0TGFzdEluZGV4KSk7XHJcbiAgICAgIHJldHVybiBvdXRwdXRbTEVOR1RIXSA+IHNwbGl0TGltaXQgPyBvdXRwdXQuc2xpY2UoMCwgc3BsaXRMaW1pdCkgOiBvdXRwdXQ7XHJcbiAgICB9O1xyXG4gIC8vIENoYWtyYSwgVjhcclxuICB9IGVsc2UgaWYgKCcwJ1skU1BMSVRdKHVuZGVmaW5lZCwgMClbTEVOR1RIXSkge1xyXG4gICAgaW50ZXJuYWxTcGxpdCA9IGZ1bmN0aW9uIChzZXBhcmF0b3IsIGxpbWl0KSB7XHJcbiAgICAgIHJldHVybiBzZXBhcmF0b3IgPT09IHVuZGVmaW5lZCAmJiBsaW1pdCA9PT0gMCA/IFtdIDogJHNwbGl0LmNhbGwodGhpcywgc2VwYXJhdG9yLCBsaW1pdCk7XHJcbiAgICB9O1xyXG4gIH0gZWxzZSB7XHJcbiAgICBpbnRlcm5hbFNwbGl0ID0gJHNwbGl0O1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIFtcclxuICAgIC8vIGBTdHJpbmcucHJvdG90eXBlLnNwbGl0YCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXN0cmluZy5wcm90b3R5cGUuc3BsaXRcclxuICAgIGZ1bmN0aW9uIHNwbGl0KHNlcGFyYXRvciwgbGltaXQpIHtcclxuICAgICAgdmFyIE8gPSBkZWZpbmVkKHRoaXMpO1xyXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBzZXBhcmF0b3IgPT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkIDogc2VwYXJhdG9yW1NQTElUXTtcclxuICAgICAgcmV0dXJuIHNwbGl0dGVyICE9PSB1bmRlZmluZWRcclxuICAgICAgICA/IHNwbGl0dGVyLmNhbGwoc2VwYXJhdG9yLCBPLCBsaW1pdClcclxuICAgICAgICA6IGludGVybmFsU3BsaXQuY2FsbChTdHJpbmcoTyksIHNlcGFyYXRvciwgbGltaXQpO1xyXG4gICAgfSxcclxuICAgIC8vIGBSZWdFeHAucHJvdG90eXBlW0BAc3BsaXRdYCBtZXRob2RcclxuICAgIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXJlZ2V4cC5wcm90b3R5cGUtQEBzcGxpdFxyXG4gICAgLy9cclxuICAgIC8vIE5PVEU6IFRoaXMgY2Fubm90IGJlIHByb3Blcmx5IHBvbHlmaWxsZWQgaW4gZW5naW5lcyB0aGF0IGRvbid0IHN1cHBvcnRcclxuICAgIC8vIHRoZSAneScgZmxhZy5cclxuICAgIGZ1bmN0aW9uIChyZWdleHAsIGxpbWl0KSB7XHJcbiAgICAgIHZhciByZXMgPSBtYXliZUNhbGxOYXRpdmUoaW50ZXJuYWxTcGxpdCwgcmVnZXhwLCB0aGlzLCBsaW1pdCwgaW50ZXJuYWxTcGxpdCAhPT0gJHNwbGl0KTtcclxuICAgICAgaWYgKHJlcy5kb25lKSByZXR1cm4gcmVzLnZhbHVlO1xyXG5cclxuICAgICAgdmFyIHJ4ID0gYW5PYmplY3QocmVnZXhwKTtcclxuICAgICAgdmFyIFMgPSBTdHJpbmcodGhpcyk7XHJcbiAgICAgIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHJ4LCBSZWdFeHApO1xyXG5cclxuICAgICAgdmFyIHVuaWNvZGVNYXRjaGluZyA9IHJ4LnVuaWNvZGU7XHJcbiAgICAgIHZhciBmbGFncyA9IChyeC5pZ25vcmVDYXNlID8gJ2knIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgKHJ4Lm11bHRpbGluZSA/ICdtJyA6ICcnKSArXHJcbiAgICAgICAgICAgICAgICAgIChyeC51bmljb2RlID8gJ3UnIDogJycpICtcclxuICAgICAgICAgICAgICAgICAgKFNVUFBPUlRTX1kgPyAneScgOiAnZycpO1xyXG5cclxuICAgICAgLy8gXig/ICsgcnggKyApIGlzIG5lZWRlZCwgaW4gY29tYmluYXRpb24gd2l0aCBzb21lIFMgc2xpY2luZywgdG9cclxuICAgICAgLy8gc2ltdWxhdGUgdGhlICd5JyBmbGFnLlxyXG4gICAgICB2YXIgc3BsaXR0ZXIgPSBuZXcgQyhTVVBQT1JUU19ZID8gcnggOiAnXig/OicgKyByeC5zb3VyY2UgKyAnKScsIGZsYWdzKTtcclxuICAgICAgdmFyIGxpbSA9IGxpbWl0ID09PSB1bmRlZmluZWQgPyBNQVhfVUlOVDMyIDogbGltaXQgPj4+IDA7XHJcbiAgICAgIGlmIChsaW0gPT09IDApIHJldHVybiBbXTtcclxuICAgICAgaWYgKFMubGVuZ3RoID09PSAwKSByZXR1cm4gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFMpID09PSBudWxsID8gW1NdIDogW107XHJcbiAgICAgIHZhciBwID0gMDtcclxuICAgICAgdmFyIHEgPSAwO1xyXG4gICAgICB2YXIgQSA9IFtdO1xyXG4gICAgICB3aGlsZSAocSA8IFMubGVuZ3RoKSB7XHJcbiAgICAgICAgc3BsaXR0ZXIubGFzdEluZGV4ID0gU1VQUE9SVFNfWSA/IHEgOiAwO1xyXG4gICAgICAgIHZhciB6ID0gY2FsbFJlZ0V4cEV4ZWMoc3BsaXR0ZXIsIFNVUFBPUlRTX1kgPyBTIDogUy5zbGljZShxKSk7XHJcbiAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgeiA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgKGUgPSAkbWluKHRvTGVuZ3RoKHNwbGl0dGVyLmxhc3RJbmRleCArIChTVVBQT1JUU19ZID8gMCA6IHEpKSwgUy5sZW5ndGgpKSA9PT0gcFxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgcSA9IGFkdmFuY2VTdHJpbmdJbmRleChTLCBxLCB1bmljb2RlTWF0Y2hpbmcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBBLnB1c2goUy5zbGljZShwLCBxKSk7XHJcbiAgICAgICAgICBpZiAoQS5sZW5ndGggPT09IGxpbSkgcmV0dXJuIEE7XHJcbiAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSB6Lmxlbmd0aCAtIDE7IGkrKykge1xyXG4gICAgICAgICAgICBBLnB1c2goeltpXSk7XHJcbiAgICAgICAgICAgIGlmIChBLmxlbmd0aCA9PT0gbGltKSByZXR1cm4gQTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIHEgPSBwID0gZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgQS5wdXNoKFMuc2xpY2UocCkpO1xyXG4gICAgICByZXR1cm4gQTtcclxuICAgIH1cclxuICBdO1xyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgTElCUkFSWSA9IHJlcXVpcmUoJy4vX2xpYnJhcnknKTtcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgY3R4ID0gcmVxdWlyZSgnLi9fY3R4Jyk7XHJcbnZhciBjbGFzc29mID0gcmVxdWlyZSgnLi9fY2xhc3NvZicpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIGFuSW5zdGFuY2UgPSByZXF1aXJlKCcuL19hbi1pbnN0YW5jZScpO1xyXG52YXIgZm9yT2YgPSByZXF1aXJlKCcuL19mb3Itb2YnKTtcclxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcclxudmFyIHRhc2sgPSByZXF1aXJlKCcuL190YXNrJykuc2V0O1xyXG52YXIgbWljcm90YXNrID0gcmVxdWlyZSgnLi9fbWljcm90YXNrJykoKTtcclxudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5TW9kdWxlID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xyXG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcclxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcclxudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XHJcbnZhciBQUk9NSVNFID0gJ1Byb21pc2UnO1xyXG52YXIgVHlwZUVycm9yID0gZ2xvYmFsLlR5cGVFcnJvcjtcclxudmFyIHByb2Nlc3MgPSBnbG9iYWwucHJvY2VzcztcclxudmFyIHZlcnNpb25zID0gcHJvY2VzcyAmJiBwcm9jZXNzLnZlcnNpb25zO1xyXG52YXIgdjggPSB2ZXJzaW9ucyAmJiB2ZXJzaW9ucy52OCB8fCAnJztcclxudmFyICRQcm9taXNlID0gZ2xvYmFsW1BST01JU0VdO1xyXG52YXIgaXNOb2RlID0gY2xhc3NvZihwcm9jZXNzKSA9PSAncHJvY2Vzcyc7XHJcbnZhciBlbXB0eSA9IGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfTtcclxudmFyIEludGVybmFsLCBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHksIE93blByb21pc2VDYXBhYmlsaXR5LCBXcmFwcGVyO1xyXG52YXIgbmV3UHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdHZW5lcmljUHJvbWlzZUNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eU1vZHVsZS5mO1xyXG5cclxudmFyIFVTRV9OQVRJVkUgPSAhIWZ1bmN0aW9uICgpIHtcclxuICB0cnkge1xyXG4gICAgLy8gY29ycmVjdCBzdWJjbGFzc2luZyB3aXRoIEBAc3BlY2llcyBzdXBwb3J0XHJcbiAgICB2YXIgcHJvbWlzZSA9ICRQcm9taXNlLnJlc29sdmUoMSk7XHJcbiAgICB2YXIgRmFrZVByb21pc2UgPSAocHJvbWlzZS5jb25zdHJ1Y3RvciA9IHt9KVtyZXF1aXJlKCcuL193a3MnKSgnc3BlY2llcycpXSA9IGZ1bmN0aW9uIChleGVjKSB7XHJcbiAgICAgIGV4ZWMoZW1wdHksIGVtcHR5KTtcclxuICAgIH07XHJcbiAgICAvLyB1bmhhbmRsZWQgcmVqZWN0aW9ucyB0cmFja2luZyBzdXBwb3J0LCBOb2RlSlMgUHJvbWlzZSB3aXRob3V0IGl0IGZhaWxzIEBAc3BlY2llcyB0ZXN0XHJcbiAgICByZXR1cm4gKGlzTm9kZSB8fCB0eXBlb2YgUHJvbWlzZVJlamVjdGlvbkV2ZW50ID09ICdmdW5jdGlvbicpXHJcbiAgICAgICYmIHByb21pc2UudGhlbihlbXB0eSkgaW5zdGFuY2VvZiBGYWtlUHJvbWlzZVxyXG4gICAgICAvLyB2OCA2LjYgKE5vZGUgMTAgYW5kIENocm9tZSA2NikgaGF2ZSBhIGJ1ZyB3aXRoIHJlc29sdmluZyBjdXN0b20gdGhlbmFibGVzXHJcbiAgICAgIC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTgzMDU2NVxyXG4gICAgICAvLyB3ZSBjYW4ndCBkZXRlY3QgaXQgc3luY2hyb25vdXNseSwgc28ganVzdCBjaGVjayB2ZXJzaW9uc1xyXG4gICAgICAmJiB2OC5pbmRleE9mKCc2LjYnKSAhPT0gMFxyXG4gICAgICAmJiB1c2VyQWdlbnQuaW5kZXhPZignQ2hyb21lLzY2JykgPT09IC0xO1xyXG4gIH0gY2F0Y2ggKGUpIHsgLyogZW1wdHkgKi8gfVxyXG59KCk7XHJcblxyXG4vLyBoZWxwZXJzXHJcbnZhciBpc1RoZW5hYmxlID0gZnVuY3Rpb24gKGl0KSB7XHJcbiAgdmFyIHRoZW47XHJcbiAgcmV0dXJuIGlzT2JqZWN0KGl0KSAmJiB0eXBlb2YgKHRoZW4gPSBpdC50aGVuKSA9PSAnZnVuY3Rpb24nID8gdGhlbiA6IGZhbHNlO1xyXG59O1xyXG52YXIgbm90aWZ5ID0gZnVuY3Rpb24gKHByb21pc2UsIGlzUmVqZWN0KSB7XHJcbiAgaWYgKHByb21pc2UuX24pIHJldHVybjtcclxuICBwcm9taXNlLl9uID0gdHJ1ZTtcclxuICB2YXIgY2hhaW4gPSBwcm9taXNlLl9jO1xyXG4gIG1pY3JvdGFzayhmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgdmFsdWUgPSBwcm9taXNlLl92O1xyXG4gICAgdmFyIG9rID0gcHJvbWlzZS5fcyA9PSAxO1xyXG4gICAgdmFyIGkgPSAwO1xyXG4gICAgdmFyIHJ1biA9IGZ1bmN0aW9uIChyZWFjdGlvbikge1xyXG4gICAgICB2YXIgaGFuZGxlciA9IG9rID8gcmVhY3Rpb24ub2sgOiByZWFjdGlvbi5mYWlsO1xyXG4gICAgICB2YXIgcmVzb2x2ZSA9IHJlYWN0aW9uLnJlc29sdmU7XHJcbiAgICAgIHZhciByZWplY3QgPSByZWFjdGlvbi5yZWplY3Q7XHJcbiAgICAgIHZhciBkb21haW4gPSByZWFjdGlvbi5kb21haW47XHJcbiAgICAgIHZhciByZXN1bHQsIHRoZW4sIGV4aXRlZDtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoaGFuZGxlcikge1xyXG4gICAgICAgICAgaWYgKCFvaykge1xyXG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faCA9PSAyKSBvbkhhbmRsZVVuaGFuZGxlZChwcm9taXNlKTtcclxuICAgICAgICAgICAgcHJvbWlzZS5faCA9IDE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAoaGFuZGxlciA9PT0gdHJ1ZSkgcmVzdWx0ID0gdmFsdWU7XHJcbiAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRvbWFpbikgZG9tYWluLmVudGVyKCk7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGhhbmRsZXIodmFsdWUpOyAvLyBtYXkgdGhyb3dcclxuICAgICAgICAgICAgaWYgKGRvbWFpbikge1xyXG4gICAgICAgICAgICAgIGRvbWFpbi5leGl0KCk7XHJcbiAgICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKHJlc3VsdCA9PT0gcmVhY3Rpb24ucHJvbWlzZSkge1xyXG4gICAgICAgICAgICByZWplY3QoVHlwZUVycm9yKCdQcm9taXNlLWNoYWluIGN5Y2xlJykpO1xyXG4gICAgICAgICAgfSBlbHNlIGlmICh0aGVuID0gaXNUaGVuYWJsZShyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHRoZW4uY2FsbChyZXN1bHQsIHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICB9IGVsc2UgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgICAgIH0gZWxzZSByZWplY3QodmFsdWUpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgaWYgKGRvbWFpbiAmJiAhZXhpdGVkKSBkb21haW4uZXhpdCgpO1xyXG4gICAgICAgIHJlamVjdChlKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuICAgIHdoaWxlIChjaGFpbi5sZW5ndGggPiBpKSBydW4oY2hhaW5baSsrXSk7IC8vIHZhcmlhYmxlIGxlbmd0aCAtIGNhbid0IHVzZSBmb3JFYWNoXHJcbiAgICBwcm9taXNlLl9jID0gW107XHJcbiAgICBwcm9taXNlLl9uID0gZmFsc2U7XHJcbiAgICBpZiAoaXNSZWplY3QgJiYgIXByb21pc2UuX2gpIG9uVW5oYW5kbGVkKHByb21pc2UpO1xyXG4gIH0pO1xyXG59O1xyXG52YXIgb25VbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xyXG4gIHRhc2suY2FsbChnbG9iYWwsIGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciB2YWx1ZSA9IHByb21pc2UuX3Y7XHJcbiAgICB2YXIgdW5oYW5kbGVkID0gaXNVbmhhbmRsZWQocHJvbWlzZSk7XHJcbiAgICB2YXIgcmVzdWx0LCBoYW5kbGVyLCBjb25zb2xlO1xyXG4gICAgaWYgKHVuaGFuZGxlZCkge1xyXG4gICAgICByZXN1bHQgPSBwZXJmb3JtKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoaXNOb2RlKSB7XHJcbiAgICAgICAgICBwcm9jZXNzLmVtaXQoJ3VuaGFuZGxlZFJlamVjdGlvbicsIHZhbHVlLCBwcm9taXNlKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub251bmhhbmRsZWRyZWplY3Rpb24pIHtcclxuICAgICAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHZhbHVlIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoKGNvbnNvbGUgPSBnbG9iYWwuY29uc29sZSkgJiYgY29uc29sZS5lcnJvcikge1xyXG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5oYW5kbGVkIHByb21pc2UgcmVqZWN0aW9uJywgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIC8vIEJyb3dzZXJzIHNob3VsZCBub3QgdHJpZ2dlciBgcmVqZWN0aW9uSGFuZGxlZGAgZXZlbnQgaWYgaXQgd2FzIGhhbmRsZWQgaGVyZSwgTm9kZUpTIC0gc2hvdWxkXHJcbiAgICAgIHByb21pc2UuX2ggPSBpc05vZGUgfHwgaXNVbmhhbmRsZWQocHJvbWlzZSkgPyAyIDogMTtcclxuICAgIH0gcHJvbWlzZS5fYSA9IHVuZGVmaW5lZDtcclxuICAgIGlmICh1bmhhbmRsZWQgJiYgcmVzdWx0LmUpIHRocm93IHJlc3VsdC52O1xyXG4gIH0pO1xyXG59O1xyXG52YXIgaXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xyXG4gIHJldHVybiBwcm9taXNlLl9oICE9PSAxICYmIChwcm9taXNlLl9hIHx8IHByb21pc2UuX2MpLmxlbmd0aCA9PT0gMDtcclxufTtcclxudmFyIG9uSGFuZGxlVW5oYW5kbGVkID0gZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICB0YXNrLmNhbGwoZ2xvYmFsLCBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgaGFuZGxlcjtcclxuICAgIGlmIChpc05vZGUpIHtcclxuICAgICAgcHJvY2Vzcy5lbWl0KCdyZWplY3Rpb25IYW5kbGVkJywgcHJvbWlzZSk7XHJcbiAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPSBnbG9iYWwub25yZWplY3Rpb25oYW5kbGVkKSB7XHJcbiAgICAgIGhhbmRsZXIoeyBwcm9taXNlOiBwcm9taXNlLCByZWFzb246IHByb21pc2UuX3YgfSk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcbnZhciAkcmVqZWN0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgdmFyIHByb21pc2UgPSB0aGlzO1xyXG4gIGlmIChwcm9taXNlLl9kKSByZXR1cm47XHJcbiAgcHJvbWlzZS5fZCA9IHRydWU7XHJcbiAgcHJvbWlzZSA9IHByb21pc2UuX3cgfHwgcHJvbWlzZTsgLy8gdW53cmFwXHJcbiAgcHJvbWlzZS5fdiA9IHZhbHVlO1xyXG4gIHByb21pc2UuX3MgPSAyO1xyXG4gIGlmICghcHJvbWlzZS5fYSkgcHJvbWlzZS5fYSA9IHByb21pc2UuX2Muc2xpY2UoKTtcclxuICBub3RpZnkocHJvbWlzZSwgdHJ1ZSk7XHJcbn07XHJcbnZhciAkcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gIHZhciBwcm9taXNlID0gdGhpcztcclxuICB2YXIgdGhlbjtcclxuICBpZiAocHJvbWlzZS5fZCkgcmV0dXJuO1xyXG4gIHByb21pc2UuX2QgPSB0cnVlO1xyXG4gIHByb21pc2UgPSBwcm9taXNlLl93IHx8IHByb21pc2U7IC8vIHVud3JhcFxyXG4gIHRyeSB7XHJcbiAgICBpZiAocHJvbWlzZSA9PT0gdmFsdWUpIHRocm93IFR5cGVFcnJvcihcIlByb21pc2UgY2FuJ3QgYmUgcmVzb2x2ZWQgaXRzZWxmXCIpO1xyXG4gICAgaWYgKHRoZW4gPSBpc1RoZW5hYmxlKHZhbHVlKSkge1xyXG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB3cmFwcGVyID0geyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH07IC8vIHdyYXBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdGhlbi5jYWxsKHZhbHVlLCBjdHgoJHJlc29sdmUsIHdyYXBwZXIsIDEpLCBjdHgoJHJlamVjdCwgd3JhcHBlciwgMSkpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICRyZWplY3QuY2FsbCh3cmFwcGVyLCBlKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcHJvbWlzZS5fdiA9IHZhbHVlO1xyXG4gICAgICBwcm9taXNlLl9zID0gMTtcclxuICAgICAgbm90aWZ5KHByb21pc2UsIGZhbHNlKTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlKSB7XHJcbiAgICAkcmVqZWN0LmNhbGwoeyBfdzogcHJvbWlzZSwgX2Q6IGZhbHNlIH0sIGUpOyAvLyB3cmFwXHJcbiAgfVxyXG59O1xyXG5cclxuLy8gY29uc3RydWN0b3IgcG9seWZpbGxcclxuaWYgKCFVU0VfTkFUSVZFKSB7XHJcbiAgLy8gMjUuNC4zLjEgUHJvbWlzZShleGVjdXRvcilcclxuICAkUHJvbWlzZSA9IGZ1bmN0aW9uIFByb21pc2UoZXhlY3V0b3IpIHtcclxuICAgIGFuSW5zdGFuY2UodGhpcywgJFByb21pc2UsIFBST01JU0UsICdfaCcpO1xyXG4gICAgYUZ1bmN0aW9uKGV4ZWN1dG9yKTtcclxuICAgIEludGVybmFsLmNhbGwodGhpcyk7XHJcbiAgICB0cnkge1xyXG4gICAgICBleGVjdXRvcihjdHgoJHJlc29sdmUsIHRoaXMsIDEpLCBjdHgoJHJlamVjdCwgdGhpcywgMSkpO1xyXG4gICAgfSBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICRyZWplY3QuY2FsbCh0aGlzLCBlcnIpO1xyXG4gICAgfVxyXG4gIH07XHJcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXHJcbiAgSW50ZXJuYWwgPSBmdW5jdGlvbiBQcm9taXNlKGV4ZWN1dG9yKSB7XHJcbiAgICB0aGlzLl9jID0gW107ICAgICAgICAgICAgIC8vIDwtIGF3YWl0aW5nIHJlYWN0aW9uc1xyXG4gICAgdGhpcy5fYSA9IHVuZGVmaW5lZDsgICAgICAvLyA8LSBjaGVja2VkIGluIGlzVW5oYW5kbGVkIHJlYWN0aW9uc1xyXG4gICAgdGhpcy5fcyA9IDA7ICAgICAgICAgICAgICAvLyA8LSBzdGF0ZVxyXG4gICAgdGhpcy5fZCA9IGZhbHNlOyAgICAgICAgICAvLyA8LSBkb25lXHJcbiAgICB0aGlzLl92ID0gdW5kZWZpbmVkOyAgICAgIC8vIDwtIHZhbHVlXHJcbiAgICB0aGlzLl9oID0gMDsgICAgICAgICAgICAgIC8vIDwtIHJlamVjdGlvbiBzdGF0ZSwgMCAtIGRlZmF1bHQsIDEgLSBoYW5kbGVkLCAyIC0gdW5oYW5kbGVkXHJcbiAgICB0aGlzLl9uID0gZmFsc2U7ICAgICAgICAgIC8vIDwtIG5vdGlmeVxyXG4gIH07XHJcbiAgSW50ZXJuYWwucHJvdG90eXBlID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUtYWxsJykoJFByb21pc2UucHJvdG90eXBlLCB7XHJcbiAgICAvLyAyNS40LjUuMyBQcm9taXNlLnByb3RvdHlwZS50aGVuKG9uRnVsZmlsbGVkLCBvblJlamVjdGVkKVxyXG4gICAgdGhlbjogZnVuY3Rpb24gdGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZCkge1xyXG4gICAgICB2YXIgcmVhY3Rpb24gPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShzcGVjaWVzQ29uc3RydWN0b3IodGhpcywgJFByb21pc2UpKTtcclxuICAgICAgcmVhY3Rpb24ub2sgPSB0eXBlb2Ygb25GdWxmaWxsZWQgPT0gJ2Z1bmN0aW9uJyA/IG9uRnVsZmlsbGVkIDogdHJ1ZTtcclxuICAgICAgcmVhY3Rpb24uZmFpbCA9IHR5cGVvZiBvblJlamVjdGVkID09ICdmdW5jdGlvbicgJiYgb25SZWplY3RlZDtcclxuICAgICAgcmVhY3Rpb24uZG9tYWluID0gaXNOb2RlID8gcHJvY2Vzcy5kb21haW4gOiB1bmRlZmluZWQ7XHJcbiAgICAgIHRoaXMuX2MucHVzaChyZWFjdGlvbik7XHJcbiAgICAgIGlmICh0aGlzLl9hKSB0aGlzLl9hLnB1c2gocmVhY3Rpb24pO1xyXG4gICAgICBpZiAodGhpcy5fcykgbm90aWZ5KHRoaXMsIGZhbHNlKTtcclxuICAgICAgcmV0dXJuIHJlYWN0aW9uLnByb21pc2U7XHJcbiAgICB9LFxyXG4gICAgLy8gMjUuNC41LjEgUHJvbWlzZS5wcm90b3R5cGUuY2F0Y2gob25SZWplY3RlZClcclxuICAgICdjYXRjaCc6IGZ1bmN0aW9uIChvblJlamVjdGVkKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBvblJlamVjdGVkKTtcclxuICAgIH1cclxuICB9KTtcclxuICBPd25Qcm9taXNlQ2FwYWJpbGl0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBwcm9taXNlID0gbmV3IEludGVybmFsKCk7XHJcbiAgICB0aGlzLnByb21pc2UgPSBwcm9taXNlO1xyXG4gICAgdGhpcy5yZXNvbHZlID0gY3R4KCRyZXNvbHZlLCBwcm9taXNlLCAxKTtcclxuICAgIHRoaXMucmVqZWN0ID0gY3R4KCRyZWplY3QsIHByb21pc2UsIDEpO1xyXG4gIH07XHJcbiAgbmV3UHJvbWlzZUNhcGFiaWxpdHlNb2R1bGUuZiA9IG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gZnVuY3Rpb24gKEMpIHtcclxuICAgIHJldHVybiBDID09PSAkUHJvbWlzZSB8fCBDID09PSBXcmFwcGVyXHJcbiAgICAgID8gbmV3IE93blByb21pc2VDYXBhYmlsaXR5KEMpXHJcbiAgICAgIDogbmV3R2VuZXJpY1Byb21pc2VDYXBhYmlsaXR5KEMpO1xyXG4gIH07XHJcbn1cclxuXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogIVVTRV9OQVRJVkUsIHsgUHJvbWlzZTogJFByb21pc2UgfSk7XHJcbnJlcXVpcmUoJy4vX3NldC10by1zdHJpbmctdGFnJykoJFByb21pc2UsIFBST01JU0UpO1xyXG5yZXF1aXJlKCcuL19zZXQtc3BlY2llcycpKFBST01JU0UpO1xyXG5XcmFwcGVyID0gcmVxdWlyZSgnLi9fY29yZScpW1BST01JU0VdO1xyXG5cclxuLy8gc3RhdGljc1xyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFVU0VfTkFUSVZFLCBQUk9NSVNFLCB7XHJcbiAgLy8gMjUuNC40LjUgUHJvbWlzZS5yZWplY3QocilcclxuICByZWplY3Q6IGZ1bmN0aW9uIHJlamVjdChyKSB7XHJcbiAgICB2YXIgY2FwYWJpbGl0eSA9IG5ld1Byb21pc2VDYXBhYmlsaXR5KHRoaXMpO1xyXG4gICAgdmFyICQkcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XHJcbiAgICAkJHJlamVjdChyKTtcclxuICAgIHJldHVybiBjYXBhYmlsaXR5LnByb21pc2U7XHJcbiAgfVxyXG59KTtcclxuJGV4cG9ydCgkZXhwb3J0LlMgKyAkZXhwb3J0LkYgKiAoTElCUkFSWSB8fCAhVVNFX05BVElWRSksIFBST01JU0UsIHtcclxuICAvLyAyNS40LjQuNiBQcm9taXNlLnJlc29sdmUoeClcclxuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHgpIHtcclxuICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShMSUJSQVJZICYmIHRoaXMgPT09IFdyYXBwZXIgPyAkUHJvbWlzZSA6IHRoaXMsIHgpO1xyXG4gIH1cclxufSk7XHJcbiRleHBvcnQoJGV4cG9ydC5TICsgJGV4cG9ydC5GICogIShVU0VfTkFUSVZFICYmIHJlcXVpcmUoJy4vX2l0ZXItZGV0ZWN0JykoZnVuY3Rpb24gKGl0ZXIpIHtcclxuICAkUHJvbWlzZS5hbGwoaXRlcilbJ2NhdGNoJ10oZW1wdHkpO1xyXG59KSksIFBST01JU0UsIHtcclxuICAvLyAyNS40LjQuMSBQcm9taXNlLmFsbChpdGVyYWJsZSlcclxuICBhbGw6IGZ1bmN0aW9uIGFsbChpdGVyYWJsZSkge1xyXG4gICAgdmFyIEMgPSB0aGlzO1xyXG4gICAgdmFyIGNhcGFiaWxpdHkgPSBuZXdQcm9taXNlQ2FwYWJpbGl0eShDKTtcclxuICAgIHZhciByZXNvbHZlID0gY2FwYWJpbGl0eS5yZXNvbHZlO1xyXG4gICAgdmFyIHJlamVjdCA9IGNhcGFiaWxpdHkucmVqZWN0O1xyXG4gICAgdmFyIHJlc3VsdCA9IHBlcmZvcm0oZnVuY3Rpb24gKCkge1xyXG4gICAgICB2YXIgdmFsdWVzID0gW107XHJcbiAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgIHZhciByZW1haW5pbmcgPSAxO1xyXG4gICAgICBmb3JPZihpdGVyYWJsZSwgZmFsc2UsIGZ1bmN0aW9uIChwcm9taXNlKSB7XHJcbiAgICAgICAgdmFyICRpbmRleCA9IGluZGV4Kys7XHJcbiAgICAgICAgdmFyIGFscmVhZHlDYWxsZWQgPSBmYWxzZTtcclxuICAgICAgICB2YWx1ZXMucHVzaCh1bmRlZmluZWQpO1xyXG4gICAgICAgIHJlbWFpbmluZysrO1xyXG4gICAgICAgIEMucmVzb2x2ZShwcm9taXNlKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgaWYgKGFscmVhZHlDYWxsZWQpIHJldHVybjtcclxuICAgICAgICAgIGFscmVhZHlDYWxsZWQgPSB0cnVlO1xyXG4gICAgICAgICAgdmFsdWVzWyRpbmRleF0gPSB2YWx1ZTtcclxuICAgICAgICAgIC0tcmVtYWluaW5nIHx8IHJlc29sdmUodmFsdWVzKTtcclxuICAgICAgICB9LCByZWplY3QpO1xyXG4gICAgICB9KTtcclxuICAgICAgLS1yZW1haW5pbmcgfHwgcmVzb2x2ZSh2YWx1ZXMpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XHJcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xyXG4gIH0sXHJcbiAgLy8gMjUuNC40LjQgUHJvbWlzZS5yYWNlKGl0ZXJhYmxlKVxyXG4gIHJhY2U6IGZ1bmN0aW9uIHJhY2UoaXRlcmFibGUpIHtcclxuICAgIHZhciBDID0gdGhpcztcclxuICAgIHZhciBjYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkoQyk7XHJcbiAgICB2YXIgcmVqZWN0ID0gY2FwYWJpbGl0eS5yZWplY3Q7XHJcbiAgICB2YXIgcmVzdWx0ID0gcGVyZm9ybShmdW5jdGlvbiAoKSB7XHJcbiAgICAgIGZvck9mKGl0ZXJhYmxlLCBmYWxzZSwgZnVuY3Rpb24gKHByb21pc2UpIHtcclxuICAgICAgICBDLnJlc29sdmUocHJvbWlzZSkudGhlbihjYXBhYmlsaXR5LnJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICBpZiAocmVzdWx0LmUpIHJlamVjdChyZXN1bHQudik7XHJcbiAgICByZXR1cm4gY2FwYWJpbGl0eS5wcm9taXNlO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyIHdlYWsgPSByZXF1aXJlKCcuL19jb2xsZWN0aW9uLXdlYWsnKTtcclxudmFyIHZhbGlkYXRlID0gcmVxdWlyZSgnLi9fdmFsaWRhdGUtY29sbGVjdGlvbicpO1xyXG52YXIgV0VBS19TRVQgPSAnV2Vha1NldCc7XHJcblxyXG4vLyAyMy40IFdlYWtTZXQgT2JqZWN0c1xyXG5yZXF1aXJlKCcuL19jb2xsZWN0aW9uJykoV0VBS19TRVQsIGZ1bmN0aW9uIChnZXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gV2Vha1NldCgpIHsgcmV0dXJuIGdldCh0aGlzLCBhcmd1bWVudHMubGVuZ3RoID4gMCA/IGFyZ3VtZW50c1swXSA6IHVuZGVmaW5lZCk7IH07XHJcbn0sIHtcclxuICAvLyAyMy40LjMuMSBXZWFrU2V0LnByb3RvdHlwZS5hZGQodmFsdWUpXHJcbiAgYWRkOiBmdW5jdGlvbiBhZGQodmFsdWUpIHtcclxuICAgIHJldHVybiB3ZWFrLmRlZih2YWxpZGF0ZSh0aGlzLCBXRUFLX1NFVCksIHZhbHVlLCB0cnVlKTtcclxuICB9XHJcbn0sIHdlYWssIGZhbHNlLCB0cnVlKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHR5cGVkID0gcmVxdWlyZSgnLi9fdHlwZWQnKTtcclxudmFyIGJ1ZmZlciA9IHJlcXVpcmUoJy4vX3R5cGVkLWJ1ZmZlcicpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4vX3RvLWFic29sdXRlLWluZGV4Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuL19pcy1vYmplY3QnKTtcclxudmFyIEFycmF5QnVmZmVyID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykuQXJyYXlCdWZmZXI7XHJcbnZhciBzcGVjaWVzQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuL19zcGVjaWVzLWNvbnN0cnVjdG9yJyk7XHJcbnZhciAkQXJyYXlCdWZmZXIgPSBidWZmZXIuQXJyYXlCdWZmZXI7XHJcbnZhciAkRGF0YVZpZXcgPSBidWZmZXIuRGF0YVZpZXc7XHJcbnZhciAkaXNWaWV3ID0gJHR5cGVkLkFCViAmJiBBcnJheUJ1ZmZlci5pc1ZpZXc7XHJcbnZhciAkc2xpY2UgPSAkQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlO1xyXG52YXIgVklFVyA9ICR0eXBlZC5WSUVXO1xyXG52YXIgQVJSQVlfQlVGRkVSID0gJ0FycmF5QnVmZmVyJztcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5XICsgJGV4cG9ydC5GICogKEFycmF5QnVmZmVyICE9PSAkQXJyYXlCdWZmZXIpLCB7IEFycmF5QnVmZmVyOiAkQXJyYXlCdWZmZXIgfSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICEkdHlwZWQuQ09OU1RSLCBBUlJBWV9CVUZGRVIsIHtcclxuICAvLyAyNC4xLjMuMSBBcnJheUJ1ZmZlci5pc1ZpZXcoYXJnKVxyXG4gIGlzVmlldzogZnVuY3Rpb24gaXNWaWV3KGl0KSB7XHJcbiAgICByZXR1cm4gJGlzVmlldyAmJiAkaXNWaWV3KGl0KSB8fCBpc09iamVjdChpdCkgJiYgVklFVyBpbiBpdDtcclxuICB9XHJcbn0pO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlUgKyAkZXhwb3J0LkYgKiByZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByZXR1cm4gIW5ldyAkQXJyYXlCdWZmZXIoMikuc2xpY2UoMSwgdW5kZWZpbmVkKS5ieXRlTGVuZ3RoO1xyXG59KSwgQVJSQVlfQlVGRkVSLCB7XHJcbiAgLy8gMjQuMS40LjMgQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKHN0YXJ0LCBlbmQpXHJcbiAgc2xpY2U6IGZ1bmN0aW9uIHNsaWNlKHN0YXJ0LCBlbmQpIHtcclxuICAgIGlmICgkc2xpY2UgIT09IHVuZGVmaW5lZCAmJiBlbmQgPT09IHVuZGVmaW5lZCkgcmV0dXJuICRzbGljZS5jYWxsKGFuT2JqZWN0KHRoaXMpLCBzdGFydCk7IC8vIEZGIGZpeFxyXG4gICAgdmFyIGxlbiA9IGFuT2JqZWN0KHRoaXMpLmJ5dGVMZW5ndGg7XHJcbiAgICB2YXIgZmlyc3QgPSB0b0Fic29sdXRlSW5kZXgoc3RhcnQsIGxlbik7XHJcbiAgICB2YXIgZmluID0gdG9BYnNvbHV0ZUluZGV4KGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogZW5kLCBsZW4pO1xyXG4gICAgdmFyIHJlc3VsdCA9IG5ldyAoc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsICRBcnJheUJ1ZmZlcikpKHRvTGVuZ3RoKGZpbiAtIGZpcnN0KSk7XHJcbiAgICB2YXIgdmlld1MgPSBuZXcgJERhdGFWaWV3KHRoaXMpO1xyXG4gICAgdmFyIHZpZXdUID0gbmV3ICREYXRhVmlldyhyZXN1bHQpO1xyXG4gICAgdmFyIGluZGV4ID0gMDtcclxuICAgIHdoaWxlIChmaXJzdCA8IGZpbikge1xyXG4gICAgICB2aWV3VC5zZXRVaW50OChpbmRleCsrLCB2aWV3Uy5nZXRVaW50OChmaXJzdCsrKSk7XHJcbiAgICB9IHJldHVybiByZXN1bHQ7XHJcbiAgfVxyXG59KTtcclxuXHJcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoQVJSQVlfQlVGRkVSKTtcclxuIiwidmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuJGV4cG9ydCgkZXhwb3J0LkcgKyAkZXhwb3J0LlcgKyAkZXhwb3J0LkYgKiAhcmVxdWlyZSgnLi9fdHlwZWQnKS5BQlYsIHtcclxuICBEYXRhVmlldzogcmVxdWlyZSgnLi9fdHlwZWQtYnVmZmVyJykuRGF0YVZpZXdcclxufSk7XHJcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0ludDgnLCAxLCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBJbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50OCcsIDEsIGZ1bmN0aW9uIChpbml0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIFVpbnQ4Q2xhbXBlZEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59LCB0cnVlKTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnSW50MTYnLCAyLCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBJbnQxNkFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwicmVxdWlyZSgnLi9fdHlwZWQtYXJyYXknKSgnVWludDE2JywgMiwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gVWludDE2QXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdJbnQzMicsIDQsIGZ1bmN0aW9uIChpbml0KSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIEludDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdVaW50MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBVaW50MzJBcnJheShkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpIHtcclxuICAgIHJldHVybiBpbml0KHRoaXMsIGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCk7XHJcbiAgfTtcclxufSk7XHJcbiIsInJlcXVpcmUoJy4vX3R5cGVkLWFycmF5JykoJ0Zsb2F0MzInLCA0LCBmdW5jdGlvbiAoaW5pdCkge1xyXG4gIHJldHVybiBmdW5jdGlvbiBGbG9hdDMyQXJyYXkoZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gaW5pdCh0aGlzLCBkYXRhLCBieXRlT2Zmc2V0LCBsZW5ndGgpO1xyXG4gIH07XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL190eXBlZC1hcnJheScpKCdGbG9hdDY0JywgOCwgZnVuY3Rpb24gKGluaXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gRmxvYXQ2NEFycmF5KGRhdGEsIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xyXG4gICAgcmV0dXJuIGluaXQodGhpcywgZGF0YSwgYnl0ZU9mZnNldCwgbGVuZ3RoKTtcclxuICB9O1xyXG59KTtcclxuIiwiLy8gMjYuMS4xIFJlZmxlY3QuYXBwbHkodGFyZ2V0LCB0aGlzQXJndW1lbnQsIGFyZ3VtZW50c0xpc3QpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgckFwcGx5ID0gKHJlcXVpcmUoJy4vX2dsb2JhbCcpLlJlZmxlY3QgfHwge30pLmFwcGx5O1xyXG52YXIgZkFwcGx5ID0gRnVuY3Rpb24uYXBwbHk7XHJcbi8vIE1TIEVkZ2UgYXJndW1lbnRzTGlzdCBhcmd1bWVudCBpcyBvcHRpb25hbFxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqICFyZXF1aXJlKCcuL19mYWlscycpKGZ1bmN0aW9uICgpIHtcclxuICByQXBwbHkoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcclxufSksICdSZWZsZWN0Jywge1xyXG4gIGFwcGx5OiBmdW5jdGlvbiBhcHBseSh0YXJnZXQsIHRoaXNBcmd1bWVudCwgYXJndW1lbnRzTGlzdCkge1xyXG4gICAgdmFyIFQgPSBhRnVuY3Rpb24odGFyZ2V0KTtcclxuICAgIHZhciBMID0gYW5PYmplY3QoYXJndW1lbnRzTGlzdCk7XHJcbiAgICByZXR1cm4gckFwcGx5ID8gckFwcGx5KFQsIHRoaXNBcmd1bWVudCwgTCkgOiBmQXBwbHkuY2FsbChULCB0aGlzQXJndW1lbnQsIEwpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuMiBSZWZsZWN0LmNvbnN0cnVjdCh0YXJnZXQsIGFyZ3VtZW50c0xpc3QgWywgbmV3VGFyZ2V0XSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4vX29iamVjdC1jcmVhdGUnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG52YXIgZmFpbHMgPSByZXF1aXJlKCcuL19mYWlscycpO1xyXG52YXIgYmluZCA9IHJlcXVpcmUoJy4vX2JpbmQnKTtcclxudmFyIHJDb25zdHJ1Y3QgPSAocmVxdWlyZSgnLi9fZ2xvYmFsJykuUmVmbGVjdCB8fCB7fSkuY29uc3RydWN0O1xyXG5cclxuLy8gTVMgRWRnZSBzdXBwb3J0cyBvbmx5IDIgYXJndW1lbnRzIGFuZCBhcmd1bWVudHNMaXN0IGFyZ3VtZW50IGlzIG9wdGlvbmFsXHJcbi8vIEZGIE5pZ2h0bHkgc2V0cyB0aGlyZCBhcmd1bWVudCBhcyBgbmV3LnRhcmdldGAsIGJ1dCBkb2VzIG5vdCBjcmVhdGUgYHRoaXNgIGZyb20gaXRcclxudmFyIE5FV19UQVJHRVRfQlVHID0gZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cclxuICByZXR1cm4gIShyQ29uc3RydWN0KGZ1bmN0aW9uICgpIHsgLyogZW1wdHkgKi8gfSwgW10sIEYpIGluc3RhbmNlb2YgRik7XHJcbn0pO1xyXG52YXIgQVJHU19CVUcgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xyXG4gIHJDb25zdHJ1Y3QoZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9KTtcclxufSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIChORVdfVEFSR0VUX0JVRyB8fCBBUkdTX0JVRyksICdSZWZsZWN0Jywge1xyXG4gIGNvbnN0cnVjdDogZnVuY3Rpb24gY29uc3RydWN0KFRhcmdldCwgYXJncyAvKiAsIG5ld1RhcmdldCAqLykge1xyXG4gICAgYUZ1bmN0aW9uKFRhcmdldCk7XHJcbiAgICBhbk9iamVjdChhcmdzKTtcclxuICAgIHZhciBuZXdUYXJnZXQgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IFRhcmdldCA6IGFGdW5jdGlvbihhcmd1bWVudHNbMl0pO1xyXG4gICAgaWYgKEFSR1NfQlVHICYmICFORVdfVEFSR0VUX0JVRykgcmV0dXJuIHJDb25zdHJ1Y3QoVGFyZ2V0LCBhcmdzLCBuZXdUYXJnZXQpO1xyXG4gICAgaWYgKFRhcmdldCA9PSBuZXdUYXJnZXQpIHtcclxuICAgICAgLy8gdy9vIGFsdGVyZWQgbmV3VGFyZ2V0LCBvcHRpbWl6YXRpb24gZm9yIDAtNCBhcmd1bWVudHNcclxuICAgICAgc3dpdGNoIChhcmdzLmxlbmd0aCkge1xyXG4gICAgICAgIGNhc2UgMDogcmV0dXJuIG5ldyBUYXJnZXQoKTtcclxuICAgICAgICBjYXNlIDE6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0pO1xyXG4gICAgICAgIGNhc2UgMjogcmV0dXJuIG5ldyBUYXJnZXQoYXJnc1swXSwgYXJnc1sxXSk7XHJcbiAgICAgICAgY2FzZSAzOiByZXR1cm4gbmV3IFRhcmdldChhcmdzWzBdLCBhcmdzWzFdLCBhcmdzWzJdKTtcclxuICAgICAgICBjYXNlIDQ6IHJldHVybiBuZXcgVGFyZ2V0KGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0sIGFyZ3NbM10pO1xyXG4gICAgICB9XHJcbiAgICAgIC8vIHcvbyBhbHRlcmVkIG5ld1RhcmdldCwgbG90IG9mIGFyZ3VtZW50cyBjYXNlXHJcbiAgICAgIHZhciAkYXJncyA9IFtudWxsXTtcclxuICAgICAgJGFyZ3MucHVzaC5hcHBseSgkYXJncywgYXJncyk7XHJcbiAgICAgIHJldHVybiBuZXcgKGJpbmQuYXBwbHkoVGFyZ2V0LCAkYXJncykpKCk7XHJcbiAgICB9XHJcbiAgICAvLyB3aXRoIGFsdGVyZWQgbmV3VGFyZ2V0LCBub3Qgc3VwcG9ydCBidWlsdC1pbiBjb25zdHJ1Y3RvcnNcclxuICAgIHZhciBwcm90byA9IG5ld1RhcmdldC5wcm90b3R5cGU7XHJcbiAgICB2YXIgaW5zdGFuY2UgPSBjcmVhdGUoaXNPYmplY3QocHJvdG8pID8gcHJvdG8gOiBPYmplY3QucHJvdG90eXBlKTtcclxuICAgIHZhciByZXN1bHQgPSBGdW5jdGlvbi5hcHBseS5jYWxsKFRhcmdldCwgaW5zdGFuY2UsIGFyZ3MpO1xyXG4gICAgcmV0dXJuIGlzT2JqZWN0KHJlc3VsdCkgPyByZXN1bHQgOiBpbnN0YW5jZTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjMgUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKVxyXG52YXIgZFAgPSByZXF1aXJlKCcuL19vYmplY3QtZHAnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG5cclxuLy8gTVMgRWRnZSBoYXMgYnJva2VuIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkgLSB0aHJvd2luZyBpbnN0ZWFkIG9mIHJldHVybmluZyBmYWxzZVxyXG4kZXhwb3J0KCRleHBvcnQuUyArICRleHBvcnQuRiAqIHJlcXVpcmUoJy4vX2ZhaWxzJykoZnVuY3Rpb24gKCkge1xyXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxyXG4gIFJlZmxlY3QuZGVmaW5lUHJvcGVydHkoZFAuZih7fSwgMSwgeyB2YWx1ZTogMSB9KSwgMSwgeyB2YWx1ZTogMiB9KTtcclxufSksICdSZWZsZWN0Jywge1xyXG4gIGRlZmluZVByb3BlcnR5OiBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xyXG4gICAgcHJvcGVydHlLZXkgPSB0b1ByaW1pdGl2ZShwcm9wZXJ0eUtleSwgdHJ1ZSk7XHJcbiAgICBhbk9iamVjdChhdHRyaWJ1dGVzKTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGRQLmYodGFyZ2V0LCBwcm9wZXJ0eUtleSwgYXR0cmlidXRlcyk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjYuMS40IFJlZmxlY3QuZGVsZXRlUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eUtleSlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIGRlbGV0ZVByb3BlcnR5OiBmdW5jdGlvbiBkZWxldGVQcm9wZXJ0eSh0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICB2YXIgZGVzYyA9IGdPUEQoYW5PYmplY3QodGFyZ2V0KSwgcHJvcGVydHlLZXkpO1xyXG4gICAgcmV0dXJuIGRlc2MgJiYgIWRlc2MuY29uZmlndXJhYmxlID8gZmFsc2UgOiBkZWxldGUgdGFyZ2V0W3Byb3BlcnR5S2V5XTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbi8vIDI2LjEuNSBSZWZsZWN0LmVudW1lcmF0ZSh0YXJnZXQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgRW51bWVyYXRlID0gZnVuY3Rpb24gKGl0ZXJhdGVkKSB7XHJcbiAgdGhpcy5fdCA9IGFuT2JqZWN0KGl0ZXJhdGVkKTsgLy8gdGFyZ2V0XHJcbiAgdGhpcy5faSA9IDA7ICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxyXG4gIHZhciBrZXlzID0gdGhpcy5fayA9IFtdOyAgICAgIC8vIGtleXNcclxuICB2YXIga2V5O1xyXG4gIGZvciAoa2V5IGluIGl0ZXJhdGVkKSBrZXlzLnB1c2goa2V5KTtcclxufTtcclxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKShFbnVtZXJhdGUsICdPYmplY3QnLCBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gIHZhciBrZXlzID0gdGhhdC5faztcclxuICB2YXIga2V5O1xyXG4gIGRvIHtcclxuICAgIGlmICh0aGF0Ll9pID49IGtleXMubGVuZ3RoKSByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XHJcbiAgfSB3aGlsZSAoISgoa2V5ID0ga2V5c1t0aGF0Ll9pKytdKSBpbiB0aGF0Ll90KSk7XHJcbiAgcmV0dXJuIHsgdmFsdWU6IGtleSwgZG9uZTogZmFsc2UgfTtcclxufSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgZW51bWVyYXRlOiBmdW5jdGlvbiBlbnVtZXJhdGUodGFyZ2V0KSB7XHJcbiAgICByZXR1cm4gbmV3IEVudW1lcmF0ZSh0YXJnZXQpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuNiBSZWZsZWN0LmdldCh0YXJnZXQsIHByb3BlcnR5S2V5IFssIHJlY2VpdmVyXSlcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBoYXMgPSByZXF1aXJlKCcuL19oYXMnKTtcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9faXMtb2JqZWN0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG5cclxuZnVuY3Rpb24gZ2V0KHRhcmdldCwgcHJvcGVydHlLZXkgLyogLCByZWNlaXZlciAqLykge1xyXG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdGFyZ2V0IDogYXJndW1lbnRzWzJdO1xyXG4gIHZhciBkZXNjLCBwcm90bztcclxuICBpZiAoYW5PYmplY3QodGFyZ2V0KSA9PT0gcmVjZWl2ZXIpIHJldHVybiB0YXJnZXRbcHJvcGVydHlLZXldO1xyXG4gIGlmIChkZXNjID0gZ09QRC5mKHRhcmdldCwgcHJvcGVydHlLZXkpKSByZXR1cm4gaGFzKGRlc2MsICd2YWx1ZScpXHJcbiAgICA/IGRlc2MudmFsdWVcclxuICAgIDogZGVzYy5nZXQgIT09IHVuZGVmaW5lZFxyXG4gICAgICA/IGRlc2MuZ2V0LmNhbGwocmVjZWl2ZXIpXHJcbiAgICAgIDogdW5kZWZpbmVkO1xyXG4gIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSByZXR1cm4gZ2V0KHByb3RvLCBwcm9wZXJ0eUtleSwgcmVjZWl2ZXIpO1xyXG59XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IGdldDogZ2V0IH0pO1xyXG4iLCIvLyAyNi4xLjcgUmVmbGVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBwcm9wZXJ0eUtleSlcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcclxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIHByb3BlcnR5S2V5KSB7XHJcbiAgICByZXR1cm4gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyAyNi4xLjggUmVmbGVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBnZXRQcm90byA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgZ2V0UHJvdG90eXBlT2Y6IGZ1bmN0aW9uIGdldFByb3RvdHlwZU9mKHRhcmdldCkge1xyXG4gICAgcmV0dXJuIGdldFByb3RvKGFuT2JqZWN0KHRhcmdldCkpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuOSBSZWZsZWN0Lmhhcyh0YXJnZXQsIHByb3BlcnR5S2V5KVxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdSZWZsZWN0Jywge1xyXG4gIGhhczogZnVuY3Rpb24gaGFzKHRhcmdldCwgcHJvcGVydHlLZXkpIHtcclxuICAgIHJldHVybiBwcm9wZXJ0eUtleSBpbiB0YXJnZXQ7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gMjYuMS4xMCBSZWZsZWN0LmlzRXh0ZW5zaWJsZSh0YXJnZXQpXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgJGlzRXh0ZW5zaWJsZSA9IE9iamVjdC5pc0V4dGVuc2libGU7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgaXNFeHRlbnNpYmxlOiBmdW5jdGlvbiBpc0V4dGVuc2libGUodGFyZ2V0KSB7XHJcbiAgICBhbk9iamVjdCh0YXJnZXQpO1xyXG4gICAgcmV0dXJuICRpc0V4dGVuc2libGUgPyAkaXNFeHRlbnNpYmxlKHRhcmdldCkgOiB0cnVlO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuMTEgUmVmbGVjdC5vd25LZXlzKHRhcmdldClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHsgb3duS2V5czogcmVxdWlyZSgnLi9fb3duLWtleXMnKSB9KTtcclxuIiwiLy8gMjYuMS4xMiBSZWZsZWN0LnByZXZlbnRFeHRlbnNpb25zKHRhcmdldClcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciAkcHJldmVudEV4dGVuc2lvbnMgPSBPYmplY3QucHJldmVudEV4dGVuc2lvbnM7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7XHJcbiAgcHJldmVudEV4dGVuc2lvbnM6IGZ1bmN0aW9uIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xyXG4gICAgYW5PYmplY3QodGFyZ2V0KTtcclxuICAgIHRyeSB7XHJcbiAgICAgIGlmICgkcHJldmVudEV4dGVuc2lvbnMpICRwcmV2ZW50RXh0ZW5zaW9ucyh0YXJnZXQpO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcbiIsIi8vIDI2LjEuMTMgUmVmbGVjdC5zZXQodGFyZ2V0LCBwcm9wZXJ0eUtleSwgViBbLCByZWNlaXZlcl0pXHJcbnZhciBkUCA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG52YXIgZ09QRCA9IHJlcXVpcmUoJy4vX29iamVjdC1nb3BkJyk7XHJcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIGhhcyA9IHJlcXVpcmUoJy4vX2hhcycpO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgY3JlYXRlRGVzYyA9IHJlcXVpcmUoJy4vX3Byb3BlcnR5LWRlc2MnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4vX2lzLW9iamVjdCcpO1xyXG5cclxuZnVuY3Rpb24gc2V0KHRhcmdldCwgcHJvcGVydHlLZXksIFYgLyogLCByZWNlaXZlciAqLykge1xyXG4gIHZhciByZWNlaXZlciA9IGFyZ3VtZW50cy5sZW5ndGggPCA0ID8gdGFyZ2V0IDogYXJndW1lbnRzWzNdO1xyXG4gIHZhciBvd25EZXNjID0gZ09QRC5mKGFuT2JqZWN0KHRhcmdldCksIHByb3BlcnR5S2V5KTtcclxuICB2YXIgZXhpc3RpbmdEZXNjcmlwdG9yLCBwcm90bztcclxuICBpZiAoIW93bkRlc2MpIHtcclxuICAgIGlmIChpc09iamVjdChwcm90byA9IGdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XHJcbiAgICAgIHJldHVybiBzZXQocHJvdG8sIHByb3BlcnR5S2V5LCBWLCByZWNlaXZlcik7XHJcbiAgICB9XHJcbiAgICBvd25EZXNjID0gY3JlYXRlRGVzYygwKTtcclxuICB9XHJcbiAgaWYgKGhhcyhvd25EZXNjLCAndmFsdWUnKSkge1xyXG4gICAgaWYgKG93bkRlc2Mud3JpdGFibGUgPT09IGZhbHNlIHx8ICFpc09iamVjdChyZWNlaXZlcikpIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChleGlzdGluZ0Rlc2NyaXB0b3IgPSBnT1BELmYocmVjZWl2ZXIsIHByb3BlcnR5S2V5KSkge1xyXG4gICAgICBpZiAoZXhpc3RpbmdEZXNjcmlwdG9yLmdldCB8fCBleGlzdGluZ0Rlc2NyaXB0b3Iuc2V0IHx8IGV4aXN0aW5nRGVzY3JpcHRvci53cml0YWJsZSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcclxuICAgICAgZXhpc3RpbmdEZXNjcmlwdG9yLnZhbHVlID0gVjtcclxuICAgICAgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGV4aXN0aW5nRGVzY3JpcHRvcik7XHJcbiAgICB9IGVsc2UgZFAuZihyZWNlaXZlciwgcHJvcGVydHlLZXksIGNyZWF0ZURlc2MoMCwgVikpO1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG4gIHJldHVybiBvd25EZXNjLnNldCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAob3duRGVzYy5zZXQuY2FsbChyZWNlaXZlciwgViksIHRydWUpO1xyXG59XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZmxlY3QnLCB7IHNldDogc2V0IH0pO1xyXG4iLCIvLyAyNi4xLjE0IFJlZmxlY3Quc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bylcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHNldFByb3RvID0gcmVxdWlyZSgnLi9fc2V0LXByb3RvJyk7XHJcblxyXG5pZiAoc2V0UHJvdG8pICRleHBvcnQoJGV4cG9ydC5TLCAnUmVmbGVjdCcsIHtcclxuICBzZXRQcm90b3R5cGVPZjogZnVuY3Rpb24gc2V0UHJvdG90eXBlT2YodGFyZ2V0LCBwcm90bykge1xyXG4gICAgc2V0UHJvdG8uY2hlY2sodGFyZ2V0LCBwcm90byk7XHJcbiAgICB0cnkge1xyXG4gICAgICBzZXRQcm90by5zZXQodGFyZ2V0LCBwcm90byk7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9BcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRpbmNsdWRlcyA9IHJlcXVpcmUoJy4vX2FycmF5LWluY2x1ZGVzJykodHJ1ZSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ0FycmF5Jywge1xyXG4gIGluY2x1ZGVzOiBmdW5jdGlvbiBpbmNsdWRlcyhlbCAvKiAsIGZyb21JbmRleCA9IDAgKi8pIHtcclxuICAgIHJldHVybiAkaW5jbHVkZXModGhpcywgZWwsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkKTtcclxuICB9XHJcbn0pO1xyXG5cclxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2luY2x1ZGVzJyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1mbGF0TWFwLyNzZWMtQXJyYXkucHJvdG90eXBlLmZsYXRNYXBcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGZsYXR0ZW5JbnRvQXJyYXkgPSByZXF1aXJlKCcuL19mbGF0dGVuLWludG8tYXJyYXknKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4vX3RvLWxlbmd0aCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgYXJyYXlTcGVjaWVzQ3JlYXRlID0gcmVxdWlyZSgnLi9fYXJyYXktc3BlY2llcy1jcmVhdGUnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnQXJyYXknLCB7XHJcbiAgZmxhdE1hcDogZnVuY3Rpb24gZmxhdE1hcChjYWxsYmFja2ZuIC8qICwgdGhpc0FyZyAqLykge1xyXG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcclxuICAgIHZhciBzb3VyY2VMZW4sIEE7XHJcbiAgICBhRnVuY3Rpb24oY2FsbGJhY2tmbik7XHJcbiAgICBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgICBBID0gYXJyYXlTcGVjaWVzQ3JlYXRlKE8sIDApO1xyXG4gICAgZmxhdHRlbkludG9BcnJheShBLCBPLCBPLCBzb3VyY2VMZW4sIDAsIDEsIGNhbGxiYWNrZm4sIGFyZ3VtZW50c1sxXSk7XHJcbiAgICByZXR1cm4gQTtcclxuICB9XHJcbn0pO1xyXG5cclxucmVxdWlyZSgnLi9fYWRkLXRvLXVuc2NvcGFibGVzJykoJ2ZsYXRNYXAnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLWZsYXRNYXAvI3NlYy1BcnJheS5wcm90b3R5cGUuZmxhdHRlblxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgZmxhdHRlbkludG9BcnJheSA9IHJlcXVpcmUoJy4vX2ZsYXR0ZW4taW50by1hcnJheScpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi9fdG8tbGVuZ3RoJyk7XHJcbnZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuL190by1pbnRlZ2VyJyk7XHJcbnZhciBhcnJheVNwZWNpZXNDcmVhdGUgPSByZXF1aXJlKCcuL19hcnJheS1zcGVjaWVzLWNyZWF0ZScpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAsICdBcnJheScsIHtcclxuICBmbGF0dGVuOiBmdW5jdGlvbiBmbGF0dGVuKC8qIGRlcHRoQXJnID0gMSAqLykge1xyXG4gICAgdmFyIGRlcHRoQXJnID0gYXJndW1lbnRzWzBdO1xyXG4gICAgdmFyIE8gPSB0b09iamVjdCh0aGlzKTtcclxuICAgIHZhciBzb3VyY2VMZW4gPSB0b0xlbmd0aChPLmxlbmd0aCk7XHJcbiAgICB2YXIgQSA9IGFycmF5U3BlY2llc0NyZWF0ZShPLCAwKTtcclxuICAgIGZsYXR0ZW5JbnRvQXJyYXkoQSwgTywgTywgc291cmNlTGVuLCAwLCBkZXB0aEFyZyA9PT0gdW5kZWZpbmVkID8gMSA6IHRvSW50ZWdlcihkZXB0aEFyZykpO1xyXG4gICAgcmV0dXJuIEE7XHJcbiAgfVxyXG59KTtcclxuXHJcbnJlcXVpcmUoJy4vX2FkZC10by11bnNjb3BhYmxlcycpKCdmbGF0dGVuJyk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hdGhpYXNieW5lbnMvU3RyaW5nLnByb3RvdHlwZS5hdFxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJGF0ID0gcmVxdWlyZSgnLi9fc3RyaW5nLWF0JykodHJ1ZSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCwgJ1N0cmluZycsIHtcclxuICBhdDogZnVuY3Rpb24gYXQocG9zKSB7XHJcbiAgICByZXR1cm4gJGF0KHRoaXMsIHBvcyk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcclxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcclxuXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcclxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcclxuICBwYWRTdGFydDogZnVuY3Rpb24gcGFkU3RhcnQobWF4TGVuZ3RoIC8qICwgZmlsbFN0cmluZyA9ICcgJyAqLykge1xyXG4gICAgcmV0dXJuICRwYWQodGhpcywgbWF4TGVuZ3RoLCBhcmd1bWVudHMubGVuZ3RoID4gMSA/IGFyZ3VtZW50c1sxXSA6IHVuZGVmaW5lZCwgdHJ1ZSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zdHJpbmctcGFkLXN0YXJ0LWVuZFxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHBhZCA9IHJlcXVpcmUoJy4vX3N0cmluZy1wYWQnKTtcclxudmFyIHVzZXJBZ2VudCA9IHJlcXVpcmUoJy4vX3VzZXItYWdlbnQnKTtcclxuXHJcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy8yODBcclxudmFyIFdFQktJVF9CVUcgPSAvVmVyc2lvblxcLzEwXFwuXFxkKyhcXC5cXGQrKT8oIE1vYmlsZVxcL1xcdyspPyBTYWZhcmlcXC8vLnRlc3QodXNlckFnZW50KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5GICogV0VCS0lUX0JVRywgJ1N0cmluZycsIHtcclxuICBwYWRFbmQ6IGZ1bmN0aW9uIHBhZEVuZChtYXhMZW5ndGggLyogLCBmaWxsU3RyaW5nID0gJyAnICovKSB7XHJcbiAgICByZXR1cm4gJHBhZCh0aGlzLCBtYXhMZW5ndGgsIGFyZ3VtZW50cy5sZW5ndGggPiAxID8gYXJndW1lbnRzWzFdIDogdW5kZWZpbmVkLCBmYWxzZSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXHJcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1MZWZ0JywgZnVuY3Rpb24gKCR0cmltKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIHRyaW1MZWZ0KCkge1xyXG4gICAgcmV0dXJuICR0cmltKHRoaXMsIDEpO1xyXG4gIH07XHJcbn0sICd0cmltU3RhcnQnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2VibWFya2JhZ2UvZWNtYXNjcmlwdC1zdHJpbmctbGVmdC1yaWdodC10cmltXHJcbnJlcXVpcmUoJy4vX3N0cmluZy10cmltJykoJ3RyaW1SaWdodCcsIGZ1bmN0aW9uICgkdHJpbSkge1xyXG4gIHJldHVybiBmdW5jdGlvbiB0cmltUmlnaHQoKSB7XHJcbiAgICByZXR1cm4gJHRyaW0odGhpcywgMik7XHJcbiAgfTtcclxufSwgJ3RyaW1FbmQnKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL1N0cmluZy5wcm90b3R5cGUubWF0Y2hBbGwvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBkZWZpbmVkID0gcmVxdWlyZSgnLi9fZGVmaW5lZCcpO1xyXG52YXIgdG9MZW5ndGggPSByZXF1aXJlKCcuL190by1sZW5ndGgnKTtcclxudmFyIGlzUmVnRXhwID0gcmVxdWlyZSgnLi9faXMtcmVnZXhwJyk7XHJcbnZhciBnZXRGbGFncyA9IHJlcXVpcmUoJy4vX2ZsYWdzJyk7XHJcbnZhciBSZWdFeHBQcm90byA9IFJlZ0V4cC5wcm90b3R5cGU7XHJcblxyXG52YXIgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yID0gZnVuY3Rpb24gKHJlZ2V4cCwgc3RyaW5nKSB7XHJcbiAgdGhpcy5fciA9IHJlZ2V4cDtcclxuICB0aGlzLl9zID0gc3RyaW5nO1xyXG59O1xyXG5cclxucmVxdWlyZSgnLi9faXRlci1jcmVhdGUnKSgkUmVnRXhwU3RyaW5nSXRlcmF0b3IsICdSZWdFeHAgU3RyaW5nJywgZnVuY3Rpb24gbmV4dCgpIHtcclxuICB2YXIgbWF0Y2ggPSB0aGlzLl9yLmV4ZWModGhpcy5fcyk7XHJcbiAgcmV0dXJuIHsgdmFsdWU6IG1hdGNoLCBkb25lOiBtYXRjaCA9PT0gbnVsbCB9O1xyXG59KTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QLCAnU3RyaW5nJywge1xyXG4gIG1hdGNoQWxsOiBmdW5jdGlvbiBtYXRjaEFsbChyZWdleHApIHtcclxuICAgIGRlZmluZWQodGhpcyk7XHJcbiAgICBpZiAoIWlzUmVnRXhwKHJlZ2V4cCkpIHRocm93IFR5cGVFcnJvcihyZWdleHAgKyAnIGlzIG5vdCBhIHJlZ2V4cCEnKTtcclxuICAgIHZhciBTID0gU3RyaW5nKHRoaXMpO1xyXG4gICAgdmFyIGZsYWdzID0gJ2ZsYWdzJyBpbiBSZWdFeHBQcm90byA/IFN0cmluZyhyZWdleHAuZmxhZ3MpIDogZ2V0RmxhZ3MuY2FsbChyZWdleHApO1xyXG4gICAgdmFyIHJ4ID0gbmV3IFJlZ0V4cChyZWdleHAuc291cmNlLCB+ZmxhZ3MuaW5kZXhPZignZycpID8gZmxhZ3MgOiAnZycgKyBmbGFncyk7XHJcbiAgICByeC5sYXN0SW5kZXggPSB0b0xlbmd0aChyZWdleHAubGFzdEluZGV4KTtcclxuICAgIHJldHVybiBuZXcgJFJlZ0V4cFN0cmluZ0l0ZXJhdG9yKHJ4LCBTKTtcclxuICB9XHJcbn0pO1xyXG4iLCJyZXF1aXJlKCcuL193a3MtZGVmaW5lJykoJ2FzeW5jSXRlcmF0b3InKTtcclxuIiwicmVxdWlyZSgnLi9fd2tzLWRlZmluZScpKCdvYnNlcnZhYmxlJyk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC1nZXRvd25wcm9wZXJ0eWRlc2NyaXB0b3JzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBvd25LZXlzID0gcmVxdWlyZSgnLi9fb3duLWtleXMnKTtcclxudmFyIHRvSU9iamVjdCA9IHJlcXVpcmUoJy4vX3RvLWlvYmplY3QnKTtcclxudmFyIGdPUEQgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpO1xyXG52YXIgY3JlYXRlUHJvcGVydHkgPSByZXF1aXJlKCcuL19jcmVhdGUtcHJvcGVydHknKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xyXG4gIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnM6IGZ1bmN0aW9uIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqZWN0KSB7XHJcbiAgICB2YXIgTyA9IHRvSU9iamVjdChvYmplY3QpO1xyXG4gICAgdmFyIGdldERlc2MgPSBnT1BELmY7XHJcbiAgICB2YXIga2V5cyA9IG93bktleXMoTyk7XHJcbiAgICB2YXIgcmVzdWx0ID0ge307XHJcbiAgICB2YXIgaSA9IDA7XHJcbiAgICB2YXIga2V5LCBkZXNjO1xyXG4gICAgd2hpbGUgKGtleXMubGVuZ3RoID4gaSkge1xyXG4gICAgICBkZXNjID0gZ2V0RGVzYyhPLCBrZXkgPSBrZXlzW2krK10pO1xyXG4gICAgICBpZiAoZGVzYyAhPT0gdW5kZWZpbmVkKSBjcmVhdGVQcm9wZXJ0eShyZXN1bHQsIGtleSwgZGVzYyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90YzM5L3Byb3Bvc2FsLW9iamVjdC12YWx1ZXMtZW50cmllc1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHZhbHVlcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKGZhbHNlKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnT2JqZWN0Jywge1xyXG4gIHZhbHVlczogZnVuY3Rpb24gdmFsdWVzKGl0KSB7XHJcbiAgICByZXR1cm4gJHZhbHVlcyhpdCk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtb2JqZWN0LXZhbHVlcy1lbnRyaWVzXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciAkZW50cmllcyA9IHJlcXVpcmUoJy4vX29iamVjdC10by1hcnJheScpKHRydWUpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdPYmplY3QnLCB7XHJcbiAgZW50cmllczogZnVuY3Rpb24gZW50cmllcyhpdCkge1xyXG4gICAgcmV0dXJuICRlbnRyaWVzKGl0KTtcclxuICB9XHJcbn0pO1xyXG4iLCIndXNlIHN0cmljdCc7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB0b09iamVjdCA9IHJlcXVpcmUoJy4vX3RvLW9iamVjdCcpO1xyXG52YXIgYUZ1bmN0aW9uID0gcmVxdWlyZSgnLi9fYS1mdW5jdGlvbicpO1xyXG52YXIgJGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZSgnLi9fb2JqZWN0LWRwJyk7XHJcblxyXG4vLyBCLjIuMi4yIE9iamVjdC5wcm90b3R5cGUuX19kZWZpbmVHZXR0ZXJfXyhQLCBnZXR0ZXIpXHJcbnJlcXVpcmUoJy4vX2Rlc2NyaXB0b3JzJykgJiYgJGV4cG9ydCgkZXhwb3J0LlAgKyByZXF1aXJlKCcuL19vYmplY3QtZm9yY2VkLXBhbScpLCAnT2JqZWN0Jywge1xyXG4gIF9fZGVmaW5lR2V0dGVyX186IGZ1bmN0aW9uIF9fZGVmaW5lR2V0dGVyX18oUCwgZ2V0dGVyKSB7XHJcbiAgICAkZGVmaW5lUHJvcGVydHkuZih0b09iamVjdCh0aGlzKSwgUCwgeyBnZXQ6IGFGdW5jdGlvbihnZXR0ZXIpLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSk7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuL190by1vYmplY3QnKTtcclxudmFyIGFGdW5jdGlvbiA9IHJlcXVpcmUoJy4vX2EtZnVuY3Rpb24nKTtcclxudmFyICRkZWZpbmVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4vX29iamVjdC1kcCcpO1xyXG5cclxuLy8gQi4yLjIuMyBPYmplY3QucHJvdG90eXBlLl9fZGVmaW5lU2V0dGVyX18oUCwgc2V0dGVyKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2RlZmluZVNldHRlcl9fOiBmdW5jdGlvbiBfX2RlZmluZVNldHRlcl9fKFAsIHNldHRlcikge1xyXG4gICAgJGRlZmluZVByb3BlcnR5LmYodG9PYmplY3QodGhpcyksIFAsIHsgc2V0OiBhRnVuY3Rpb24oc2V0dGVyKSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0pO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XHJcblxyXG4vLyBCLjIuMi40IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBHZXR0ZXJfXyhQKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2xvb2t1cEdldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cEdldHRlcl9fKFApIHtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xyXG4gICAgdmFyIEQ7XHJcbiAgICBkbyB7XHJcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5nZXQ7XHJcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xyXG4gIH1cclxufSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHRvT2JqZWN0ID0gcmVxdWlyZSgnLi9fdG8tb2JqZWN0Jyk7XHJcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4vX3RvLXByaW1pdGl2ZScpO1xyXG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuL19vYmplY3QtZ3BvJyk7XHJcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuL19vYmplY3QtZ29wZCcpLmY7XHJcblxyXG4vLyBCLjIuMi41IE9iamVjdC5wcm90b3R5cGUuX19sb29rdXBTZXR0ZXJfXyhQKVxyXG5yZXF1aXJlKCcuL19kZXNjcmlwdG9ycycpICYmICRleHBvcnQoJGV4cG9ydC5QICsgcmVxdWlyZSgnLi9fb2JqZWN0LWZvcmNlZC1wYW0nKSwgJ09iamVjdCcsIHtcclxuICBfX2xvb2t1cFNldHRlcl9fOiBmdW5jdGlvbiBfX2xvb2t1cFNldHRlcl9fKFApIHtcclxuICAgIHZhciBPID0gdG9PYmplY3QodGhpcyk7XHJcbiAgICB2YXIgSyA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xyXG4gICAgdmFyIEQ7XHJcbiAgICBkbyB7XHJcbiAgICAgIGlmIChEID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIEspKSByZXR1cm4gRC5zZXQ7XHJcbiAgICB9IHdoaWxlIChPID0gZ2V0UHJvdG90eXBlT2YoTykpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9EYXZpZEJydWFudC9NYXAtU2V0LnByb3RvdHlwZS50b0pTT05cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5QICsgJGV4cG9ydC5SLCAnTWFwJywgeyB0b0pTT046IHJlcXVpcmUoJy4vX2NvbGxlY3Rpb24tdG8tanNvbicpKCdNYXAnKSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL0RhdmlkQnJ1YW50L01hcC1TZXQucHJvdG90eXBlLnRvSlNPTlxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlAgKyAkZXhwb3J0LlIsICdTZXQnLCB7IHRvSlNPTjogcmVxdWlyZSgnLi9fY29sbGVjdGlvbi10by1qc29uJykoJ1NldCcpIH0pO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAub2ZcclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnTWFwJyk7XHJcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXNldC5vZlxyXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdTZXQnKTtcclxuIiwiLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9wcm9wb3NhbC1zZXRtYXAtb2Zmcm9tLyNzZWMtd2Vha21hcC5vZlxyXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1vZicpKCdXZWFrTWFwJyk7XHJcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQub2ZcclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tb2YnKSgnV2Vha1NldCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1tYXAuZnJvbVxyXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ01hcCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy1zZXQuZnJvbVxyXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1NldCcpO1xyXG4iLCIvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL3Byb3Bvc2FsLXNldG1hcC1vZmZyb20vI3NlYy13ZWFrbWFwLmZyb21cclxucmVxdWlyZSgnLi9fc2V0LWNvbGxlY3Rpb24tZnJvbScpKCdXZWFrTWFwJyk7XHJcbiIsIi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vcHJvcG9zYWwtc2V0bWFwLW9mZnJvbS8jc2VjLXdlYWtzZXQuZnJvbVxyXG5yZXF1aXJlKCcuL19zZXQtY29sbGVjdGlvbi1mcm9tJykoJ1dlYWtTZXQnKTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtZ2xvYmFsXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuRywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1nbG9iYWxcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnU3lzdGVtJywgeyBnbG9iYWw6IHJlcXVpcmUoJy4vX2dsb2JhbCcpIH0pO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vbGpoYXJiL3Byb3Bvc2FsLWlzLWVycm9yXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBjb2YgPSByZXF1aXJlKCcuL19jb2YnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnRXJyb3InLCB7XHJcbiAgaXNFcnJvcjogZnVuY3Rpb24gaXNFcnJvcihpdCkge1xyXG4gICAgcmV0dXJuIGNvZihpdCkgPT09ICdFcnJvcic7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9yd2FsZHJvbi5naXRodWIuaW8vcHJvcG9zYWwtbWF0aC1leHRlbnNpb25zL1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGNsYW1wOiBmdW5jdGlvbiBjbGFtcCh4LCBsb3dlciwgdXBwZXIpIHtcclxuICAgIHJldHVybiBNYXRoLm1pbih1cHBlciwgTWF0aC5tYXgobG93ZXIsIHgpKTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IERFR19QRVJfUkFEOiBNYXRoLlBJIC8gMTgwIH0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBSQURfUEVSX0RFRyA9IDE4MCAvIE1hdGguUEk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgZGVncmVlczogZnVuY3Rpb24gZGVncmVlcyhyYWRpYW5zKSB7XHJcbiAgICByZXR1cm4gcmFkaWFucyAqIFJBRF9QRVJfREVHO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIHNjYWxlID0gcmVxdWlyZSgnLi9fbWF0aC1zY2FsZScpO1xyXG52YXIgZnJvdW5kID0gcmVxdWlyZSgnLi9fbWF0aC1mcm91bmQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBmc2NhbGU6IGZ1bmN0aW9uIGZzY2FsZSh4LCBpbkxvdywgaW5IaWdoLCBvdXRMb3csIG91dEhpZ2gpIHtcclxuICAgIHJldHVybiBmcm91bmQoc2NhbGUoeCwgaW5Mb3csIGluSGlnaCwgb3V0TG93LCBvdXRIaWdoKSk7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBpYWRkaDogZnVuY3Rpb24gaWFkZGgoeDAsIHgxLCB5MCwgeTEpIHtcclxuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcclxuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcclxuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcclxuICAgIHJldHVybiAkeDEgKyAoeTEgPj4+IDApICsgKCgkeDAgJiAkeTAgfCAoJHgwIHwgJHkwKSAmIH4oJHgwICsgJHkwID4+PiAwKSkgPj4+IDMxKSB8IDA7XHJcbiAgfVxyXG59KTtcclxuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICBpc3ViaDogZnVuY3Rpb24gaXN1YmgoeDAsIHgxLCB5MCwgeTEpIHtcclxuICAgIHZhciAkeDAgPSB4MCA+Pj4gMDtcclxuICAgIHZhciAkeDEgPSB4MSA+Pj4gMDtcclxuICAgIHZhciAkeTAgPSB5MCA+Pj4gMDtcclxuICAgIHJldHVybiAkeDEgLSAoeTEgPj4+IDApIC0gKCh+JHgwICYgJHkwIHwgfigkeDAgXiAkeTApICYgJHgwIC0gJHkwID4+PiAwKSA+Pj4gMzEpIHwgMDtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9CcmVuZGFuRWljaC80Mjk0ZDVjMjEyYTZkMjI1NDcwM1xyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywge1xyXG4gIGltdWxoOiBmdW5jdGlvbiBpbXVsaCh1LCB2KSB7XHJcbiAgICB2YXIgVUlOVDE2ID0gMHhmZmZmO1xyXG4gICAgdmFyICR1ID0gK3U7XHJcbiAgICB2YXIgJHYgPSArdjtcclxuICAgIHZhciB1MCA9ICR1ICYgVUlOVDE2O1xyXG4gICAgdmFyIHYwID0gJHYgJiBVSU5UMTY7XHJcbiAgICB2YXIgdTEgPSAkdSA+PiAxNjtcclxuICAgIHZhciB2MSA9ICR2ID4+IDE2O1xyXG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xyXG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+PiAxNikgKyAoKHUwICogdjEgPj4+IDApICsgKHQgJiBVSU5UMTYpID4+IDE2KTtcclxuICB9XHJcbn0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7IFJBRF9QRVJfREVHOiAxODAgLyBNYXRoLlBJIH0pO1xyXG4iLCIvLyBodHRwczovL3J3YWxkcm9uLmdpdGh1Yi5pby9wcm9wb3NhbC1tYXRoLWV4dGVuc2lvbnMvXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBERUdfUEVSX1JBRCA9IE1hdGguUEkgLyAxODA7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ01hdGgnLCB7XHJcbiAgcmFkaWFuczogZnVuY3Rpb24gcmFkaWFucyhkZWdyZWVzKSB7XHJcbiAgICByZXR1cm4gZGVncmVlcyAqIERFR19QRVJfUkFEO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHBzOi8vcndhbGRyb24uZ2l0aHViLmlvL3Byb3Bvc2FsLW1hdGgtZXh0ZW5zaW9ucy9cclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHsgc2NhbGU6IHJlcXVpcmUoJy4vX21hdGgtc2NhbGUnKSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vQnJlbmRhbkVpY2gvNDI5NGQ1YzIxMmE2ZDIyNTQ3MDNcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnTWF0aCcsIHtcclxuICB1bXVsaDogZnVuY3Rpb24gdW11bGgodSwgdikge1xyXG4gICAgdmFyIFVJTlQxNiA9IDB4ZmZmZjtcclxuICAgIHZhciAkdSA9ICt1O1xyXG4gICAgdmFyICR2ID0gK3Y7XHJcbiAgICB2YXIgdTAgPSAkdSAmIFVJTlQxNjtcclxuICAgIHZhciB2MCA9ICR2ICYgVUlOVDE2O1xyXG4gICAgdmFyIHUxID0gJHUgPj4+IDE2O1xyXG4gICAgdmFyIHYxID0gJHYgPj4+IDE2O1xyXG4gICAgdmFyIHQgPSAodTEgKiB2MCA+Pj4gMCkgKyAodTAgKiB2MCA+Pj4gMTYpO1xyXG4gICAgcmV0dXJuIHUxICogdjEgKyAodCA+Pj4gMTYpICsgKCh1MCAqIHYxID4+PiAwKSArICh0ICYgVUlOVDE2KSA+Pj4gMTYpO1xyXG4gIH1cclxufSk7XHJcbiIsIi8vIGh0dHA6Ly9qZmJhc3RpZW4uZ2l0aHViLmlvL3BhcGVycy9NYXRoLnNpZ25iaXQuaHRtbFxyXG52YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG5cclxuJGV4cG9ydCgkZXhwb3J0LlMsICdNYXRoJywgeyBzaWduYml0OiBmdW5jdGlvbiBzaWduYml0KHgpIHtcclxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXHJcbiAgcmV0dXJuICh4ID0gK3gpICE9IHggPyB4IDogeCA9PSAwID8gMSAvIHggPT0gSW5maW5pdHkgOiB4ID4gMDtcclxufSB9KTtcclxuIiwiLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS1maW5hbGx5XHJcbid1c2Ugc3RyaWN0JztcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIHNwZWNpZXNDb25zdHJ1Y3RvciA9IHJlcXVpcmUoJy4vX3NwZWNpZXMtY29uc3RydWN0b3InKTtcclxudmFyIHByb21pc2VSZXNvbHZlID0gcmVxdWlyZSgnLi9fcHJvbWlzZS1yZXNvbHZlJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUCArICRleHBvcnQuUiwgJ1Byb21pc2UnLCB7ICdmaW5hbGx5JzogZnVuY3Rpb24gKG9uRmluYWxseSkge1xyXG4gIHZhciBDID0gc3BlY2llc0NvbnN0cnVjdG9yKHRoaXMsIGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSk7XHJcbiAgdmFyIGlzRnVuY3Rpb24gPSB0eXBlb2Ygb25GaW5hbGx5ID09ICdmdW5jdGlvbic7XHJcbiAgcmV0dXJuIHRoaXMudGhlbihcclxuICAgIGlzRnVuY3Rpb24gPyBmdW5jdGlvbiAoeCkge1xyXG4gICAgICByZXR1cm4gcHJvbWlzZVJlc29sdmUoQywgb25GaW5hbGx5KCkpLnRoZW4oZnVuY3Rpb24gKCkgeyByZXR1cm4geDsgfSk7XHJcbiAgICB9IDogb25GaW5hbGx5LFxyXG4gICAgaXNGdW5jdGlvbiA/IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgIHJldHVybiBwcm9taXNlUmVzb2x2ZShDLCBvbkZpbmFsbHkoKSkudGhlbihmdW5jdGlvbiAoKSB7IHRocm93IGU7IH0pO1xyXG4gICAgfSA6IG9uRmluYWxseVxyXG4gICk7XHJcbn0gfSk7XHJcbiIsIid1c2Ugc3RyaWN0JztcclxuLy8gaHR0cHM6Ly9naXRodWIuY29tL3RjMzkvcHJvcG9zYWwtcHJvbWlzZS10cnlcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIG5ld1Byb21pc2VDYXBhYmlsaXR5ID0gcmVxdWlyZSgnLi9fbmV3LXByb21pc2UtY2FwYWJpbGl0eScpO1xyXG52YXIgcGVyZm9ybSA9IHJlcXVpcmUoJy4vX3BlcmZvcm0nKTtcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5TLCAnUHJvbWlzZScsIHsgJ3RyeSc6IGZ1bmN0aW9uIChjYWxsYmFja2ZuKSB7XHJcbiAgdmFyIHByb21pc2VDYXBhYmlsaXR5ID0gbmV3UHJvbWlzZUNhcGFiaWxpdHkuZih0aGlzKTtcclxuICB2YXIgcmVzdWx0ID0gcGVyZm9ybShjYWxsYmFja2ZuKTtcclxuICAocmVzdWx0LmUgPyBwcm9taXNlQ2FwYWJpbGl0eS5yZWplY3QgOiBwcm9taXNlQ2FwYWJpbGl0eS5yZXNvbHZlKShyZXN1bHQudik7XHJcbiAgcmV0dXJuIHByb21pc2VDYXBhYmlsaXR5LnByb21pc2U7XHJcbn0gfSk7XHJcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9IG1ldGFkYXRhLnNldDtcclxuXHJcbm1ldGFkYXRhLmV4cCh7IGRlZmluZU1ldGFkYXRhOiBmdW5jdGlvbiBkZWZpbmVNZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSwgdGFyZ2V0LCB0YXJnZXRLZXkpIHtcclxuICBvcmRpbmFyeURlZmluZU93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlLCBhbk9iamVjdCh0YXJnZXQpLCB0b01ldGFLZXkodGFyZ2V0S2V5KSk7XHJcbn0gfSk7XHJcbiIsInZhciBtZXRhZGF0YSA9IHJlcXVpcmUoJy4vX21ldGFkYXRhJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG52YXIgZ2V0T3JDcmVhdGVNZXRhZGF0YU1hcCA9IG1ldGFkYXRhLm1hcDtcclxudmFyIHN0b3JlID0gbWV0YWRhdGEuc3RvcmU7XHJcblxyXG5tZXRhZGF0YS5leHAoeyBkZWxldGVNZXRhZGF0YTogZnVuY3Rpb24gZGVsZXRlTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHZhciB0YXJnZXRLZXkgPSBhcmd1bWVudHMubGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMl0pO1xyXG4gIHZhciBtZXRhZGF0YU1hcCA9IGdldE9yQ3JlYXRlTWV0YWRhdGFNYXAoYW5PYmplY3QodGFyZ2V0KSwgdGFyZ2V0S2V5LCBmYWxzZSk7XHJcbiAgaWYgKG1ldGFkYXRhTWFwID09PSB1bmRlZmluZWQgfHwgIW1ldGFkYXRhTWFwWydkZWxldGUnXShtZXRhZGF0YUtleSkpIHJldHVybiBmYWxzZTtcclxuICBpZiAobWV0YWRhdGFNYXAuc2l6ZSkgcmV0dXJuIHRydWU7XHJcbiAgdmFyIHRhcmdldE1ldGFkYXRhID0gc3RvcmUuZ2V0KHRhcmdldCk7XHJcbiAgdGFyZ2V0TWV0YWRhdGFbJ2RlbGV0ZSddKHRhcmdldEtleSk7XHJcbiAgcmV0dXJuICEhdGFyZ2V0TWV0YWRhdGEuc2l6ZSB8fCBzdG9yZVsnZGVsZXRlJ10odGFyZ2V0KTtcclxufSB9KTtcclxuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XHJcbnZhciBvcmRpbmFyeUdldE93bk1ldGFkYXRhID0gbWV0YWRhdGEuZ2V0O1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG5cclxudmFyIG9yZGluYXJ5R2V0TWV0YWRhdGEgPSBmdW5jdGlvbiAoTWV0YWRhdGFLZXksIE8sIFApIHtcclxuICB2YXIgaGFzT3duID0gb3JkaW5hcnlIYXNPd25NZXRhZGF0YShNZXRhZGF0YUtleSwgTywgUCk7XHJcbiAgaWYgKGhhc093bikgcmV0dXJuIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEoTWV0YWRhdGFLZXksIE8sIFApO1xyXG4gIHZhciBwYXJlbnQgPSBnZXRQcm90b3R5cGVPZihPKTtcclxuICByZXR1cm4gcGFyZW50ICE9PSBudWxsID8gb3JkaW5hcnlHZXRNZXRhZGF0YShNZXRhZGF0YUtleSwgcGFyZW50LCBQKSA6IHVuZGVmaW5lZDtcclxufTtcclxuXHJcbm1ldGFkYXRhLmV4cCh7IGdldE1ldGFkYXRhOiBmdW5jdGlvbiBnZXRNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XHJcbiAgcmV0dXJuIG9yZGluYXJ5R2V0TWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgU2V0ID0gcmVxdWlyZSgnLi9lczYuc2V0Jyk7XHJcbnZhciBmcm9tID0gcmVxdWlyZSgnLi9fYXJyYXktZnJvbS1pdGVyYWJsZScpO1xyXG52YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi9fb2JqZWN0LWdwbycpO1xyXG52YXIgb3JkaW5hcnlPd25NZXRhZGF0YUtleXMgPSBtZXRhZGF0YS5rZXlzO1xyXG52YXIgdG9NZXRhS2V5ID0gbWV0YWRhdGEua2V5O1xyXG5cclxudmFyIG9yZGluYXJ5TWV0YWRhdGFLZXlzID0gZnVuY3Rpb24gKE8sIFApIHtcclxuICB2YXIgb0tleXMgPSBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhPLCBQKTtcclxuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XHJcbiAgaWYgKHBhcmVudCA9PT0gbnVsbCkgcmV0dXJuIG9LZXlzO1xyXG4gIHZhciBwS2V5cyA9IG9yZGluYXJ5TWV0YWRhdGFLZXlzKHBhcmVudCwgUCk7XHJcbiAgcmV0dXJuIHBLZXlzLmxlbmd0aCA/IG9LZXlzLmxlbmd0aCA/IGZyb20obmV3IFNldChvS2V5cy5jb25jYXQocEtleXMpKSkgOiBwS2V5cyA6IG9LZXlzO1xyXG59O1xyXG5cclxubWV0YWRhdGEuZXhwKHsgZ2V0TWV0YWRhdGFLZXlzOiBmdW5jdGlvbiBnZXRNZXRhZGF0YUtleXModGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XHJcbiAgcmV0dXJuIG9yZGluYXJ5TWV0YWRhdGFLZXlzKGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAyID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1sxXSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIG9yZGluYXJ5R2V0T3duTWV0YWRhdGEgPSBtZXRhZGF0YS5nZXQ7XHJcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XHJcblxyXG5tZXRhZGF0YS5leHAoeyBnZXRPd25NZXRhZGF0YTogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeUdldE93bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXHJcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIG9yZGluYXJ5T3duTWV0YWRhdGFLZXlzID0gbWV0YWRhdGEua2V5cztcclxudmFyIHRvTWV0YUtleSA9IG1ldGFkYXRhLmtleTtcclxuXHJcbm1ldGFkYXRhLmV4cCh7IGdldE93bk1ldGFkYXRhS2V5czogZnVuY3Rpb24gZ2V0T3duTWV0YWRhdGFLZXlzKHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeU93bk1ldGFkYXRhS2V5cyhhbk9iamVjdCh0YXJnZXQpLCBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IHVuZGVmaW5lZCA6IHRvTWV0YUtleShhcmd1bWVudHNbMV0pKTtcclxufSB9KTtcclxuIiwidmFyIG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBnZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4vX29iamVjdC1ncG8nKTtcclxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XHJcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XHJcblxyXG52YXIgb3JkaW5hcnlIYXNNZXRhZGF0YSA9IGZ1bmN0aW9uIChNZXRhZGF0YUtleSwgTywgUCkge1xyXG4gIHZhciBoYXNPd24gPSBvcmRpbmFyeUhhc093bk1ldGFkYXRhKE1ldGFkYXRhS2V5LCBPLCBQKTtcclxuICBpZiAoaGFzT3duKSByZXR1cm4gdHJ1ZTtcclxuICB2YXIgcGFyZW50ID0gZ2V0UHJvdG90eXBlT2YoTyk7XHJcbiAgcmV0dXJuIHBhcmVudCAhPT0gbnVsbCA/IG9yZGluYXJ5SGFzTWV0YWRhdGEoTWV0YWRhdGFLZXksIHBhcmVudCwgUCkgOiBmYWxzZTtcclxufTtcclxuXHJcbm1ldGFkYXRhLmV4cCh7IGhhc01ldGFkYXRhOiBmdW5jdGlvbiBoYXNNZXRhZGF0YShtZXRhZGF0YUtleSwgdGFyZ2V0IC8qICwgdGFyZ2V0S2V5ICovKSB7XHJcbiAgcmV0dXJuIG9yZGluYXJ5SGFzTWV0YWRhdGEobWV0YWRhdGFLZXksIGFuT2JqZWN0KHRhcmdldCksIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgbWV0YWRhdGEgPSByZXF1aXJlKCcuL19tZXRhZGF0YScpO1xyXG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuL19hbi1vYmplY3QnKTtcclxudmFyIG9yZGluYXJ5SGFzT3duTWV0YWRhdGEgPSBtZXRhZGF0YS5oYXM7XHJcbnZhciB0b01ldGFLZXkgPSBtZXRhZGF0YS5rZXk7XHJcblxyXG5tZXRhZGF0YS5leHAoeyBoYXNPd25NZXRhZGF0YTogZnVuY3Rpb24gaGFzT3duTWV0YWRhdGEobWV0YWRhdGFLZXksIHRhcmdldCAvKiAsIHRhcmdldEtleSAqLykge1xyXG4gIHJldHVybiBvcmRpbmFyeUhhc093bk1ldGFkYXRhKG1ldGFkYXRhS2V5LCBhbk9iamVjdCh0YXJnZXQpXHJcbiAgICAsIGFyZ3VtZW50cy5sZW5ndGggPCAzID8gdW5kZWZpbmVkIDogdG9NZXRhS2V5KGFyZ3VtZW50c1syXSkpO1xyXG59IH0pO1xyXG4iLCJ2YXIgJG1ldGFkYXRhID0gcmVxdWlyZSgnLi9fbWV0YWRhdGEnKTtcclxudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi9fYW4tb2JqZWN0Jyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciB0b01ldGFLZXkgPSAkbWV0YWRhdGEua2V5O1xyXG52YXIgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YSA9ICRtZXRhZGF0YS5zZXQ7XHJcblxyXG4kbWV0YWRhdGEuZXhwKHsgbWV0YWRhdGE6IGZ1bmN0aW9uIG1ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgcmV0dXJuIGZ1bmN0aW9uIGRlY29yYXRvcih0YXJnZXQsIHRhcmdldEtleSkge1xyXG4gICAgb3JkaW5hcnlEZWZpbmVPd25NZXRhZGF0YShcclxuICAgICAgbWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUsXHJcbiAgICAgICh0YXJnZXRLZXkgIT09IHVuZGVmaW5lZCA/IGFuT2JqZWN0IDogYUZ1bmN0aW9uKSh0YXJnZXQpLFxyXG4gICAgICB0b01ldGFLZXkodGFyZ2V0S2V5KVxyXG4gICAgKTtcclxuICB9O1xyXG59IH0pO1xyXG4iLCIvLyBodHRwczovL2dpdGh1Yi5jb20vcndhbGRyb24vdGMzOS1ub3Rlcy9ibG9iL21hc3Rlci9lczYvMjAxNC0wOS9zZXB0LTI1Lm1kIzUxMC1nbG9iYWxhc2FwLWZvci1lbnF1ZXVpbmctYS1taWNyb3Rhc2tcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyIG1pY3JvdGFzayA9IHJlcXVpcmUoJy4vX21pY3JvdGFzaycpKCk7XHJcbnZhciBwcm9jZXNzID0gcmVxdWlyZSgnLi9fZ2xvYmFsJykucHJvY2VzcztcclxudmFyIGlzTm9kZSA9IHJlcXVpcmUoJy4vX2NvZicpKHByb2Nlc3MpID09ICdwcm9jZXNzJztcclxuXHJcbiRleHBvcnQoJGV4cG9ydC5HLCB7XHJcbiAgYXNhcDogZnVuY3Rpb24gYXNhcChmbikge1xyXG4gICAgdmFyIGRvbWFpbiA9IGlzTm9kZSAmJiBwcm9jZXNzLmRvbWFpbjtcclxuICAgIG1pY3JvdGFzayhkb21haW4gPyBkb21haW4uYmluZChmbikgOiBmbik7XHJcbiAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xyXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemVucGFyc2luZy9lcy1vYnNlcnZhYmxlXHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciBnbG9iYWwgPSByZXF1aXJlKCcuL19nbG9iYWwnKTtcclxudmFyIGNvcmUgPSByZXF1aXJlKCcuL19jb3JlJyk7XHJcbnZhciBtaWNyb3Rhc2sgPSByZXF1aXJlKCcuL19taWNyb3Rhc2snKSgpO1xyXG52YXIgT0JTRVJWQUJMRSA9IHJlcXVpcmUoJy4vX3drcycpKCdvYnNlcnZhYmxlJyk7XHJcbnZhciBhRnVuY3Rpb24gPSByZXF1aXJlKCcuL19hLWZ1bmN0aW9uJyk7XHJcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4vX2FuLW9iamVjdCcpO1xyXG52YXIgYW5JbnN0YW5jZSA9IHJlcXVpcmUoJy4vX2FuLWluc3RhbmNlJyk7XHJcbnZhciByZWRlZmluZUFsbCA9IHJlcXVpcmUoJy4vX3JlZGVmaW5lLWFsbCcpO1xyXG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcclxudmFyIGZvck9mID0gcmVxdWlyZSgnLi9fZm9yLW9mJyk7XHJcbnZhciBSRVRVUk4gPSBmb3JPZi5SRVRVUk47XHJcblxyXG52YXIgZ2V0TWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XHJcbiAgcmV0dXJuIGZuID09IG51bGwgPyB1bmRlZmluZWQgOiBhRnVuY3Rpb24oZm4pO1xyXG59O1xyXG5cclxudmFyIGNsZWFudXBTdWJzY3JpcHRpb24gPSBmdW5jdGlvbiAoc3Vic2NyaXB0aW9uKSB7XHJcbiAgdmFyIGNsZWFudXAgPSBzdWJzY3JpcHRpb24uX2M7XHJcbiAgaWYgKGNsZWFudXApIHtcclxuICAgIHN1YnNjcmlwdGlvbi5fYyA9IHVuZGVmaW5lZDtcclxuICAgIGNsZWFudXAoKTtcclxuICB9XHJcbn07XHJcblxyXG52YXIgc3Vic2NyaXB0aW9uQ2xvc2VkID0gZnVuY3Rpb24gKHN1YnNjcmlwdGlvbikge1xyXG4gIHJldHVybiBzdWJzY3JpcHRpb24uX28gPT09IHVuZGVmaW5lZDtcclxufTtcclxuXHJcbnZhciBjbG9zZVN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XHJcbiAgICBzdWJzY3JpcHRpb24uX28gPSB1bmRlZmluZWQ7XHJcbiAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgfVxyXG59O1xyXG5cclxudmFyIFN1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uIChvYnNlcnZlciwgc3Vic2NyaWJlcikge1xyXG4gIGFuT2JqZWN0KG9ic2VydmVyKTtcclxuICB0aGlzLl9jID0gdW5kZWZpbmVkO1xyXG4gIHRoaXMuX28gPSBvYnNlcnZlcjtcclxuICBvYnNlcnZlciA9IG5ldyBTdWJzY3JpcHRpb25PYnNlcnZlcih0aGlzKTtcclxuICB0cnkge1xyXG4gICAgdmFyIGNsZWFudXAgPSBzdWJzY3JpYmVyKG9ic2VydmVyKTtcclxuICAgIHZhciBzdWJzY3JpcHRpb24gPSBjbGVhbnVwO1xyXG4gICAgaWYgKGNsZWFudXAgIT0gbnVsbCkge1xyXG4gICAgICBpZiAodHlwZW9mIGNsZWFudXAudW5zdWJzY3JpYmUgPT09ICdmdW5jdGlvbicpIGNsZWFudXAgPSBmdW5jdGlvbiAoKSB7IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpOyB9O1xyXG4gICAgICBlbHNlIGFGdW5jdGlvbihjbGVhbnVwKTtcclxuICAgICAgdGhpcy5fYyA9IGNsZWFudXA7XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZSkge1xyXG4gICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XHJcbiAgICByZXR1cm47XHJcbiAgfSBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHRoaXMpKSBjbGVhbnVwU3Vic2NyaXB0aW9uKHRoaXMpO1xyXG59O1xyXG5cclxuU3Vic2NyaXB0aW9uLnByb3RvdHlwZSA9IHJlZGVmaW5lQWxsKHt9LCB7XHJcbiAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkgeyBjbG9zZVN1YnNjcmlwdGlvbih0aGlzKTsgfVxyXG59KTtcclxuXHJcbnZhciBTdWJzY3JpcHRpb25PYnNlcnZlciA9IGZ1bmN0aW9uIChzdWJzY3JpcHRpb24pIHtcclxuICB0aGlzLl9zID0gc3Vic2NyaXB0aW9uO1xyXG59O1xyXG5cclxuU3Vic2NyaXB0aW9uT2JzZXJ2ZXIucHJvdG90eXBlID0gcmVkZWZpbmVBbGwoe30sIHtcclxuICBuZXh0OiBmdW5jdGlvbiBuZXh0KHZhbHVlKSB7XHJcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhpcy5fcztcclxuICAgIGlmICghc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHtcclxuICAgICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLm5leHQpO1xyXG4gICAgICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG9ic2VydmVyLCB2YWx1ZSk7XHJcbiAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgY2xvc2VTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcclxuICAgICAgICB9IGZpbmFsbHkge1xyXG4gICAgICAgICAgdGhyb3cgZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9LFxyXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcih2YWx1ZSkge1xyXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XHJcbiAgICBpZiAoc3Vic2NyaXB0aW9uQ2xvc2VkKHN1YnNjcmlwdGlvbikpIHRocm93IHZhbHVlO1xyXG4gICAgdmFyIG9ic2VydmVyID0gc3Vic2NyaXB0aW9uLl9vO1xyXG4gICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xyXG4gICAgdHJ5IHtcclxuICAgICAgdmFyIG0gPSBnZXRNZXRob2Qob2JzZXJ2ZXIuZXJyb3IpO1xyXG4gICAgICBpZiAoIW0pIHRocm93IHZhbHVlO1xyXG4gICAgICB2YWx1ZSA9IG0uY2FsbChvYnNlcnZlciwgdmFsdWUpO1xyXG4gICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcclxuICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICB0aHJvdyBlO1xyXG4gICAgICB9XHJcbiAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcclxuICAgIHJldHVybiB2YWx1ZTtcclxuICB9LFxyXG4gIGNvbXBsZXRlOiBmdW5jdGlvbiBjb21wbGV0ZSh2YWx1ZSkge1xyXG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX3M7XHJcbiAgICBpZiAoIXN1YnNjcmlwdGlvbkNsb3NlZChzdWJzY3JpcHRpb24pKSB7XHJcbiAgICAgIHZhciBvYnNlcnZlciA9IHN1YnNjcmlwdGlvbi5fbztcclxuICAgICAgc3Vic2NyaXB0aW9uLl9vID0gdW5kZWZpbmVkO1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIHZhciBtID0gZ2V0TWV0aG9kKG9ic2VydmVyLmNvbXBsZXRlKTtcclxuICAgICAgICB2YWx1ZSA9IG0gPyBtLmNhbGwob2JzZXJ2ZXIsIHZhbHVlKSA6IHVuZGVmaW5lZDtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICBjbGVhbnVwU3Vic2NyaXB0aW9uKHN1YnNjcmlwdGlvbik7XHJcbiAgICAgICAgfSBmaW5hbGx5IHtcclxuICAgICAgICAgIHRocm93IGU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGNsZWFudXBTdWJzY3JpcHRpb24oc3Vic2NyaXB0aW9uKTtcclxuICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxufSk7XHJcblxyXG52YXIgJE9ic2VydmFibGUgPSBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZXIpIHtcclxuICBhbkluc3RhbmNlKHRoaXMsICRPYnNlcnZhYmxlLCAnT2JzZXJ2YWJsZScsICdfZicpLl9mID0gYUZ1bmN0aW9uKHN1YnNjcmliZXIpO1xyXG59O1xyXG5cclxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUucHJvdG90eXBlLCB7XHJcbiAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUob2JzZXJ2ZXIpIHtcclxuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKG9ic2VydmVyLCB0aGlzLl9mKTtcclxuICB9LFxyXG4gIGZvckVhY2g6IGZ1bmN0aW9uIGZvckVhY2goZm4pIHtcclxuICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgIHJldHVybiBuZXcgKGNvcmUuUHJvbWlzZSB8fCBnbG9iYWwuUHJvbWlzZSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICBhRnVuY3Rpb24oZm4pO1xyXG4gICAgICB2YXIgc3Vic2NyaXB0aW9uID0gdGhhdC5zdWJzY3JpYmUoe1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgcmV0dXJuIGZuKHZhbHVlKTtcclxuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgcmVqZWN0KGUpO1xyXG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVycm9yOiByZWplY3QsXHJcbiAgICAgICAgY29tcGxldGU6IHJlc29sdmVcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcbn0pO1xyXG5cclxucmVkZWZpbmVBbGwoJE9ic2VydmFibGUsIHtcclxuICBmcm9tOiBmdW5jdGlvbiBmcm9tKHgpIHtcclxuICAgIHZhciBDID0gdHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGU7XHJcbiAgICB2YXIgbWV0aG9kID0gZ2V0TWV0aG9kKGFuT2JqZWN0KHgpW09CU0VSVkFCTEVdKTtcclxuICAgIGlmIChtZXRob2QpIHtcclxuICAgICAgdmFyIG9ic2VydmFibGUgPSBhbk9iamVjdChtZXRob2QuY2FsbCh4KSk7XHJcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlLmNvbnN0cnVjdG9yID09PSBDID8gb2JzZXJ2YWJsZSA6IG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnN1YnNjcmliZShvYnNlcnZlcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBDKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xyXG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghZG9uZSkge1xyXG4gICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGZvck9mKHgsIGZhbHNlLCBmdW5jdGlvbiAoaXQpIHtcclxuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0KTtcclxuICAgICAgICAgICAgICBpZiAoZG9uZSkgcmV0dXJuIFJFVFVSTjtcclxuICAgICAgICAgICAgfSkgPT09IFJFVFVSTikgcmV0dXJuO1xyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBpZiAoZG9uZSkgdGhyb3cgZTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoZSk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgb2Y6IGZ1bmN0aW9uIG9mKCkge1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhcmd1bWVudHMubGVuZ3RoLCBpdGVtcyA9IG5ldyBBcnJheShsKTsgaSA8IGw7KSBpdGVtc1tpXSA9IGFyZ3VtZW50c1tpKytdO1xyXG4gICAgcmV0dXJuIG5ldyAodHlwZW9mIHRoaXMgPT09ICdmdW5jdGlvbicgPyB0aGlzIDogJE9ic2VydmFibGUpKGZ1bmN0aW9uIChvYnNlcnZlcikge1xyXG4gICAgICB2YXIgZG9uZSA9IGZhbHNlO1xyXG4gICAgICBtaWNyb3Rhc2soZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghZG9uZSkge1xyXG4gICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBpdGVtcy5sZW5ndGg7ICsraikge1xyXG4gICAgICAgICAgICBvYnNlcnZlci5uZXh0KGl0ZW1zW2pdKTtcclxuICAgICAgICAgICAgaWYgKGRvbmUpIHJldHVybjtcclxuICAgICAgICAgIH0gb2JzZXJ2ZXIuY29tcGxldGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyBkb25lID0gdHJ1ZTsgfTtcclxuICAgIH0pO1xyXG4gIH1cclxufSk7XHJcblxyXG5oaWRlKCRPYnNlcnZhYmxlLnByb3RvdHlwZSwgT0JTRVJWQUJMRSwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuRywgeyBPYnNlcnZhYmxlOiAkT2JzZXJ2YWJsZSB9KTtcclxuXHJcbnJlcXVpcmUoJy4vX3NldC1zcGVjaWVzJykoJ09ic2VydmFibGUnKTtcclxuIiwiLy8gaWU5LSBzZXRUaW1lb3V0ICYgc2V0SW50ZXJ2YWwgYWRkaXRpb25hbCBwYXJhbWV0ZXJzIGZpeFxyXG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi9fZ2xvYmFsJyk7XHJcbnZhciAkZXhwb3J0ID0gcmVxdWlyZSgnLi9fZXhwb3J0Jyk7XHJcbnZhciB1c2VyQWdlbnQgPSByZXF1aXJlKCcuL191c2VyLWFnZW50Jyk7XHJcbnZhciBzbGljZSA9IFtdLnNsaWNlO1xyXG52YXIgTVNJRSA9IC9NU0lFIC5cXC4vLnRlc3QodXNlckFnZW50KTsgLy8gPC0gZGlydHkgaWU5LSBjaGVja1xyXG52YXIgd3JhcCA9IGZ1bmN0aW9uIChzZXQpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gKGZuLCB0aW1lIC8qICwgLi4uYXJncyAqLykge1xyXG4gICAgdmFyIGJvdW5kQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyO1xyXG4gICAgdmFyIGFyZ3MgPSBib3VuZEFyZ3MgPyBzbGljZS5jYWxsKGFyZ3VtZW50cywgMikgOiBmYWxzZTtcclxuICAgIHJldHVybiBzZXQoYm91bmRBcmdzID8gZnVuY3Rpb24gKCkge1xyXG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcclxuICAgICAgKHR5cGVvZiBmbiA9PSAnZnVuY3Rpb24nID8gZm4gOiBGdW5jdGlvbihmbikpLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgfSA6IGZuLCB0aW1lKTtcclxuICB9O1xyXG59O1xyXG4kZXhwb3J0KCRleHBvcnQuRyArICRleHBvcnQuQiArICRleHBvcnQuRiAqIE1TSUUsIHtcclxuICBzZXRUaW1lb3V0OiB3cmFwKGdsb2JhbC5zZXRUaW1lb3V0KSxcclxuICBzZXRJbnRlcnZhbDogd3JhcChnbG9iYWwuc2V0SW50ZXJ2YWwpXHJcbn0pO1xyXG4iLCJ2YXIgJGV4cG9ydCA9IHJlcXVpcmUoJy4vX2V4cG9ydCcpO1xyXG52YXIgJHRhc2sgPSByZXF1aXJlKCcuL190YXNrJyk7XHJcbiRleHBvcnQoJGV4cG9ydC5HICsgJGV4cG9ydC5CLCB7XHJcbiAgc2V0SW1tZWRpYXRlOiAkdGFzay5zZXQsXHJcbiAgY2xlYXJJbW1lZGlhdGU6ICR0YXNrLmNsZWFyXHJcbn0pO1xyXG4iLCJ2YXIgJGl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vZXM2LmFycmF5Lml0ZXJhdG9yJyk7XHJcbnZhciBnZXRLZXlzID0gcmVxdWlyZSgnLi9fb2JqZWN0LWtleXMnKTtcclxudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi9fcmVkZWZpbmUnKTtcclxudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4vX2dsb2JhbCcpO1xyXG52YXIgaGlkZSA9IHJlcXVpcmUoJy4vX2hpZGUnKTtcclxudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4vX2l0ZXJhdG9ycycpO1xyXG52YXIgd2tzID0gcmVxdWlyZSgnLi9fd2tzJyk7XHJcbnZhciBJVEVSQVRPUiA9IHdrcygnaXRlcmF0b3InKTtcclxudmFyIFRPX1NUUklOR19UQUcgPSB3a3MoJ3RvU3RyaW5nVGFnJyk7XHJcbnZhciBBcnJheVZhbHVlcyA9IEl0ZXJhdG9ycy5BcnJheTtcclxuXHJcbnZhciBET01JdGVyYWJsZXMgPSB7XHJcbiAgQ1NTUnVsZUxpc3Q6IHRydWUsIC8vIFRPRE86IE5vdCBzcGVjIGNvbXBsaWFudCwgc2hvdWxkIGJlIGZhbHNlLlxyXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IGZhbHNlLFxyXG4gIENTU1ZhbHVlTGlzdDogZmFsc2UsXHJcbiAgQ2xpZW50UmVjdExpc3Q6IGZhbHNlLFxyXG4gIERPTVJlY3RMaXN0OiBmYWxzZSxcclxuICBET01TdHJpbmdMaXN0OiBmYWxzZSxcclxuICBET01Ub2tlbkxpc3Q6IHRydWUsXHJcbiAgRGF0YVRyYW5zZmVySXRlbUxpc3Q6IGZhbHNlLFxyXG4gIEZpbGVMaXN0OiBmYWxzZSxcclxuICBIVE1MQWxsQ29sbGVjdGlvbjogZmFsc2UsXHJcbiAgSFRNTENvbGxlY3Rpb246IGZhbHNlLFxyXG4gIEhUTUxGb3JtRWxlbWVudDogZmFsc2UsXHJcbiAgSFRNTFNlbGVjdEVsZW1lbnQ6IGZhbHNlLFxyXG4gIE1lZGlhTGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXHJcbiAgTWltZVR5cGVBcnJheTogZmFsc2UsXHJcbiAgTmFtZWROb2RlTWFwOiBmYWxzZSxcclxuICBOb2RlTGlzdDogdHJ1ZSxcclxuICBQYWludFJlcXVlc3RMaXN0OiBmYWxzZSxcclxuICBQbHVnaW46IGZhbHNlLFxyXG4gIFBsdWdpbkFycmF5OiBmYWxzZSxcclxuICBTVkdMZW5ndGhMaXN0OiBmYWxzZSxcclxuICBTVkdOdW1iZXJMaXN0OiBmYWxzZSxcclxuICBTVkdQYXRoU2VnTGlzdDogZmFsc2UsXHJcbiAgU1ZHUG9pbnRMaXN0OiBmYWxzZSxcclxuICBTVkdTdHJpbmdMaXN0OiBmYWxzZSxcclxuICBTVkdUcmFuc2Zvcm1MaXN0OiBmYWxzZSxcclxuICBTb3VyY2VCdWZmZXJMaXN0OiBmYWxzZSxcclxuICBTdHlsZVNoZWV0TGlzdDogdHJ1ZSwgLy8gVE9ETzogTm90IHNwZWMgY29tcGxpYW50LCBzaG91bGQgYmUgZmFsc2UuXHJcbiAgVGV4dFRyYWNrQ3VlTGlzdDogZmFsc2UsXHJcbiAgVGV4dFRyYWNrTGlzdDogZmFsc2UsXHJcbiAgVG91Y2hMaXN0OiBmYWxzZVxyXG59O1xyXG5cclxuZm9yICh2YXIgY29sbGVjdGlvbnMgPSBnZXRLZXlzKERPTUl0ZXJhYmxlcyksIGkgPSAwOyBpIDwgY29sbGVjdGlvbnMubGVuZ3RoOyBpKyspIHtcclxuICB2YXIgTkFNRSA9IGNvbGxlY3Rpb25zW2ldO1xyXG4gIHZhciBleHBsaWNpdCA9IERPTUl0ZXJhYmxlc1tOQU1FXTtcclxuICB2YXIgQ29sbGVjdGlvbiA9IGdsb2JhbFtOQU1FXTtcclxuICB2YXIgcHJvdG8gPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xyXG4gIHZhciBrZXk7XHJcbiAgaWYgKHByb3RvKSB7XHJcbiAgICBpZiAoIXByb3RvW0lURVJBVE9SXSkgaGlkZShwcm90bywgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcclxuICAgIGlmICghcHJvdG9bVE9fU1RSSU5HX1RBR10pIGhpZGUocHJvdG8sIFRPX1NUUklOR19UQUcsIE5BTUUpO1xyXG4gICAgSXRlcmF0b3JzW05BTUVdID0gQXJyYXlWYWx1ZXM7XHJcbiAgICBpZiAoZXhwbGljaXQpIGZvciAoa2V5IGluICRpdGVyYXRvcnMpIGlmICghcHJvdG9ba2V5XSkgcmVkZWZpbmUocHJvdG8sIGtleSwgJGl0ZXJhdG9yc1trZXldLCB0cnVlKTtcclxuICB9XHJcbn1cclxuIiwiLyoqXHJcbiAqIENvcHlyaWdodCAoYykgMjAxNCwgRmFjZWJvb2ssIEluYy5cclxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuICpcclxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgQlNELXN0eWxlIGxpY2Vuc2UgZm91bmQgaW4gdGhlXHJcbiAqIGh0dHBzOi8vcmF3LmdpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvbWFzdGVyL0xJQ0VOU0UgZmlsZS4gQW5cclxuICogYWRkaXRpb25hbCBncmFudCBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluXHJcbiAqIHRoZSBzYW1lIGRpcmVjdG9yeS5cclxuICovXHJcblxyXG4hKGZ1bmN0aW9uKGdsb2JhbCkge1xyXG4gIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICB2YXIgT3AgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcclxuICB2YXIgdW5kZWZpbmVkOyAvLyBNb3JlIGNvbXByZXNzaWJsZSB0aGFuIHZvaWQgMC5cclxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xyXG4gIHZhciBpdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuaXRlcmF0b3IgfHwgXCJAQGl0ZXJhdG9yXCI7XHJcbiAgdmFyIGFzeW5jSXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIjtcclxuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xyXG5cclxuICB2YXIgaW5Nb2R1bGUgPSB0eXBlb2YgbW9kdWxlID09PSBcIm9iamVjdFwiO1xyXG4gIHZhciBydW50aW1lID0gZ2xvYmFsLnJlZ2VuZXJhdG9yUnVudGltZTtcclxuICBpZiAocnVudGltZSkge1xyXG4gICAgaWYgKGluTW9kdWxlKSB7XHJcbiAgICAgIC8vIElmIHJlZ2VuZXJhdG9yUnVudGltZSBpcyBkZWZpbmVkIGdsb2JhbGx5IGFuZCB3ZSdyZSBpbiBhIG1vZHVsZSxcclxuICAgICAgLy8gbWFrZSB0aGUgZXhwb3J0cyBvYmplY3QgaWRlbnRpY2FsIHRvIHJlZ2VuZXJhdG9yUnVudGltZS5cclxuICAgICAgbW9kdWxlLmV4cG9ydHMgPSBydW50aW1lO1xyXG4gICAgfVxyXG4gICAgLy8gRG9uJ3QgYm90aGVyIGV2YWx1YXRpbmcgdGhlIHJlc3Qgb2YgdGhpcyBmaWxlIGlmIHRoZSBydW50aW1lIHdhc1xyXG4gICAgLy8gYWxyZWFkeSBkZWZpbmVkIGdsb2JhbGx5LlxyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuXHJcbiAgLy8gRGVmaW5lIHRoZSBydW50aW1lIGdsb2JhbGx5IChhcyBleHBlY3RlZCBieSBnZW5lcmF0ZWQgY29kZSkgYXMgZWl0aGVyXHJcbiAgLy8gbW9kdWxlLmV4cG9ydHMgKGlmIHdlJ3JlIGluIGEgbW9kdWxlKSBvciBhIG5ldywgZW1wdHkgb2JqZWN0LlxyXG4gIHJ1bnRpbWUgPSBnbG9iYWwucmVnZW5lcmF0b3JSdW50aW1lID0gaW5Nb2R1bGUgPyBtb2R1bGUuZXhwb3J0cyA6IHt9O1xyXG5cclxuICBmdW5jdGlvbiB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XHJcbiAgICAvLyBJZiBvdXRlckZuIHByb3ZpZGVkIGFuZCBvdXRlckZuLnByb3RvdHlwZSBpcyBhIEdlbmVyYXRvciwgdGhlbiBvdXRlckZuLnByb3RvdHlwZSBpbnN0YW5jZW9mIEdlbmVyYXRvci5cclxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xyXG4gICAgdmFyIGdlbmVyYXRvciA9IE9iamVjdC5jcmVhdGUocHJvdG9HZW5lcmF0b3IucHJvdG90eXBlKTtcclxuICAgIHZhciBjb250ZXh0ID0gbmV3IENvbnRleHQodHJ5TG9jc0xpc3QgfHwgW10pO1xyXG5cclxuICAgIC8vIFRoZSAuX2ludm9rZSBtZXRob2QgdW5pZmllcyB0aGUgaW1wbGVtZW50YXRpb25zIG9mIHRoZSAubmV4dCxcclxuICAgIC8vIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcy5cclxuICAgIGdlbmVyYXRvci5faW52b2tlID0gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KTtcclxuXHJcbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xyXG4gIH1cclxuICBydW50aW1lLndyYXAgPSB3cmFwO1xyXG5cclxuICAvLyBUcnkvY2F0Y2ggaGVscGVyIHRvIG1pbmltaXplIGRlb3B0aW1pemF0aW9ucy4gUmV0dXJucyBhIGNvbXBsZXRpb25cclxuICAvLyByZWNvcmQgbGlrZSBjb250ZXh0LnRyeUVudHJpZXNbaV0uY29tcGxldGlvbi4gVGhpcyBpbnRlcmZhY2UgY291bGRcclxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcclxuICAvLyBpbnZva2VkIHdpdGhvdXQgYXJndW1lbnRzLCBidXQgaW4gYWxsIHRoZSBjYXNlcyB3ZSBjYXJlIGFib3V0IHdlXHJcbiAgLy8gYWxyZWFkeSBoYXZlIGFuIGV4aXN0aW5nIG1ldGhvZCB3ZSB3YW50IHRvIGNhbGwsIHNvIHRoZXJlJ3Mgbm8gbmVlZFxyXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcclxuICAvLyB0aGUgbWV0aG9kIHRha2VzIGV4YWN0bHkgb25lIGFyZ3VtZW50LCBzaW5jZSB0aGF0IGhhcHBlbnMgdG8gYmUgdHJ1ZVxyXG4gIC8vIGluIGV2ZXJ5IGNhc2UsIHNvIHdlIGRvbid0IGhhdmUgdG8gdG91Y2ggdGhlIGFyZ3VtZW50cyBvYmplY3QuIFRoZVxyXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcclxuICAvLyBoYXMgYSBzdGFibGUgc2hhcGUgYW5kIHNvIGhvcGVmdWxseSBzaG91bGQgYmUgY2hlYXAgdG8gYWxsb2NhdGUuXHJcbiAgZnVuY3Rpb24gdHJ5Q2F0Y2goZm4sIG9iaiwgYXJnKSB7XHJcbiAgICB0cnkge1xyXG4gICAgICByZXR1cm4geyB0eXBlOiBcIm5vcm1hbFwiLCBhcmc6IGZuLmNhbGwob2JqLCBhcmcpIH07XHJcbiAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkU3RhcnQgPSBcInN1c3BlbmRlZFN0YXJ0XCI7XHJcbiAgdmFyIEdlblN0YXRlU3VzcGVuZGVkWWllbGQgPSBcInN1c3BlbmRlZFlpZWxkXCI7XHJcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcclxuICB2YXIgR2VuU3RhdGVDb21wbGV0ZWQgPSBcImNvbXBsZXRlZFwiO1xyXG5cclxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXHJcbiAgLy8gYnJlYWtpbmcgb3V0IG9mIHRoZSBkaXNwYXRjaCBzd2l0Y2ggc3RhdGVtZW50LlxyXG4gIHZhciBDb250aW51ZVNlbnRpbmVsID0ge307XHJcblxyXG4gIC8vIER1bW15IGNvbnN0cnVjdG9yIGZ1bmN0aW9ucyB0aGF0IHdlIHVzZSBhcyB0aGUgLmNvbnN0cnVjdG9yIGFuZFxyXG4gIC8vIC5jb25zdHJ1Y3Rvci5wcm90b3R5cGUgcHJvcGVydGllcyBmb3IgZnVuY3Rpb25zIHRoYXQgcmV0dXJuIEdlbmVyYXRvclxyXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXHJcbiAgLy8gbWluaWZpZXIgbm90IHRvIG1hbmdsZSB0aGUgbmFtZXMgb2YgdGhlc2UgdHdvIGZ1bmN0aW9ucy5cclxuICBmdW5jdGlvbiBHZW5lcmF0b3IoKSB7fVxyXG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cclxuICBmdW5jdGlvbiBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSgpIHt9XHJcblxyXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcclxuICAvLyBkb24ndCBuYXRpdmVseSBzdXBwb3J0IGl0LlxyXG4gIHZhciBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xyXG4gIEl0ZXJhdG9yUHJvdG90eXBlW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH07XHJcblxyXG4gIHZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcclxuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XHJcbiAgaWYgKE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICYmXHJcbiAgICAgIE5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPcCAmJlxyXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XHJcbiAgICAvLyBUaGlzIGVudmlyb25tZW50IGhhcyBhIG5hdGl2ZSAlSXRlcmF0b3JQcm90b3R5cGUlOyB1c2UgaXQgaW5zdGVhZFxyXG4gICAgLy8gb2YgdGhlIHBvbHlmaWxsLlxyXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcclxuICB9XHJcblxyXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XHJcbiAgICBHZW5lcmF0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSk7XHJcbiAgR2VuZXJhdG9yRnVuY3Rpb24ucHJvdG90eXBlID0gR3AuY29uc3RydWN0b3IgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcclxuICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEdlbmVyYXRvckZ1bmN0aW9uO1xyXG4gIEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlW3RvU3RyaW5nVGFnU3ltYm9sXSA9XHJcbiAgICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IFwiR2VuZXJhdG9yRnVuY3Rpb25cIjtcclxuXHJcbiAgLy8gSGVscGVyIGZvciBkZWZpbmluZyB0aGUgLm5leHQsIC50aHJvdywgYW5kIC5yZXR1cm4gbWV0aG9kcyBvZiB0aGVcclxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxyXG4gIGZ1bmN0aW9uIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhwcm90b3R5cGUpIHtcclxuICAgIFtcIm5leHRcIiwgXCJ0aHJvd1wiLCBcInJldHVyblwiXS5mb3JFYWNoKGZ1bmN0aW9uKG1ldGhvZCkge1xyXG4gICAgICBwcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKGFyZykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZva2UobWV0aG9kLCBhcmcpO1xyXG4gICAgICB9O1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICBydW50aW1lLmlzR2VuZXJhdG9yRnVuY3Rpb24gPSBmdW5jdGlvbihnZW5GdW4pIHtcclxuICAgIHZhciBjdG9yID0gdHlwZW9mIGdlbkZ1biA9PT0gXCJmdW5jdGlvblwiICYmIGdlbkZ1bi5jb25zdHJ1Y3RvcjtcclxuICAgIHJldHVybiBjdG9yXHJcbiAgICAgID8gY3RvciA9PT0gR2VuZXJhdG9yRnVuY3Rpb24gfHxcclxuICAgICAgICAvLyBGb3IgdGhlIG5hdGl2ZSBHZW5lcmF0b3JGdW5jdGlvbiBjb25zdHJ1Y3RvciwgdGhlIGJlc3Qgd2UgY2FuXHJcbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxyXG4gICAgICAgIChjdG9yLmRpc3BsYXlOYW1lIHx8IGN0b3IubmFtZSkgPT09IFwiR2VuZXJhdG9yRnVuY3Rpb25cIlxyXG4gICAgICA6IGZhbHNlO1xyXG4gIH07XHJcblxyXG4gIHJ1bnRpbWUubWFyayA9IGZ1bmN0aW9uKGdlbkZ1bikge1xyXG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xyXG4gICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoZ2VuRnVuLCBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XHJcbiAgICAgIGlmICghKHRvU3RyaW5nVGFnU3ltYm9sIGluIGdlbkZ1bikpIHtcclxuICAgICAgICBnZW5GdW5bdG9TdHJpbmdUYWdTeW1ib2xdID0gXCJHZW5lcmF0b3JGdW5jdGlvblwiO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBnZW5GdW4ucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShHcCk7XHJcbiAgICByZXR1cm4gZ2VuRnVuO1xyXG4gIH07XHJcblxyXG4gIC8vIFdpdGhpbiB0aGUgYm9keSBvZiBhbnkgYXN5bmMgZnVuY3Rpb24sIGBhd2FpdCB4YCBpcyB0cmFuc2Zvcm1lZCB0b1xyXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XHJcbiAgLy8gYGhhc093bi5jYWxsKHZhbHVlLCBcIl9fYXdhaXRcIilgIHRvIGRldGVybWluZSBpZiB0aGUgeWllbGRlZCB2YWx1ZSBpc1xyXG4gIC8vIG1lYW50IHRvIGJlIGF3YWl0ZWQuXHJcbiAgcnVudGltZS5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xyXG4gICAgcmV0dXJuIHsgX19hd2FpdDogYXJnIH07XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gQXN5bmNJdGVyYXRvcihnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChnZW5lcmF0b3JbbWV0aG9kXSwgZ2VuZXJhdG9yLCBhcmcpO1xyXG4gICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVjb3JkLmFyZztcclxuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XHJcbiAgICAgICAgaWYgKHZhbHVlICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XHJcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHZhbHVlLl9fYXdhaXQpLnRoZW4oZnVuY3Rpb24odmFsdWUpIHtcclxuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcclxuICAgICAgICAgIH0sIGZ1bmN0aW9uKGVycikge1xyXG4gICAgICAgICAgICBpbnZva2UoXCJ0aHJvd1wiLCBlcnIsIHJlc29sdmUsIHJlamVjdCk7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodmFsdWUpLnRoZW4oZnVuY3Rpb24odW53cmFwcGVkKSB7XHJcbiAgICAgICAgICAvLyBXaGVuIGEgeWllbGRlZCBQcm9taXNlIGlzIHJlc29sdmVkLCBpdHMgZmluYWwgdmFsdWUgYmVjb21lc1xyXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXHJcbiAgICAgICAgICAvLyBjdXJyZW50IGl0ZXJhdGlvbi4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGhvd2V2ZXIsIHRoZVxyXG4gICAgICAgICAgLy8gcmVzdWx0IGZvciB0aGlzIGl0ZXJhdGlvbiB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHNhbWVcclxuICAgICAgICAgIC8vIHJlYXNvbi4gTm90ZSB0aGF0IHJlamVjdGlvbnMgb2YgeWllbGRlZCBQcm9taXNlcyBhcmUgbm90XHJcbiAgICAgICAgICAvLyB0aHJvd24gYmFjayBpbnRvIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIGFzIGlzIHRoZSBjYXNlXHJcbiAgICAgICAgICAvLyB3aGVuIGFuIGF3YWl0ZWQgUHJvbWlzZSBpcyByZWplY3RlZC4gVGhpcyBkaWZmZXJlbmNlIGluXHJcbiAgICAgICAgICAvLyBiZWhhdmlvciBiZXR3ZWVuIHlpZWxkIGFuZCBhd2FpdCBpcyBpbXBvcnRhbnQsIGJlY2F1c2UgaXRcclxuICAgICAgICAgIC8vIGFsbG93cyB0aGUgY29uc3VtZXIgdG8gZGVjaWRlIHdoYXQgdG8gZG8gd2l0aCB0aGUgeWllbGRlZFxyXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIChzd2FsbG93IGl0IGFuZCBjb250aW51ZSwgbWFudWFsbHkgLnRocm93IGl0IGJhY2tcclxuICAgICAgICAgIC8vIGludG8gdGhlIGdlbmVyYXRvciwgYWJhbmRvbiBpdGVyYXRpb24sIHdoYXRldmVyKS4gV2l0aFxyXG4gICAgICAgICAgLy8gYXdhaXQsIGJ5IGNvbnRyYXN0LCB0aGVyZSBpcyBubyBvcHBvcnR1bml0eSB0byBleGFtaW5lIHRoZVxyXG4gICAgICAgICAgLy8gcmVqZWN0aW9uIHJlYXNvbiBvdXRzaWRlIHRoZSBnZW5lcmF0b3IgZnVuY3Rpb24sIHNvIHRoZVxyXG4gICAgICAgICAgLy8gb25seSBvcHRpb24gaXMgdG8gdGhyb3cgaXQgZnJvbSB0aGUgYXdhaXQgZXhwcmVzc2lvbiwgYW5kXHJcbiAgICAgICAgICAvLyBsZXQgdGhlIGdlbmVyYXRvciBmdW5jdGlvbiBoYW5kbGUgdGhlIGV4Y2VwdGlvbi5cclxuICAgICAgICAgIHJlc3VsdC52YWx1ZSA9IHVud3JhcHBlZDtcclxuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcclxuICAgICAgICB9LCByZWplY3QpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwucHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJiBnbG9iYWwucHJvY2Vzcy5kb21haW4pIHtcclxuICAgICAgaW52b2tlID0gZ2xvYmFsLnByb2Nlc3MuZG9tYWluLmJpbmQoaW52b2tlKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcHJldmlvdXNQcm9taXNlO1xyXG5cclxuICAgIGZ1bmN0aW9uIGVucXVldWUobWV0aG9kLCBhcmcpIHtcclxuICAgICAgZnVuY3Rpb24gY2FsbEludm9rZVdpdGhNZXRob2RBbmRBcmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgaW52b2tlKG1ldGhvZCwgYXJnLCByZXNvbHZlLCByZWplY3QpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cclxuICAgICAgICAvLyBJZiBlbnF1ZXVlIGhhcyBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gd2Ugd2FudCB0byB3YWl0IHVudGlsXHJcbiAgICAgICAgLy8gYWxsIHByZXZpb3VzIFByb21pc2VzIGhhdmUgYmVlbiByZXNvbHZlZCBiZWZvcmUgY2FsbGluZyBpbnZva2UsXHJcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxyXG4gICAgICAgIC8vIGVucXVldWUgaGFzIG5vdCBiZWVuIGNhbGxlZCBiZWZvcmUsIHRoZW4gaXQgaXMgaW1wb3J0YW50IHRvXHJcbiAgICAgICAgLy8gY2FsbCBpbnZva2UgaW1tZWRpYXRlbHksIHdpdGhvdXQgd2FpdGluZyBvbiBhIGNhbGxiYWNrIHRvIGZpcmUsXHJcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cclxuICAgICAgICAvLyBhbnkgbmVjZXNzYXJ5IHNldHVwIGluIGEgcHJlZGljdGFibGUgd2F5LiBUaGlzIHByZWRpY3RhYmlsaXR5XHJcbiAgICAgICAgLy8gaXMgd2h5IHRoZSBQcm9taXNlIGNvbnN0cnVjdG9yIHN5bmNocm9ub3VzbHkgaW52b2tlcyBpdHNcclxuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxyXG4gICAgICAgIC8vIGV4ZWN1dGUgY29kZSBiZWZvcmUgdGhlIGZpcnN0IGF3YWl0LiBTaW5jZSB3ZSBpbXBsZW1lbnQgc2ltcGxlXHJcbiAgICAgICAgLy8gYXN5bmMgZnVuY3Rpb25zIGluIHRlcm1zIG9mIGFzeW5jIGdlbmVyYXRvcnMsIGl0IGlzIGVzcGVjaWFsbHlcclxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXHJcbiAgICAgICAgcHJldmlvdXNQcm9taXNlID8gcHJldmlvdXNQcm9taXNlLnRoZW4oXHJcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyxcclxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXHJcbiAgICAgICAgICAvLyBpbnZvY2F0aW9ucyBvZiB0aGUgaXRlcmF0b3IuXHJcbiAgICAgICAgICBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZ1xyXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXHJcbiAgICAvLyAudGhyb3csIGFuZCAucmV0dXJuIChzZWUgZGVmaW5lSXRlcmF0b3JNZXRob2RzKS5cclxuICAgIHRoaXMuX2ludm9rZSA9IGVucXVldWU7XHJcbiAgfVxyXG5cclxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xyXG4gIEFzeW5jSXRlcmF0b3IucHJvdG90eXBlW2FzeW5jSXRlcmF0b3JTeW1ib2xdID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuICBydW50aW1lLkFzeW5jSXRlcmF0b3IgPSBBc3luY0l0ZXJhdG9yO1xyXG5cclxuICAvLyBOb3RlIHRoYXQgc2ltcGxlIGFzeW5jIGZ1bmN0aW9ucyBhcmUgaW1wbGVtZW50ZWQgb24gdG9wIG9mXHJcbiAgLy8gQXN5bmNJdGVyYXRvciBvYmplY3RzOyB0aGV5IGp1c3QgcmV0dXJuIGEgUHJvbWlzZSBmb3IgdGhlIHZhbHVlIG9mXHJcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXHJcbiAgcnVudGltZS5hc3luYyA9IGZ1bmN0aW9uKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KSB7XHJcbiAgICB2YXIgaXRlciA9IG5ldyBBc3luY0l0ZXJhdG9yKFxyXG4gICAgICB3cmFwKGlubmVyRm4sIG91dGVyRm4sIHNlbGYsIHRyeUxvY3NMaXN0KVxyXG4gICAgKTtcclxuXHJcbiAgICByZXR1cm4gcnVudGltZS5pc0dlbmVyYXRvckZ1bmN0aW9uKG91dGVyRm4pXHJcbiAgICAgID8gaXRlciAvLyBJZiBvdXRlckZuIGlzIGEgZ2VuZXJhdG9yLCByZXR1cm4gdGhlIGZ1bGwgaXRlcmF0b3IuXHJcbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICAgIHJldHVybiByZXN1bHQuZG9uZSA/IHJlc3VsdC52YWx1ZSA6IGl0ZXIubmV4dCgpO1xyXG4gICAgICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkge1xyXG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcclxuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gaW52b2tlKG1ldGhvZCwgYXJnKSB7XHJcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBydW5uaW5nXCIpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoc3RhdGUgPT09IEdlblN0YXRlQ29tcGxldGVkKSB7XHJcbiAgICAgICAgaWYgKG1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgICB0aHJvdyBhcmc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxyXG4gICAgICAgIC8vIGh0dHBzOi8vcGVvcGxlLm1vemlsbGEub3JnL35qb3JlbmRvcmZmL2VzNi1kcmFmdC5odG1sI3NlYy1nZW5lcmF0b3JyZXN1bWVcclxuICAgICAgICByZXR1cm4gZG9uZVJlc3VsdCgpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IG1ldGhvZDtcclxuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XHJcblxyXG4gICAgICB3aGlsZSAodHJ1ZSkge1xyXG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XHJcbiAgICAgICAgaWYgKGRlbGVnYXRlKSB7XHJcbiAgICAgICAgICB2YXIgZGVsZWdhdGVSZXN1bHQgPSBtYXliZUludm9rZURlbGVnYXRlKGRlbGVnYXRlLCBjb250ZXh0KTtcclxuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xyXG4gICAgICAgICAgICBpZiAoZGVsZWdhdGVSZXN1bHQgPT09IENvbnRpbnVlU2VudGluZWwpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gZGVsZWdhdGVSZXN1bHQ7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XHJcbiAgICAgICAgICAvLyBTZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcclxuICAgICAgICAgIC8vIGZ1bmN0aW9uLnNlbnQgaW1wbGVtZW50YXRpb24uXHJcbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XHJcblxyXG4gICAgICAgIH0gZWxzZSBpZiAoY29udGV4dC5tZXRob2QgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XHJcbiAgICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XHJcbiAgICAgICAgICAgIHRocm93IGNvbnRleHQuYXJnO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIGNvbnRleHQuZGlzcGF0Y2hFeGNlcHRpb24oY29udGV4dC5hcmcpO1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInJldHVyblwiKSB7XHJcbiAgICAgICAgICBjb250ZXh0LmFicnVwdChcInJldHVyblwiLCBjb250ZXh0LmFyZyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdGF0ZSA9IEdlblN0YXRlRXhlY3V0aW5nO1xyXG5cclxuICAgICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goaW5uZXJGbiwgc2VsZiwgY29udGV4dCk7XHJcbiAgICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiKSB7XHJcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XHJcbiAgICAgICAgICAvLyBHZW5TdGF0ZUV4ZWN1dGluZyBhbmQgbG9vcCBiYWNrIGZvciBhbm90aGVyIGludm9jYXRpb24uXHJcbiAgICAgICAgICBzdGF0ZSA9IGNvbnRleHQuZG9uZVxyXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXHJcbiAgICAgICAgICAgIDogR2VuU3RhdGVTdXNwZW5kZWRZaWVsZDtcclxuXHJcbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xyXG4gICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB2YWx1ZTogcmVjb3JkLmFyZyxcclxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXHJcbiAgICAgICAgICB9O1xyXG5cclxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcclxuICAgICAgICAgIHN0YXRlID0gR2VuU3RhdGVDb21wbGV0ZWQ7XHJcbiAgICAgICAgICAvLyBEaXNwYXRjaCB0aGUgZXhjZXB0aW9uIGJ5IGxvb3BpbmcgYmFjayBhcm91bmQgdG8gdGhlXHJcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxyXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XHJcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FsbCBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF0oY29udGV4dC5hcmcpIGFuZCBoYW5kbGUgdGhlXHJcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxyXG4gIC8vIGRlbGVnYXRlIGl0ZXJhdG9yLCBvciBieSBtb2RpZnlpbmcgY29udGV4dC5tZXRob2QgYW5kIGNvbnRleHQuYXJnLFxyXG4gIC8vIHNldHRpbmcgY29udGV4dC5kZWxlZ2F0ZSB0byBudWxsLCBhbmQgcmV0dXJuaW5nIHRoZSBDb250aW51ZVNlbnRpbmVsLlxyXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcclxuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvcltjb250ZXh0Lm1ldGhvZF07XHJcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgLy8gQSAudGhyb3cgb3IgLnJldHVybiB3aGVuIHRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBoYXMgbm8gLnRocm93XHJcbiAgICAgIC8vIG1ldGhvZCBhbHdheXMgdGVybWluYXRlcyB0aGUgeWllbGQqIGxvb3AuXHJcbiAgICAgIGNvbnRleHQuZGVsZWdhdGUgPSBudWxsO1xyXG5cclxuICAgICAgaWYgKGNvbnRleHQubWV0aG9kID09PSBcInRocm93XCIpIHtcclxuICAgICAgICBpZiAoZGVsZWdhdGUuaXRlcmF0b3IucmV0dXJuKSB7XHJcbiAgICAgICAgICAvLyBJZiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIGEgcmV0dXJuIG1ldGhvZCwgZ2l2ZSBpdCBhXHJcbiAgICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXHJcbiAgICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwicmV0dXJuXCI7XHJcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xyXG5cclxuICAgICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgICAgIC8vIElmIG1heWJlSW52b2tlRGVsZWdhdGUoY29udGV4dCkgY2hhbmdlZCBjb250ZXh0Lm1ldGhvZCBmcm9tXHJcbiAgICAgICAgICAgIC8vIFwicmV0dXJuXCIgdG8gXCJ0aHJvd1wiLCBsZXQgdGhhdCBvdmVycmlkZSB0aGUgVHlwZUVycm9yIGJlbG93LlxyXG4gICAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xyXG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcclxuICAgICAgICAgIFwiVGhlIGl0ZXJhdG9yIGRvZXMgbm90IHByb3ZpZGUgYSAndGhyb3cnIG1ldGhvZFwiKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKG1ldGhvZCwgZGVsZWdhdGUuaXRlcmF0b3IsIGNvbnRleHQuYXJnKTtcclxuXHJcbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xyXG4gICAgICBjb250ZXh0Lm1ldGhvZCA9IFwidGhyb3dcIjtcclxuICAgICAgY29udGV4dC5hcmcgPSByZWNvcmQuYXJnO1xyXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcclxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIGluZm8gPSByZWNvcmQuYXJnO1xyXG5cclxuICAgIGlmICghIGluZm8pIHtcclxuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XHJcbiAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcIml0ZXJhdG9yIHJlc3VsdCBpcyBub3QgYW4gb2JqZWN0XCIpO1xyXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcclxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluZm8uZG9uZSkge1xyXG4gICAgICAvLyBBc3NpZ24gdGhlIHJlc3VsdCBvZiB0aGUgZmluaXNoZWQgZGVsZWdhdGUgdG8gdGhlIHRlbXBvcmFyeVxyXG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxyXG4gICAgICBjb250ZXh0W2RlbGVnYXRlLnJlc3VsdE5hbWVdID0gaW5mby52YWx1ZTtcclxuXHJcbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cclxuICAgICAgY29udGV4dC5uZXh0ID0gZGVsZWdhdGUubmV4dExvYztcclxuXHJcbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxyXG4gICAgICAvLyBleGNlcHRpb24sIGxldCB0aGUgb3V0ZXIgZ2VuZXJhdG9yIHByb2NlZWQgbm9ybWFsbHkuIElmXHJcbiAgICAgIC8vIGNvbnRleHQubWV0aG9kIHdhcyBcIm5leHRcIiwgZm9yZ2V0IGNvbnRleHQuYXJnIHNpbmNlIGl0IGhhcyBiZWVuXHJcbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xyXG4gICAgICAvLyBcInJldHVyblwiLCBhbGxvdyB0aGUgb3JpZ2luYWwgLnJldHVybiBjYWxsIHRvIGNvbnRpbnVlIGluIHRoZVxyXG4gICAgICAvLyBvdXRlciBnZW5lcmF0b3IuXHJcbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xyXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XHJcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXHJcbiAgICAgIHJldHVybiBpbmZvO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFRoZSBkZWxlZ2F0ZSBpdGVyYXRvciBpcyBmaW5pc2hlZCwgc28gZm9yZ2V0IGl0IGFuZCBjb250aW51ZSB3aXRoXHJcbiAgICAvLyB0aGUgb3V0ZXIgZ2VuZXJhdG9yLlxyXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XHJcbiAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcclxuICB9XHJcblxyXG4gIC8vIERlZmluZSBHZW5lcmF0b3IucHJvdG90eXBlLntuZXh0LHRocm93LHJldHVybn0gaW4gdGVybXMgb2YgdGhlXHJcbiAgLy8gdW5pZmllZCAuX2ludm9rZSBoZWxwZXIgbWV0aG9kLlxyXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XHJcblxyXG4gIEdwW3RvU3RyaW5nVGFnU3ltYm9sXSA9IFwiR2VuZXJhdG9yXCI7XHJcblxyXG4gIC8vIEEgR2VuZXJhdG9yIHNob3VsZCBhbHdheXMgcmV0dXJuIGl0c2VsZiBhcyB0aGUgaXRlcmF0b3Igb2JqZWN0IHdoZW4gdGhlXHJcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcclxuICAvLyBpdGVyYXRvciBwcm90b3R5cGUgY2hhaW4gaW5jb3JyZWN0bHkgaW1wbGVtZW50IHRoaXMsIGNhdXNpbmcgdGhlIEdlbmVyYXRvclxyXG4gIC8vIG9iamVjdCB0byBub3QgYmUgcmV0dXJuZWQgZnJvbSB0aGlzIGNhbGwuIFRoaXMgZW5zdXJlcyB0aGF0IGRvZXNuJ3QgaGFwcGVuLlxyXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxyXG4gIEdwW2l0ZXJhdG9yU3ltYm9sXSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfTtcclxuXHJcbiAgR3AudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xyXG4gIH07XHJcblxyXG4gIGZ1bmN0aW9uIHB1c2hUcnlFbnRyeShsb2NzKSB7XHJcbiAgICB2YXIgZW50cnkgPSB7IHRyeUxvYzogbG9jc1swXSB9O1xyXG5cclxuICAgIGlmICgxIGluIGxvY3MpIHtcclxuICAgICAgZW50cnkuY2F0Y2hMb2MgPSBsb2NzWzFdO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICgyIGluIGxvY3MpIHtcclxuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XHJcbiAgICAgIGVudHJ5LmFmdGVyTG9jID0gbG9jc1szXTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnRyeUVudHJpZXMucHVzaChlbnRyeSk7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiByZXNldFRyeUVudHJ5KGVudHJ5KSB7XHJcbiAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbiB8fCB7fTtcclxuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcclxuICAgIGRlbGV0ZSByZWNvcmQuYXJnO1xyXG4gICAgZW50cnkuY29tcGxldGlvbiA9IHJlY29yZDtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIENvbnRleHQodHJ5TG9jc0xpc3QpIHtcclxuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxyXG4gICAgLy8gb3IgYSBmaW5hbGx5IGJsb2NrKSBnaXZlcyB1cyBhIHBsYWNlIHRvIHN0b3JlIHZhbHVlcyB0aHJvd24gZnJvbVxyXG4gICAgLy8gbG9jYXRpb25zIHdoZXJlIHRoZXJlIGlzIG5vIGVuY2xvc2luZyB0cnkgc3RhdGVtZW50LlxyXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcclxuICAgIHRyeUxvY3NMaXN0LmZvckVhY2gocHVzaFRyeUVudHJ5LCB0aGlzKTtcclxuICAgIHRoaXMucmVzZXQodHJ1ZSk7XHJcbiAgfVxyXG5cclxuICBydW50aW1lLmtleXMgPSBmdW5jdGlvbihvYmplY3QpIHtcclxuICAgIHZhciBrZXlzID0gW107XHJcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqZWN0KSB7XHJcbiAgICAgIGtleXMucHVzaChrZXkpO1xyXG4gICAgfVxyXG4gICAga2V5cy5yZXZlcnNlKCk7XHJcblxyXG4gICAgLy8gUmF0aGVyIHRoYW4gcmV0dXJuaW5nIGFuIG9iamVjdCB3aXRoIGEgbmV4dCBtZXRob2QsIHdlIGtlZXBcclxuICAgIC8vIHRoaW5ncyBzaW1wbGUgYW5kIHJldHVybiB0aGUgbmV4dCBmdW5jdGlvbiBpdHNlbGYuXHJcbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgICAgd2hpbGUgKGtleXMubGVuZ3RoKSB7XHJcbiAgICAgICAgdmFyIGtleSA9IGtleXMucG9wKCk7XHJcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcclxuICAgICAgICAgIG5leHQudmFsdWUgPSBrZXk7XHJcbiAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcclxuICAgICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVG8gYXZvaWQgY3JlYXRpbmcgYW4gYWRkaXRpb25hbCBvYmplY3QsIHdlIGp1c3QgaGFuZyB0aGUgLnZhbHVlXHJcbiAgICAgIC8vIGFuZCAuZG9uZSBwcm9wZXJ0aWVzIG9mZiB0aGUgbmV4dCBmdW5jdGlvbiBvYmplY3QgaXRzZWxmLiBUaGlzXHJcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxyXG4gICAgICBuZXh0LmRvbmUgPSB0cnVlO1xyXG4gICAgICByZXR1cm4gbmV4dDtcclxuICAgIH07XHJcbiAgfTtcclxuXHJcbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XHJcbiAgICBpZiAoaXRlcmFibGUpIHtcclxuICAgICAgdmFyIGl0ZXJhdG9yTWV0aG9kID0gaXRlcmFibGVbaXRlcmF0b3JTeW1ib2xdO1xyXG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcclxuICAgICAgICByZXR1cm4gaXRlcmF0b3JNZXRob2QuY2FsbChpdGVyYWJsZSk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICh0eXBlb2YgaXRlcmFibGUubmV4dCA9PT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZXJhYmxlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIWlzTmFOKGl0ZXJhYmxlLmxlbmd0aCkpIHtcclxuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcclxuICAgICAgICAgIHdoaWxlICgrK2kgPCBpdGVyYWJsZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKGhhc093bi5jYWxsKGl0ZXJhYmxlLCBpKSkge1xyXG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcclxuICAgICAgICAgICAgICBuZXh0LmRvbmUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICBuZXh0LmRvbmUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gUmV0dXJuIGFuIGl0ZXJhdG9yIHdpdGggbm8gdmFsdWVzLlxyXG4gICAgcmV0dXJuIHsgbmV4dDogZG9uZVJlc3VsdCB9O1xyXG4gIH1cclxuICBydW50aW1lLnZhbHVlcyA9IHZhbHVlcztcclxuXHJcbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcclxuICAgIHJldHVybiB7IHZhbHVlOiB1bmRlZmluZWQsIGRvbmU6IHRydWUgfTtcclxuICB9XHJcblxyXG4gIENvbnRleHQucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IENvbnRleHQsXHJcblxyXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKHNraXBUZW1wUmVzZXQpIHtcclxuICAgICAgdGhpcy5wcmV2ID0gMDtcclxuICAgICAgdGhpcy5uZXh0ID0gMDtcclxuICAgICAgLy8gUmVzZXR0aW5nIGNvbnRleHQuX3NlbnQgZm9yIGxlZ2FjeSBzdXBwb3J0IG9mIEJhYmVsJ3NcclxuICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cclxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcclxuICAgICAgdGhpcy5kb25lID0gZmFsc2U7XHJcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSBudWxsO1xyXG5cclxuICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcclxuICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICB0aGlzLnRyeUVudHJpZXMuZm9yRWFjaChyZXNldFRyeUVudHJ5KTtcclxuXHJcbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xyXG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcykge1xyXG4gICAgICAgICAgLy8gTm90IHN1cmUgYWJvdXQgdGhlIG9wdGltYWwgb3JkZXIgb2YgdGhlc2UgY29uZGl0aW9uczpcclxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcclxuICAgICAgICAgICAgICBoYXNPd24uY2FsbCh0aGlzLCBuYW1lKSAmJlxyXG4gICAgICAgICAgICAgICFpc05hTigrbmFtZS5zbGljZSgxKSkpIHtcclxuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XHJcbiAgICAgIHRoaXMuZG9uZSA9IHRydWU7XHJcblxyXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xyXG4gICAgICB2YXIgcm9vdFJlY29yZCA9IHJvb3RFbnRyeS5jb21wbGV0aW9uO1xyXG4gICAgICBpZiAocm9vdFJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcclxuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcclxuICAgIH0sXHJcblxyXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xyXG4gICAgICBpZiAodGhpcy5kb25lKSB7XHJcbiAgICAgICAgdGhyb3cgZXhjZXB0aW9uO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgY29udGV4dCA9IHRoaXM7XHJcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xyXG4gICAgICAgIHJlY29yZC50eXBlID0gXCJ0aHJvd1wiO1xyXG4gICAgICAgIHJlY29yZC5hcmcgPSBleGNlcHRpb247XHJcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xyXG5cclxuICAgICAgICBpZiAoY2F1Z2h0KSB7XHJcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxyXG4gICAgICAgICAgLy8gdGhlbiBsZXQgdGhhdCBjYXRjaCBibG9jayBoYW5kbGUgdGhlIGV4Y2VwdGlvbiBub3JtYWxseS5cclxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJuZXh0XCI7XHJcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XHJcbiAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XHJcblxyXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IFwicm9vdFwiKSB7XHJcbiAgICAgICAgICAvLyBFeGNlcHRpb24gdGhyb3duIG91dHNpZGUgb2YgYW55IHRyeSBibG9jayB0aGF0IGNvdWxkIGhhbmRsZVxyXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXHJcbiAgICAgICAgICAvLyB0aHJvdyB0aGUgZXhjZXB0aW9uLlxyXG4gICAgICAgICAgcmV0dXJuIGhhbmRsZShcImVuZFwiKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPD0gdGhpcy5wcmV2KSB7XHJcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcclxuICAgICAgICAgIHZhciBoYXNGaW5hbGx5ID0gaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKTtcclxuXHJcbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmNhdGNoTG9jLCB0cnVlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5maW5hbGx5TG9jKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIH0gZWxzZSBpZiAoaGFzQ2F0Y2gpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcclxuICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlKGVudHJ5LmZpbmFsbHlMb2MpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XHJcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcclxuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XHJcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcclxuICAgICAgICAgICAgaGFzT3duLmNhbGwoZW50cnksIFwiZmluYWxseUxvY1wiKSAmJlxyXG4gICAgICAgICAgICB0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XHJcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmIChmaW5hbGx5RW50cnkgJiZcclxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcclxuICAgICAgICAgICB0eXBlID09PSBcImNvbnRpbnVlXCIpICYmXHJcbiAgICAgICAgICBmaW5hbGx5RW50cnkudHJ5TG9jIDw9IGFyZyAmJlxyXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XHJcbiAgICAgICAgLy8gSWdub3JlIHRoZSBmaW5hbGx5IGVudHJ5IGlmIGNvbnRyb2wgaXMgbm90IGp1bXBpbmcgdG8gYVxyXG4gICAgICAgIC8vIGxvY2F0aW9uIG91dHNpZGUgdGhlIHRyeS9jYXRjaCBibG9jay5cclxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcclxuICAgICAgcmVjb3JkLnR5cGUgPSB0eXBlO1xyXG4gICAgICByZWNvcmQuYXJnID0gYXJnO1xyXG5cclxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSkge1xyXG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XHJcbiAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzLmNvbXBsZXRlKHJlY29yZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGNvbXBsZXRlOiBmdW5jdGlvbihyZWNvcmQsIGFmdGVyTG9jKSB7XHJcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XHJcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcclxuICAgICAgICAgIHJlY29yZC50eXBlID09PSBcImNvbnRpbnVlXCIpIHtcclxuICAgICAgICB0aGlzLm5leHQgPSByZWNvcmQuYXJnO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XHJcbiAgICAgICAgdGhpcy5ydmFsID0gdGhpcy5hcmcgPSByZWNvcmQuYXJnO1xyXG4gICAgICAgIHRoaXMubWV0aG9kID0gXCJyZXR1cm5cIjtcclxuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xyXG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcIm5vcm1hbFwiICYmIGFmdGVyTG9jKSB7XHJcbiAgICAgICAgdGhpcy5uZXh0ID0gYWZ0ZXJMb2M7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgfSxcclxuXHJcbiAgICBmaW5pc2g6IGZ1bmN0aW9uKGZpbmFsbHlMb2MpIHtcclxuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xyXG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcclxuICAgICAgICBpZiAoZW50cnkuZmluYWxseUxvYyA9PT0gZmluYWxseUxvYykge1xyXG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XHJcbiAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcclxuICAgICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBcImNhdGNoXCI6IGZ1bmN0aW9uKHRyeUxvYykge1xyXG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XHJcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xyXG4gICAgICAgIGlmIChlbnRyeS50cnlMb2MgPT09IHRyeUxvYykge1xyXG4gICAgICAgICAgdmFyIHJlY29yZCA9IGVudHJ5LmNvbXBsZXRpb247XHJcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xyXG4gICAgICAgICAgICB2YXIgdGhyb3duID0gcmVjb3JkLmFyZztcclxuICAgICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdGhyb3duO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gVGhlIGNvbnRleHQuY2F0Y2ggbWV0aG9kIG11c3Qgb25seSBiZSBjYWxsZWQgd2l0aCBhIGxvY2F0aW9uXHJcbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cclxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaWxsZWdhbCBjYXRjaCBhdHRlbXB0XCIpO1xyXG4gICAgfSxcclxuXHJcbiAgICBkZWxlZ2F0ZVlpZWxkOiBmdW5jdGlvbihpdGVyYWJsZSwgcmVzdWx0TmFtZSwgbmV4dExvYykge1xyXG4gICAgICB0aGlzLmRlbGVnYXRlID0ge1xyXG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxyXG4gICAgICAgIHJlc3VsdE5hbWU6IHJlc3VsdE5hbWUsXHJcbiAgICAgICAgbmV4dExvYzogbmV4dExvY1xyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKHRoaXMubWV0aG9kID09PSBcIm5leHRcIikge1xyXG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XHJcbiAgICAgICAgLy8gYWNjaWRlbnRhbGx5IHBhc3MgaXQgb24gdG8gdGhlIGRlbGVnYXRlLlxyXG4gICAgICAgIHRoaXMuYXJnID0gdW5kZWZpbmVkO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcclxuICAgIH1cclxuICB9O1xyXG59KShcclxuICAvLyBBbW9uZyB0aGUgdmFyaW91cyB0cmlja3MgZm9yIG9idGFpbmluZyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsXHJcbiAgLy8gb2JqZWN0LCB0aGlzIHNlZW1zIHRvIGJlIHRoZSBtb3N0IHJlbGlhYmxlIHRlY2huaXF1ZSB0aGF0IGRvZXMgbm90XHJcbiAgLy8gdXNlIGluZGlyZWN0IGV2YWwgKHdoaWNoIHZpb2xhdGVzIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5KS5cclxuICB0eXBlb2YgZ2xvYmFsID09PSBcIm9iamVjdFwiID8gZ2xvYmFsIDpcclxuICB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDpcclxuICB0eXBlb2Ygc2VsZiA9PT0gXCJvYmplY3RcIiA/IHNlbGYgOiB0aGlzXHJcbik7XHJcbiIsInJlcXVpcmUoJy4uLy4uL21vZHVsZXMvY29yZS5yZWdleHAuZXNjYXBlJyk7XHJcbm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi4vLi4vbW9kdWxlcy9fY29yZScpLlJlZ0V4cC5lc2NhcGU7XHJcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5qYW1pbmdyL1JleEV4cC5lc2NhcGVcclxudmFyICRleHBvcnQgPSByZXF1aXJlKCcuL19leHBvcnQnKTtcclxudmFyICRyZSA9IHJlcXVpcmUoJy4vX3JlcGxhY2VyJykoL1tcXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XHJcblxyXG4kZXhwb3J0KCRleHBvcnQuUywgJ1JlZ0V4cCcsIHsgZXNjYXBlOiBmdW5jdGlvbiBlc2NhcGUoaXQpIHsgcmV0dXJuICRyZShpdCk7IH0gfSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHJlZ0V4cCwgcmVwbGFjZSkge1xyXG4gIHZhciByZXBsYWNlciA9IHJlcGxhY2UgPT09IE9iamVjdChyZXBsYWNlKSA/IGZ1bmN0aW9uIChwYXJ0KSB7XHJcbiAgICByZXR1cm4gcmVwbGFjZVtwYXJ0XTtcclxuICB9IDogcmVwbGFjZTtcclxuICByZXR1cm4gZnVuY3Rpb24gKGl0KSB7XHJcbiAgICByZXR1cm4gU3RyaW5nKGl0KS5yZXBsYWNlKHJlZ0V4cCwgcmVwbGFjZXIpO1xyXG4gIH07XHJcbn07XHJcbiIsIi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIOS4muWKoeebuOWFs+Wtl+autVxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG5cclxud2luZG93LmJ1c2luZXNzID0ge1xyXG4gICAgLy8g5biD5bCULeaVsOWAvFxyXG4gICAgYm9vbF9pbnQ6IHtcclxuICAgICAgICAwOiAn5ZCmJyAsXHJcbiAgICAgICAgMTogJ+aYrydcclxuICAgIH0gLFxyXG4gICAgLy8g5biD5bCULeWtl+espuS4slxyXG4gICAgYm9vbF9zdHI6IHtcclxuICAgICAgICAnbic6ICflkKYnICxcclxuICAgICAgICAneSc6ICfmmK8nXHJcbiAgICB9ICxcclxuICAgIC8vIOWFrOWRii3kvY3nva5cclxuICAgIHBvczoge1xyXG4gICAgICAgIGFubm91bmNlbWVudDoge1xyXG4gICAgICAgICAgICBhcHA6ICdhcHDlhazlkYonXHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgaW1hZ2U6IHtcclxuICAgICAgICAgICAgaG9tZTogJ+mmlumhtS3ova7mkq3lm74nICxcclxuICAgICAgICB9XHJcbiAgICB9ICxcclxuICAgIC8vIOivt+axguaWueazlVxyXG4gICAgcm91dGU6IHtcclxuICAgICAgICBtZXRob2Q6IFsnR0VUJyAsICdQT1NUJyAsICdQVVQnICwgJ1BBVENIJyAsICdERUxFVEUnICwgJ05PTkUnXSAsXHJcbiAgICAgICAgdHlwZTogWyd2aWV3JyAsICdhcGknXSAsXHJcbiAgICB9ICxcclxuICAgIC8vIOi9pui+huebuOWFs1xyXG4gICAgY2FyOiB7XHJcbiAgICAgICAgZ2VhcmJveDogWyfmiYvliqgnICwgJ+iHquWKqCcgLCAn5omL6Ieq5LiA5L2TJyAsICfml6Dnuqflj5jpgJ8nICwgJ+WPjOemu+WQiCcgLCAn5py65qKw6Ieq5Yqo5Y+Y6YCf566xJyAsICfnm7TpqbEnXSAsXHJcbiAgICAgICAgc2FsZVBvaW50OiB7XHJcbiAgICAgICAgICAgIGFmZm9yZGFibGU6ICfnu4/mtY7lrp7mg6AnICxcclxuICAgICAgICAgICAgbmV3OiAn5YeG5paw6L2mJyAsXHJcbiAgICAgICAgICAgIGx1eHVyeTogJ+ixquWNjui9picgLFxyXG4gICAgICAgICAgICBub25lOiAn5pegJyAsXHJcbiAgICAgICAgfVxyXG4gICAgfSAsXHJcbiAgICAvLyDmo4DmtYvpoblcclxuICAgIGRldGVjdGlvbjoge1xyXG4gICAgICAgIG5vcm1hbDogJ+ato+W4uCcgLFxyXG4gICAgICAgIGV4Y2VwdGlvbjogJ+W8guW4uCcgLFxyXG4gICAgfSAsXHJcbn07XHJcbiIsIlxyXG4vLyDlvLrliLbpgIDlh7pcclxuZnVuY3Rpb24gZm9yY2VMb2dvdXQgKCkge1xyXG4gICAgRy5zLmRlbCgndG9rZW4nKTtcclxuICAgIHJvdXRlci5wdXNoKHtuYW1lOiAnbG9naW4nfSk7XHJcbn1cclxuXHJcbi8vIOajgOafpeeUqOaIt+eZu+W9leeKtuaAgVxyXG5mdW5jdGlvbiBpc0xvZ2luICgpIHtcclxuICAgIHJldHVybiBHLnMuZXhpc3RzKCd0b2tlbicpO1xyXG59XHJcblxyXG4vLyDmjIflrpogaWQg5rua5Yqo5Yiw5oyH5a6a5L2N572uXHJcbi8vIOazqOaEj+i/meaYr+eJueaEj+S4uuW9k+WJjemhueebruiAjOWGmeeahO+8gVxyXG4vLyDlpoLmnpzmjaLov4fkuIDkuKrlrrnlmajlhYPntKDlsLHkvJrlh7rnjrDplJnor6/vvIFcclxuLy8g6K+35LuF5Zyo5b2T5YmN6aG555uu5L2/55SoXHJcbmZ1bmN0aW9uIHZTY3JvbGwgKGlkICwgZm4pIHtcclxuICAgIGxldCBkb20gPSBHKCcjJyArIGlkKTtcclxuICAgIGxldCBjb250YWluZXIgPSBHKHdpbmRvdyk7XHJcbiAgICBsZXQgdmFsID0gZG9tLmdldERvY09mZnNldFZhbCgndG9wJyk7XHJcbiAgICBsZXQgZXh0cmEgPSA4MCArIDUgKyA2MDtcclxuICAgIHZhbCAtPSBleHRyYTtcclxuICAgIEcuc2Nyb2xsVG8odG9wQ29udGV4dC5hbmltYXRlRHVyYXRpb24sICd5JywgMCwgdmFsLCBmbik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGdldENsYXNzICh2KSB7XHJcbiAgICByZXR1cm4gdiA/ICdlcnJvcicgOiAnJztcclxufVxyXG5cclxuZnVuY3Rpb24gJHN1Y2Nlc3MgKG1zZyAsIG9wdGlvbiA9IHt9KSB7XHJcbiAgICBvcHRpb24uaWNvbiA9IDE7XHJcbiAgICBsYXllci5hbGVydChtc2cgLCBvcHRpb24pO1xyXG59XHJcblxyXG4vLyDplJnor6/mj5DnpLpcclxuZnVuY3Rpb24gJGVycm9yIChtc2cgLCBvcHRpb24gPSB7fSkge1xyXG4gICAgb3B0aW9uLmljb24gPSAyO1xyXG4gICAgbGF5ZXIuYWxlcnQobXNnICwgb3B0aW9uKTtcclxufVxyXG5cclxuLy8g5raI5oGv5o+Q6YaSXHJcbmZ1bmN0aW9uICRtc2cgKG1zZyAsIG9wdGlvbiA9IHt9KSB7XHJcbiAgICBsYXllci5tc2cobXNnICwgb3B0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gJGluZm8gKG1zZyAsIG9wdGlvbiA9IHt9KSB7XHJcbiAgICBvcHRpb24uaWNvbiA9IDc7XHJcbiAgICBsYXllci5hbGVydChtc2cgLCBvcHRpb24pO1xyXG59XHJcblxyXG4vLyDlj5HnlJ/kuobmnKrnn6XplJnor69cclxuZnVuY3Rpb24gJHVua25vdygpIHtcclxuICAgIHJldHVybiAkZXJyb3IoJ+WPkeeUn+S6huacquefpemUmeivrycpO1xyXG59XHJcblxyXG4vLyDojrflj5bmi7zpn7PpppblrZfmr41cclxuZnVuY3Rpb24gZmlyc3RMZXR0ZXIoc3RyKSB7XHJcbiAgICBsZXQgcmVzID0gcGlueWluVXRpbC5nZXRGaXJzdExldHRlcihzdHIpO1xyXG4gICAgcmV0dXJuIHJlcy5sZW5ndGggPiAwID9cclxuICAgICAgICByZXNbMF0gOlxyXG4gICAgICAgICcnO1xyXG59XHJcbmZ1bmN0aW9uICR0aXAobXNnICwgZG9tKSB7XHJcbiAgICByZXR1cm4gbGF5ZXIudGlwcyhtc2cgLCBkb20gLCB7XHJcbiAgICAgICAgdGlwczogWzEsICcjMzU5NUNDJ10sXHJcbiAgICAgICAgdGltZTogNCAqIDEwMDBcclxuICAgIH0pO1xyXG59XHJcblxyXG5mdW5jdGlvbiAkY2xvc2UoaW5kZXgpXHJcbntcclxuICAgIGxheWVyLmNsb3NlKGluZGV4KTtcclxufVxyXG5cclxuZnVuY3Rpb24gJGNsb3NlQWxsKClcclxue1xyXG4gICAgbGF5ZXIuY2xvc2VBbGwoKTtcclxufVxyXG5cclxuZnVuY3Rpb24gZGV0ZXJtaW5lKGNvdW50ICwgdG90YWwgLCBjYWxsYmFjaykge1xyXG4gICAgaWYgKGNvdW50ID09IHRvdGFsKSB7XHJcbiAgICAgICAgY2FsbGJhY2soKTtcclxuICAgIH1cclxufVxyXG5cclxuT2JqZWN0LmFzc2lnbih3aW5kb3cgLCB7XHJcbiAgICBmb3JjZUxvZ291dCAsXHJcbiAgICBpc0xvZ2luICxcclxuICAgIHZTY3JvbGwgLFxyXG4gICAgZ2V0Q2xhc3MgLFxyXG4gICAgJHN1Y2Nlc3MgLFxyXG4gICAgJGVycm9yICxcclxuICAgICRtc2cgLFxyXG4gICAgJGluZm8gLFxyXG4gICAgJHRpcCAsXHJcbiAgICAkdW5rbm93ICxcclxuICAgIGZpcnN0TGV0dGVyICxcclxuICAgIGRldGVybWluZSAsXHJcbn0pOyIsIi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIHZ1ZSDliJ3lp4vljJblpITnkIZcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuLy8g5byA5Y+R6ICF5o+Q56S65YWz6Zet77yBXHJcblZ1ZS5jb25maWcucHJvZHVjdGlvblRpcCA9IGZhbHNlO1xyXG4vLyDmmK/lkKblhYHorrggdnVlIGRldnRvb2wg6L+b6KGMIGRlYnVnXHJcblZ1ZS5jb25maWcuZGV2dG9vbHMgPSB0cnVlO1xyXG5cclxuLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKlxyXG4gKiDlr7nor7fmsYLov5vooYzmi6bmiKpcclxuICogKioqKioqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG5cclxubGV0IHJlZnJlc2hUb2tlbiA9IChyZXNvbHZlKSA9PiB7XHJcbiAgICBpZiAoIUcucy5leGlzdHMoJ3Rva2VuJykpIHtcclxuICAgICAgICAvLyDmsqHmnInnmbvlvZXkv6Hmga/vvIzpgIDlh7rnmbvlvZVcclxuICAgICAgICBmb3JjZUxvZ291dCgpO1xyXG4gICAgICAgIHJldHVybiA7XHJcbiAgICB9XHJcbiAgICBsZXQgdG9rZW4gPSBHLnMuanNvbigndG9rZW4nKTtcclxuICAgIGFkbWluQXBpLnJlZnJlc2hUb2tlbih7XHJcbiAgICAgICAgcmVmcmVzaF90b2tlbjogdG9rZW4ucmVmcmVzaF90b2tlblxyXG4gICAgfSAsIChyZXMgLCBjb2RlKSA9PiB7XHJcbiAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICRpbmZvKCfnmbvlvZXnirbmgIHlt7Lov4fmnJ/vvIHor7fngrnlh7sgPGI+56Gu5a6aPC9iPiDmjInpkq7pgIDlh7rliLDnmbvlvZXpobXpnaIhJyAsIHtcclxuICAgICAgICAgICAgICAgIGNsb3NlQnRuOiBmYWxzZSAsXHJcbiAgICAgICAgICAgICAgICBidG46IFsn56Gu5a6aJ10gLFxyXG4gICAgICAgICAgICAgICAgYnRuMSAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VMb2dvdXQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOabtOaWsCB0b2tlblxyXG4gICAgICAgIEcucy5qc29uKCd0b2tlbicgLCByZXMpO1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgIH0pO1xyXG59O1xyXG5cclxuRy5hamF4Lm9wZW5lZCA9IGZ1bmN0aW9uKCl7XHJcbiAgICBpZiAoIWlzTG9naW4oKSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgbGV0IHRva2VuID0gRy5zLmpzb24oJ3Rva2VuJyk7XHJcbiAgICAvLyDorr7nva4gQXV0aG9yaXphdGlvbiDlpLTpg6hcclxuICAgIHRoaXMubmF0aXZlKCdzZXRSZXF1ZXN0SGVhZGVyJyAsICdBdXRob3JpemF0aW9uJyAsIHRva2VuLnRva2VuKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG5cclxubGV0IGNvdW50ID0gMDtcclxuLy8g5oum5oiqIOe9kee7nC/nmbvlvZXnirbmgIEg5Y+Y5pu0XHJcbkcuYWpheC5yZXNwb25kZWQgPSBmdW5jdGlvbihyZXMgLCBjb2RlKXtcclxuICAgIGlmIChjb2RlID09IDApIHtcclxuICAgICAgICBjb25zb2xlLmxvZygn6K+35rGC6KKr57uI5q2i77yM5Y+v6IO95piv572R57uc5pat5byA5a+86Ie077yM5Lmf5Y+v6IO95piv55So5oi35omL5Yqo57uI5q2i77yB6K+356iN5ZCO5YaN6K+VJyk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvZGUgPT0gNDAxKSB7XHJcbiAgICAgICAgLy8gdG9rZW4g6K6k6K+B5aSx6LSl77yM5Yi35pawIHRva2VuXHJcbiAgICAgICAgbmV3IFByb21pc2UoKHJlc29sdmUgLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgaWYgKCsrY291bnQgPiAxMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+WIt+aWsCB0b2tlbiDlkI7vvIzlsJ3or5Xor7fmsYLnlKjmiLfkuYvliY3ooqvmi6bmiKrnmoTor7fmsYLmrKHmlbDov4flpJrvvIHnqIvluo/pl67popjvvIHor7fmo4Dmn6UnKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmVmcmVzaFRva2VuKHJlc29sdmUpO1xyXG4gICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAvLyDmm7TmlrDmiJDlip/kvr/ph43mlrDlvIDlp4vkuYvliY3nlKjmiLfnmoTor7fmsYJcclxuICAgICAgICAgICAgdGhpcy5yZXN0YXJ0KCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgaWYgKGNvZGUgPT0gNTAwKSB7XHJcbiAgICAgICAgJGVycm9yKCfmnI3liqHlmajlj5HnlJ/lhoXpg6jplJnor6/vvIzor7fnqI3lkI7lho3or5UnKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHRydWU7XHJcbn07IiwibGV0IGtleSA9ICdfX3ZlcnNpb25fdGlwX2NvdW50X18zJztcclxubGV0IGNvdW50ID0gRy5zLmdldChrZXkpO1xyXG5pZiAoRy5pc051bGwoY291bnQpKSB7XHJcbiAgICBjb3VudCA9IDE7XHJcbn1cclxuY291bnQgPSBwYXJzZUludChjb3VudCk7XHJcbmlmIChpc0xvZ2luKCkpIHtcclxuICAgIGlmIChmYWxzZSkge1xyXG4gICAgICAgIC8vIOaPkOekuueJiOacrOabtOaWsFxyXG4gICAgICAgIGxheWVyLmFsZXJ0KGBcclxuICAgICAgICA8aDQgc3R5bGU9J2ZvbnQtd2VpZ2h0OmJvbGQ7IHRleHQtYWxpZ246IGNlbnRlcjttYXJnaW4tYm90dG9tOiA1cHg7Jz7niYjmnKzljYfnuqcgMS4wLjMgLT4gMS4wLjQ8L2g0PlxyXG4gICAgICAgIDxvbCBzdHlsZT0nbWFyZ2luLWJvdHRvbTogNXB4Oyc+XHJcbiAgICAgICAgICAgIDxsaT4xLiDkvJjljJbpobXpnaLkvZPpqow8L2xpPlxyXG4gICAgICAgICAgICA8bGk+Mi4g5LyY5YyW5Yqg6L295bGCPC9saT5cclxuICAgICAgICA8L29sPlxyXG4gICAgICAgIDxwIHN0eWxlPSdmb250LXNpemU6IDEycHg7Y29sb3I6ICM1NTU7Jz7or6Xmj5DnpLrkvJrlnKjnlKjmiLfngrnlh7smbmJzcDs8YiBzdHlsZT0nY29sb3I6IGJsYWNrOyc+5YWz6Zet5oyJ6ZKuPC9iPiZuYnNwO+S4pOasoeWQjuiHquWKqOWFs+mXreOAgjwvcD5cclxuICAgIGAgLCB7XHJcbiAgICAgICAgICAgIGJ0bjogWyflhbPpl60nXSAsXHJcbiAgICAgICAgICAgIGJ0bjEgKGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgRy5zLnNldChrZXkgLCBjb3VudCk7XHJcbiAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICBjbG9zZUJ0bjogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsb2FkaW5nOiB7XHJcbiAgICAgICAgbW91bnRlZCAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZyA9IG5ldyBMb2FkaW5nKHRoaXMuJHJlZnMubG9hZGluZy4kZWwgLCB7XHJcbiAgICAgICAgICAgICAgICBzdGF0dXM6ICdoaWRlJyAsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAnbGluZS1zY2FsZScgLFxyXG4gICAgICAgICAgICAgICAgY2xvc2UgKGFqYXggLCBrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDkuK3mlq3or7fmsYJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5hamF4W2FqYXhdIGluc3RhbmNlb2YgRy5hamF4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuYWpheFthamF4XS5uYXRpdmUoJ2Fib3J0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYucGVuZGluZ1trZXldID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG4gICAgfSAsXHJcbiAgICBzdGF0ZToge1xyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgLy8g5Yid5aeL54q25oCBXHJcbiAgICAgICAgICAgIGluaXRpYWxTdGF0ZSAobG9hZGluZyAsIGFqYXggLCBwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAvLyDkuK3mlq3or7fmsYJcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFqYXhbYWpheF0gaW5zdGFuY2VvZiBHLmFqYXgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFqYXhbYWpheF0ubmF0aXZlKCdhYm9ydCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g57uI5q2i6K+35rGC54q25oCBXHJcbiAgICAgICAgICAgICAgICBpZiAoRy5pc1N0cmluZyhwZW5kaW5nKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZ1twZW5kaW5nXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g5Lit5pat5Yqg6L295bGCXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnNbbG9hZGluZ10gaW5zdGFuY2VvZiBMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNbbG9hZGluZ10uaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgIC8vIOivt+axgueKtuaAgVxyXG4gICAgICAgICAgICBwZW5kaW5nU3RhdGUgKGxvYWRpbmcgLCBwZW5kaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnNbbG9hZGluZ10gaW5zdGFuY2VvZiBMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNbbG9hZGluZ10uc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKEcuaXNTdHJpbmcocGVuZGluZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmdbcGVuZGluZ10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICB9XHJcbiAgICB9ICxcclxuICAgIGxpc3Q6IHtcclxuICAgICAgICAvLyDor6XmlbDmja7ov5HnlKjkuo7lpI3liLbnspjotLTkvb/nlKjvvIzml6Dlhbbku5bkvZznlKhcclxuICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgIHBhZ2U6IHtcclxuICAgICAgICAgICAgICAgIHRvdGFsOiAwICxcclxuICAgICAgICAgICAgICAgIHBhZ2U6IDAgLFxyXG4gICAgICAgICAgICAgICAgcGVyX3BhZ2U6IDAgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgZm9ybToge1xyXG4gICAgICAgICAgICAgICAgcGFnZTogMVxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgYXBpOiBudWxsICxcclxuICAgICAgICAgICAgZG9tOiBudWxsICxcclxuICAgICAgICB9ICxcclxuICAgICAgICBwYWdlOiB7XHJcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgIC8vIOWIhumhteS6i+S7tlxyXG4gICAgICAgICAgICAgICAgcGFnZUV2ZW50IChwYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtLnBhZ2UgPSBwYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIGZpbHRlcjoge1xyXG4gICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAvLyDnlKjmiLfmj5DkuqRcclxuICAgICAgICAgICAgICAgIHN1Ym1pdCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtLnBhZ2UgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6YeN572uXHJcbiAgICAgICAgICAgICAgICByZXNldCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgayBpbiB0aGlzLmZvcm0pXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdiA9IHRoaXMuZm9ybVtrXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5mb3JtW2tdID0gRy5pc1N0cmluZyh2KSA/ICcnIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEcuaXNOdW1iZXIodikgPyAwIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHLmlzQXJyYXkodikgPyBbXSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEcuaXNPYmplY3QodikgPyB7fSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0KCk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIC8vIOaOkuW6j1xyXG4gICAgICAgICAgICAgICAgb3JkZXIgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyID0gRyhlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvcmRlciA9IHRhci5kYXRhKCdvcmRlcicpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpdGVtcyA9IHRhci5wYXJlbnQoKS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRhci5oaWdobGlnaHQoJ2ZvY3VzJyAsIGl0ZW1zLmdldCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcm0ub3JkZXIgPSBvcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnN1Ym1pdCgpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgICAgICBnZXQ6IHtcclxuICAgICAgICAgICAgLy8g6I635Y+W5pWw5o2u77yM5bGC57qn5pWw5o2uXHJcbiAgICAgICAgICAgIGZsb29yOiB7XHJcbiAgICAgICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6I635Y+W5pWw5o2uXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0RGF0YSAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2hvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFqYXgubGlzdCA9IHRoaXMuYXBpLmxpc3QodGhpcy5mb3JtICwgKHJlcyAsIGNvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kZXJyb3IocmVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhID0gcmVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zZXRBcmdzKHRoaXMuYWpheC5saXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIC8vIOiOt+WPluaVsOaNru+8jOmdnuWxgue6p+aVsOaNrlxyXG4gICAgICAgICAgICBub3JtYWw6IHtcclxuICAgICAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDojrflj5bmlbDmja5cclxuICAgICAgICAgICAgICAgICAgICBnZXREYXRhICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkYXRhQWN0ID0gdGhpcy5kYXRhQWN0ID8gdGhpcy5kYXRhQWN0IDogJ2xpc3QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFqYXhbZGF0YUFjdF0gPSB0aGlzLmFwaVtkYXRhQWN0XSh0aGlzLmZvcm0gLCAocmVzICwgY29kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5oaWRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRlcnJvcihyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSByZXMuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSByZXMuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucGFnZSA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuc2V0QXJncyh0aGlzLmFqYXhbZGF0YUFjdF0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgZGVsOiB7XHJcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgIC8vIOWIoOmZpOmAieS4remhuVxyXG4gICAgICAgICAgICAgICAgZGVsIChpZExpc3QgLCBmbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnBlbmRpbmcuZGVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmFsZXJ0KCfor7fmsYLkuK0uLi7or7fogJDlv4PnrYnlvoUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4LmRlbCA9IHRoaXMuYXBpW0cuaXNTdHJpbmcodGhpcy5kZWxBY3Rpb24pID8gdGhpcy5kZWxBY3Rpb24gOiAnZGVsJ10oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZF9saXN0OiBHLmpzb25FbmNvZGUoaWRMaXN0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gLCAocmVzICwgY29kZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBlbmRpbmcuZGVsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVycm9yKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJHN1Y2Nlc3MoJ+WIoOmZpOaIkOWKnycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdldERhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEcuaXNGdW5jdGlvbihmbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLnNldEFyZ3ModGhpcy5hamF4LmRlbCAsICdkZWwnKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOWIoOmZpOmAieS4remhuVxyXG4gICAgICAgICAgICAgICAgZGVsVGFyZ2V0IChpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlICwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOaPkOekulxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRpbmZvKCfkvaDnoa7lrpropoHliKDpmaTlkJfvvJ8nICwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuOiBbJ+ehruWumicgLCAn5Y+W5raIJ10gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnRuMTogcmVzb2x2ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjI6IHJlamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVsKFtpZF0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbElkKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAsIChpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllci5jbG9zZShpbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDliKDpmaTpgInkuK3poblcclxuICAgICAgICAgICAgICAgIGRlbFNlbGVjdGVkICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuZXcgUHJvbWlzZSgocmVzb2x2ZSAsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pZExpc3QubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy4kaW5mbygn6K+36YCJ5oup6KaB5Yig6Zmk55qE6aG5Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS50aGVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlICwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLiRpbmZvKCfkvaDnoa7lrpropoHmibnph4/liKDpmaTlkJfvvJ8nICwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjogWyfnoa7lrponICwgJ+WPlua2iCddICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4xOiByZXNvbHZlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjI6IHJlamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmNsb3NlKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWwodGhpcy5pZExpc3QgLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlkTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9ICwgKGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLmNsb3NlKGluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOmAieaLqeS6i+S7tlxyXG4gICAgICAgICAgICAgICAgc2VsZWN0RXZlbnQgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyID0gRyhlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IHRhci5kYXRhKCdpZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0YXIuaGFzQ2xhc3MoJ2ZvY3VzJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNlbGVjdGVkTGluZShpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZExpbmUoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOmAieS4reaJgOaciVxyXG4gICAgICAgICAgICAgICAgc2VsZWN0QWxsRXZlbnQgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyID0gRyhlLmN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGVja2VkID0gdGFyLm5hdGl2ZSgnY2hlY2tlZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB0cnMgPSB0aGlzLmRvbS50Ym9keS5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRycy5lYWNoKChkb20pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9tID0gRyhkb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBkb20uZGF0YSgnaWQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRMaW5lKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5zZWxlY3RlZExpbmUoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDpgInkuK3ooYxcclxuICAgICAgICAgICAgICAgIHNlbGVjdGVkTGluZSAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJzID0gdGhpcy5kb20udGJvZHkuY2hpbGRyZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lOiAndHInXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cnMubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyID0gdHJzLmp1bXAoaSAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyLmRhdGEoJ2lkJykgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ci5hZGRDbGFzcygnZm9jdXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYm94ID0gRygnLmMtYm94JyAsIGN1ci5nZXQoMCkpLm5hdGl2ZSgnY2hlY2tlZCcgLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkSWQoaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5Y+W5raI6YCJ5LitXHJcbiAgICAgICAgICAgICAgICB1bnNlbGVjdGVkTGluZSAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdHJzID0gdGhpcy5kb20udGJvZHkuY2hpbGRyZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdOYW1lOiAndHInXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cnMubGVuZ3RoOyArK2kpXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY3VyID0gdHJzLmp1bXAoaSAsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VyLmRhdGEoJ2lkJykgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1ci5yZW1vdmVDbGFzcygnZm9jdXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjYm94ID0gRygnLmMtYm94JyAsIGN1ci5nZXQoMCkpLm5hdGl2ZSgnY2hlY2tlZCcgLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbElkKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgICAgIC8vIOa3u+WKoFxyXG4gICAgICAgICAgICAgICAgYWRkSWQgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWRMaXN0LmluZGV4T2YoaWQpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaWRMaXN0LnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g5Yig6ZmkXHJcbiAgICAgICAgICAgICAgICBkZWxJZCAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGluZGV4ID0gdGhpcy5pZExpc3QuaW5kZXhPZihpZCkpID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaWRMaXN0LnNwbGljZShpbmRleCAsIDEpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIGZvcm0g6KGo5Y2VXHJcbiAgICBmb3JtOiB7XHJcbiAgICAgICAgZ2V0OiB7XHJcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgIGdldERhdGEgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyYW0ubW9kZSAhPSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEcuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zaG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hamF4LmdldERhdGEgPSB0aGlzLmFwaS5kZXRhaWwodGhpcy5wYXJhbS5pZCAsIChyZXMgLCBjb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuJGVycm9yKHJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybSA9IHJlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEcuaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLnNldEFyZ3ModGhpcy5hamF4LmdldERhdGEpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgICAgICAvLyDpgILnlKjkuo7ljZXlvKDlm77niYfkuIrkvKDnmoTml7blgJlcclxuICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICBtb3VudGVkICgpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgIC8vIOWwj+WbvuS4iuS8oFxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnMuaW1hZ2UgPSBuZXcgVXBsb2FkSW1hZ2UodGhpcy4kcmVmc1snaW1hZ2UtY29udGFpbmVyJ10gLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGx1Z2luVXJsOiB0b3BDb250ZXh0LnBsdWdpbiArICdVcGxvYWRJbWFnZS8nICxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlOiAnb3ZlcnJpZGUnICxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6ICB0b3BDb250ZXh0LmltYWdlQXBpICxcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogJ2ltYWdlJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzcyAocmVzICwgY29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRy5pc0Z1bmN0aW9uKHNlbGYuY2FsbGJhY2suaW1hZ2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbGxiYWNrLmltYWdlKHJlcyAsIGNvZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIGNvbmZpcm06IHtcclxuICAgICAgICAgICAgbWV0aG9kczoge1xyXG4gICAgICAgICAgICAgICAgY29uZmlybSAobmFtZSAsIHJvdXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBhY3Rpb24gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMucGFyYW0ubW9kZSlcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2VkaXQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ+e8lui+kSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGlvbiA9ICfmt7vliqAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3JlcG9ydCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb24gPSAn57yW6L6RJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uID0gJ+aTjeS9nCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOaPkOekuuaIkOWKn1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHN1Y2Nlc3MoJ+aTjeS9nOaIkOWKnycgLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ0bjogWyfnu6fnu60nICsgYWN0aW9uICwgbmFtZV0gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4xIChpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuY2xvc2UoaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYucGFyYW0ubW9kZSA9PSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxmLnJlbG9hZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnRuMiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmxvY2F0aW9uKHJvdXRlICwgbnVsbCAsICdfc2VsZicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgICAgICBtZW51U3dpdGNoOiB7XHJcbiAgICAgICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgICAgIGluaXRNZW51U3dpdGNoICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g6I+c5Y2V5YiH5o2iXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubWVudVN3aXRjaCA9IG5ldyBNZW51U3dpdGNoKHRoaXMuJHJlZnNbJ21lbnUtc3dpdGNoJ10uJGVsICwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDpu5jorqTlsZXnpLrnmoTnlYzpnaJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHRoaXMubWVudSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIOiPnOWNleWxleekuumjjuagvFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDpobnngrnlh7vlkI7lm57osINcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xpY2sgKGlkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5YiH5o2i5ZCO5Zue6LCDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuc3dpdGNoTWVudShpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAgICAgc3dpdGNoTWVudSAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvbS5vcHRpb25TZXQuZWFjaCgoZG9tKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvbSA9IEcoZG9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRvbS5kYXRhKCdpZCcpID09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb20ucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvbS5hZGRDbGFzcygnaGlkZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gLFxyXG4gICAgfSAsXHJcbn07IiwiaW1wb3J0IG1peGlucyBmcm9tICcuL21peGluT3B0aW9uLmpzJztcclxuXHJcbmNvbnN0IGhvc3QgPSAnLyc7XHJcbmNvbnN0IHBsdWdpbiA9IGAke2hvc3R9cGx1Z2luL2A7XHJcbmNvbnN0IGFwaSA9IGAke2hvc3R9YXBpL2FkbWluL2A7XHJcbmNvbnN0IGltYWdlQXBpRm9yd2FuZ0VkaXRvciA9IGAke2FwaX1maWxlL2ltYWdlRm9yV2FuZ0VkaXRvcmA7XHJcbmNvbnN0IGltYWdlQXBpID0gYCR7YXBpfWZpbGUvaW1hZ2VgO1xyXG5jb25zdCBmaWxlQXBpID0gYCR7YXBpfWZpbGUvZmlsZWA7XHJcblxyXG5PYmplY3QuYXNzaWduKHdpbmRvdyAsIHtcclxuICAgIG1peGlucyAsXHJcbiAgICAvLyDlhbHkuqvlj5jph49cclxuICAgIHRvcENvbnRleHQ6IHtcclxuICAgICAgICBob3N0ICxcclxuICAgICAgICBwbHVnaW4gLFxyXG4gICAgICAgIGFwaSAsXHJcbiAgICAgICAgaW5zOiB7fSAsXHJcbiAgICAgICAgLy8g5Yqo55S75pe26Ze0XHJcbiAgICAgICAgYW5pbWF0ZUR1cmF0aW9uOiAzMDAgLFxyXG4gICAgICAgIGltYWdlQXBpRm9yd2FuZ0VkaXRvciAsXHJcbiAgICAgICAgaW1hZ2VBcGkgLFxyXG4gICAgICAgIGZpbGVBcGkgLFxyXG4gICAgfSAsXHJcbn0pO1xyXG4iLCJpbXBvcnQgcm91dGVzIGZyb20gJy4vcm91dGVzLmpzJztcclxuXHJcbmNvbnN0IHJvdXRlciA9IG5ldyBWdWVSb3V0ZXIoe1xyXG4gICAgcm91dGVzXHJcbn0pO1xyXG5cclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKipcclxuICog55m75b2V6K6k6K+BICsg5p2D6ZmQ6K6k6K+B77yI5aaC5p6c6YeH5Y+W55qE5pa55byP5pivIHZ1ZS1yb3V0ZXIg6Lez6L2s77yB5aSa5qCH562+5pa55byP5LiN6ZyA6KaB77yB77yJXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxucm91dGVyLmJlZm9yZUVhY2goKHRvICwgZnJvbSAsIG5leHQpID0+IHtcclxuICAgIGxldCBjaGVjayA9IFsnL2xvZ2luJ107XHJcbiAgICAvLyDmo4Dmn6XnlKjmiLfnirbmgIFcclxuICAgIC8vIOWmguaenOacqueZu+W9le+8jOmCo+S5iOi3s+i9rOWbnuaZrumAmumhtemdolxyXG4gICAgaWYgKGlzTG9naW4oKSkge1xyXG4gICAgICAgIC8vIOW3sue7j+eZu+W9le+8jOi3s+i9rOWbnummlumhtVxyXG4gICAgICAgIGlmIChjaGVjay5pbmNsdWRlcyh0by5wYXRoKSkge1xyXG4gICAgICAgICAgICBuZXh0KHtuYW1lOiAnaG9tZSd9KTtcclxuICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIGlmICghY2hlY2suaW5jbHVkZXModG8ucGF0aCkpIHtcclxuICAgICAgICAgICAgbmV4dCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgbmV4dCgpO1xyXG59KTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHJvdXRlcjsiLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDlnKjlhYPntKDlhoXlrrnkuZ/og73kvb/nlKjnmoTlj5jph49cclxuICAgIHRvcENvbnRleHQgLFxyXG4gICAgLy8g5Lia5Yqh5a2X5YW4XHJcbiAgICBidXNpbmVzcyAsXHJcbiAgICAvLyDlvZPliY3nmbvlvZXnlKjmiLfnmoTmnYPpmZBcclxuICAgIHByaXY6IFtdICxcclxuICAgIC8vIOi3r+eUseWIl+ihqFxyXG4gICAgcm91dGU6IFtdICxcclxuICAgIC8vIOiPnOWNleaVsOaNrlxyXG4gICAgbWVudTogW10gLFxyXG4gICAgLy8g55So5oi3XHJcbiAgICB1c2VyOiB7fSAsXHJcbiAgICBvczoge1xyXG4gICAgICAgIGRldmVsb3Blcjoge30gLFxyXG4gICAgICAgIHN5c3RlbToge30gLFxyXG4gICAgfSAsXHJcbn07IiwiaW1wb3J0IHN0YXRlIGZyb20gJy4vc3RhdGUuanMnO1xyXG5pbXBvcnQgZ2V0dGVycyBmcm9tICcuL2dldHRlci5qcyc7XHJcbmltcG9ydCBtdXRhdGlvbnMgZnJvbSAnLi9tdXRhdGlvbi5qcyc7XHJcbmltcG9ydCBhY3Rpb25zIGZyb20gJy4vYWN0aW9uLmpzJztcclxuXHJcbi8vIOWmguaenOS9v+eUqOS6hiBtb2R1bGXvvIzor7fkuI3nlKjlnKjkvb/nlKhcclxuY29uc3Qgc3RvcmUgPSBuZXcgVnVleC5TdG9yZSh7XHJcbiAgICBzdGF0ZSAsXHJcbiAgICBnZXR0ZXJzICxcclxuICAgIG11dGF0aW9ucyAsXHJcbiAgICBhY3Rpb25zXHJcbn0pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgc3RvcmU7IiwiZXhwb3J0IGRlZmF1bHQge1xyXG5cclxufTsiLCJleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDmm7TmlrDnirbmgIFcclxuICAgIHByaXYgKHN0YXRlICwgZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLnByaXYgPSBkYXRhO1xyXG4gICAgfSAsXHJcblxyXG4gICAgcm91dGUgKHN0YXRlICwgZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLnJvdXRlID0gZGF0YTtcclxuICAgIH0gLFxyXG5cclxuICAgIG1lbnUgKHN0YXRlICwgZGF0YSkge1xyXG4gICAgICAgIHN0YXRlLm1lbnUgPSBkYXRhO1xyXG4gICAgfSAsXHJcblxyXG4gICAgdXNlciAoc3RhdGUgLCBkYXRhKSB7XHJcbiAgICAgICAgc3RhdGUudXNlciA9IGRhdGE7XHJcbiAgICB9ICxcclxuXHJcbiAgICBvcyAoc3RhdGUgLCBkYXRhKSB7XHJcbiAgICAgICAgc3RhdGUub3MgPSBkYXRhO1xyXG4gICAgfSAsXHJcbn07IiwiZXhwb3J0IGRlZmF1bHQge1xyXG5cclxufTsiLCJpbXBvcnQgcm91dGVyIGZyb20gJy4uLy4uL3Z1ZS9yb3V0ZXInO1xyXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi4vLi4vdnVlL3N0b3JlJztcclxuXHJcbk9iamVjdC5hc3NpZ24od2luZG93ICwge1xyXG4gICAgcm91dGVyICxcclxuICAgIHN0b3JlICxcclxufSk7IiwiY29uc3QgbG9naW5pbmcgPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pbi9sb2dpbmluZ2A7XHJcbmNvbnN0IGluZm8gPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pbi9pbmZvYDtcclxuY29uc3QgcmVmcmVzaFRva2VuID0gYCR7dG9wQ29udGV4dC5hcGl9b2F1dGgvdG9rZW5gO1xyXG5jb25zdCBhZG1pbiA9IGAke3RvcENvbnRleHQuYXBpfWFkbWluL3VzZXJgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1hZG1pbi91c2VyLz9gO1xyXG5jb25zdCBpbWFnZSA9IGAke3RvcENvbnRleHQuYXBpfWFkbWluL2ltYWdlYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOeUqOaIt+eZu+W9lVxyXG4gICAgbG9naW4gKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBsb2dpbmluZyAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5rOo6ZSAXHJcbiAgICBsb2dvdXQgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGxvZ2luaW5nICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6I635Y+W5b2T5YmN55m75b2V55So5oi355u45YWz5L+h5oGvXHJcbiAgICBpbmZvIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbmZvICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDojrflj5bmnIDmlrDnmoQgdG9rZW5cclxuICAgIHJlZnJlc2hUb2tlbiAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJlZnJlc2hUb2tlbiAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOiOt+WPlueUqOaIt+WIl+ihqFxyXG4gICAgLy8g6I635Y+W5pyA5paw55qEIHRva2VuXHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWRtaW4gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFkbWluICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWRtaW4gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOiOt+WPlueUqOaIt+WIl+ihqFxyXG4gICAgLy8g6I635Y+W5pyA5paw55qEIHRva2VuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgaW1hZ2UgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbWFnZSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJcclxuY29uc3QgdXNlciA9IGAke3RvcENvbnRleHQuYXBpfXVzZXIvdXNlcmA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdXNlciAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9YXJ0aWNsZVR5cGUvYXJ0aWNsZVR5cGVgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1hcnRpY2xlVHlwZS9hcnRpY2xlVHlwZS8/YDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOivpuaDhVxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS/ruaUuVxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5re75YqgXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWFydGljbGUvYXJ0aWNsZWA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWFydGljbGUvYXJ0aWNsZS8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1hcnRpY2xlL2ltYWdlYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOivpuaDhVxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS/ruaUuVxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5re75YqgXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXNob3dJbWFnZS9pbWFnZWA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfXNob3dJbWFnZS9pbWFnZS8/YDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCB2ZXJpZnlDb2RlID0gYCR7dG9wQ29udGV4dC5hcGl9bWlzYy92ZXJpZnlDb2RlYDtcclxuY29uc3QgdHJhbnNsYXRpb24gPSBgJHt0b3BDb250ZXh0LmFwaX10cmFuc2xhdGlvbi90cmFuc2xhdGlvbmA7XHJcblxyXG5sZXQgeGhyRm9yQ29kZSA9IG51bGw7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOiOt+WPlumqjOivgeeggVxyXG4gICAgdmVyaWZ5Q29kZSAgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIGlmICh4aHJGb3JDb2RlIGluc3RhbmNlb2YgRy5hamF4KSB7XHJcbiAgICAgICAgICAgIHhockZvckNvZGUubmF0aXZlKCdhYm9ydCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4geGhyRm9yQ29kZSA9IEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdmVyaWZ5Q29kZSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOe/u+ivkVxyXG4gICAgdHJhbnNsYXRlICAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdHJhbnNsYXRpb24gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IHJvdXRlID0gYCR7dG9wQ29udGV4dC5hcGl9cm91dGUvcm91dGVgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1yb3V0ZS9yb3V0ZS8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1yb3V0ZS9pbWFnZWA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICAvLyDmlofnq6DliIbnsbvliJfooahcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByb3V0ZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByb3V0ZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm91dGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOWIoOmZpFxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm91dGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbiAgICAvLyDmm7TmlrBcclxuICAgIGltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3Qgcm9sZSA9IGAke3RvcENvbnRleHQuYXBpfXJvbGUvcm9sZWA7XHJcbmNvbnN0IGluZm8gPSBgJHt0b3BDb250ZXh0LmFwaX1yb2xlL2luZm8vP2A7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfXJvbGUvcm9sZS8/YDtcclxuY29uc3QgYXV0aCA9IGAke3RvcENvbnRleHQuYXBpfXJvbGUvYXV0aGA7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfXJvbGUvYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOaWh+eroOWIhuexu+WIl+ihqFxyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHJvbGUgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm9sZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogcm9sZSAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5Yig6ZmkXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByb2xlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOinkuiJsuadg+mZkFxyXG4gICAgaW5mbyAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBpbmZvLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYXV0aCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGF1dGggLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgYnJhbmQgPSBgJHt0b3BDb250ZXh0LmFwaX1icmFuZC9icmFuZGA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWJyYW5kL2JyYW5kLz9gO1xyXG5jb25zdCBpbWFnZSA9IGAke3RvcENvbnRleHQuYXBpfWJyYW5kL2ltYWdlYDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9YnJhbmQvYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBicmFuZCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBicmFuZCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOa3u+WKoFxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYnJhbmQgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOWIoOmZpFxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYnJhbmQgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBjYXJTZXJpZXNHcm91cCA9IGAke3RvcENvbnRleHQuYXBpfWNhclNlcmllc0dyb3VwL2dyb3VwYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyU2VyaWVzR3JvdXAvZ3JvdXAvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhclNlcmllc0dyb3VwL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzR3JvdXAgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBjYXJTZXJpZXNHcm91cCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGNhclNlcmllc0dyb3VwICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBjYXJTZXJpZXNHcm91cCAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxufTsiLCJjb25zdCBjYXJTZXJpZXMgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJTZXJpZXMvc2VyaWVzYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyU2VyaWVzL3Nlcmllcy8/YDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyU2VyaWVzL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogY2FyU2VyaWVzICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBjYXJTZXJpZXMgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyQ29uZmlndXJhdGlvbkdyb3VwL2dyb3VwYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyQ29uZmlndXJhdGlvbkdyb3VwL2dyb3VwLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJDb25maWd1cmF0aW9uR3JvdXAvYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb24vY2FyQ29uZmlndXJhdGlvbmA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb24vY2FyQ29uZmlndXJhdGlvbi8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJDb25maWd1cmF0aW9uL2ltYWdlYDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyQ29uZmlndXJhdGlvbi9hbGxgO1xyXG5jb25zdCBncm91cCA9IGAke3RvcENvbnRleHQuYXBpfWNhckNvbmZpZ3VyYXRpb24vZ3JvdXBgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5paH56ug5YiG57G75YiX6KGoXHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5re75YqgXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliIbnu4TmlbDmja5cclxuICAgIGdyb3VwIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBncm91cCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJUeXBlL2NhclR5cGVgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1jYXJUeXBlL2NhclR5cGUvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhclR5cGUvYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWNhck1vZGVsL2Nhck1vZGVsYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyTW9kZWwvY2FyTW9kZWwvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhck1vZGVsL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvbk1vZHVsZS9tb2R1bGVgO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Nb2R1bGUvbW9kdWxlLz9gO1xyXG5jb25zdCBhbGwgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Nb2R1bGUvYWxsYDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Nb2R1bGUvaW1hZ2VgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGV0YWlsIChpZCAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGRldGFpbC5yZXBsYWNlKCc/JyAsIGlkKSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvbkdyb3VwL2dyb3VwYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uR3JvdXAvZ3JvdXAvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvbkdyb3VwL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25Qb3MvcG9zYDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uUG9zL3Bvcy8/YDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9ZGV0ZWN0aW9uUG9zL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZWwgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2RlbGV0ZScgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25JdGVtL2l0ZW1gO1xyXG5jb25zdCBkZXRhaWwgPSBgJHt0b3BDb250ZXh0LmFwaX1kZXRlY3Rpb25JdGVtL2l0ZW0vP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWRldGVjdGlvbkl0ZW0vYWxsYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXNlcnZpY2Uvc2VydmljZWA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfXNlcnZpY2Uvc2VydmljZS8/YDtcclxuY29uc3QgaW1hZ2UgPSBgJHt0b3BDb250ZXh0LmFwaX1zZXJ2aWNlL2ltYWdlYDtcclxuY29uc3QgYWxsID0gYCR7dG9wQ29udGV4dC5hcGl9c2VydmljZS9hbGxgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgLy8g5paH56ug5YiG57G75YiX6KGoXHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDor6bmg4VcclxuICAgIGRldGFpbCAoaWQgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBkZXRhaWwucmVwbGFjZSgnPycgLCBpZCkgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkv67mlLlcclxuICAgIGVkaXQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3BhdGNoJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5re75YqgXHJcbiAgICBhZGQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3Bvc3QnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDliKDpmaRcclxuICAgIGRlbCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5LiK5Lyg5aS05YOPXHJcbiAgICBpbWFnZSAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGltYWdlICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ3B1dCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOS4iuS8oOWktOWDj1xyXG4gICAgYWxsIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBhbGwgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyL2NhcmA7XHJcbmNvbnN0IGRldGFpbCA9IGAke3RvcENvbnRleHQuYXBpfWNhci9jYXIvP2A7XHJcbmNvbnN0IGFsbCA9IGAke3RvcENvbnRleHQuYXBpfWNhci9hbGxgO1xyXG5jb25zdCBpbWFnZSA9IGAke3RvcENvbnRleHQuYXBpfWNhci9pbWFnZWA7XHJcbmNvbnN0IHRodW1iID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyL3RodW1iYDtcclxuY29uc3QgcnVsZSA9IGAke3RvcENvbnRleHQuYXBpfWNhci9ydWxlYDtcclxuY29uc3QgcmVwb3J0ID0gYCR7dG9wQ29udGV4dC5hcGl9Y2FyL3JlcG9ydGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZWRpdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgYWRkIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IGFsbCAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIHRodW1iIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogdGh1bWIgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yICxcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yICxcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIGRlbEltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBydWxlIChzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBydWxlICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICBnZXRSZXBvcnQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByZXBvcnQgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvciAsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICByZXBvcnQgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiByZXBvcnQgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3IgLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXBsYXRmb3JtL2FsbGA7XHJcblxyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBhbGwgKHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9c2FsZUFwcGxpY2F0aW9uL3NhbGVBcHBsaWNhdGlvbmA7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgdXBkYXRlU3RhdHVzIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1yZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uL3JlY29tbWVuZGF0aW9uQXBwbGljYXRpb25gO1xyXG5leHBvcnQgZGVmYXVsdCB7XHJcbiAgICBsaXN0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuICAgIHVwZGF0ZVN0YXR1cyAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxufTsiLCJjb25zdCBtYWluID0gYCR7dG9wQ29udGV4dC5hcGl9c3RhZ2luZ0J1eUFwcGxpY2F0aW9uL3N0YWdpbmdCdXlBcHBsaWNhdGlvbmA7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgdXBkYXRlU3RhdHVzIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IG1haW4gPSBgJHt0b3BDb250ZXh0LmFwaX1yZXNlcnZhdGlvbi9yZXNlcnZhdGlvbmA7XHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIGxpc3QgKGRhdGEgLCBzdWNjZXNzICwgZXJyb3IpIHtcclxuICAgICAgICByZXR1cm4gRy5hamF4KHtcclxuICAgICAgICAgICAgdXJsOiBtYWluICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG4gICAgdXBkYXRlU3RhdHVzIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwYXRjaCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG59OyIsImNvbnN0IGluZm8gPSBgJHt0b3BDb250ZXh0LmFwaX1wYW5uZWwvaW5mb2A7XHJcbmNvbnN0IG1vbnRoID0gYCR7dG9wQ29udGV4dC5hcGl9cGFubmVsL21vbnRoYDtcclxuY29uc3QgcXVhcnRlciA9IGAke3RvcENvbnRleHQuYXBpfXBhbm5lbC9xdWFydGVyYDtcclxuY29uc3QgeWVhciA9IGAke3RvcENvbnRleHQuYXBpfXBhbm5lbC95ZWFyYDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIC8vIOeUqOaIt+eZu+W9lVxyXG4gICAgaW5mbyAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW5mbyAsXHJcbiAgICAgICAgICAgIG1ldGhvZDogJ2dldCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIG1vbnRoIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbW9udGggLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgcXVhcnRlciAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHF1YXJ0ZXIgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgeWVhciAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IHllYXIgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdnZXQnICxcclxuICAgICAgICAgICAgZGF0YSAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiY29uc3QgbWFpbiA9IGAke3RvcENvbnRleHQuYXBpfXN0b3J5L3N0b3J5YDtcclxuY29uc3QgZGV0YWlsID0gYCR7dG9wQ29udGV4dC5hcGl9c3Rvcnkvc3RvcnkvP2A7XHJcbmNvbnN0IGltYWdlID0gYCR7dG9wQ29udGV4dC5hcGl9c3RvcnkvaW1hZ2VgO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgbGlzdCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g6K+m5oOFXHJcbiAgICBkZXRhaWwgKGlkICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogZGV0YWlsLnJlcGxhY2UoJz8nICwgaWQpICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcblxyXG4gICAgLy8g5L+u5pS5XHJcbiAgICBlZGl0IChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdwdXQnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDmt7vliqBcclxuICAgIGFkZCAoZGF0YSAsIHN1Y2Nlc3MgLCBlcnJvcikge1xyXG4gICAgICAgIHJldHVybiBHLmFqYXgoe1xyXG4gICAgICAgICAgICB1cmw6IG1haW4gLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcgLFxyXG4gICAgICAgICAgICBzdWNjZXNzICxcclxuICAgICAgICAgICAgZXJyb3JcclxuICAgICAgICB9KTtcclxuICAgIH0gLFxyXG5cclxuICAgIC8vIOWIoOmZpFxyXG4gICAgZGVsIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogbWFpbiAsXHJcbiAgICAgICAgICAgIGRhdGEgLFxyXG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkuIrkvKDlpLTlg49cclxuICAgIGltYWdlIChkYXRhICwgc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogaW1hZ2UgLFxyXG4gICAgICAgICAgICBkYXRhICxcclxuICAgICAgICAgICAgbWV0aG9kOiAncGF0Y2gnICxcclxuICAgICAgICAgICAgc3VjY2VzcyAsXHJcbiAgICAgICAgICAgIGVycm9yXHJcbiAgICAgICAgfSk7XHJcbiAgICB9ICxcclxuXHJcbiAgICAvLyDkuIrkvKDlpLTlg49cclxuICAgIGFsbCAoc3VjY2VzcyAsIGVycm9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEcuYWpheCh7XHJcbiAgICAgICAgICAgIHVybDogYWxsICxcclxuICAgICAgICAgICAgbWV0aG9kOiAnZ2V0JyAsXHJcbiAgICAgICAgICAgIHN1Y2Nlc3MgLFxyXG4gICAgICAgICAgICBlcnJvclxyXG4gICAgICAgIH0pO1xyXG4gICAgfSAsXHJcbn07IiwiLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIGFwaSDorr7nva5cclxuICogKioqKioqKioqKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCBhZG1pbkFwaSBmcm9tICcuLi8uLi9hcGkvYWRtaW4uanMnO1xyXG5pbXBvcnQgdXNlckFwaSBmcm9tICcuLi8uLi9hcGkvdXNlci5qcyc7XHJcbmltcG9ydCBhcnRpY2xlVHlwZUFwaSBmcm9tICcuLi8uLi9hcGkvYXJ0aWNsZVR5cGUuanMnO1xyXG5pbXBvcnQgYXJ0aWNsZUFwaSBmcm9tICcuLi8uLi9hcGkvYXJ0aWNsZS5qcyc7XHJcbmltcG9ydCBzaG93SW1hZ2VBcGkgZnJvbSAnLi4vLi4vYXBpL3Nob3dJbWFnZS5qcyc7XHJcbmltcG9ydCBtaXNjQXBpIGZyb20gJy4uLy4uL2FwaS9taXNjLmpzJztcclxuaW1wb3J0IHJvdXRlQXBpIGZyb20gJy4uLy4uL2FwaS9yb3V0ZS5qcyc7XHJcbmltcG9ydCByb2xlQXBpIGZyb20gJy4uLy4uL2FwaS9yb2xlLmpzJztcclxuaW1wb3J0IGJyYW5kQXBpIGZyb20gJy4uLy4uL2FwaS9CcmFuZC5qcyc7XHJcbmltcG9ydCBjYXJTZXJpZXNHcm91cEFwaSBmcm9tICcuLi8uLi9hcGkvY2FyU2VyaWVzR3JvdXAuanMnO1xyXG5pbXBvcnQgY2FyU2VyaWVzQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJTZXJpZXMuanMnO1xyXG5pbXBvcnQgY2FyQ29uZmlndXJhdGlvbkdyb3VwQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJDb25maWd1cmF0aW9uR3JvdXAuanMnO1xyXG5pbXBvcnQgY2FyQ29uZmlndXJhdGlvbkFwaSBmcm9tICcuLi8uLi9hcGkvY2FyQ29uZmlndXJhdGlvbi5qcyc7XHJcbmltcG9ydCBjYXJUeXBlQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJUeXBlLmpzJztcclxuaW1wb3J0IGNhck1vZGVsQXBpIGZyb20gJy4uLy4uL2FwaS9jYXJNb2RlbC5qcyc7XHJcbmltcG9ydCBkZXRlY3Rpb25Nb2R1bGVBcGkgZnJvbSAnLi4vLi4vYXBpL2RldGVjdGlvbk1vZHVsZS5qcyc7XHJcbmltcG9ydCBkZXRlY3Rpb25Hcm91cEFwaSBmcm9tICcuLi8uLi9hcGkvZGV0ZWN0aW9uR3JvdXAuanMnO1xyXG5pbXBvcnQgZGV0ZWN0aW9uUG9zQXBpIGZyb20gJy4uLy4uL2FwaS9kZXRlY3Rpb25Qb3MuanMnO1xyXG5pbXBvcnQgZGV0ZWN0aW9uSXRlbUFwaSBmcm9tICcuLi8uLi9hcGkvZGV0ZWN0aW9uSXRlbS5qcyc7XHJcbmltcG9ydCBzZXJ2aWNlQXBpIGZyb20gJy4uLy4uL2FwaS9zZXJ2aWNlLmpzJztcclxuaW1wb3J0IGNhckFwaSBmcm9tICcuLi8uLi9hcGkvY2FyLmpzJztcclxuaW1wb3J0IHBsYXRmb3JtQXBpIGZyb20gJy4uLy4uL2FwaS9wbGF0Zm9ybS5qcyc7XHJcbmltcG9ydCBzYWxlQXBwbGljYXRpb25BcGkgZnJvbSAnLi4vLi4vYXBpL3NhbGVBcHBsaWNhdGlvbi5qcyc7XHJcbmltcG9ydCByZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uQXBpIGZyb20gJy4uLy4uL2FwaS9yZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uLmpzJztcclxuaW1wb3J0IHN0YWdpbmdCdXlBcHBsaWNhdGlvbkFwaSBmcm9tICcuLi8uLi9hcGkvc3RhZ2luZ0J1eUFwcGxpY2F0aW9uLmpzJztcclxuaW1wb3J0IHJlc2VydmF0aW9uQXBpIGZyb20gJy4uLy4uL2FwaS9yZXNlcnZhdGlvbi5qcyc7XHJcbmltcG9ydCBwYW5uZWxBcGkgZnJvbSAnLi4vLi4vYXBpL3Bhbm5lbC5qcyc7XHJcbmltcG9ydCBzdG9yeUFwaSBmcm9tICcuLi8uLi9hcGkvc3RvcnkuanMnO1xyXG5cclxuT2JqZWN0LmFzc2lnbih3aW5kb3cgLCB7XHJcbiAgICBhZG1pbkFwaSAsXHJcbiAgICBhcnRpY2xlVHlwZUFwaSAsXHJcbiAgICBhcnRpY2xlQXBpICxcclxuICAgIHNob3dJbWFnZUFwaSAsXHJcbiAgICBtaXNjQXBpICxcclxuICAgIHJvdXRlQXBpICxcclxuICAgIHJvbGVBcGkgLFxyXG4gICAgYnJhbmRBcGkgLFxyXG4gICAgY2FyU2VyaWVzR3JvdXBBcGkgLFxyXG4gICAgY2FyU2VyaWVzQXBpICxcclxuICAgIGNhckNvbmZpZ3VyYXRpb25Hcm91cEFwaSAsXHJcbiAgICBjYXJDb25maWd1cmF0aW9uQXBpICxcclxuICAgIGNhclR5cGVBcGkgLFxyXG4gICAgY2FyTW9kZWxBcGkgLFxyXG4gICAgZGV0ZWN0aW9uTW9kdWxlQXBpICxcclxuICAgIGRldGVjdGlvbkdyb3VwQXBpICxcclxuICAgIGRldGVjdGlvblBvc0FwaSAsXHJcbiAgICBkZXRlY3Rpb25JdGVtQXBpICxcclxuICAgIHNlcnZpY2VBcGkgLFxyXG4gICAgY2FyQXBpICxcclxuICAgIHBsYXRmb3JtQXBpICxcclxuICAgIHNhbGVBcHBsaWNhdGlvbkFwaSAsXHJcbiAgICByZWNvbW1lbmRhdGlvbkFwcGxpY2F0aW9uQXBpICxcclxuICAgIHN0YWdpbmdCdXlBcHBsaWNhdGlvbkFwaSAsXHJcbiAgICByZXNlcnZhdGlvbkFwaSAsXHJcbiAgICB1c2VyQXBpICxcclxuICAgIHBhbm5lbEFwaSAsXHJcbiAgICBzdG9yeUFwaSAsXHJcbn0pOyIsImV4cG9ydCBkZWZhdWx0IHtcclxuICAgIHN0b3JlICxcclxuICAgIHJvdXRlciAsXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgZm9yY2VMb2dvdXQgLFxyXG4gICAgICAgIGlzTG9naW4gLFxyXG4gICAgICAgIHZTY3JvbGwgLFxyXG4gICAgICAgIGdldENsYXNzICxcclxuICAgICAgICAkc3VjY2VzcyAsXHJcbiAgICAgICAgJGVycm9yICxcclxuICAgICAgICAkbXNnICxcclxuICAgICAgICAkaW5mbyAsXHJcbiAgICAgICAgJHRpcCAsXHJcbiAgICAgICAgJHVua25vdyAsXHJcbiAgICAgICAgZmlyc3RMZXR0ZXIgLFxyXG4gICAgICAgIGRldGVybWluZSAsXHJcbiAgICAgICAgLy8g6YCa55+lXHJcbiAgICAgICAgbm90aWNlICh0eXBlICwgdGl0bGUgLCBkZXNjID0gJycpIHtcclxuICAgICAgICAgICAgdGhpcy4kTm90aWNlW3R5cGVdKHtcclxuICAgICAgICAgICAgICAgIHRpdGxlICxcclxuICAgICAgICAgICAgICAgIGRlc2MgLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBzTm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGljZSgnc3VjY2VzcycgLCB0aXRsZSAsIGRlc2MpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICB3Tm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGljZSgnd2FybmluZycgLCB0aXRsZSAsIGRlc2MpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBpTm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGljZSgnaW5mbycgLCB0aXRsZSAsIGRlc2MpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBlTm90aWNlICh0aXRsZSAsIGRlc2MgPSAnJykge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGljZSgnZXJyb3InICwgdGl0bGUgLCBkZXNjKTtcclxuICAgICAgICB9ICxcclxuICAgICAgICB0b0xpbmsgKHVybCkge1xyXG4gICAgICAgICAgICB3aW5kb3cub3Blbih1cmwgLCAnX2JsYW5rJyk7XHJcbiAgICAgICAgfSAsXHJcbiAgICB9ICxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuXHJcbiAgICB9XHJcbn07IiwiLyoqXHJcbiAqICoqKioqKioqKioqKioqKioqKlxyXG4gKiDlhajlsYDmt7flhaVcclxuICogKioqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG5pbXBvcnQgbWl4aW4gZnJvbSAnLi4vLi4vdnVlL21peGluJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKlxyXG4gKiDliJ3lp4vljJbku6PnoIFcclxuICogKioqKioqKioqKioqKioqKipcclxuICovXHJcblZ1ZS5taXhpbihtaXhpbik7IiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiYXBwXCIgfSxcbiAgICBbX2MoXCJyb3V0ZXItdmlld1wiKSwgX3ZtLl92KFwiIFwiKSwgX2MoXCJ2LWxvYWRpbmdcIiwgeyByZWY6IFwibG9hZGluZ1wiIH0pXSxcbiAgICAxXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPVwiYXBwXCI+XHJcbiAgICAgICAgPHJvdXRlci12aWV3Pjwvcm91dGVyLXZpZXc+XHJcbiAgICAgICAgPHYtbG9hZGluZyByZWY9XCJsb2FkaW5nXCI+PC92LWxvYWRpbmc+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiAndi1hcHAnICxcclxuICAgICAgICBkYXRhICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGluczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvYWRpbmc6IG51bGwgLFxyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICBkb206IHt9ICxcclxuICAgICAgICAgICAgICAgIGFqYXg6IHt9ICxcclxuICAgICAgICAgICAgICAgIHBlbmRpbmc6IHt9ICxcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB7fSAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgbWl4aW5zOiBbXHJcbiAgICAgICAgICAgIG1peGlucy5sb2FkaW5nICxcclxuICAgICAgICBdICxcclxuICAgICAgICBtb3VudGVkICgpIHtcclxuXHJcbiAgICAgICAgfSAsXHJcbiAgICB9O1xyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL0FwcC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL0FwcC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjM0MmYzNTYmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vQXBwLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMjM0MmYzNTZcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFx3b3JrXFxcXGNvZGVcXFxcY2FyXFxcXHB1YmxpY1xcXFxtb2R1bGVcXFxcYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzIzNDJmMzU2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzIzNDJmMzU2JywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9BcHAudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTIzNDJmMzU2JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzIzNDJmMzU2Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzb3VyY2UvdnVlL3ZpZXcvQXBwLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX3ZtLl9tKDApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIkxvYWRpbmdcIiB9LCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYmdcIiB9KSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjb25zXCIgfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidGV4dFwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImxpbmVcIiB9LCBbX3ZtLl92KFwi5LiK5Lyg5Z+65pys5L+h5oGv5byA5aeLXCIpXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYW5pbWF0ZVwiIH0sIFtcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaXRlbSBjZW50ZXIgbGluZS1zY2FsZSBoaWRlXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIpLFxuICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICBfYyhcImRpdlwiKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIilcbiAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaXRlbSBjZW50ZXIgYmFsbC1wdWxzZSBoaWRlXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiksXG4gICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIml0ZW0gcm9sbC1sb2FkZXIgaGlkZVwiIH0sIFtcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsb2FkZXJcIiB9LCBbXG4gICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsb2FkZXItb3V0dGVyXCIgfSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvYWRlci1pbm5lclwiIH0pXG4gICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pXG4gICAgICAgIF0pLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImJ0bnNcIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidG4gY2xvc2VcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInBvc2l0aXZlXCIgfSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJuZWdhdGl2ZVwiIH0pXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8IS0tIOWKoOi9veWxgiAtLT5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPCEtLSDliqDovb3lhYPntKAgLS0+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIkxvYWRpbmdcIj5cclxuICAgICAgICAgICAgPCEtLSDog4zmma/popzoibIgLS0+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2JnJz48L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNvbnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0ZXh0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPCEtLSDov5vluqbkv6Hmga/vvJrku4XlnKjlvIDlj5Hml7bkv53nlZkgLS0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJsaW5lXCI+5LiK5Lyg5Z+65pys5L+h5oGv5byA5aeLPC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8IS0tIOWKoOi9veWKqOeUuyAtLT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJhbmltYXRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPCEtLSBsaW5lLXNjYWxlIC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtIGNlbnRlciBsaW5lLXNjYWxlIGhpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIGJhbGwtcHVybHNlIC0tPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtIGNlbnRlciBiYWxsLXB1bHNlIGhpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8IS0tIGxvYWRlciAtLT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbSByb2xsLWxvYWRlciBoaWRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkZXJcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2FkZXItb3V0dGVyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibG9hZGVyLWlubmVyXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8IS0tIOWFs+mXreaMiemSriAtLT5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImJ0bnNcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJidG4gY2xvc2VcIj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zaXRpdmVcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibmVnYXRpdmVcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG48L3RlbXBsYXRlPlxyXG5cclxuPHNjcmlwdD5cclxuICAgIGV4cG9ydCBkZWZhdWx0IHtcclxuICAgICAgICBuYW1lOiBcInYtbG9hZGluZ1wiICxcclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9sb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbG9hZGluZy52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL2xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTAxOTIyZmQxJnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2xvYWRpbmcudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9sb2FkaW5nLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMDE5MjJmZDFcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFx3b3JrXFxcXGNvZGVcXFxcY2FyXFxcXHB1YmxpY1xcXFxtb2R1bGVcXFxcYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzAxOTIyZmQxJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzAxOTIyZmQxJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9sb2FkaW5nLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wMTkyMmZkMSZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwMTkyMmZkMScsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic291cmNlL3Z1ZS92aWV3L3B1YmxpYy9sb2FkaW5nLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXG4gICAgXCJpLXNlbGVjdFwiLFxuICAgIHtcbiAgICAgIHN0eWxlOiBcIndpZHRoOlwiICsgX3ZtLndpZHRoICsgXCJweFwiLFxuICAgICAgbW9kZWw6IHtcbiAgICAgICAgdmFsdWU6IF92bS5jVmFsdWUsXG4gICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHtcbiAgICAgICAgICBfdm0uY1ZhbHVlID0gJCR2XG4gICAgICAgIH0sXG4gICAgICAgIGV4cHJlc3Npb246IFwiY1ZhbHVlXCJcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIF92bS5oYXNcbiAgICAgICAgPyBfYyhcImktb3B0aW9uXCIsIHsgYXR0cnM6IHsgdmFsdWU6IF92bS50b3Aua2V5IH0gfSwgW1xuICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0udG9wLnZhbHVlKSlcbiAgICAgICAgICBdKVxuICAgICAgICA6IF92bS5fZSgpLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbChfdm0uZGF0YSwgZnVuY3Rpb24odikge1xuICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgXCJpLW9wdGlvblwiLFxuICAgICAgICAgIHsga2V5OiB2W192bS5hdHRyLmlkXSwgYXR0cnM6IHsgdmFsdWU6IHZbX3ZtLmF0dHIuaWRdIH0gfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfdm0uX3YoXG4gICAgICAgICAgICAgIF92bS5fcyhcbiAgICAgICAgICAgICAgICB2W192bS5hdHRyLmZsb29yXSA+IDFcbiAgICAgICAgICAgICAgICAgID8gXCJ8XCIgKyBcIl9cIi5yZXBlYXQoKHZbX3ZtLmF0dHIuZmxvb3JdIC0gMSkgKiA0KVxuICAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICkgKyBfdm0uX3Modltfdm0uYXR0ci5uYW1lXSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICBdXG4gICAgICAgIClcbiAgICAgIH0pXG4gICAgXSxcbiAgICAyXG4gIClcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCI8dGVtcGxhdGU+XHJcbiAgICA8aS1zZWxlY3Qgdi1tb2RlbD1cImNWYWx1ZVwiIDpzdHlsZT1cIid3aWR0aDonICsgd2lkdGggKyAncHgnXCI+XHJcbiAgICAgICAgPGktb3B0aW9uIHYtaWY9XCJoYXNcIiA6dmFsdWU9XCJ0b3Aua2V5XCI+e3sgdG9wLnZhbHVlIH19PC9pLW9wdGlvbj5cclxuICAgICAgICA8aS1vcHRpb24gdi1mb3I9XCJ2IGluIGRhdGFcIiA6dmFsdWU9XCJ2W2F0dHIuaWRdXCIgOmtleT1cInZbYXR0ci5pZF1cIj57eyB2W2F0dHIuZmxvb3JdID4gMSA/ICd8JyArICdfJy5yZXBlYXQoKHZbYXR0ci5mbG9vcl0gLSAxKSAqIDQpIDogJycgfX17eyB2W2F0dHIubmFtZV0gfX08L2ktb3B0aW9uPlxyXG4gICAgPC9pLXNlbGVjdD5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJ2LXNlbGVjdFwiICxcclxuICAgICAgICBkYXRhICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGNWYWx1ZTogMCAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgdmFsdWU6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFtTdHJpbmcgLCBOdW1iZXJdICxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQXJyYXkgLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZWQ6IHRydWUgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgd2lkdGg6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IE51bWJlciAsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAyMDAgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgLy8g5piv5ZCm6ZyA6KaB6aG257qn6aG5XHJcbiAgICAgICAgICAgIGhhczoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogQm9vbGVhbiAsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0cnVlICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIHRvcDoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0ICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogMCAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiAn6aG257qn5YiG57G7JyAsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgYXR0cjoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0ICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnaWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbG9vcjogJ2Zsb29yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ25hbWUnLFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIHdhdGNoOiB7XHJcbiAgICAgICAgICAgIGNWYWx1ZSAobnYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JyAsIG52KTtcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICBpbW1lZGlhdGU6IHRydWUgLFxyXG4gICAgICAgICAgICAgICAgaGFuZGxlciAobnYpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNWYWx1ZSA9IG52O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSAsXHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VsZWN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc2VsZWN0LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vc2VsZWN0LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0yMWRiYmJmNyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9zZWxlY3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9zZWxlY3QudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCIyMWRiYmJmN1wiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXHdvcmtcXFxcY29kZVxcXFxjYXJcXFxccHVibGljXFxcXG1vZHVsZVxcXFxhZG1pblxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnMjFkYmJiZjcnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnMjFkYmJiZjcnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL3NlbGVjdC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MjFkYmJiZjcmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMjFkYmJiZjcnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9wdWJsaWMvc2VsZWN0LnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYnJhbmQtY29udGFpbmVyXCIgfSwgW1xuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWZ0XCIgfSwgW1xuICAgICAgICBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwibGV0dGVyXCIgfSxcbiAgICAgICAgICBbXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJjdXJcIiwgYXR0cnM6IHsgXCJkYXRhLXR5cGVcIjogXCJhbGxcIiB9IH0sIFtcbiAgICAgICAgICAgICAgX3ZtLl92KFwi5omA5pyJ5ZOB54mMXCIpXG4gICAgICAgICAgICBdKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcInNwYW5cIiwgeyBhdHRyczogeyBcImRhdGEtdHlwZVwiOiBcImhvdFwiIH0gfSwgW192bS5fdihcIueDremXqOWTgeeJjFwiKV0pLFxuICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgIF92bS5fbChfdm0ubGV0dGVyLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICAgIHJldHVybiBfYyhcInNwYW5cIiwgeyBrZXk6IHYsIGF0dHJzOiB7IFwiZGF0YS1sZXR0ZXJcIjogdiB9IH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKHYpKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICBdLFxuICAgICAgICAgIDJcbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXG4gICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImJyYW5kXCIgfSxcbiAgICAgICAgICBfdm0uX2woX3ZtLmJyYW5kLCBmdW5jdGlvbih2KSB7XG4gICAgICAgICAgICByZXR1cm4gX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJpdGVtXCIsXG4gICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgIFwiZGF0YS1pZFwiOiB2LmlkLFxuICAgICAgICAgICAgICAgICAgXCJkYXRhLWhvdFwiOiB2LmhvdCxcbiAgICAgICAgICAgICAgICAgIFwiZGF0YS1sZXR0ZXJcIjogdi5sZXR0ZXIsXG4gICAgICAgICAgICAgICAgICBcImRhdGEtbmFtZVwiOiB2Lm5hbWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvZ28gZnVsbFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiB2LmxvZ29fZXhwbGFpbiB9XG4gICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJuYW1lIGZ1bGxcIiB9LCBbXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKHYubmFtZSkpXG4gICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICBfdm0uX20oMCwgdHJ1ZSlcbiAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgKVxuICAgICAgICAgIH0pLFxuICAgICAgICAgIDBcbiAgICAgICAgKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX3ZtLl9tKDEpLFxuICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICBfdm0uX20oMilcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbSgzKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInN0YXR1cyBoaWRlXCIgfSwgW1xuICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICBhdHRyczogeyBzcmM6IFwiL3BsdWdpbi9CcmFuZC9pbWFnZS9zZWxlY3RlZC5wbmdcIiB9XG4gICAgICB9KVxuICAgIF0pXG4gIH0sXG4gIGZ1bmN0aW9uKCkge1xuICAgIHZhciBfdm0gPSB0aGlzXG4gICAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gICAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwic2VsZWN0ZWRcIiB9LCBbXG4gICAgICBfYyhcImg0XCIsIHsgc3RhdGljQ2xhc3M6IFwiaGVhZGVyIHdlaWdodFwiIH0sIFtfdm0uX3YoXCLlt7LpgInmi6nnmoTlk4HniYzvvJpcIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInBcIiwgeyBzdGF0aWNDbGFzczogXCJicmFuZFwiIH0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmdW5jdGlvbiBoaWRlXCIgfSwgW1xuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJydW4tYnV0dG9uIHJ1bi1idXR0b24tYmx1ZSBjb25maXJtXCIsXG4gICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCLnoa7lrppcIildXG4gICAgICApLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwicnVuLWJ1dHRvbiBydW4tYnV0dG9uLW9yYW5nZSBjYW5jZWxcIixcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIuWPlua2iFwiKV1cbiAgICAgIClcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJpZ2h0XCIgfSwgW1xuICAgICAgX2MoXG4gICAgICAgIFwiYnV0dG9uXCIsXG4gICAgICAgIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJydW4tYnV0dG9uIHJ1bi1idXR0b24tYmx1ZSBjdHJsXCIsXG4gICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJidXR0b25cIiB9XG4gICAgICAgIH0sXG4gICAgICAgIFtfdm0uX3YoXCIr5bGV5byAXCIpXVxuICAgICAgKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcbiAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAge1xuICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIG1vZGVcIixcbiAgICAgICAgICBhdHRyczogeyB0eXBlOiBcImJ1dHRvblwiIH1cbiAgICAgICAgfSxcbiAgICAgICAgW192bS5fdihcIuWkmumAiVwiKV1cbiAgICAgIClcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImJyYW5kLWNvbnRhaW5lclwiPlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwibGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImxldHRlclwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSdjdXInIGRhdGEtdHlwZT1cImFsbFwiPuaJgOacieWTgeeJjDwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICA8c3BhbiBkYXRhLXR5cGU9XCJob3RcIj7ng63pl6jlk4HniYw8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4gdi1mb3I9XCJ2IGluIGxldHRlclwiIDprZXk9XCJ2XCIgOmRhdGEtbGV0dGVyPVwidlwiPnt7IHYgfX08L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJicmFuZFwiPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbVwiIHYtZm9yPVwidiBpbiBicmFuZFwiIDpkYXRhLWlkPVwidi5pZFwiIDpkYXRhLWhvdD1cInYuaG90XCIgOmRhdGEtbGV0dGVyPVwidi5sZXR0ZXJcIiA6ZGF0YS1uYW1lPVwidi5uYW1lXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsb2dvIGZ1bGxcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcgOnNyYz1cInYubG9nb19leHBsYWluXCIgY2xhc3M9XCJpbWFnZVwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5hbWUgZnVsbFwiPnt7IHYubmFtZSB9fTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3RhdHVzIGhpZGVcIj48aW1nIHNyYz1cIi9wbHVnaW4vQnJhbmQvaW1hZ2Uvc2VsZWN0ZWQucG5nXCIgY2xhc3M9XCJpbWFnZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlbGVjdGVkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGg0IGNsYXNzPVwiaGVhZGVyIHdlaWdodFwiPuW3sumAieaLqeeahOWTgeeJjO+8mjwvaDQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9XCJicmFuZFwiPjwvcD5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZ1bmN0aW9uIGhpZGVcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1ibHVlIGNvbmZpcm1cIj7noa7lrpo8L2J1dHRvbj5cclxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cInJ1bi1idXR0b24gcnVuLWJ1dHRvbi1vcmFuZ2UgY2FuY2VsXCI+5Y+W5raIPC9idXR0b24+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJydW4tYnV0dG9uIHJ1bi1idXR0b24tYmx1ZSBjdHJsXCI+K+WxleW8gDwvYnV0dG9uPlxyXG4gICAgICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJydW4tYnV0dG9uIHJ1bi1idXR0b24tYmx1ZSBtb2RlXCI+5aSa6YCJPC9idXR0b24+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1icmFuZFwiICxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICBicmFuZDoge1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdCAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IDEgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG90OiAneScgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0dGVyOiAnQScgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ+Wlpei/qicgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nbzogJycgLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbGV0dGVyOiBbXSAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgd2F0Y2g6IHtcclxuICAgICAgICAgICAgYnJhbmQ6IHtcclxuICAgICAgICAgICAgICAgIGltbWVkaWF0ZTogdHJ1ZSAsXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVyIChudikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBsZXR0ZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBudi5mb3JFYWNoKCh2KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsZXR0ZXIuaW5kZXhPZih2LmxldHRlcikgPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldHRlci5wdXNoKHYubGV0dGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldHRlci5zb3J0KChhICwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSA+IGIgPyAxIDogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZXR0ZXIgPSBsZXR0ZXI7XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gLFxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuPHN0eWxlIHNjb3BlZD48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2JyYW5kLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vYnJhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9icmFuZC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MzAxZmQ3ZGMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vYnJhbmQudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9icmFuZC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjMwMWZkN2RjXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCczMDFmZDdkYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCczMDFmZDdkYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vYnJhbmQudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTMwMWZkN2RjJnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzMwMWZkN2RjJywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzb3VyY2UvdnVlL3ZpZXcvcHVibGljL2JyYW5kLnZ1ZVwiXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQuZXhwb3J0cyIsInZhciByZW5kZXIgPSBmdW5jdGlvbigpIHtcbiAgdmFyIF92bSA9IHRoaXNcbiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50XG4gIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICByZXR1cm4gX2MoXCJkaXZcIiwgW1xuICAgIF9jKFxuICAgICAgXCJkaXZcIixcbiAgICAgIHsgc3RhdGljQ2xhc3M6IFwibWVudS1zd2l0Y2hcIiB9LFxuICAgICAgX3ZtLl9sKF92bS5kYXRhLCBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiBfYyhcbiAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiaXRlbSBjdXJcIiwgYXR0cnM6IHsgXCJkYXRhLWlkXCI6IHYuaWQgfSB9LFxuICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKHYubmFtZSkpXVxuICAgICAgICApXG4gICAgICB9KSxcbiAgICAgIDBcbiAgICApXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IiwiPHRlbXBsYXRlPlxyXG4gICAgPGRpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPSdtZW51LXN3aXRjaCc+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9J2l0ZW0gY3VyJyB2LWZvcj1cInYgaW4gZGF0YVwiIDpkYXRhLWlkPVwidi5pZFwiPnt7IHYubmFtZSB9fTwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1tZW51LXN3aXRjaFwiICxcclxuICAgICAgICBkYXRhICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGluczoge30gLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIHByb3BzOiB7XHJcbiAgICAgICAgICAgIGRhdGE6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IEFycmF5ICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAnb25lJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAn6YCJ6aG5MSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkOiAndHdvJyAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAn6YCJ6aG5MidcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgIH0gLFxyXG4gICAgfVxyXG48L3NjcmlwdD5cclxuXHJcbjxzdHlsZSBzY29wZWQ+XHJcblxyXG48L3N0eWxlPiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL01lbnVTd2l0Y2gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9NZW51U3dpdGNoLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vTWVudVN3aXRjaC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NjY4YjY4ZTQmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vTWVudVN3aXRjaC52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL01lbnVTd2l0Y2gudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5cblxuLyogbm9ybWFsaXplIGNvbXBvbmVudCAqL1xuaW1wb3J0IG5vcm1hbGl6ZXIgZnJvbSBcIiEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvcnVudGltZS9jb21wb25lbnROb3JtYWxpemVyLmpzXCJcbnZhciBjb21wb25lbnQgPSBub3JtYWxpemVyKFxuICBzY3JpcHQsXG4gIHJlbmRlcixcbiAgc3RhdGljUmVuZGVyRm5zLFxuICBmYWxzZSxcbiAgbnVsbCxcbiAgXCI2NjhiNjhlNFwiLFxuICBudWxsXG4gIFxuKVxuXG4vKiBob3QgcmVsb2FkICovXG5pZiAobW9kdWxlLmhvdCkge1xuICB2YXIgYXBpID0gcmVxdWlyZShcIkQ6XFxcXHdvcmtcXFxcY29kZVxcXFxjYXJcXFxccHVibGljXFxcXG1vZHVsZVxcXFxhZG1pblxcXFxub2RlX21vZHVsZXNcXFxcdnVlLWhvdC1yZWxvYWQtYXBpXFxcXGRpc3RcXFxcaW5kZXguanNcIilcbiAgYXBpLmluc3RhbGwocmVxdWlyZSgndnVlJykpXG4gIGlmIChhcGkuY29tcGF0aWJsZSkge1xuICAgIG1vZHVsZS5ob3QuYWNjZXB0KClcbiAgICBpZiAoIW1vZHVsZS5ob3QuZGF0YSkge1xuICAgICAgYXBpLmNyZWF0ZVJlY29yZCgnNjY4YjY4ZTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbG9hZCgnNjY4YjY4ZTQnLCBjb21wb25lbnQub3B0aW9ucylcbiAgICB9XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoXCIuL01lbnVTd2l0Y2gudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTY2OGI2OGU0JnNjb3BlZD10cnVlJlwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICBhcGkucmVyZW5kZXIoJzY2OGI2OGU0Jywge1xuICAgICAgICByZW5kZXI6IHJlbmRlcixcbiAgICAgICAgc3RhdGljUmVuZGVyRm5zOiBzdGF0aWNSZW5kZXJGbnNcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxufVxuY29tcG9uZW50Lm9wdGlvbnMuX19maWxlID0gXCJzb3VyY2UvdnVlL3ZpZXcvcHVibGljL01lbnVTd2l0Y2gudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwidmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImJ1dHRvblwiLFxuICAgIHtcbiAgICAgIHN0YXRpY0NsYXNzOiBcInJ1bi1idXR0b25cIixcbiAgICAgIGNsYXNzOiBcInJ1bi1idXR0b24tXCIgKyBfdm0uY29sb3IsXG4gICAgICBhdHRyczogeyB0eXBlOiBfdm0udHlwZSB9LFxuICAgICAgb246IHtcbiAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgIHJldHVybiBfdm0uJGVtaXQoXCJjbGlja1wiKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBbXG4gICAgICBfdm0uaGFzXG4gICAgICAgID8gX2MoXCJpXCIsIHsgc3RhdGljQ2xhc3M6IFwicnVuLWljb25mb250XCIsIGNsYXNzOiBcInJ1bi1cIiArIF92bS5pY28gfSlcbiAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgIF92bS5fdChcImRlZmF1bHRcIilcbiAgICBdLFxuICAgIDJcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxidXR0b24gOnR5cGU9XCJ0eXBlXCIgY2xhc3M9XCJydW4tYnV0dG9uXCIgOmNsYXNzPVwiYHJ1bi1idXR0b24tJHtjb2xvcn1gXCIgQGNsaWNrLnN0b3A9XCIkZW1pdCgnY2xpY2snKVwiPjxpIGNsYXNzPVwicnVuLWljb25mb250XCIgOmNsYXNzPVwiYHJ1bi0ke2ljb31gXCIgdi1pZj1cImhhc1wiPjwvaT48c2xvdD48L3Nsb3Q+PC9idXR0b24+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1idXR0b25cIiAsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgY29sb3I6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IFN0cmluZyAsXHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnYmx1ZScgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgaGFzOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBCb29sZWFuICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IGZhbHNlICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIGljbzoge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogU3RyaW5nICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICdlZGl0JyAsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICB0eXBlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBTdHJpbmcgLFxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJ2J1dHRvbidcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcblxyXG48c3R5bGUgc2NvcGVkPlxyXG5cclxuPC9zdHlsZT4iLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9idXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9idXR0b24udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9idXR0b24udnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPWNjMjJiOWE2JnNjb3BlZD10cnVlJlwiXG5pbXBvcnQgc2NyaXB0IGZyb20gXCIuL2J1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2J1dHRvbi52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImNjMjJiOWE2XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdjYzIyYjlhNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdjYzIyYjlhNicsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vYnV0dG9uLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1jYzIyYjlhNiZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCdjYzIyYjlhNicsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic291cmNlL3Z1ZS92aWV3L3B1YmxpYy9idXR0b24udnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiLypcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiAqIOe7hOS7tuazqOWGjFxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCBhcHAgZnJvbSAnLi4vLi4vdnVlL3ZpZXcvQXBwLnZ1ZSc7XHJcbmltcG9ydCBsb2FkaW5nIGZyb20gJy4uLy4uL3Z1ZS92aWV3L3B1YmxpYy9sb2FkaW5nLnZ1ZSc7XHJcbmltcG9ydCBzZWxlY3QgZnJvbSAnLi4vLi4vdnVlL3ZpZXcvcHVibGljL3NlbGVjdC52dWUnO1xyXG5pbXBvcnQgYnJhbmQgZnJvbSAnLi4vLi4vdnVlL3ZpZXcvcHVibGljL2JyYW5kLnZ1ZSc7XHJcbmltcG9ydCBtZW51U3dpdGNoIGZyb20gJy4uLy4uL3Z1ZS92aWV3L3B1YmxpYy9NZW51U3dpdGNoLnZ1ZSc7XHJcbmltcG9ydCBidXR0b24gZnJvbSAnLi4vLi4vdnVlL3ZpZXcvcHVibGljL2J1dHRvbi52dWUnO1xyXG5cclxuXHJcbi8vIOazqOWGjOWFqOWxgOe7hOW7ulxyXG5WdWUuY29tcG9uZW50KCd2LWFwcCcgLCBhcHApO1xyXG5WdWUuY29tcG9uZW50KCd2LWxvYWRpbmcnICwgbG9hZGluZyk7XHJcblZ1ZS5jb21wb25lbnQoJ3Ytc2VsZWN0JyAsIHNlbGVjdCk7XHJcblZ1ZS5jb21wb25lbnQoJ3YtYnJhbmQnICwgYnJhbmQpO1xyXG5WdWUuY29tcG9uZW50KCd2LW1lbnUtc3dpdGNoJyAsIG1lbnVTd2l0Y2gpO1xyXG5WdWUuY29tcG9uZW50KCd2LWJ1dHRvbicgLCBidXR0b24pO1xyXG5cclxuXHJcbiIsIi8qKlxyXG4gKiDlr7zlhaUgY3NzIOagt+W8j1xyXG4gKi9cclxuLy8gaW1wb3J0ICdpdmlldy5jc3MnO1xyXG5pbXBvcnQgJy4vYXNzZXQvY3NzL2l2aWV3UmVzZXQuY3NzJztcclxuaW1wb3J0ICcuL2Fzc2V0L2Nzcy9wdWJsaWMuY3NzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gKiDovoXliqkganNcclxuICogKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuICovXHJcbmltcG9ydCAnLi9hc3NldC9qcy9idXNpbmVzcy5qcyc7XHJcblxyXG4vKipcclxuICog5Yid5aeL5YyWIGpzXHJcbiAqL1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvZ2xvYmFsLmpzJztcclxuaW1wb3J0ICcuL2Fzc2V0L2pzL3N1Ykdsb2JhbC5qcyc7XHJcbmltcG9ydCAnLi9hc3NldC9qcy9jdXJyZW5jeS5qcyc7XHJcbmltcG9ydCAnLi9hc3NldC9qcy9pbml0aWFsaXplLmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKlxyXG4gKiBodHRwIOivt+axglxyXG4gKiAqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuaW1wb3J0ICcuL2Fzc2V0L2pzL2FwaS5qcyc7XHJcblxyXG4vKipcclxuICogKioqKioqKioqKioqKlxyXG4gKiDlhajlsYDmt7flhaVcclxuICogKioqKioqKioqKioqKlxyXG4gKi9cclxuaW1wb3J0ICcuL2Fzc2V0L2pzL21peGluLmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqXHJcbiAqIOazqOWGjOe7hOS7tlxyXG4gKiAqKioqKioqKioqKioqKioqXHJcbiAqL1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvY29tcG9uZW50LmpzJztcclxuXHJcbi8qKlxyXG4gKiAqKioqKioqKioqKioqKioqKioqKipcclxuICogaXZpZXcgdWkg5qGG5p62XHJcbiAqICoqKioqKioqKioqKioqKioqKioqKlxyXG4gKi9cclxuLy8gaW1wb3J0ICdpdmlldy5qcyc7XHJcblxyXG4vKipcclxuICogKioqKioqKioqKioqKipcclxuICog54mI5pys5pu05paw5o+Q56S6XHJcbiAqICoqKioqKioqKioqKioqXHJcbiAqL1xyXG5pbXBvcnQgJy4vYXNzZXQvanMvdmVyc2lvbi5qcyc7XHJcblxyXG4vKipcclxuICogKioqKioqKioqKioqKipcclxuICog5Yid5aeL5YyW5Luj56CBXHJcbiAqICoqKioqKioqKioqKioqXHJcbiAqL1xyXG5uZXcgVnVlKHtcclxuICAgIGVsOiAnI2FwcCcgLFxyXG4gICAgdGVtcGxhdGU6ICc8di1hcHA+PC92LWFwcD4nXHJcbn0pO1xyXG5cclxuLy8g55m75b2V6aG1IOWSjCDlkI7lj7DpppbpobXnmoTliIdcclxuIl0sInNvdXJjZVJvb3QiOiIifQ==