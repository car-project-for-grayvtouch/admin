(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{342:function(t,i,e){"use strict";e.r(i);var s=function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",{ref:"container",staticClass:"container"},[e("v-loading",{ref:"loading"}),t._v(" "),e("div",{ref:"left",staticClass:"left"},[e("div",{staticClass:"in"},[e("div",{ref:"left-top",staticClass:"top"},[e("div",{staticClass:"logo"},[e("div",{staticClass:"left"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.os.system.logo}})]),t._v(" "),e("div",{staticClass:"right"},[t._v(t._s(t.$store.state.os.system.name))])]),t._v(" "),e("div",{ref:"user",staticClass:"user"},[e("div",{staticClass:"top"},[e("div",{staticClass:"image-container"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.user.avatar_explain}})])]),t._v(" "),e("div",{staticClass:"btm"},[t._v(t._s(t.$store.state.user.username))])]),t._v(" "),e("div",{ref:"block",staticClass:"block"},[e("div",{ref:"horizontal",staticClass:"horizontal",on:{click:t.vertical}},[t._m(0)]),t._v(" "),e("div",{ref:"vertical",staticClass:"vertical hide",on:{click:t.horizontal}},[t._m(1)])])]),t._v(" "),e("div",{ref:"infinite-classification",staticClass:"mid"},[e("v-menu")],1),t._v(" "),e("div",{ref:"left-btm",staticClass:"btm"},[t._v(t._s(t.$store.state.os.system.name))])])]),t._v(" "),e("div",{ref:"right",staticClass:"right"},[e("div",{ref:"right-top",staticClass:"top"},[e("div",{staticClass:"c-top"},[e("div",{staticClass:"left"}),t._v(" "),e("div",{staticClass:"right"},[e("div",{staticClass:"user",on:{mouseenter:t.showUserCtrl,mouseleave:t.hideUserCtrl}},[e("div",{staticClass:"ctrl"},[e("div",{staticClass:"avatar"},[e("div",{staticClass:"image-container"},[e("img",{staticClass:"image",attrs:{src:t.$store.state.user.avatar_explain}})])]),t._v(" "),e("div",{staticClass:"username"},[t._v(t._s(t.$store.state.user.username))])]),t._v(" "),e("div",{ref:"functions-for-user",staticClass:"functions hide"},[e("div",{staticClass:"function",on:{click:t.logout}},[t._m(2),t._v(" "),e("div",{staticClass:"right"},[t._v("注销")])])])])])]),t._v(" "),e("div",{ref:"multiple-tab",staticClass:"c-btm"},[t._m(3)])]),t._v(" "),e("div",{staticClass:"btm"},[e("div",{staticClass:"dynamic"},[e("div",{ref:"con",staticClass:"in"})])])])],1)},n=[function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"in"},[i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"in"},[i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"}),this._v(" "),i("div",{staticClass:"line"})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"left"},[i("img",{staticClass:"image",attrs:{src:e(538)}})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"multiple-tab"},[i("div",{staticClass:"tabs"})])}];s._withStripped=!0;var a=e(397),o=e.n(a),r=function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"infinite-classification"},[i("div",{staticClass:"list"},this._l(this.$store.state.menu,function(t){return i("v-item",{key:t.id,attrs:{data:t}})}),1)])};r._withStripped=!0;var l=function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",{staticClass:"item",attrs:{"data-id":t.data.id}},[e("div",{staticClass:"function"},[e("div",{staticClass:"icon"},[t.data.floor>1?e("span",{staticClass:"text"}):t._e(),t._v(" "),e("img",{staticClass:"image",attrs:{src:t.data.s_ico_explain}})]),t._v(" "),e("div",{staticClass:"explain"},[e("div",{staticClass:"in"},[t._m(0),t._v(" "),e("div",{staticClass:"text"},[t._v(t._s(t.data.name))])])]),t._v(" "),t._m(1)]),t._v(" "),e("div",{staticClass:"child"},[e("div",{staticClass:"list"},t._l(t.data.children,function(t){return e("v-item",{key:t.id,attrs:{data:t}})}),1)])])};l._withStripped=!0;var c={name:"v-item",props:{data:{type:Object,required:!0,default:{}}}},u=e(14),d=Object(u.a)(c,l,[function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"ico"},[i("img",{staticClass:"image",attrs:{src:"/plugin/InfiniteClassification/image/default/ring.png"}})])},function(){var t=this.$createElement,i=this._self._c||t;return i("div",{staticClass:"flag hide"},[i("div",{staticClass:"new"},[this._v("新的")]),this._v(" "),i("div",{staticClass:"number"},[this._v("10")]),this._v(" "),i("div",{staticClass:"switch"},[i("img",{staticClass:"image",attrs:{src:"/plugin/InfiniteClassification/image/default/spread.png"}})])])}],!1,null,"fa034964",null);d.options.__file="source/vue/view/public/item.vue";var h={name:"v-menu",data:function(){return{}},created:function(){},mounted:function(){},components:{"v-item":d.exports}},f=Object(u.a)(h,r,[],!1,null,"18d1ef9a",null);f.options.__file="source/vue/view/public/menu.vue";var v=f.exports,m=function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("div",{ref:"module-nav",staticClass:"module-nav"},[e("div",{staticClass:"left"},[e("img",{staticClass:"image",attrs:{src:t.topRoute.b_ico_explain}}),t._v(" "),e("span",{staticClass:"cn"},[t._v(t._s(t.topRoute.name))]),t._v(" "),e("span",{staticClass:"delimiter"},[t._v("/")]),t._v(" "),e("span",{staticClass:"en"},[t._v(t._s(t.topRoute.en))]),t._v("\n          \n        "),e("button",{staticClass:"run-button run-button-blue",on:{click:function(i){return i.preventDefault(),t.$parent.reload()}}},[e("i",{staticClass:"run-iconfont run-reset"}),t._v("标签页刷新\n        ")])]),t._v(" "),e("div",{staticClass:"right"},[t._l(t.pos,function(i,s){return[e("span",{staticClass:"text",on:{click:function(e){""!=i.route&&i.route!=t.$parent.route.route&&t.$parent.location(i.route)}}},[t._v(t._s(i.name))]),t._v(" "),s!=t.pos.length-1?e("span",{staticClass:"delimiter"},[t._v("/")]):t._e()]})],2)])};m._withStripped=!0;var p={name:"v-module-nav",data:function(){return{dom:{},ins:{}}},props:{topRoute:{type:Object,required:!0,default:{}},pos:{type:Array,required:!0,default:[]}},mounted:function(){this.initDom(),this.initInstance(),this.initialize()},methods:{initDom:function(){this.dom.moduleNav=G(this.$refs["module-nav"]),this.dom.win=G(window)},initInstance:function(){},initialize:function(){this.fixNav(),this.dom.win.on("scroll",this.fixNav.bind(this),!0,!1)},fixNav:function(){var t=window.pageYOffset;0==t?this.dom.moduleNav.removeClass("module-nav-fix"):this.dom.moduleNav.addClass("module-nav-fix"),this.dom.moduleNav.css({top:t+"px"})}}},g=(e(539),Object(u.a)(p,m,[],!1,null,"0e2540ec",null));g.options.__file="source/vue/view/public/moduleNav.vue";var _=g.exports,C=e(131),b={name:"v-index",data:function(){return{dom:{},ins:{loading:null},field:{id:"id",p_id:"p_id"},ajax:{logout:null},pending:{logout:!1},render:"",value:{leftMinW:50}}},mixins:[mixins.loading],mounted:function(){this.initDom(),this.initValue(),this.initInstance(),this.getData()},components:{"v-menu":v},methods:{initDom:function(){this.dom.functions=G(this.$refs["functions-for-user"]),this.dom.con=G(this.$refs.con),this.dom.left=G(this.$refs.left),this.dom.right=G(this.$refs.right),this.dom.leftTop=G(this.$refs["left-top"]),this.dom.leftMid=G(this.$refs["infinite-classification"]),this.dom.leftBtm=G(this.$refs["left-btm"]),this.dom.multipleTab=G(this.$refs["multiple-tab"]),this.dom.win=G(window),this.dom.horizontal=G(this.$refs.horizontal),this.dom.vertical=G(this.$refs.vertical),this.dom.user=G(this.$refs.user),this.dom.block=G(this.$refs.block),this.dom.rightTop=G(this.$refs["right-top"])},initInstance:function(){},getData:function(){var t=this;new Promise(function(i,e){t.info(i,e)}).then(function(){t.$nextTick(function(){t.initialize()})})},initialize:function(){this.initValue(),this.initTab(),this.initMenu(),this.initStyle(),this.initSlidebar()},initValue:function(){this.value.leftW=this.dom.left.width("border-box"),this.value.userW=this.dom.user.width("border-box"),this.value.userH=this.dom.user.height("border-box")},initStyle:function(){this.initLeftMidH(),this.dom.win.on("resize",this.initLeftMidH.bind(this),!0,!1)},initSlidebar:function(){var t=G.s.get("slidebar");G.isNull(t)||"horizontal"!=t&&this.vertical()},initLeftMidH:function(){var t=this.dom.left.height("content-box"),i=this.dom.leftTop.height("border-box"),e=this.dom.leftBtm.height("border-box"),s=parseInt(this.dom.leftMid.css("minHeight")),n=t-i-e;n=Math.max(s,n),this.dom.leftMid.css({height:n+"px"})},initTab:function(){var t=this;this.ins.tab=new MultipleTab(this.dom.multipleTab.get(0),{time:200,ico:"/plugin/MultipleTab/image/icon.ico",created:function(i){var e=this.attr(i,"param");e=G.isValid(e)?G.jsonDecode(e):{},t.create(this,i,e)},deleted:function(i){t.delete(i)},click:function(i){t.switch(i)}})},initMenu:function(){var t=this;this.ins.ic=new InfiniteClassification(this.dom.leftMid.get(0),{time:200,icon:"switch",id:[1],status:"shrink",amount:12,exclution:!0,menuFocus:!0,focus:!1,topFocus:!1,child:function(i){var e=t.topRoute(i),s=t.findRouteById(i),n=t.genTabName(e,s);t.open(n,{route:s.route})}})},horizontal:function(){var t=this;this.dom.user.removeClass("hide"),this.dom.horizontal.highlight("hide",this.dom.block.children().get(),!0),this.dom.left.animate({width:this.value.leftW+"px"},function(){t.ins.ic.icon("none")}),this.dom.user.animate({width:this.value.userW+"px",height:this.value.userH+"px"},function(){t.initLeftMidH()}),this.dom.right.animate({paddingLeft:this.value.leftW+"px"}),this.dom.rightTop.animate({paddingLeft:this.value.leftW+"px"}),G.s.set("slidebar","horizontal")},vertical:function(){var t=this;this.dom.vertical.highlight("hide",this.dom.block.children().get(),!0),this.dom.left.animate({width:this.value.leftMinW+"px"},function(){t.ins.ic.icon("text")}),this.dom.user.animate({width:"0px",height:"0px"},function(){t.dom.user.addClass("hide"),t.initLeftMidH()}),this.dom.right.animate({paddingLeft:this.value.leftMinW+"px"}),this.dom.rightTop.animate({paddingLeft:this.value.leftMinW+"px"}),G.s.set("slidebar","vertical")},showUserCtrl:function(){this.dom.functions.removeClass("hide"),this.dom.functions.animate({opacity:1,bottom:"0px"})},hideUserCtrl:function(){var t=this;this.dom.functions.animate({opacity:0,bottom:"-10px"},function(){t.dom.functions.addClass("hide")})},open:function(t,i){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:null;this.ins.tab.create({ico:e,text:t,attr:i})},create:function(t,i,e){var s=t.attr(i,"route"),n=document.createElement("div");(n=G(n)).data("id",i);var a=document.createElement("div");n.append(a),this.dom.con.append(n.get(0)),this.mount(a,i,s,e),n.highlight("hide",n.parent().children().get(),!0)},delete:function(t){this.dom.con.remove(this.item(t))},item:function(t){for(var i=this.dom.con.children(),e=0;e<i.length;++e){var s=i.jump(e,!0);if(s.data("id")==t)return s.get(0)}throw new Error("未找到给定节点")},switch:function(t){G(this.item(t)).highlight("hide",this.dom.con.children().get(),!0)},component:function(t){for(var i=0;i<C.a.length;++i){var e=C.a[i];if(e.path==t)return e.component}throw new Error("未找到 route："+t+"对应的路由")},mount:function(t,i,e,s){var n=this;this.component(e)().then(function(a){(new(n.newComponent(a.default,e,s,i))).$mount(t)})},genTabName:function(t,i){return"".concat(t.name,"-").concat(i.name)},reRender:function(t,i,e){var s=this.findRouteByRoute(i),n=this.topRoute(s.id),a=this.genTabName(n,s);this.ins.tab.title(t,a);var o=this.item(t);o=G(o);var r=document.createElement("div");this.mount(r,t,i,e),o.html(""),o.append(r)},createTab:function(t){var i=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=this.findRouteByRoute(t),s=this.topRoute(e.id),n=this.genTabName(s,e);this.open(n,{route:e.route,param:G.jsonEncode(i)})},newComponent:function(t,i,e,s){var n=this;i=this.findRouteByRoute(i);var a=this.topRoute(i.id);t.mixins=t.mixins?t.mixins:[];var r={data:function(){return{id:s,param:e,route:i,topRoute:a,pos:[]}},created:function(){this.pos=n.curPos(i.id)},methods:{location:function(t,i){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"_self";return"_self"==e?n.reRender(s,t,i):"_blank"==e?n.createTab(t,i):void 0},reload:function(){this.location(this.route.route,this.param)},prev:function(){},next:function(){}},components:{"module-nav":_}};return t.mixins.push(r),Vue.extend(o()({},t))},getMenuData:function(t){var i=[],e=0;return function t(i,s){if(e>1e3)console.log("死循环");else{e++;for(var n=0;n<i.length;++n){var a=i[n];if("y"==a.menu){var r=o()({},a);s.push(r),a.children.length>0&&(r.children=[],t(a.children,r.children))}}}}(t,i),i},info:function(t,i){var e=this;adminApi.info(function(s,n){if(200!=n)return e.$error(s),void i();var a=e.getMenuData(s.user.role.priv);e.$store.commit("menu",a),e.$store.commit("user",s.user),e.$store.commit("priv",s.user.role.priv),e.$store.commit("route",s.route),e.$store.commit("os",s.os),t()})},findRouteById:function(t){var i=this.$store.state.route,e=G.t.current(t,i,this.field);if(G.isNull(e))throw new Error("未找到当前 id："+t+" 对应路由！");return e},findRouteByRoute:function(t){for(var i=this.$store.state.route,e=0;e<i.length;++e){var s=i[e];if(s.route==t)return s}throw new Error("未找到给定路由："+t+"！")},topRoute:function(t){var i=this.$store.state.route;return G.t.parents(t,i,this.field,!0,!0)},curPos:function(t){var i=this.$store.state.route;return G.t.parents(t,i,this.field,!0,!1)},logout:function(){var t=this;this.pending.logout?$info("请求中...请耐心等待"):(this.pending.logout=!0,this.ins.loading.show(),this.ajax.logout=adminApi.logout(function(i,e){t.pending.logout=!1,t.ins.loading.hide(),200==e?t.forceLogout():t.$error(i)}),this.ins.loading.setArgs(this.ins.loading,"logout"))}}},x=(e(540),Object(u.a)(b,s,n,!1,null,"189b68ac",null));x.options.__file="source/vue/view/index/index.vue";i.default=x.exports},396:function(t,i){t.exports=function(t,i,e){return i in t?Object.defineProperty(t,i,{value:e,enumerable:!0,configurable:!0,writable:!0}):t[i]=e,t}},397:function(t,i,e){var s=e(396);t.exports=function(t){for(var i=1;i<arguments.length;i++){var e=null!=arguments[i]?arguments[i]:{},n=Object.keys(e);"function"==typeof Object.getOwnPropertySymbols&&(n=n.concat(Object.getOwnPropertySymbols(e).filter(function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.forEach(function(i){s(t,i,e[i])})}return t}},398:function(t,i,e){},399:function(t,i,e){},538:function(t,i,e){t.exports=e.p+"assets/image/logout.png"},539:function(t,i,e){"use strict";var s=e(398);e.n(s).a},540:function(t,i,e){"use strict";var s=e(399);e.n(s).a}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvaW5kZXgvaW5kZXgudnVlPzUwYWEiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9tZW51LnZ1ZT85Mjc3Iiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvaXRlbS52dWU/ODM0MiIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9pdGVtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL2l0ZW0udnVlP2RiZmMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9pdGVtLnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL21lbnUudnVlPzFkZGQiLCJ3ZWJwYWNrOi8vL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvbWVudS52dWUiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9tZW51LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvcHVibGljL21vZHVsZU5hdi52dWU/MTYyZCIsIndlYnBhY2s6Ly8vc291cmNlL3Z1ZS92aWV3L3B1YmxpYy9tb2R1bGVOYXYudnVlIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvbW9kdWxlTmF2LnZ1ZT81MzUzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvbW9kdWxlTmF2LnZ1ZSIsIndlYnBhY2s6Ly8vLi9zb3VyY2UvdnVlL3ZpZXcvaW5kZXgvanMiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L2luZGV4L2pzL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9pbmRleC9pbmRleC52dWUiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkLmpzIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9pbmRleC9pbWFnZS9sb2dvdXQucG5nIiwid2VicGFjazovLy8uL3NvdXJjZS92dWUvdmlldy9wdWJsaWMvY3NzL21vZHVsZU5hdi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc291cmNlL3Z1ZS92aWV3L2luZGV4L2Nzcy9pbmRleC5jc3MiXSwibmFtZXMiOlsicmVuZGVyIiwiX3ZtIiwidGhpcyIsIl9oIiwiJGNyZWF0ZUVsZW1lbnQiLCJfYyIsIl9zZWxmIiwicmVmIiwic3RhdGljQ2xhc3MiLCJfdiIsImF0dHJzIiwic3JjIiwiJHN0b3JlIiwic3RhdGUiLCJvcyIsInN5c3RlbSIsImxvZ28iLCJfcyIsIm5hbWUiLCJ1c2VyIiwiYXZhdGFyX2V4cGxhaW4iLCJ1c2VybmFtZSIsIm9uIiwiY2xpY2siLCJ2ZXJ0aWNhbCIsIl9tIiwiaG9yaXpvbnRhbCIsIm1vdXNlZW50ZXIiLCJzaG93VXNlckN0cmwiLCJtb3VzZWxlYXZlIiwiaGlkZVVzZXJDdHJsIiwibG9nb3V0Iiwic3RhdGljUmVuZGVyRm5zIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIl93aXRoU3RyaXBwZWQiLCJtZW51dnVlX3R5cGVfdGVtcGxhdGVfaWRfMThkMWVmOWFfc2NvcGVkX3RydWVfcmVuZGVyIiwiX2wiLCJtZW51IiwidiIsImtleSIsImlkIiwiZGF0YSIsIml0ZW12dWVfdHlwZV90ZW1wbGF0ZV9pZF9mYTAzNDk2NF9zY29wZWRfdHJ1ZV9yZW5kZXIiLCJkYXRhLWlkIiwiZmxvb3IiLCJfZSIsInNfaWNvX2V4cGxhaW4iLCJjaGlsZHJlbiIsInB1YmxpY19pdGVtdnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwicHJvcHMiLCJ0eXBlIiwiT2JqZWN0IiwicmVxdWlyZWQiLCJkZWZhdWx0IiwiaXRlbV9jb21wb25lbnQiLCJjb21wb25lbnROb3JtYWxpemVyIiwib3B0aW9ucyIsIl9fZmlsZSIsInB1YmxpY19tZW51dnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwiY3JlYXRlZCIsIm1vdW50ZWQiLCJjb21wb25lbnRzIiwidi1pdGVtIiwibWVudV9jb21wb25lbnQiLCJwdWJsaWNfbWVudSIsIm1vZHVsZU5hdnZ1ZV90eXBlX3RlbXBsYXRlX2lkXzBlMjU0MGVjX3Njb3BlZF90cnVlX3JlbmRlciIsInRvcFJvdXRlIiwiYl9pY29fZXhwbGFpbiIsImVuIiwiJGV2ZW50IiwicHJldmVudERlZmF1bHQiLCIkcGFyZW50IiwicmVsb2FkIiwicG9zIiwiayIsInJvdXRlIiwibG9jYXRpb24iLCJsZW5ndGgiLCJwdWJsaWNfbW9kdWxlTmF2dnVlX3R5cGVfc2NyaXB0X2xhbmdfanNfIiwiZG9tIiwiaW5zIiwiQXJyYXkiLCJpbml0RG9tIiwiaW5pdEluc3RhbmNlIiwiaW5pdGlhbGl6ZSIsIm1ldGhvZHMiLCJtb2R1bGVOYXYiLCJHIiwiJHJlZnMiLCJ3aW4iLCJ3aW5kb3ciLCJmaXhOYXYiLCJiaW5kIiwieSIsInBhZ2VZT2Zmc2V0IiwicmVtb3ZlQ2xhc3MiLCJhZGRDbGFzcyIsImNzcyIsInRvcCIsIm1vZHVsZU5hdl9jb21wb25lbnQiLCJpbmRleF9qc192dWVfdHlwZV9zY3JpcHRfbGFuZ19qc18iLCJsb2FkaW5nIiwiZmllbGQiLCJwX2lkIiwiYWpheCIsInBlbmRpbmciLCJ2YWx1ZSIsImxlZnRNaW5XIiwibWl4aW5zIiwiaW5pdFZhbHVlIiwiZ2V0RGF0YSIsInYtbWVudSIsImZ1bmN0aW9ucyIsImNvbiIsImxlZnQiLCJyaWdodCIsImxlZnRUb3AiLCJsZWZ0TWlkIiwibGVmdEJ0bSIsIm11bHRpcGxlVGFiIiwiYmxvY2siLCJyaWdodFRvcCIsIl90aGlzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJpbmZvIiwidGhlbiIsIiRuZXh0VGljayIsImluaXRUYWIiLCJpbml0TWVudSIsImluaXRTdHlsZSIsImluaXRTbGlkZWJhciIsImxlZnRXIiwid2lkdGgiLCJ1c2VyVyIsInVzZXJIIiwiaGVpZ2h0IiwiaW5pdExlZnRNaWRIIiwic2xpZGViYXIiLCJzIiwiZ2V0IiwiaXNOdWxsIiwibGVmdEgiLCJsZWZ0VG9wSCIsImxlZnRCdG1IIiwibGVmdE1pZE1pbkgiLCJwYXJzZUludCIsImxlZnRNaWRIIiwiTWF0aCIsIm1heCIsInNlbGYiLCJ0YWIiLCJNdWx0aXBsZVRhYiIsInRpbWUiLCJpY28iLCJwYXJhbSIsImF0dHIiLCJpc1ZhbGlkIiwianNvbkRlY29kZSIsImNyZWF0ZSIsImRlbGV0ZWQiLCJkZWxldGUiLCJzd2l0Y2giLCJpYyIsIkluZmluaXRlQ2xhc3NpZmljYXRpb24iLCJpY29uIiwic3RhdHVzIiwiYW1vdW50IiwiZXhjbHV0aW9uIiwibWVudUZvY3VzIiwiZm9jdXMiLCJ0b3BGb2N1cyIsImNoaWxkIiwiZmluZFJvdXRlQnlJZCIsInRleHQiLCJnZW5UYWJOYW1lIiwib3BlbiIsIl90aGlzMiIsImhpZ2hsaWdodCIsImFuaW1hdGUiLCJwYWRkaW5nTGVmdCIsInNldCIsIl90aGlzMyIsIm9wYWNpdHkiLCJib3R0b20iLCJfdGhpczQiLCJhcmd1bWVudHMiLCJ1bmRlZmluZWQiLCJkaXYiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhcHBlbmQiLCJtb3VudCIsInBhcmVudCIsInJlbW92ZSIsIml0ZW0iLCJpdGVtcyIsImkiLCJjdXIiLCJqdW1wIiwiRXJyb3IiLCJjb21wb25lbnQiLCJyb3V0ZUZvclZ1ZSIsInBhdGgiLCJjb250YWluZXIiLCJfdGhpczUiLCJtb2R1bGUiLCJuZXdDb21wb25lbnQiLCIkbW91bnQiLCJjdXJSb3V0ZSIsImNvbmNhdCIsInJlUmVuZGVyIiwiZmluZFJvdXRlQnlSb3V0ZSIsInRpdGxlIiwiaHRtbCIsImNyZWF0ZVRhYiIsImpzb25FbmNvZGUiLCJjdXJQb3MiLCJwcmV2IiwibmV4dCIsIm1vZHVsZS1uYXYiLCJwdXNoIiwiVnVlIiwiZXh0ZW5kIiwib2JqZWN0U3ByZWFkX2RlZmF1bHQiLCJnZXRNZW51RGF0YSIsInByaXYiLCJjb3VudCIsImZpbHRlciIsInJlcyIsImNvbnNvbGUiLCJsb2ciLCJfdGhpczYiLCJhZG1pbkFwaSIsImNvZGUiLCIkZXJyb3IiLCJyb2xlIiwiY29tbWl0Iiwicm91dGVzIiwidCIsImN1cnJlbnQiLCJwYXJlbnRzIiwiX3RoaXM3IiwiJGluZm8iLCJzaG93IiwiaGlkZSIsImZvcmNlTG9nb3V0Iiwic2V0QXJncyIsImluZGV4X2NvbXBvbmVudCIsIl9fd2VicGFja19leHBvcnRzX18iLCJleHBvcnRzIiwib2JqIiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ0YXJnZXQiLCJzb3VyY2UiLCJvd25LZXlzIiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImZvckVhY2giLCJwIiwiX25vZGVfbW9kdWxlc19taW5pX2Nzc19leHRyYWN0X3BsdWdpbl9kaXN0X2xvYWRlcl9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19yZWZfMV8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19tb2R1bGVOYXZfY3NzX3Z1ZV90eXBlX3N0eWxlX2luZGV4XzBfaWRfMGUyNTQwZWNfc2NvcGVkX3RydWVfbGFuZ19jc3NfX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8wX18iLCJuIiwiX25vZGVfbW9kdWxlc19taW5pX2Nzc19leHRyYWN0X3BsdWdpbl9kaXN0X2xvYWRlcl9qc19ub2RlX21vZHVsZXNfY3NzX2xvYWRlcl9kaXN0X2Nqc19qc19yZWZfMV8xX25vZGVfbW9kdWxlc192dWVfbG9hZGVyX2xpYl9sb2FkZXJzX3N0eWxlUG9zdExvYWRlcl9qc19pbmRleF9jc3NfdnVlX3R5cGVfc3R5bGVfaW5kZXhfMF9pZF8xODliNjhhY19zY29wZWRfdHJ1ZV9sYW5nX2Nzc19fX1dFQlBBQ0tfSU1QT1JURURf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VUFBQVcsR0FBQSxHQUNBNkQsRUFBQWhOLE9BQUFpTixLQUFBRixHQUVBLG1CQUFBL00sT0FBQWtOLHdCQUNBRixJQUFBaEQsT0FBQWhLLE9BQUFrTixzQkFBQUgsR0FBQTdCLE9BQUEsU0FBQWlDLEdBQ0EsT0FBQW5OLE9BQUFvTix5QkFBQUwsRUFBQUksR0FBQVIsZUFJQUssRUFBQUssUUFBQSxTQUFBak8sR0FDQXNOLEVBQUFJLEVBQUExTixFQUFBMk4sRUFBQTNOLE1BSUEsT0FBQTBOLG9FQ2xCQWxELEVBQUE0QyxRQUFpQjFOLEVBQUF3TyxFQUF1Qiw0RENBeEMsSUFBQUMsRUFBQXpPLEVBQUEsS0FBQUEsRUFBQTBPLEVBQUFELEdBQXNULG9DQ0F0VCxJQUFBRSxFQUFBM08sRUFBQSxLQUFBQSxFQUFBME8sRUFBQUMsR0FBa1QiLCJmaWxlIjoianMvMjcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFxuICAgIFwiZGl2XCIsXG4gICAgeyByZWY6IFwiY29udGFpbmVyXCIsIHN0YXRpY0NsYXNzOiBcImNvbnRhaW5lclwiIH0sXG4gICAgW1xuICAgICAgX2MoXCJ2LWxvYWRpbmdcIiwgeyByZWY6IFwibG9hZGluZ1wiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgcmVmOiBcImxlZnRcIiwgc3RhdGljQ2xhc3M6IFwibGVmdFwiIH0sIFtcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpblwiIH0sIFtcbiAgICAgICAgICBfYyhcImRpdlwiLCB7IHJlZjogXCJsZWZ0LXRvcFwiLCBzdGF0aWNDbGFzczogXCJ0b3BcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxvZ29cIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGVmdFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0uJHN0b3JlLnN0YXRlLm9zLnN5c3RlbS5sb2dvIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyaWdodFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS4kc3RvcmUuc3RhdGUub3Muc3lzdGVtLm5hbWUpKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyByZWY6IFwidXNlclwiLCBzdGF0aWNDbGFzczogXCJ1c2VyXCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInRvcFwiIH0sIFtcbiAgICAgICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImltYWdlLWNvbnRhaW5lclwiIH0sIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiaW1hZ2VcIixcbiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0uJHN0b3JlLnN0YXRlLnVzZXIuYXZhdGFyX2V4cGxhaW4gfVxuICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICBdKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidG1cIiB9LCBbXG4gICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHN0b3JlLnN0YXRlLnVzZXIudXNlcm5hbWUpKVxuICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgXSksXG4gICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyByZWY6IFwiYmxvY2tcIiwgc3RhdGljQ2xhc3M6IFwiYmxvY2tcIiB9LCBbXG4gICAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgcmVmOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImhvcml6b250YWxcIixcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0udmVydGljYWwgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgW192bS5fbSgwKV1cbiAgICAgICAgICAgICAgKSxcbiAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgXCJkaXZcIixcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICByZWY6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInZlcnRpY2FsIGhpZGVcIixcbiAgICAgICAgICAgICAgICAgIG9uOiB7IGNsaWNrOiBfdm0uaG9yaXpvbnRhbCB9XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBbX3ZtLl9tKDEpXVxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICBdKVxuICAgICAgICAgIF0pLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXG4gICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgeyByZWY6IFwiaW5maW5pdGUtY2xhc3NpZmljYXRpb25cIiwgc3RhdGljQ2xhc3M6IFwibWlkXCIgfSxcbiAgICAgICAgICAgIFtfYyhcInYtbWVudVwiKV0sXG4gICAgICAgICAgICAxXG4gICAgICAgICAgKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgcmVmOiBcImxlZnQtYnRtXCIsIHN0YXRpY0NsYXNzOiBcImJ0bVwiIH0sIFtcbiAgICAgICAgICAgIF92bS5fdihfdm0uX3MoX3ZtLiRzdG9yZS5zdGF0ZS5vcy5zeXN0ZW0ubmFtZSkpXG4gICAgICAgICAgXSlcbiAgICAgICAgXSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgcmVmOiBcInJpZ2h0XCIsIHN0YXRpY0NsYXNzOiBcInJpZ2h0XCIgfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHJlZjogXCJyaWdodC10b3BcIiwgc3RhdGljQ2xhc3M6IFwidG9wXCIgfSwgW1xuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiYy10b3BcIiB9LCBbXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxlZnRcIiB9KSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInJpZ2h0XCIgfSwgW1xuICAgICAgICAgICAgICBfYyhcbiAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInVzZXJcIixcbiAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgIG1vdXNlZW50ZXI6IF92bS5zaG93VXNlckN0cmwsXG4gICAgICAgICAgICAgICAgICAgIG1vdXNlbGVhdmU6IF92bS5oaWRlVXNlckN0cmxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiY3RybFwiIH0sIFtcbiAgICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJhdmF0YXJcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpbWFnZS1jb250YWluZXJcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcImltYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLiRzdG9yZS5zdGF0ZS51c2VyLmF2YXRhcl9leHBsYWluIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgXSlcbiAgICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAgICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidXNlcm5hbWVcIiB9LCBbXG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KF92bS5fcyhfdm0uJHN0b3JlLnN0YXRlLnVzZXIudXNlcm5hbWUpKVxuICAgICAgICAgICAgICAgICAgICBdKVxuICAgICAgICAgICAgICAgICAgXSksXG4gICAgICAgICAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICByZWY6IFwiZnVuY3Rpb25zLWZvci11c2VyXCIsXG4gICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwiZnVuY3Rpb25zIGhpZGVcIlxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgICAgICAgICAgICBcImRpdlwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgeyBzdGF0aWNDbGFzczogXCJmdW5jdGlvblwiLCBvbjogeyBjbGljazogX3ZtLmxvZ291dCB9IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fbSgyKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJyaWdodFwiIH0sIFtfdm0uX3YoXCLms6jplIBcIildKVxuICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgXSlcbiAgICAgICAgICBdKSxcbiAgICAgICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgICAgIF9jKFwiZGl2XCIsIHsgcmVmOiBcIm11bHRpcGxlLXRhYlwiLCBzdGF0aWNDbGFzczogXCJjLWJ0bVwiIH0sIFtfdm0uX20oMyldKVxuICAgICAgICBdKSxcbiAgICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJidG1cIiB9LCBbXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJkeW5hbWljXCIgfSwgW1xuICAgICAgICAgICAgX2MoXCJkaXZcIiwgeyByZWY6IFwiY29uXCIsIHN0YXRpY0NsYXNzOiBcImluXCIgfSlcbiAgICAgICAgICBdKVxuICAgICAgICBdKVxuICAgICAgXSlcbiAgICBdLFxuICAgIDFcbiAgKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpblwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJpblwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibGluZVwiIH0pXG4gICAgXSlcbiAgfSxcbiAgZnVuY3Rpb24oKSB7XG4gICAgdmFyIF92bSA9IHRoaXNcbiAgICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgICByZXR1cm4gX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJsZWZ0XCIgfSwgW1xuICAgICAgX2MoXCJpbWdcIiwge1xuICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoXCIuL2ltYWdlL2xvZ291dC5wbmdcIikgfVxuICAgICAgfSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIm11bHRpcGxlLXRhYlwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwidGFic1wiIH0pXG4gICAgXSlcbiAgfVxuXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5maW5pdGUtY2xhc3NpZmljYXRpb25cIiB9LCBbXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJsaXN0XCIgfSxcbiAgICAgIF92bS5fbChfdm0uJHN0b3JlLnN0YXRlLm1lbnUsIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgcmV0dXJuIF9jKFwidi1pdGVtXCIsIHsga2V5OiB2LmlkLCBhdHRyczogeyBkYXRhOiB2IH0gfSlcbiAgICAgIH0pLFxuICAgICAgMVxuICAgIClcbiAgXSlcbn1cbnZhciBzdGF0aWNSZW5kZXJGbnMgPSBbXVxucmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlXG5cbmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0iLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaXRlbVwiLCBhdHRyczogeyBcImRhdGEtaWRcIjogX3ZtLmRhdGEuaWQgfSB9LCBbXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJmdW5jdGlvblwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaWNvblwiIH0sIFtcbiAgICAgICAgX3ZtLmRhdGEuZmxvb3IgPiAxID8gX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwidGV4dFwiIH0pIDogX3ZtLl9lKCksXG4gICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLmRhdGEuc19pY29fZXhwbGFpbiB9XG4gICAgICAgIH0pXG4gICAgICBdKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImV4cGxhaW5cIiB9LCBbXG4gICAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwiaW5cIiB9LCBbXG4gICAgICAgICAgX3ZtLl9tKDApLFxuICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJ0ZXh0XCIgfSwgW192bS5fdihfdm0uX3MoX3ZtLmRhdGEubmFtZSkpXSlcbiAgICAgICAgXSlcbiAgICAgIF0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF92bS5fbSgxKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJjaGlsZFwiIH0sIFtcbiAgICAgIF9jKFxuICAgICAgICBcImRpdlwiLFxuICAgICAgICB7IHN0YXRpY0NsYXNzOiBcImxpc3RcIiB9LFxuICAgICAgICBfdm0uX2woX3ZtLmRhdGEuY2hpbGRyZW4sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4gX2MoXCJ2LWl0ZW1cIiwgeyBrZXk6IHYuaWQsIGF0dHJzOiB7IGRhdGE6IHYgfSB9KVxuICAgICAgICB9KSxcbiAgICAgICAgMVxuICAgICAgKVxuICAgIF0pXG4gIF0pXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW1xuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImljb1wiIH0sIFtcbiAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgc3RhdGljQ2xhc3M6IFwiaW1hZ2VcIixcbiAgICAgICAgYXR0cnM6IHsgc3JjOiBcIi9wbHVnaW4vSW5maW5pdGVDbGFzc2lmaWNhdGlvbi9pbWFnZS9kZWZhdWx0L3JpbmcucG5nXCIgfVxuICAgICAgfSlcbiAgICBdKVxuICB9LFxuICBmdW5jdGlvbigpIHtcbiAgICB2YXIgX3ZtID0gdGhpc1xuICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICAgIHZhciBfYyA9IF92bS5fc2VsZi5fYyB8fCBfaFxuICAgIHJldHVybiBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImZsYWcgaGlkZVwiIH0sIFtcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibmV3XCIgfSwgW192bS5fdihcIuaWsOeahFwiKV0pLFxuICAgICAgX3ZtLl92KFwiIFwiKSxcbiAgICAgIF9jKFwiZGl2XCIsIHsgc3RhdGljQ2xhc3M6IFwibnVtYmVyXCIgfSwgW192bS5fdihcIjEwXCIpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJkaXZcIiwgeyBzdGF0aWNDbGFzczogXCJzd2l0Y2hcIiB9LCBbXG4gICAgICAgIF9jKFwiaW1nXCIsIHtcbiAgICAgICAgICBzdGF0aWNDbGFzczogXCJpbWFnZVwiLFxuICAgICAgICAgIGF0dHJzOiB7XG4gICAgICAgICAgICBzcmM6IFwiL3BsdWdpbi9JbmZpbml0ZUNsYXNzaWZpY2F0aW9uL2ltYWdlL2RlZmF1bHQvc3ByZWFkLnBuZ1wiXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgXSlcbiAgICBdKVxuICB9XG5dXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJpdGVtXCIgOmRhdGEtaWQ9XCJkYXRhLmlkXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImZ1bmN0aW9uXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpY29uXCI+XHJcbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cInRleHRcIiB2LWlmPVwiZGF0YS5mbG9vciA+IDFcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8aW1nIDpzcmM9XCJkYXRhLnNfaWNvX2V4cGxhaW5cIiBjbGFzcz1cImltYWdlXCI+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZXhwbGFpblwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImluXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImljb1wiPjxpbWcgc3JjPVwiL3BsdWdpbi9JbmZpbml0ZUNsYXNzaWZpY2F0aW9uL2ltYWdlL2RlZmF1bHQvcmluZy5wbmdcIiBjbGFzcz1cImltYWdlXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInRleHRcIj57eyBkYXRhLm5hbWUgfX08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImZsYWcgaGlkZVwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm5ld1wiPuaWsOeahDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm51bWJlclwiPjEwPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwic3dpdGNoXCI+PGltZyBzcmM9XCIvcGx1Z2luL0luZmluaXRlQ2xhc3NpZmljYXRpb24vaW1hZ2UvZGVmYXVsdC9zcHJlYWQucG5nXCIgY2xhc3M9XCJpbWFnZVwiPjwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNoaWxkXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsaXN0XCI+XHJcbiAgICAgICAgICAgICAgICA8di1pdGVtIHYtZm9yPVwidiBpbiBkYXRhLmNoaWxkcmVuXCIgOmRhdGE9XCJ2XCIgOmtleT1cInYuaWRcIj48L3YtaXRlbT5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuPC90ZW1wbGF0ZT5cclxuXHJcbjxzY3JpcHQ+XHJcbiAgICBleHBvcnQgZGVmYXVsdCB7XHJcbiAgICAgICAgbmFtZTogXCJ2LWl0ZW1cIiAsXHJcbiAgICAgICAgcHJvcHM6IHtcclxuICAgICAgICAgICAgZGF0YToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0ICxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHt9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vaXRlbS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL2l0ZW0udnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pdGVtLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD1mYTAzNDk2NCZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9pdGVtLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vaXRlbS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcImZhMDM0OTY0XCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCdmYTAzNDk2NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCdmYTAzNDk2NCcsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vaXRlbS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9ZmEwMzQ5NjQmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignZmEwMzQ5NjQnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9wdWJsaWMvaXRlbS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJpbXBvcnQgbW9kIGZyb20gXCItIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9yZWYtLTAhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9tZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbWVudS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCIiLCI8dGVtcGxhdGU+XHJcbiAgICA8ZGl2IGNsYXNzPSdpbmZpbml0ZS1jbGFzc2lmaWNhdGlvbic+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3RcIj5cclxuICAgICAgICAgICAgPHYtaXRlbSB2LWZvcj1cInYgaW4gJHN0b3JlLnN0YXRlLm1lbnVcIiA6ZGF0YT1cInZcIiA6a2V5PVwidi5pZFwiPjwvdi1pdGVtPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgaW1wb3J0IGl0ZW0gZnJvbSAnLi9pdGVtLnZ1ZSc7XHJcblxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1tZW51XCIgLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLy8gbWFwcGluZyAsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSAsXHJcbiAgICAgICAgY3JlYXRlZCAoKSB7XHJcblxyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIG1vdW50ZWQgKCkge1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAgICAgJ3YtaXRlbSc6IGl0ZW1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbjwvc2NyaXB0PlxyXG5cclxuPHN0eWxlIHNjb3BlZD5cclxuXHJcbjwvc3R5bGU+IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9tZW51LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0xOGQxZWY5YSZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9tZW51LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuZXhwb3J0ICogZnJvbSBcIi4vbWVudS52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjE4ZDFlZjlhXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcxOGQxZWY5YScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcxOGQxZWY5YScsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vbWVudS52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MThkMWVmOWEmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMThkMWVmOWEnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9wdWJsaWMvbWVudS52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJ2YXIgcmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gIHZhciBfdm0gPSB0aGlzXG4gIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudFxuICB2YXIgX2MgPSBfdm0uX3NlbGYuX2MgfHwgX2hcbiAgcmV0dXJuIF9jKFwiZGl2XCIsIHsgcmVmOiBcIm1vZHVsZS1uYXZcIiwgc3RhdGljQ2xhc3M6IFwibW9kdWxlLW5hdlwiIH0sIFtcbiAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcImxlZnRcIiB9LCBbXG4gICAgICBfYyhcImltZ1wiLCB7XG4gICAgICAgIHN0YXRpY0NsYXNzOiBcImltYWdlXCIsXG4gICAgICAgIGF0dHJzOiB7IHNyYzogX3ZtLnRvcFJvdXRlLmJfaWNvX2V4cGxhaW4gfVxuICAgICAgfSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiY25cIiB9LCBbX3ZtLl92KF92bS5fcyhfdm0udG9wUm91dGUubmFtZSkpXSksXG4gICAgICBfdm0uX3YoXCIgXCIpLFxuICAgICAgX2MoXCJzcGFuXCIsIHsgc3RhdGljQ2xhc3M6IFwiZGVsaW1pdGVyXCIgfSwgW192bS5fdihcIi9cIildKSxcbiAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICBfYyhcInNwYW5cIiwgeyBzdGF0aWNDbGFzczogXCJlblwiIH0sIFtfdm0uX3YoX3ZtLl9zKF92bS50b3BSb3V0ZS5lbikpXSksXG4gICAgICBfdm0uX3YoXCJcXG4gICAgICAgIMKgwqBcXG4gICAgICAgIFwiKSxcbiAgICAgIF9jKFxuICAgICAgICBcImJ1dHRvblwiLFxuICAgICAgICB7XG4gICAgICAgICAgc3RhdGljQ2xhc3M6IFwicnVuLWJ1dHRvbiBydW4tYnV0dG9uLWJsdWVcIixcbiAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKVxuICAgICAgICAgICAgICByZXR1cm4gX3ZtLiRwYXJlbnQucmVsb2FkKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIFtcbiAgICAgICAgICBfYyhcImlcIiwgeyBzdGF0aWNDbGFzczogXCJydW4taWNvbmZvbnQgcnVuLXJlc2V0XCIgfSksXG4gICAgICAgICAgX3ZtLl92KFwi5qCH562+6aG15Yi35pawXFxuICAgICAgICBcIilcbiAgICAgICAgXVxuICAgICAgKVxuICAgIF0pLFxuICAgIF92bS5fdihcIiBcIiksXG4gICAgX2MoXG4gICAgICBcImRpdlwiLFxuICAgICAgeyBzdGF0aWNDbGFzczogXCJyaWdodFwiIH0sXG4gICAgICBbXG4gICAgICAgIF92bS5fbChfdm0ucG9zLCBmdW5jdGlvbih2LCBrKSB7XG4gICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgIF9jKFxuICAgICAgICAgICAgICBcInNwYW5cIixcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcInRleHRcIixcbiAgICAgICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICB2LnJvdXRlICE9IFwiXCIgJiYgdi5yb3V0ZSAhPSBfdm0uJHBhcmVudC5yb3V0ZS5yb3V0ZVxuICAgICAgICAgICAgICAgICAgICAgID8gX3ZtLiRwYXJlbnQubG9jYXRpb24odi5yb3V0ZSlcbiAgICAgICAgICAgICAgICAgICAgICA6IG51bGxcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtfdm0uX3YoX3ZtLl9zKHYubmFtZSkpXVxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIF92bS5fdihcIiBcIiksXG4gICAgICAgICAgICAhKGsgPT0gX3ZtLnBvcy5sZW5ndGggLSAxKVxuICAgICAgICAgICAgICA/IF9jKFwic3BhblwiLCB7IHN0YXRpY0NsYXNzOiBcImRlbGltaXRlclwiIH0sIFtfdm0uX3YoXCIvXCIpXSlcbiAgICAgICAgICAgICAgOiBfdm0uX2UoKVxuICAgICAgICAgIF1cbiAgICAgICAgfSlcbiAgICAgIF0sXG4gICAgICAyXG4gICAgKVxuICBdKVxufVxudmFyIHN0YXRpY1JlbmRlckZucyA9IFtdXG5yZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWVcblxuZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSIsIjx0ZW1wbGF0ZT5cclxuICAgIDxkaXYgY2xhc3M9XCJtb2R1bGUtbmF2XCIgcmVmPVwibW9kdWxlLW5hdlwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0XCI+XHJcbiAgICAgICAgICAgIDxpbWcgOnNyYz1cInRvcFJvdXRlLmJfaWNvX2V4cGxhaW5cIiBjbGFzcz1cImltYWdlXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY25cIj57eyB0b3BSb3V0ZS5uYW1lIH19PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImRlbGltaXRlclwiPi88L3NwYW4+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZW5cIj57eyB0b3BSb3V0ZS5lbiB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgJm5ic3A7Jm5ic3A7XHJcbiAgICAgICAgICAgIDxidXR0b24gY2xhc3M9XCJydW4tYnV0dG9uIHJ1bi1idXR0b24tYmx1ZVwiIEBjbGljay5wcmV2ZW50PVwiJHBhcmVudC5yZWxvYWQoKVwiPlxyXG4gICAgICAgICAgICAgICAgPGkgY2xhc3M9XCJydW4taWNvbmZvbnQgcnVuLXJlc2V0XCI+PC9pPuagh+etvumhteWIt+aWsFxyXG4gICAgICAgICAgICA8L2J1dHRvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHRcIj5cclxuICAgICAgICAgICAgPCEtLSDpnaLljIXlsZEgLS0+XHJcbiAgICAgICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj1cIih2LGspIGluIHBvc1wiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJ0ZXh0XCIgQGNsaWNrPVwidi5yb3V0ZSAhPSAnJyAmJiB2LnJvdXRlICE9ICRwYXJlbnQucm91dGUucm91dGUgPyAkcGFyZW50LmxvY2F0aW9uKHYucm91dGUpIDogbnVsbFwiPnt7IHYubmFtZSB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZGVsaW1pdGVyXCIgdi1pZj1cIiEoayA9PSBwb3MubGVuZ3RoIC0gMSlcIj4vPC9zcGFuPlxyXG4gICAgICAgICAgICA8L3RlbXBsYXRlPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+XHJcbjwvdGVtcGxhdGU+XHJcblxyXG48c2NyaXB0PlxyXG4gICAgZXhwb3J0IGRlZmF1bHQge1xyXG4gICAgICAgIG5hbWU6IFwidi1tb2R1bGUtbmF2XCIgLFxyXG4gICAgICAgIGRhdGEgKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZG9tOiB7fSAsXHJcbiAgICAgICAgICAgICAgICBpbnM6IHt9ICxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBwcm9wczoge1xyXG4gICAgICAgICAgICB0b3BSb3V0ZToge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogT2JqZWN0ICxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IHt9XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICBwb3M6IHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IEFycmF5ICxcclxuICAgICAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6IFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9ICxcclxuICAgICAgICBtb3VudGVkICgpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0RG9tKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdEluc3RhbmNlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgaW5pdERvbSAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5tb2R1bGVOYXYgPSBHKHRoaXMuJHJlZnNbJ21vZHVsZS1uYXYnXSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS53aW4gPSBHKHdpbmRvdyk7XHJcbiAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgaW5pdEluc3RhbmNlICgpIHtcclxuXHJcbiAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgaW5pdGlhbGl6ZSAoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpeE5hdigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb20ud2luLm9uKCdzY3JvbGwnICwgdGhpcy5maXhOYXYuYmluZCh0aGlzKSAsIHRydWUgLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH0gLFxyXG5cclxuICAgICAgICAgICAgZml4TmF2ICgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB5ID0gd2luZG93LnBhZ2VZT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tLm1vZHVsZU5hdi5yZW1vdmVDbGFzcygnbW9kdWxlLW5hdi1maXgnKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb20ubW9kdWxlTmF2LmFkZENsYXNzKCdtb2R1bGUtbmF2LWZpeCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kb20ubW9kdWxlTmF2LmNzcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9wOiB5ICsgJ3B4J1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuPC9zY3JpcHQ+XHJcbjxzdHlsZSBzY29wZWQgc3JjPVwiLi9jc3MvbW9kdWxlTmF2LmNzc1wiPjwvc3R5bGU+IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbW9kdWxlTmF2LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbW9kdWxlTmF2LnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiIsImltcG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0gZnJvbSBcIi4vbW9kdWxlTmF2LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZTI1NDBlYyZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9tb2R1bGVOYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5leHBvcnQgKiBmcm9tIFwiLi9tb2R1bGVOYXYudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2Nzcy9tb2R1bGVOYXYuY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmaWQ9MGUyNTQwZWMmc2NvcGVkPXRydWUmbGFuZz1jc3MmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjBlMjU0MGVjXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiRDpcXFxcd29ya1xcXFxjb2RlXFxcXGNhclxcXFxwdWJsaWNcXFxcbW9kdWxlXFxcXGFkbWluXFxcXG5vZGVfbW9kdWxlc1xcXFx2dWUtaG90LXJlbG9hZC1hcGlcXFxcZGlzdFxcXFxpbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghbW9kdWxlLmhvdC5kYXRhKSB7XG4gICAgICBhcGkuY3JlYXRlUmVjb3JkKCcwZTI1NDBlYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVsb2FkKCcwZTI1NDBlYycsIGNvbXBvbmVudC5vcHRpb25zKVxuICAgIH1cbiAgICBtb2R1bGUuaG90LmFjY2VwdChcIi4vbW9kdWxlTmF2LnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD0wZTI1NDBlYyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgYXBpLnJlcmVuZGVyKCcwZTI1NDBlYycsIHtcbiAgICAgICAgcmVuZGVyOiByZW5kZXIsXG4gICAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGljUmVuZGVyRm5zXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbn1cbmNvbXBvbmVudC5vcHRpb25zLl9fZmlsZSA9IFwic291cmNlL3Z1ZS92aWV3L3B1YmxpYy9tb2R1bGVOYXYudnVlXCJcbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudC5leHBvcnRzIiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/cmVmLS0wIS4vaW5kZXguanM/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P3JlZi0tMCEuL2luZGV4LmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiIiwiaW1wb3J0IG1lbnUgZnJvbSAnLi4vLi4vcHVibGljL21lbnUudnVlJztcclxuaW1wb3J0IG1vZHVsZU5hdiBmcm9tICcuLi8uLi9wdWJsaWMvbW9kdWxlTmF2LnZ1ZSc7XHJcbmltcG9ydCByb3V0ZUZvclZ1ZSBmcm9tICcuLi8uLi8uLi9yb3V0ZXIvcm91dGVzLmpzJztcclxuXHJcbmxldCBvbmNlID0gbnVsbDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IHtcclxuICAgIG5hbWU6IFwidi1pbmRleFwiICxcclxuICAgIGRhdGEgKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGRvbToge30gLFxyXG4gICAgICAgICAgICBpbnM6IHtcclxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IG51bGwgLFxyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgZmllbGQ6IHtcclxuICAgICAgICAgICAgICAgIGlkOiAnaWQnICxcclxuICAgICAgICAgICAgICAgIHBfaWQ6ICdwX2lkJ1xyXG4gICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgYWpheDoge1xyXG4gICAgICAgICAgICAgICAgbG9nb3V0OiBudWxsXHJcbiAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICBwZW5kaW5nOiB7XHJcbiAgICAgICAgICAgICAgICBsb2dvdXQ6IGZhbHNlICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgIHJlbmRlcjogJycgLFxyXG4gICAgICAgICAgICB2YWx1ZToge1xyXG4gICAgICAgICAgICAgICAgbGVmdE1pblc6IDUwICxcclxuICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgfTtcclxuICAgIH0gLFxyXG4gICAgbWl4aW5zOiBbXHJcbiAgICAgICAgbWl4aW5zLmxvYWRpbmcgLFxyXG4gICAgXSAsXHJcbiAgICBtb3VudGVkICgpIHtcclxuICAgICAgICB0aGlzLmluaXREb20oKTtcclxuICAgICAgICB0aGlzLmluaXRWYWx1ZSgpO1xyXG4gICAgICAgIHRoaXMuaW5pdEluc3RhbmNlKCk7XHJcbiAgICAgICAgdGhpcy5nZXREYXRhKCk7XHJcbiAgICB9ICxcclxuICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAndi1tZW51JzogbWVudVxyXG4gICAgfSAsXHJcbiAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgaW5pdERvbSAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmZ1bmN0aW9ucyA9IEcodGhpcy4kcmVmc1snZnVuY3Rpb25zLWZvci11c2VyJ10pO1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5jb24gPSBHKHRoaXMuJHJlZnMuY29uKTtcclxuICAgICAgICAgICAgdGhpcy5kb20ubGVmdCA9IEcodGhpcy4kcmVmcy5sZWZ0KTtcclxuICAgICAgICAgICAgdGhpcy5kb20ucmlnaHQgPSBHKHRoaXMuJHJlZnMucmlnaHQpO1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5sZWZ0VG9wID0gRyh0aGlzLiRyZWZzWydsZWZ0LXRvcCddKTtcclxuICAgICAgICAgICAgdGhpcy5kb20ubGVmdE1pZCA9IEcodGhpcy4kcmVmc1snaW5maW5pdGUtY2xhc3NpZmljYXRpb24nXSk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmxlZnRCdG0gPSBHKHRoaXMuJHJlZnNbJ2xlZnQtYnRtJ10pO1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5tdWx0aXBsZVRhYiA9IEcodGhpcy4kcmVmc1snbXVsdGlwbGUtdGFiJ10pO1xyXG4gICAgICAgICAgICB0aGlzLmRvbS53aW4gPSBHKHdpbmRvdyk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmhvcml6b250YWwgPSBHKHRoaXMuJHJlZnMuaG9yaXpvbnRhbCk7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnZlcnRpY2FsID0gRyh0aGlzLiRyZWZzLnZlcnRpY2FsKTtcclxuICAgICAgICAgICAgdGhpcy5kb20udXNlciA9IEcodGhpcy4kcmVmcy51c2VyKTtcclxuICAgICAgICAgICAgdGhpcy5kb20uYmxvY2sgPSBHKHRoaXMuJHJlZnMuYmxvY2spO1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5yaWdodFRvcCA9IEcodGhpcy4kcmVmc1sncmlnaHQtdG9wJ10pO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBpbml0SW5zdGFuY2UgKCkge1xyXG5cclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyWXHJcbiAgICAgICAgZ2V0RGF0YSAoKSB7XHJcbiAgICAgICAgICAgIG5ldyBQcm9taXNlKChyZXNvbHZlICwgcmVqZWN0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluZm8ocmVzb2x2ZSAsIHJlamVjdCk7XHJcbiAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBpbml0aWFsaXplICgpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0VmFsdWUoKTtcclxuICAgICAgICAgICAgLy8gRE9NIOa4suafk+WujOaIkFxyXG4gICAgICAgICAgICB0aGlzLmluaXRUYWIoKTtcclxuICAgICAgICAgICAgdGhpcy5pbml0TWVudSgpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRTdHlsZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRTbGlkZWJhcigpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBpbml0VmFsdWUgKCkge1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlLmxlZnRXID0gdGhpcy5kb20ubGVmdC53aWR0aCgnYm9yZGVyLWJveCcpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlLnVzZXJXID0gdGhpcy5kb20udXNlci53aWR0aCgnYm9yZGVyLWJveCcpO1xyXG4gICAgICAgICAgICB0aGlzLnZhbHVlLnVzZXJIID0gdGhpcy5kb20udXNlci5oZWlnaHQoJ2JvcmRlci1ib3gnKTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g5Yid5aeL5YyWXHJcbiAgICAgICAgaW5pdFN0eWxlICgpIHtcclxuICAgICAgICAgICAgLyoqXHJcbiAgICAgICAgICAgICAqICoqKioqKioqKioqKioqKioqKioqXHJcbiAgICAgICAgICAgICAqIOW3pui+ue+8muiPnOWNlVxyXG4gICAgICAgICAgICAgKiAqKioqKioqKioqKioqKioqKioqKlxyXG4gICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgdGhpcy5pbml0TGVmdE1pZEgoKTtcclxuICAgICAgICAgICAgdGhpcy5kb20ud2luLm9uKCdyZXNpemUnICwgdGhpcy5pbml0TGVmdE1pZEguYmluZCh0aGlzKSAsIHRydWUgLCBmYWxzZSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIGluaXRTbGlkZWJhciAoKSB7XHJcbiAgICAgICAgICAgIGxldCBzbGlkZWJhciA9IEcucy5nZXQoJ3NsaWRlYmFyJyk7XHJcbiAgICAgICAgICAgIGlmIChHLmlzTnVsbChzbGlkZWJhcikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHNsaWRlYmFyID09ICdob3Jpem9udGFsJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnZlcnRpY2FsKCk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIGluaXRMZWZ0TWlkSCAoKSB7XHJcbiAgICAgICAgICAgIGxldCBsZWZ0SCA9IHRoaXMuZG9tLmxlZnQuaGVpZ2h0KCdjb250ZW50LWJveCcpO1xyXG4gICAgICAgICAgICBsZXQgbGVmdFRvcEggPSB0aGlzLmRvbS5sZWZ0VG9wLmhlaWdodCgnYm9yZGVyLWJveCcpO1xyXG4gICAgICAgICAgICBsZXQgbGVmdEJ0bUggPSB0aGlzLmRvbS5sZWZ0QnRtLmhlaWdodCgnYm9yZGVyLWJveCcpO1xyXG4gICAgICAgICAgICBsZXQgbGVmdE1pZE1pbkggPSBwYXJzZUludCh0aGlzLmRvbS5sZWZ0TWlkLmNzcygnbWluSGVpZ2h0JykpO1xyXG4gICAgICAgICAgICBsZXQgbGVmdE1pZEggPSBsZWZ0SCAtbGVmdFRvcEggLSBsZWZ0QnRtSDtcclxuICAgICAgICAgICAgbGVmdE1pZEggPSBNYXRoLm1heChsZWZ0TWlkTWluSCAsIGxlZnRNaWRIKTtcclxuICAgICAgICAgICAgdGhpcy5kb20ubGVmdE1pZC5jc3Moe1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBsZWZ0TWlkSCArICdweCdcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIGluaXRUYWIgKCkge1xyXG4gICAgICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnRhYiA9IG5ldyBNdWx0aXBsZVRhYih0aGlzLmRvbS5tdWx0aXBsZVRhYi5nZXQoMCkgLCB7XHJcbiAgICAgICAgICAgICAgICB0aW1lOiAyMDAgLFxyXG4gICAgICAgICAgICAgICAgaWNvOiAnL3BsdWdpbi9NdWx0aXBsZVRhYi9pbWFnZS9pY29uLmljbycgLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlZCAoaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDot6/nlLHlj4LmlbBcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcGFyYW0gPSB0aGlzLmF0dHIoaWQgLCAncGFyYW0nKTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbSA9IEcuaXNWYWxpZChwYXJhbSkgPyBHLmpzb25EZWNvZGUocGFyYW0pIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jcmVhdGUodGhpcyAsIGlkICwgcGFyYW0pO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICBkZWxldGVkIChpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbGYuZGVsZXRlKGlkKTtcclxuICAgICAgICAgICAgICAgIH0gLFxyXG4gICAgICAgICAgICAgICAgY2xpY2sgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZi5zd2l0Y2goaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9ICxcclxuICAgICAgICBpbml0TWVudSAoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICB0aGlzLmlucy5pYyA9IG5ldyBJbmZpbml0ZUNsYXNzaWZpY2F0aW9uKHRoaXMuZG9tLmxlZnRNaWQuZ2V0KDApICwge1xyXG4gICAgICAgICAgICAgICAgLy8g6I+c5Y2V5bGV5byA5Yqo55S76L+H5rih5pe26Ze0XHJcbiAgICAgICAgICAgICAgICB0aW1lOiAyMDAgLFxyXG4gICAgICAgICAgICAgICAgLy8g5qyh6KaB55qE5Zu+5qCH57G75Z6L77yMbmV3IHx8IG51bWJlciB8fCBzd2l0Y2hcclxuICAgICAgICAgICAgICAgIGljb246ICdzd2l0Y2gnICxcclxuICAgICAgICAgICAgICAgIC8vIOagh+ivhuespu+8jOWxleW8gOeahOmhue+8mzEuIOWcqOWFg+e0oOmHjOmdouiuvue9riBkYXRhLWZvY3VzPSd5JyArXHJcbiAgICAgICAgICAgICAgICBpZDogWzFdICxcclxuICAgICAgICAgICAgICAgIC8vIOWIneWni+eKtuaAge+8jHNwcmVhZCB8fCBzaHJpbmtcclxuICAgICAgICAgICAgICAgIHN0YXR1czogJ3NocmluaycgLFxyXG4gICAgICAgICAgICAgICAgLy8g5bGC57qn6KeG6KeJ5pi+56S65pWI5p6cXHJcbiAgICAgICAgICAgICAgICBhbW91bnQ6IDEyICxcclxuICAgICAgICAgICAgICAgIC8vIOWQjOWxgue6p+aYr+WQpuS6kuaWpVxyXG4gICAgICAgICAgICAgICAgZXhjbHV0aW9uOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIC8vIOaYr+WQpuiPnOWNleS5n+WPr+iiq+mAieS4rVxyXG4gICAgICAgICAgICAgICAgbWVudUZvY3VzOiB0cnVlICxcclxuICAgICAgICAgICAgICAgIC8vIOeCueWHu+mhueWQjuaYr+WQpumAieS4rVxyXG4gICAgICAgICAgICAgICAgZm9jdXM6IGZhbHNlICxcclxuICAgICAgICAgICAgICAgIC8vIOaYr+WQpumAieS4remhtue6p+iPnOWNlVxyXG4gICAgICAgICAgICAgICAgdG9wRm9jdXM6IGZhbHNlICxcclxuICAgICAgICAgICAgICAgIC8vIOWtkOe6p+mhueeCueWHu+WQjuWbnuiwg1xyXG4gICAgICAgICAgICAgICAgY2hpbGQgKGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvcFJvdXRlID0gc2VsZi50b3BSb3V0ZShpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJvdXRlID0gc2VsZi5maW5kUm91dGVCeUlkKGlkKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdGV4dCA9IHNlbGYuZ2VuVGFiTmFtZSh0b3BSb3V0ZSAsIHJvdXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLm9wZW4odGV4dCAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm91dGU6IHJvdXRlLnJvdXRlXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICBob3Jpem9udGFsICgpIHtcclxuICAgICAgICAgICAgdGhpcy5kb20udXNlci5yZW1vdmVDbGFzcygnaGlkZScpO1xyXG4gICAgICAgICAgICAvLyDmu5HlnZfliIfmjaJcclxuICAgICAgICAgICAgdGhpcy5kb20uaG9yaXpvbnRhbC5oaWdobGlnaHQoJ2hpZGUnICwgdGhpcy5kb20uYmxvY2suY2hpbGRyZW4oKS5nZXQoKSAsIHRydWUpO1xyXG4gICAgICAgICAgICAvLyDoj5zljZXlsZXlvIBcclxuICAgICAgICAgICAgdGhpcy5kb20ubGVmdC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnZhbHVlLmxlZnRXICsgJ3B4JyAsXHJcbiAgICAgICAgICAgIH0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5pYy5pY29uKCdub25lJyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyDnlKjmiLflsZXlvIBcclxuICAgICAgICAgICAgdGhpcy5kb20udXNlci5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnZhbHVlLnVzZXJXICsgJ3B4JyAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IHRoaXMudmFsdWUudXNlckggKyAncHgnXHJcbiAgICAgICAgICAgIH0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRMZWZ0TWlkSCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8g5YaF5a655pS257ypXHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJpZ2h0LmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IHRoaXMudmFsdWUubGVmdFcgKyAncHgnICxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOWPs+S+p+mhtumDqOWvvOiIquagj+aUtue8qVxyXG4gICAgICAgICAgICB0aGlzLmRvbS5yaWdodFRvcC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLnZhbHVlLmxlZnRXICsgJ3B4JyAsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBHLnMuc2V0KCdzbGlkZWJhcicgLCAnaG9yaXpvbnRhbCcpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICB2ZXJ0aWNhbCAoKSB7XHJcbiAgICAgICAgICAgIC8vIOa7keWdl+WIh+aNolxyXG4gICAgICAgICAgICB0aGlzLmRvbS52ZXJ0aWNhbC5oaWdobGlnaHQoJ2hpZGUnICwgdGhpcy5kb20uYmxvY2suY2hpbGRyZW4oKS5nZXQoKSAsIHRydWUpO1xyXG4gICAgICAgICAgICAvLyDoj5zljZXlsZXlvIBcclxuICAgICAgICAgICAgdGhpcy5kb20ubGVmdC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiB0aGlzLnZhbHVlLmxlZnRNaW5XICsgJ3B4JyAsXHJcbiAgICAgICAgICAgIH0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5pYy5pY29uKCd0ZXh0Jyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyDnlKjmiLfmlLbnvKlcclxuICAgICAgICAgICAgdGhpcy5kb20udXNlci5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAnMHB4JyAsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6ICcwcHgnXHJcbiAgICAgICAgICAgIH0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS51c2VyLmFkZENsYXNzKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXRMZWZ0TWlkSCgpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgLy8g5YaF5a655pS257ypXHJcbiAgICAgICAgICAgIHRoaXMuZG9tLnJpZ2h0LmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgcGFkZGluZ0xlZnQ6IHRoaXMudmFsdWUubGVmdE1pblcgKyAncHgnICxcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vIOWPs+S+p+mhtumDqOWvvOiIquagj+aUtue8qVxyXG4gICAgICAgICAgICB0aGlzLmRvbS5yaWdodFRvcC5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIHBhZGRpbmdMZWZ0OiB0aGlzLnZhbHVlLmxlZnRNaW5XICsgJ3B4JyAsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBHLnMuc2V0KCdzbGlkZWJhcicgLCAndmVydGljYWwnKTtcclxuICAgICAgICB9ICxcclxuICAgICAgICAvLyDmmL7npLpcclxuICAgICAgICBzaG93VXNlckN0cmwgKCkge1xyXG4gICAgICAgICAgICB0aGlzLmRvbS5mdW5jdGlvbnMucmVtb3ZlQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgdGhpcy5kb20uZnVuY3Rpb25zLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMSAsXHJcbiAgICAgICAgICAgICAgICBib3R0b206ICcwcHgnXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG4gICAgICAgIC8vIOmakOiXj1xyXG4gICAgICAgIGhpZGVVc2VyQ3RybCAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmZ1bmN0aW9ucy5hbmltYXRlKHtcclxuICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAgLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAnLTEwcHgnXHJcbiAgICAgICAgICAgIH0gLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbS5mdW5jdGlvbnMuYWRkQ2xhc3MoJ2hpZGUnKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOaWsOW8gOagh+etvumhtVxyXG4gICAgICAgIG9wZW4gKHRleHQgLCBhdHRyICwgaWNvID0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmlucy50YWIuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgIGljbyAsXHJcbiAgICAgICAgICAgICAgICB0ZXh0ICxcclxuICAgICAgICAgICAgICAgIGF0dHJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOWIm+W7uuWGheWuuVxyXG4gICAgICAgIGNyZWF0ZSAodGFiICwgaWQgLCBwYXJhbSkge1xyXG4gICAgICAgICAgICB2YXIgcm91dGUgPSB0YWIuYXR0cihpZCAsICdyb3V0ZScpO1xyXG4gICAgICAgICAgICB2YXIgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBkaXYgPSBHKGRpdik7XHJcbiAgICAgICAgICAgICAgICBkaXYuZGF0YSgnaWQnICwgaWQpO1xyXG4gICAgICAgICAgICB2YXIgcmVuZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBkaXYuYXBwZW5kKHJlbmRlcik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmNvbi5hcHBlbmQoZGl2LmdldCgwKSk7XHJcbiAgICAgICAgICAgIHRoaXMubW91bnQocmVuZGVyICwgaWQgLCByb3V0ZSAsIHBhcmFtKTtcclxuICAgICAgICAgICAgZGl2LmhpZ2hsaWdodCgnaGlkZScgLCBkaXYucGFyZW50KCkuY2hpbGRyZW4oKS5nZXQoKSAsIHRydWUpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDliKDpmaTlhoXlrrlcclxuICAgICAgICBkZWxldGUgKGlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZG9tLmNvbi5yZW1vdmUodGhpcy5pdGVtKGlkKSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOafpeaJvue7meWumueahOmhuVxyXG4gICAgICAgIGl0ZW0gKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCBpdGVtcyA9IHRoaXMuZG9tLmNvbi5jaGlsZHJlbigpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgY3VyID0gaXRlbXMuanVtcChpICwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VyLmRhdGEoJ2lkJykgPT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDliKDpmaToioLngrlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyLmdldCgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+acquaJvuWIsOe7meWumuiKgueCuScpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIC8vIOagh+etvuWIh+aNolxyXG4gICAgICAgIHN3aXRjaCAoaWQpIHtcclxuICAgICAgICAgICAgRyh0aGlzLml0ZW0oaWQpKS5oaWdobGlnaHQoJ2hpZGUnICwgdGhpcy5kb20uY29uLmNoaWxkcmVuKCkuZ2V0KCkgLCB0cnVlKTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g57uE5Lu2XHJcbiAgICAgICAgY29tcG9uZW50IChyb3V0ZSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlRm9yVnVlLmxlbmd0aDsgKytpKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdiA9IHJvdXRlRm9yVnVlW2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKHYucGF0aCA9PSByb3V0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2LmNvbXBvbmVudDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+acquaJvuWIsCByb3V0Ze+8micgKyByb3V0ZSArICflr7nlupTnmoTot6/nlLEnKTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g5oyC6L2957uE5bu6XHJcbiAgICAgICAgbW91bnQgKGNvbnRhaW5lciAsIGlkICwgcm91dGUgLCBwYXJhbSkge1xyXG4gICAgICAgICAgICBsZXQgY29tcG9uZW50ID0gdGhpcy5jb21wb25lbnQocm91dGUpO1xyXG4gICAgICAgICAgICBjb21wb25lbnQoKS50aGVuKChtb2R1bGUpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIOazqOaEjyBtb2R1bGUuZGVmYXVsdCDvvIFcclxuICAgICAgICAgICAgICAgIC8vIOWFt+S9k+WOn+WboOivt+afpeeciyBpbXBvcnQg6K+t5rOV6Kej6YeKXHJcbiAgICAgICAgICAgICAgICBsZXQgY29tcG9uZW50ID0gdGhpcy5uZXdDb21wb25lbnQobW9kdWxlLmRlZmF1bHQgLCByb3V0ZSAsIHBhcmFtICwgaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIG5ldyBjb21wb25lbnQoKS4kbW91bnQoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOeUn+aIkOagh+etvuWQjeensFxyXG4gICAgICAgIGdlblRhYk5hbWUgKHRvcFJvdXRlICwgY3VyUm91dGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGAke3RvcFJvdXRlLm5hbWV9LSR7Y3VyUm91dGUubmFtZX1gO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDph43mlrDmuLLmn5NcclxuICAgICAgICByZVJlbmRlciAoaWQgLCByb3V0ZSAsIHBhcmFtKSB7XHJcbiAgICAgICAgICAgIGxldCBjdXJSb3V0ZSA9IHRoaXMuZmluZFJvdXRlQnlSb3V0ZShyb3V0ZSk7XHJcbiAgICAgICAgICAgIGxldCB0b3BSb3V0ZSA9IHRoaXMudG9wUm91dGUoY3VyUm91dGUuaWQpO1xyXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSB0aGlzLmdlblRhYk5hbWUodG9wUm91dGUgLCBjdXJSb3V0ZSk7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zLnRhYi50aXRsZShpZCAsIHRpdGxlKTtcclxuICAgICAgICAgICAgLy8g5pu05paw5qCH562+5YaF5a65XHJcbiAgICAgICAgICAgIC8vIOmHjeaWsOa4suafk+WFg+e0oOWGheWuuVxyXG4gICAgICAgICAgICBsZXQgY29udGFpbmVyID0gdGhpcy5pdGVtKGlkKTtcclxuICAgICAgICAgICAgICAgIGNvbnRhaW5lciA9IEcoY29udGFpbmVyKTtcclxuICAgICAgICAgICAgbGV0IGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdW50KGRpdiAsIGlkICwgcm91dGUgLCBwYXJhbSk7XHJcbiAgICAgICAgICAgIC8vIOa4heepuuWGheWuuVxyXG4gICAgICAgICAgICBjb250YWluZXIuaHRtbCgnJyk7XHJcbiAgICAgICAgICAgIGNvbnRhaW5lci5hcHBlbmQoZGl2KTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g5paw5byA5LiA5Liq5qCH562+6aG1XHJcbiAgICAgICAgY3JlYXRlVGFiIChyb3V0ZSAsIHBhcmFtID0ge30pIHtcclxuICAgICAgICAgICAgbGV0IGN1clJvdXRlID0gdGhpcy5maW5kUm91dGVCeVJvdXRlKHJvdXRlKTtcclxuICAgICAgICAgICAgbGV0IHRvcFJvdXRlID0gdGhpcy50b3BSb3V0ZShjdXJSb3V0ZS5pZCk7XHJcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IHRoaXMuZ2VuVGFiTmFtZSh0b3BSb3V0ZSAsIGN1clJvdXRlKTtcclxuICAgICAgICAgICAgdGhpcy5vcGVuKHRpdGxlICwge1xyXG4gICAgICAgICAgICAgICAgcm91dGU6IGN1clJvdXRlLnJvdXRlICxcclxuICAgICAgICAgICAgICAgIHBhcmFtOiBHLmpzb25FbmNvZGUocGFyYW0pXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDlrp7kvovljJYgdnVlIOe7hOS7tlxyXG4gICAgICAgIG5ld0NvbXBvbmVudCAoY29tcG9uZW50ICwgcm91dGUgLCBwYXJhbSAsIGlkKSB7XHJcbiAgICAgICAgICAgIGxldCBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgcm91dGUgPSB0aGlzLmZpbmRSb3V0ZUJ5Um91dGUocm91dGUpO1xyXG4gICAgICAgICAgICBsZXQgdG9wUm91dGUgPSB0aGlzLnRvcFJvdXRlKHJvdXRlLmlkKTtcclxuICAgICAgICAgICAgY29tcG9uZW50Lm1peGlucyA9IGNvbXBvbmVudC5taXhpbnMgPyBjb21wb25lbnQubWl4aW5zIDogW107XHJcbiAgICAgICAgICAgIGxldCBtaXhpbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDlvZPliY3nu4Tku7bnmoTmoIfor4bnrKZcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g5a2Q57uE5Lu25LiN5YWB6K646K6+572u6L+Z5Lqb5YC877yBXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW0gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3V0ZSAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvcFJvdXRlICxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBbXVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIGNyZWF0ZWQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zID0gc2VsZi5jdXJQb3Mocm91dGUuaWQpO1xyXG4gICAgICAgICAgICAgICAgfSAsXHJcbiAgICAgICAgICAgICAgICBtZXRob2RzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Lmf6Lez6Lez6L2s5pa55rOVXHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24gKHJvdXRlICwgcGFyYW0gLCB0eXBlID0gJ19zZWxmJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyDnm67liY3ku4XmnInkuKTnp43nsbvlnotcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gX3NlbGYg6aG16Z2i5YaF6YeN6L29XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9ibGFuayDmiZPlvIDmlrDnmoTmoIfnrb7pobVcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHR5cGVSYW5nZSA9IFsnX3NlbGYnICwgJ19ibGFuayddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PSAnX3NlbGYnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZi5yZVJlbmRlcihpZCAsIHJvdXRlICwgcGFyYW0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlID09ICdfYmxhbmsnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDmlrDlvIDkuIDkuKrmoIfnrb7pobVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxmLmNyZWF0ZVRhYihyb3V0ZSAsIHBhcmFtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuLi7pooTnlZnnmoTlhoXlrrlcclxuICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICAvLyDliLfmlrDmk43kvZxcclxuICAgICAgICAgICAgICAgICAgICByZWxvYWQgKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxvY2F0aW9uKHRoaXMucm91dGUucm91dGUgLCB0aGlzLnBhcmFtKTtcclxuICAgICAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgICAgICAvLyB0b2RvIOWQjumAgFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXYgKCkge30gLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHRvZG8g5YmN6L+bXHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dCAoKSB7fSAsXHJcbiAgICAgICAgICAgICAgICB9ICxcclxuICAgICAgICAgICAgICAgIGNvbXBvbmVudHM6IHtcclxuICAgICAgICAgICAgICAgICAgICAnbW9kdWxlLW5hdic6IG1vZHVsZU5hdlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb21wb25lbnQubWl4aW5zLnB1c2gobWl4aW5zKTtcclxuICAgICAgICAgICAgcmV0dXJuIFZ1ZS5leHRlbmQoe1xyXG4gICAgICAgICAgICAgICAgLy8g6L+Z5Liq5Zyw5pa55b+F6aG76KaB5L2/55So5q2k56eN5pa55byP77yB77yBXHJcbiAgICAgICAgICAgICAgICAvLyDph43mlrDmi7fkuIDku73or6Xnu4Tku7ZcclxuICAgICAgICAgICAgICAgIC8vIOWQpuWIme+8jOaMieeFp+WumOe9keeahOaPj+i/sFxyXG4gICAgICAgICAgICAgICAgLy8g5byC5q2l57uE5Lu257uT5p6c5Lya6KKr57yT5a2YXHJcbiAgICAgICAgICAgICAgICAvLyDkuZ/lsLHmmK/or6Xnu4Tku7bku4XkvJrlrp7kvovljJbkuIDmrKHvvIFcclxuICAgICAgICAgICAgICAgIC8vIOS5i+WQjuS+v+S4jeWGjemHjeWkjeWunuS+i+WMllxyXG4gICAgICAgICAgICAgICAgLy8g5aSN55So5LmL5YmN55qE5a6e5L6LXHJcbiAgICAgICAgICAgICAgICAuLi5jb21wb25lbnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOiOt+WPluiPnOWNleaVsOaNrlxyXG4gICAgICAgIGdldE1lbnVEYXRhIChwcml2KSB7XHJcbiAgICAgICAgICAgIGxldCBtZW51ID0gW107XHJcbiAgICAgICAgICAgIGxldCBjb3VudCA9IDA7XHJcbiAgICAgICAgICAgIGxldCBmaWx0ZXIgPSAoZGF0YSAsIHJlcykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvdW50ID4gMTAwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCfmrbvlvqrnjq8nKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdiA9IGRhdGFbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYubWVudSAhPSAneScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUgO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgX3YgPSB7Li4udn07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goX3YpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2LmNoaWxkcmVuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3YuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyKHYuY2hpbGRyZW4gLCBfdi5jaGlsZHJlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmaWx0ZXIocHJpdiAsIG1lbnUpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWVudTtcclxuICAgICAgICB9ICxcclxuXHJcbiAgICAgICAgLy8g6I635Y+W55So5oi355u45YWz5pWw5o2uXHJcbiAgICAgICAgaW5mbyAocmVzb2x2ZSAsIHJlamVjdCkge1xyXG4gICAgICAgICAgICBhZG1pbkFwaS5pbmZvKChyZXMgLCBjb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29kZSAhPSAyMDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLiRlcnJvcihyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyDpkojlr7kgZGF0YSDlgZrkuIDkupvmlbDmja7ov4fmu6RcclxuICAgICAgICAgICAgICAgIGNvbnN0IG1lbnUgPSB0aGlzLmdldE1lbnVEYXRhKHJlcy51c2VyLnJvbGUucHJpdik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ21lbnUnICwgbWVudSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3VzZXInICwgcmVzLnVzZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy4kc3RvcmUuY29tbWl0KCdwcml2JyAsIHJlcy51c2VyLnJvbGUucHJpdik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ3JvdXRlJyAsIHJlcy5yb3V0ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLiRzdG9yZS5jb21taXQoJ29zJyAsIHJlcy5vcyk7XHJcbiAgICAgICAgICAgICAgICByZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDojrflj5blvZPliY3ot6/nlLEgYnkgaWRcclxuICAgICAgICBmaW5kUm91dGVCeUlkIChpZCkge1xyXG4gICAgICAgICAgICBsZXQgcm91dGVzID0gdGhpcy4kc3RvcmUuc3RhdGUucm91dGU7XHJcbiAgICAgICAgICAgIGxldCByb3V0ZSA9IEcudC5jdXJyZW50KGlkICwgcm91dGVzICwgdGhpcy5maWVsZCk7XHJcbiAgICAgICAgICAgIGlmIChHLmlzTnVsbChyb3V0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5om+5Yiw5b2T5YmNIGlk77yaJyArIGlkICsgJyDlr7nlupTot6/nlLHvvIEnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcm91dGU7XHJcbiAgICAgICAgfSAsXHJcblxyXG4gICAgICAgIC8vIOiOt+WPluW9k+WJjei3r+eUse+8jGJ5IHJvdXRlXHJcbiAgICAgICAgZmluZFJvdXRlQnlSb3V0ZSAocm91dGUpIHtcclxuICAgICAgICAgICAgbGV0IHJvdXRlcyA9IHRoaXMuJHN0b3JlLnN0YXRlLnJvdXRlO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvdXRlcy5sZW5ndGg7ICsraSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1ciA9IHJvdXRlc1tpXTtcclxuICAgICAgICAgICAgICAgIGlmIChjdXIucm91dGUgPT0gcm91dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VyO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5om+5Yiw57uZ5a6a6Lev55Sx77yaJyArIHJvdXRlICsgJ++8gScpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDojrflj5bpobbnuqfot6/nlLFcclxuICAgICAgICB0b3BSb3V0ZSAoaWQpIHtcclxuICAgICAgICAgICAgbGV0IHJvdXRlID0gdGhpcy4kc3RvcmUuc3RhdGUucm91dGU7XHJcbiAgICAgICAgICAgIGxldCBwYXJlbnRzID0gRy50LnBhcmVudHMoaWQgLCByb3V0ZSAsIHRoaXMuZmllbGQgLCB0cnVlICwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRzO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDojrflj5blvZPliY3kvY3nva5cclxuICAgICAgICBjdXJQb3MgKGlkKSB7XHJcbiAgICAgICAgICAgIGxldCByb3V0ZSA9IHRoaXMuJHN0b3JlLnN0YXRlLnJvdXRlO1xyXG4gICAgICAgICAgICByZXR1cm4gRy50LnBhcmVudHMoaWQgLCByb3V0ZSAsIHRoaXMuZmllbGQgLCB0cnVlICwgZmFsc2UpO1xyXG4gICAgICAgIH0gLFxyXG5cclxuICAgICAgICAvLyDms6jplIBcclxuICAgICAgICBsb2dvdXQgKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wZW5kaW5nLmxvZ291dCkge1xyXG4gICAgICAgICAgICAgICAgJGluZm8oJ+ivt+axguS4rS4uLuivt+iAkOW/g+etieW+hScpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmcubG9nb3V0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5pbnMubG9hZGluZy5zaG93KCk7XHJcbiAgICAgICAgICAgIHRoaXMuYWpheC5sb2dvdXQgPSBhZG1pbkFwaS5sb2dvdXQoKHJlcyAsIGNvZGUpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGVuZGluZy5sb2dvdXQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLmxvYWRpbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgIT0gMjAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kZXJyb3IocmVzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8g6YCA5Ye655m75b2VXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcmNlTG9nb3V0KCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB0aGlzLmlucy5sb2FkaW5nLnNldEFyZ3ModGhpcy5pbnMubG9hZGluZyAsICdsb2dvdXQnKTtcclxuICAgICAgICB9ICxcclxuICAgIH0gLFxyXG59IiwiaW1wb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfSBmcm9tIFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTg5YjY4YWMmc2NvcGVkPXRydWUmXCJcbmltcG9ydCBzY3JpcHQgZnJvbSBcIi4vanMvaW5kZXguanM/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL2pzL2luZGV4LmpzP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiXG5pbXBvcnQgc3R5bGUwIGZyb20gXCIuL2Nzcy9pbmRleC5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xODliNjhhYyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIlxuXG5cbi8qIG5vcm1hbGl6ZSBjb21wb25lbnQgKi9cbmltcG9ydCBub3JtYWxpemVyIGZyb20gXCIhLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1sb2FkZXIvbGliL3J1bnRpbWUvY29tcG9uZW50Tm9ybWFsaXplci5qc1wiXG52YXIgY29tcG9uZW50ID0gbm9ybWFsaXplcihcbiAgc2NyaXB0LFxuICByZW5kZXIsXG4gIHN0YXRpY1JlbmRlckZucyxcbiAgZmFsc2UsXG4gIG51bGwsXG4gIFwiMTg5YjY4YWNcIixcbiAgbnVsbFxuICBcbilcblxuLyogaG90IHJlbG9hZCAqL1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgdmFyIGFwaSA9IHJlcXVpcmUoXCJEOlxcXFx3b3JrXFxcXGNvZGVcXFxcY2FyXFxcXHB1YmxpY1xcXFxtb2R1bGVcXFxcYWRtaW5cXFxcbm9kZV9tb2R1bGVzXFxcXHZ1ZS1ob3QtcmVsb2FkLWFwaVxcXFxkaXN0XFxcXGluZGV4LmpzXCIpXG4gIGFwaS5pbnN0YWxsKHJlcXVpcmUoJ3Z1ZScpKVxuICBpZiAoYXBpLmNvbXBhdGlibGUpIHtcbiAgICBtb2R1bGUuaG90LmFjY2VwdCgpXG4gICAgaWYgKCFtb2R1bGUuaG90LmRhdGEpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzE4OWI2OGFjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzE4OWI2OGFjJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9pbmRleC52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9MTg5YjY4YWMmc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignMTg5YjY4YWMnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNvdXJjZS92dWUvdmlldy9pbmRleC9pbmRleC52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiLCJmdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7XHJcbiAgaWYgKGtleSBpbiBvYmopIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xyXG4gICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcclxuICAgICAgd3JpdGFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvYmpba2V5XSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBfZGVmaW5lUHJvcGVydHk7IiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHlcIik7XHJcblxyXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkge1xyXG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTtcclxuICAgIHZhciBvd25LZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcclxuXHJcbiAgICBpZiAodHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpIHtcclxuICAgICAgb3duS2V5cyA9IG93bktleXMuY29uY2F0KE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKS5maWx0ZXIoZnVuY3Rpb24gKHN5bSkge1xyXG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xyXG4gICAgICB9KSk7XHJcbiAgICB9XHJcblxyXG4gICAgb3duS2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHRhcmdldDtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0U3ByZWFkOyIsIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcImFzc2V0cy9pbWFnZS9sb2dvdXQucG5nXCI7IiwiaW1wb3J0IG1vZCBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMS0xIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL21vZHVsZU5hdi5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wZTI1NDBlYyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMS0xIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL21vZHVsZU5hdi5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0wZTI1NDBlYyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIiIsImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9yZWYtLTEtMSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9pbmRleC5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD0xODliNjhhYyZzY29wZWQ9dHJ1ZSZsYW5nPWNzcyZcIjsgZXhwb3J0IGRlZmF1bHQgbW9kOyBleHBvcnQgKiBmcm9tIFwiLSEuLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4vZGlzdC9sb2FkZXIuanMhLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P3JlZi0tMS0xIS4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL2luZGV4LmNzcz92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTE4OWI2OGFjJnNjb3BlZD10cnVlJmxhbmc9Y3NzJlwiIl0sInNvdXJjZVJvb3QiOiIifQ==